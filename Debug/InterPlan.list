
InterPlan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000010  0800f800  0800f800  0002f800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009d7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000018c  08009e3c  08009e3c  00019e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009fc8  08009fc8  00019fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009fcc  08009fcc  00019fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000029c  20000000  08009fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000094c  200002a0  0800a26c  000202a0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000bec  0800a26c  00020bec  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002f810  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021586  00000000  00000000  0002f838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000452c  00000000  00000000  00050dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001270  00000000  00000000  000552f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001068  00000000  00000000  00056560  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000973e  00000000  00000000  000575c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005543  00000000  00000000  00060d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00066249  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000043d0  00000000  00000000  000662c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002a0 	.word	0x200002a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009e24 	.word	0x08009e24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002a4 	.word	0x200002a4
 8000104:	08009e24 	.word	0x08009e24

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 f94b 	bl	80014cc <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f8a5 	bl	8001390 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 f93d 	bl	80014cc <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 f933 	bl	80014cc <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 f8c5 	bl	8001404 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f8bb 	bl	8001404 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_lmul>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46ce      	mov	lr, r9
 80002a0:	4647      	mov	r7, r8
 80002a2:	0415      	lsls	r5, r2, #16
 80002a4:	0c2d      	lsrs	r5, r5, #16
 80002a6:	002e      	movs	r6, r5
 80002a8:	b580      	push	{r7, lr}
 80002aa:	0407      	lsls	r7, r0, #16
 80002ac:	0c14      	lsrs	r4, r2, #16
 80002ae:	0c3f      	lsrs	r7, r7, #16
 80002b0:	4699      	mov	r9, r3
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	437e      	muls	r6, r7
 80002b6:	435d      	muls	r5, r3
 80002b8:	4367      	muls	r7, r4
 80002ba:	4363      	muls	r3, r4
 80002bc:	197f      	adds	r7, r7, r5
 80002be:	0c34      	lsrs	r4, r6, #16
 80002c0:	19e4      	adds	r4, r4, r7
 80002c2:	469c      	mov	ip, r3
 80002c4:	42a5      	cmp	r5, r4
 80002c6:	d903      	bls.n	80002d0 <__aeabi_lmul+0x34>
 80002c8:	2380      	movs	r3, #128	; 0x80
 80002ca:	025b      	lsls	r3, r3, #9
 80002cc:	4698      	mov	r8, r3
 80002ce:	44c4      	add	ip, r8
 80002d0:	464b      	mov	r3, r9
 80002d2:	4351      	muls	r1, r2
 80002d4:	4343      	muls	r3, r0
 80002d6:	0436      	lsls	r6, r6, #16
 80002d8:	0c36      	lsrs	r6, r6, #16
 80002da:	0c25      	lsrs	r5, r4, #16
 80002dc:	0424      	lsls	r4, r4, #16
 80002de:	4465      	add	r5, ip
 80002e0:	19a4      	adds	r4, r4, r6
 80002e2:	1859      	adds	r1, r3, r1
 80002e4:	1949      	adds	r1, r1, r5
 80002e6:	0020      	movs	r0, r4
 80002e8:	bc0c      	pop	{r2, r3}
 80002ea:	4690      	mov	r8, r2
 80002ec:	4699      	mov	r9, r3
 80002ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002f0 <__aeabi_d2uiz>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	2200      	movs	r2, #0
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <__aeabi_d2uiz+0x38>)
 80002f6:	0004      	movs	r4, r0
 80002f8:	000d      	movs	r5, r1
 80002fa:	f7ff ffc5 	bl	8000288 <__aeabi_dcmpge>
 80002fe:	2800      	cmp	r0, #0
 8000300:	d104      	bne.n	800030c <__aeabi_d2uiz+0x1c>
 8000302:	0020      	movs	r0, r4
 8000304:	0029      	movs	r1, r5
 8000306:	f001 fed9 	bl	80020bc <__aeabi_d2iz>
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <__aeabi_d2uiz+0x38>)
 800030e:	2200      	movs	r2, #0
 8000310:	0020      	movs	r0, r4
 8000312:	0029      	movs	r1, r5
 8000314:	f001 fbbc 	bl	8001a90 <__aeabi_dsub>
 8000318:	f001 fed0 	bl	80020bc <__aeabi_d2iz>
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	061b      	lsls	r3, r3, #24
 8000320:	469c      	mov	ip, r3
 8000322:	4460      	add	r0, ip
 8000324:	e7f1      	b.n	800030a <__aeabi_d2uiz+0x1a>
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	41e00000 	.word	0x41e00000

0800032c <__aeabi_f2lz>:
 800032c:	b510      	push	{r4, lr}
 800032e:	2100      	movs	r1, #0
 8000330:	1c04      	adds	r4, r0, #0
 8000332:	f002 f85f 	bl	80023f4 <__aeabi_fcmplt>
 8000336:	2800      	cmp	r0, #0
 8000338:	d103      	bne.n	8000342 <__aeabi_f2lz+0x16>
 800033a:	1c20      	adds	r0, r4, #0
 800033c:	f000 f80c 	bl	8000358 <__aeabi_f2ulz>
 8000340:	bd10      	pop	{r4, pc}
 8000342:	2380      	movs	r3, #128	; 0x80
 8000344:	061b      	lsls	r3, r3, #24
 8000346:	18e0      	adds	r0, r4, r3
 8000348:	f000 f806 	bl	8000358 <__aeabi_f2ulz>
 800034c:	0002      	movs	r2, r0
 800034e:	000b      	movs	r3, r1
 8000350:	2100      	movs	r1, #0
 8000352:	4250      	negs	r0, r2
 8000354:	4199      	sbcs	r1, r3
 8000356:	e7f3      	b.n	8000340 <__aeabi_f2lz+0x14>

08000358 <__aeabi_f2ulz>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	f001 ff5d 	bl	8002218 <__aeabi_f2d>
 800035e:	2200      	movs	r2, #0
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <__aeabi_f2ulz+0x38>)
 8000362:	000d      	movs	r5, r1
 8000364:	0004      	movs	r4, r0
 8000366:	f001 f913 	bl	8001590 <__aeabi_dmul>
 800036a:	f7ff ffc1 	bl	80002f0 <__aeabi_d2uiz>
 800036e:	0006      	movs	r6, r0
 8000370:	f001 ff1a 	bl	80021a8 <__aeabi_ui2d>
 8000374:	2200      	movs	r2, #0
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <__aeabi_f2ulz+0x3c>)
 8000378:	f001 f90a 	bl	8001590 <__aeabi_dmul>
 800037c:	0002      	movs	r2, r0
 800037e:	000b      	movs	r3, r1
 8000380:	0020      	movs	r0, r4
 8000382:	0029      	movs	r1, r5
 8000384:	f001 fb84 	bl	8001a90 <__aeabi_dsub>
 8000388:	f7ff ffb2 	bl	80002f0 <__aeabi_d2uiz>
 800038c:	0031      	movs	r1, r6
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	3df00000 	.word	0x3df00000
 8000394:	41f00000 	.word	0x41f00000

08000398 <__aeabi_l2f>:
 8000398:	b5d0      	push	{r4, r6, r7, lr}
 800039a:	2601      	movs	r6, #1
 800039c:	0002      	movs	r2, r0
 800039e:	000b      	movs	r3, r1
 80003a0:	4f13      	ldr	r7, [pc, #76]	; (80003f0 <__aeabi_l2f+0x58>)
 80003a2:	4276      	negs	r6, r6
 80003a4:	18b6      	adds	r6, r6, r2
 80003a6:	415f      	adcs	r7, r3
 80003a8:	0004      	movs	r4, r0
 80003aa:	4812      	ldr	r0, [pc, #72]	; (80003f4 <__aeabi_l2f+0x5c>)
 80003ac:	4287      	cmp	r7, r0
 80003ae:	d919      	bls.n	80003e4 <__aeabi_l2f+0x4c>
 80003b0:	0552      	lsls	r2, r2, #21
 80003b2:	d004      	beq.n	80003be <__aeabi_l2f+0x26>
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	0ae4      	lsrs	r4, r4, #11
 80003b8:	02e4      	lsls	r4, r4, #11
 80003ba:	011b      	lsls	r3, r3, #4
 80003bc:	431c      	orrs	r4, r3
 80003be:	0008      	movs	r0, r1
 80003c0:	f001 feb0 	bl	8002124 <__aeabi_i2d>
 80003c4:	2200      	movs	r2, #0
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <__aeabi_l2f+0x60>)
 80003c8:	f001 f8e2 	bl	8001590 <__aeabi_dmul>
 80003cc:	0006      	movs	r6, r0
 80003ce:	000f      	movs	r7, r1
 80003d0:	0020      	movs	r0, r4
 80003d2:	f001 fee9 	bl	80021a8 <__aeabi_ui2d>
 80003d6:	0032      	movs	r2, r6
 80003d8:	003b      	movs	r3, r7
 80003da:	f000 fcc9 	bl	8000d70 <__aeabi_dadd>
 80003de:	f001 ff6d 	bl	80022bc <__aeabi_d2f>
 80003e2:	bdd0      	pop	{r4, r6, r7, pc}
 80003e4:	4287      	cmp	r7, r0
 80003e6:	d1ea      	bne.n	80003be <__aeabi_l2f+0x26>
 80003e8:	1cb0      	adds	r0, r6, #2
 80003ea:	d8e1      	bhi.n	80003b0 <__aeabi_l2f+0x18>
 80003ec:	e7e7      	b.n	80003be <__aeabi_l2f+0x26>
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	001fffff 	.word	0x001fffff
 80003f4:	003fffff 	.word	0x003fffff
 80003f8:	41f00000 	.word	0x41f00000

080003fc <__aeabi_fdiv>:
 80003fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003fe:	4657      	mov	r7, sl
 8000400:	464e      	mov	r6, r9
 8000402:	46de      	mov	lr, fp
 8000404:	4645      	mov	r5, r8
 8000406:	b5e0      	push	{r5, r6, r7, lr}
 8000408:	0244      	lsls	r4, r0, #9
 800040a:	0043      	lsls	r3, r0, #1
 800040c:	0fc6      	lsrs	r6, r0, #31
 800040e:	b083      	sub	sp, #12
 8000410:	1c0f      	adds	r7, r1, #0
 8000412:	0a64      	lsrs	r4, r4, #9
 8000414:	0e1b      	lsrs	r3, r3, #24
 8000416:	46b2      	mov	sl, r6
 8000418:	d053      	beq.n	80004c2 <__aeabi_fdiv+0xc6>
 800041a:	2bff      	cmp	r3, #255	; 0xff
 800041c:	d027      	beq.n	800046e <__aeabi_fdiv+0x72>
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	00e4      	lsls	r4, r4, #3
 8000422:	04d2      	lsls	r2, r2, #19
 8000424:	4314      	orrs	r4, r2
 8000426:	227f      	movs	r2, #127	; 0x7f
 8000428:	4252      	negs	r2, r2
 800042a:	4690      	mov	r8, r2
 800042c:	4498      	add	r8, r3
 800042e:	2300      	movs	r3, #0
 8000430:	4699      	mov	r9, r3
 8000432:	469b      	mov	fp, r3
 8000434:	027d      	lsls	r5, r7, #9
 8000436:	0078      	lsls	r0, r7, #1
 8000438:	0ffb      	lsrs	r3, r7, #31
 800043a:	0a6d      	lsrs	r5, r5, #9
 800043c:	0e00      	lsrs	r0, r0, #24
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	d024      	beq.n	800048c <__aeabi_fdiv+0x90>
 8000442:	28ff      	cmp	r0, #255	; 0xff
 8000444:	d046      	beq.n	80004d4 <__aeabi_fdiv+0xd8>
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	2100      	movs	r1, #0
 800044a:	00ed      	lsls	r5, r5, #3
 800044c:	04db      	lsls	r3, r3, #19
 800044e:	431d      	orrs	r5, r3
 8000450:	387f      	subs	r0, #127	; 0x7f
 8000452:	4647      	mov	r7, r8
 8000454:	1a38      	subs	r0, r7, r0
 8000456:	464f      	mov	r7, r9
 8000458:	430f      	orrs	r7, r1
 800045a:	00bf      	lsls	r7, r7, #2
 800045c:	46b9      	mov	r9, r7
 800045e:	0033      	movs	r3, r6
 8000460:	9a00      	ldr	r2, [sp, #0]
 8000462:	4f87      	ldr	r7, [pc, #540]	; (8000680 <__aeabi_fdiv+0x284>)
 8000464:	4053      	eors	r3, r2
 8000466:	464a      	mov	r2, r9
 8000468:	58ba      	ldr	r2, [r7, r2]
 800046a:	9301      	str	r3, [sp, #4]
 800046c:	4697      	mov	pc, r2
 800046e:	2c00      	cmp	r4, #0
 8000470:	d14e      	bne.n	8000510 <__aeabi_fdiv+0x114>
 8000472:	2308      	movs	r3, #8
 8000474:	4699      	mov	r9, r3
 8000476:	33f7      	adds	r3, #247	; 0xf7
 8000478:	4698      	mov	r8, r3
 800047a:	3bfd      	subs	r3, #253	; 0xfd
 800047c:	469b      	mov	fp, r3
 800047e:	027d      	lsls	r5, r7, #9
 8000480:	0078      	lsls	r0, r7, #1
 8000482:	0ffb      	lsrs	r3, r7, #31
 8000484:	0a6d      	lsrs	r5, r5, #9
 8000486:	0e00      	lsrs	r0, r0, #24
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	d1da      	bne.n	8000442 <__aeabi_fdiv+0x46>
 800048c:	2d00      	cmp	r5, #0
 800048e:	d126      	bne.n	80004de <__aeabi_fdiv+0xe2>
 8000490:	2000      	movs	r0, #0
 8000492:	2101      	movs	r1, #1
 8000494:	0033      	movs	r3, r6
 8000496:	9a00      	ldr	r2, [sp, #0]
 8000498:	4f7a      	ldr	r7, [pc, #488]	; (8000684 <__aeabi_fdiv+0x288>)
 800049a:	4053      	eors	r3, r2
 800049c:	4642      	mov	r2, r8
 800049e:	1a10      	subs	r0, r2, r0
 80004a0:	464a      	mov	r2, r9
 80004a2:	430a      	orrs	r2, r1
 80004a4:	0092      	lsls	r2, r2, #2
 80004a6:	58ba      	ldr	r2, [r7, r2]
 80004a8:	001d      	movs	r5, r3
 80004aa:	4697      	mov	pc, r2
 80004ac:	9b00      	ldr	r3, [sp, #0]
 80004ae:	002c      	movs	r4, r5
 80004b0:	469a      	mov	sl, r3
 80004b2:	468b      	mov	fp, r1
 80004b4:	465b      	mov	r3, fp
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d131      	bne.n	800051e <__aeabi_fdiv+0x122>
 80004ba:	4653      	mov	r3, sl
 80004bc:	21ff      	movs	r1, #255	; 0xff
 80004be:	2400      	movs	r4, #0
 80004c0:	e038      	b.n	8000534 <__aeabi_fdiv+0x138>
 80004c2:	2c00      	cmp	r4, #0
 80004c4:	d117      	bne.n	80004f6 <__aeabi_fdiv+0xfa>
 80004c6:	2304      	movs	r3, #4
 80004c8:	4699      	mov	r9, r3
 80004ca:	2300      	movs	r3, #0
 80004cc:	4698      	mov	r8, r3
 80004ce:	3301      	adds	r3, #1
 80004d0:	469b      	mov	fp, r3
 80004d2:	e7af      	b.n	8000434 <__aeabi_fdiv+0x38>
 80004d4:	20ff      	movs	r0, #255	; 0xff
 80004d6:	2d00      	cmp	r5, #0
 80004d8:	d10b      	bne.n	80004f2 <__aeabi_fdiv+0xf6>
 80004da:	2102      	movs	r1, #2
 80004dc:	e7da      	b.n	8000494 <__aeabi_fdiv+0x98>
 80004de:	0028      	movs	r0, r5
 80004e0:	f001 ffb0 	bl	8002444 <__clzsi2>
 80004e4:	1f43      	subs	r3, r0, #5
 80004e6:	409d      	lsls	r5, r3
 80004e8:	2376      	movs	r3, #118	; 0x76
 80004ea:	425b      	negs	r3, r3
 80004ec:	1a18      	subs	r0, r3, r0
 80004ee:	2100      	movs	r1, #0
 80004f0:	e7af      	b.n	8000452 <__aeabi_fdiv+0x56>
 80004f2:	2103      	movs	r1, #3
 80004f4:	e7ad      	b.n	8000452 <__aeabi_fdiv+0x56>
 80004f6:	0020      	movs	r0, r4
 80004f8:	f001 ffa4 	bl	8002444 <__clzsi2>
 80004fc:	1f43      	subs	r3, r0, #5
 80004fe:	409c      	lsls	r4, r3
 8000500:	2376      	movs	r3, #118	; 0x76
 8000502:	425b      	negs	r3, r3
 8000504:	1a1b      	subs	r3, r3, r0
 8000506:	4698      	mov	r8, r3
 8000508:	2300      	movs	r3, #0
 800050a:	4699      	mov	r9, r3
 800050c:	469b      	mov	fp, r3
 800050e:	e791      	b.n	8000434 <__aeabi_fdiv+0x38>
 8000510:	230c      	movs	r3, #12
 8000512:	4699      	mov	r9, r3
 8000514:	33f3      	adds	r3, #243	; 0xf3
 8000516:	4698      	mov	r8, r3
 8000518:	3bfc      	subs	r3, #252	; 0xfc
 800051a:	469b      	mov	fp, r3
 800051c:	e78a      	b.n	8000434 <__aeabi_fdiv+0x38>
 800051e:	2b03      	cmp	r3, #3
 8000520:	d100      	bne.n	8000524 <__aeabi_fdiv+0x128>
 8000522:	e0a5      	b.n	8000670 <__aeabi_fdiv+0x274>
 8000524:	4655      	mov	r5, sl
 8000526:	2b01      	cmp	r3, #1
 8000528:	d000      	beq.n	800052c <__aeabi_fdiv+0x130>
 800052a:	e081      	b.n	8000630 <__aeabi_fdiv+0x234>
 800052c:	2301      	movs	r3, #1
 800052e:	2100      	movs	r1, #0
 8000530:	2400      	movs	r4, #0
 8000532:	402b      	ands	r3, r5
 8000534:	0264      	lsls	r4, r4, #9
 8000536:	05c9      	lsls	r1, r1, #23
 8000538:	0a60      	lsrs	r0, r4, #9
 800053a:	07db      	lsls	r3, r3, #31
 800053c:	4308      	orrs	r0, r1
 800053e:	4318      	orrs	r0, r3
 8000540:	b003      	add	sp, #12
 8000542:	bc3c      	pop	{r2, r3, r4, r5}
 8000544:	4690      	mov	r8, r2
 8000546:	4699      	mov	r9, r3
 8000548:	46a2      	mov	sl, r4
 800054a:	46ab      	mov	fp, r5
 800054c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054e:	2480      	movs	r4, #128	; 0x80
 8000550:	2300      	movs	r3, #0
 8000552:	03e4      	lsls	r4, r4, #15
 8000554:	21ff      	movs	r1, #255	; 0xff
 8000556:	e7ed      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000558:	21ff      	movs	r1, #255	; 0xff
 800055a:	2400      	movs	r4, #0
 800055c:	e7ea      	b.n	8000534 <__aeabi_fdiv+0x138>
 800055e:	2301      	movs	r3, #1
 8000560:	1a59      	subs	r1, r3, r1
 8000562:	291b      	cmp	r1, #27
 8000564:	dd66      	ble.n	8000634 <__aeabi_fdiv+0x238>
 8000566:	9a01      	ldr	r2, [sp, #4]
 8000568:	4013      	ands	r3, r2
 800056a:	2100      	movs	r1, #0
 800056c:	2400      	movs	r4, #0
 800056e:	e7e1      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	03db      	lsls	r3, r3, #15
 8000574:	421c      	tst	r4, r3
 8000576:	d038      	beq.n	80005ea <__aeabi_fdiv+0x1ee>
 8000578:	421d      	tst	r5, r3
 800057a:	d051      	beq.n	8000620 <__aeabi_fdiv+0x224>
 800057c:	431c      	orrs	r4, r3
 800057e:	0264      	lsls	r4, r4, #9
 8000580:	0a64      	lsrs	r4, r4, #9
 8000582:	0033      	movs	r3, r6
 8000584:	21ff      	movs	r1, #255	; 0xff
 8000586:	e7d5      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000588:	0163      	lsls	r3, r4, #5
 800058a:	016c      	lsls	r4, r5, #5
 800058c:	42a3      	cmp	r3, r4
 800058e:	d23b      	bcs.n	8000608 <__aeabi_fdiv+0x20c>
 8000590:	261b      	movs	r6, #27
 8000592:	2100      	movs	r1, #0
 8000594:	3801      	subs	r0, #1
 8000596:	2501      	movs	r5, #1
 8000598:	001f      	movs	r7, r3
 800059a:	0049      	lsls	r1, r1, #1
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	2f00      	cmp	r7, #0
 80005a0:	db01      	blt.n	80005a6 <__aeabi_fdiv+0x1aa>
 80005a2:	429c      	cmp	r4, r3
 80005a4:	d801      	bhi.n	80005aa <__aeabi_fdiv+0x1ae>
 80005a6:	1b1b      	subs	r3, r3, r4
 80005a8:	4329      	orrs	r1, r5
 80005aa:	3e01      	subs	r6, #1
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f3      	bne.n	8000598 <__aeabi_fdiv+0x19c>
 80005b0:	001c      	movs	r4, r3
 80005b2:	1e63      	subs	r3, r4, #1
 80005b4:	419c      	sbcs	r4, r3
 80005b6:	430c      	orrs	r4, r1
 80005b8:	0001      	movs	r1, r0
 80005ba:	317f      	adds	r1, #127	; 0x7f
 80005bc:	2900      	cmp	r1, #0
 80005be:	ddce      	ble.n	800055e <__aeabi_fdiv+0x162>
 80005c0:	0763      	lsls	r3, r4, #29
 80005c2:	d004      	beq.n	80005ce <__aeabi_fdiv+0x1d2>
 80005c4:	230f      	movs	r3, #15
 80005c6:	4023      	ands	r3, r4
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d000      	beq.n	80005ce <__aeabi_fdiv+0x1d2>
 80005cc:	3404      	adds	r4, #4
 80005ce:	0123      	lsls	r3, r4, #4
 80005d0:	d503      	bpl.n	80005da <__aeabi_fdiv+0x1de>
 80005d2:	0001      	movs	r1, r0
 80005d4:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <__aeabi_fdiv+0x28c>)
 80005d6:	3180      	adds	r1, #128	; 0x80
 80005d8:	401c      	ands	r4, r3
 80005da:	29fe      	cmp	r1, #254	; 0xfe
 80005dc:	dd0d      	ble.n	80005fa <__aeabi_fdiv+0x1fe>
 80005de:	2301      	movs	r3, #1
 80005e0:	9a01      	ldr	r2, [sp, #4]
 80005e2:	21ff      	movs	r1, #255	; 0xff
 80005e4:	4013      	ands	r3, r2
 80005e6:	2400      	movs	r4, #0
 80005e8:	e7a4      	b.n	8000534 <__aeabi_fdiv+0x138>
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	03db      	lsls	r3, r3, #15
 80005ee:	431c      	orrs	r4, r3
 80005f0:	0264      	lsls	r4, r4, #9
 80005f2:	0a64      	lsrs	r4, r4, #9
 80005f4:	0033      	movs	r3, r6
 80005f6:	21ff      	movs	r1, #255	; 0xff
 80005f8:	e79c      	b.n	8000534 <__aeabi_fdiv+0x138>
 80005fa:	2301      	movs	r3, #1
 80005fc:	9a01      	ldr	r2, [sp, #4]
 80005fe:	01a4      	lsls	r4, r4, #6
 8000600:	0a64      	lsrs	r4, r4, #9
 8000602:	b2c9      	uxtb	r1, r1
 8000604:	4013      	ands	r3, r2
 8000606:	e795      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000608:	1b1b      	subs	r3, r3, r4
 800060a:	261a      	movs	r6, #26
 800060c:	2101      	movs	r1, #1
 800060e:	e7c2      	b.n	8000596 <__aeabi_fdiv+0x19a>
 8000610:	9b00      	ldr	r3, [sp, #0]
 8000612:	468b      	mov	fp, r1
 8000614:	469a      	mov	sl, r3
 8000616:	2400      	movs	r4, #0
 8000618:	e74c      	b.n	80004b4 <__aeabi_fdiv+0xb8>
 800061a:	0263      	lsls	r3, r4, #9
 800061c:	d5e5      	bpl.n	80005ea <__aeabi_fdiv+0x1ee>
 800061e:	2500      	movs	r5, #0
 8000620:	2480      	movs	r4, #128	; 0x80
 8000622:	03e4      	lsls	r4, r4, #15
 8000624:	432c      	orrs	r4, r5
 8000626:	0264      	lsls	r4, r4, #9
 8000628:	0a64      	lsrs	r4, r4, #9
 800062a:	9b00      	ldr	r3, [sp, #0]
 800062c:	21ff      	movs	r1, #255	; 0xff
 800062e:	e781      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000630:	9501      	str	r5, [sp, #4]
 8000632:	e7c1      	b.n	80005b8 <__aeabi_fdiv+0x1bc>
 8000634:	0023      	movs	r3, r4
 8000636:	2020      	movs	r0, #32
 8000638:	40cb      	lsrs	r3, r1
 800063a:	1a41      	subs	r1, r0, r1
 800063c:	408c      	lsls	r4, r1
 800063e:	1e61      	subs	r1, r4, #1
 8000640:	418c      	sbcs	r4, r1
 8000642:	431c      	orrs	r4, r3
 8000644:	0763      	lsls	r3, r4, #29
 8000646:	d004      	beq.n	8000652 <__aeabi_fdiv+0x256>
 8000648:	230f      	movs	r3, #15
 800064a:	4023      	ands	r3, r4
 800064c:	2b04      	cmp	r3, #4
 800064e:	d000      	beq.n	8000652 <__aeabi_fdiv+0x256>
 8000650:	3404      	adds	r4, #4
 8000652:	0163      	lsls	r3, r4, #5
 8000654:	d505      	bpl.n	8000662 <__aeabi_fdiv+0x266>
 8000656:	2301      	movs	r3, #1
 8000658:	9a01      	ldr	r2, [sp, #4]
 800065a:	2101      	movs	r1, #1
 800065c:	4013      	ands	r3, r2
 800065e:	2400      	movs	r4, #0
 8000660:	e768      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000662:	2301      	movs	r3, #1
 8000664:	9a01      	ldr	r2, [sp, #4]
 8000666:	01a4      	lsls	r4, r4, #6
 8000668:	0a64      	lsrs	r4, r4, #9
 800066a:	4013      	ands	r3, r2
 800066c:	2100      	movs	r1, #0
 800066e:	e761      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	03db      	lsls	r3, r3, #15
 8000674:	431c      	orrs	r4, r3
 8000676:	0264      	lsls	r4, r4, #9
 8000678:	0a64      	lsrs	r4, r4, #9
 800067a:	4653      	mov	r3, sl
 800067c:	21ff      	movs	r1, #255	; 0xff
 800067e:	e759      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000680:	08009eac 	.word	0x08009eac
 8000684:	08009eec 	.word	0x08009eec
 8000688:	f7ffffff 	.word	0xf7ffffff

0800068c <__aeabi_fmul>:
 800068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068e:	4657      	mov	r7, sl
 8000690:	464e      	mov	r6, r9
 8000692:	4645      	mov	r5, r8
 8000694:	46de      	mov	lr, fp
 8000696:	b5e0      	push	{r5, r6, r7, lr}
 8000698:	0247      	lsls	r7, r0, #9
 800069a:	0046      	lsls	r6, r0, #1
 800069c:	4688      	mov	r8, r1
 800069e:	0a7f      	lsrs	r7, r7, #9
 80006a0:	0e36      	lsrs	r6, r6, #24
 80006a2:	0fc4      	lsrs	r4, r0, #31
 80006a4:	2e00      	cmp	r6, #0
 80006a6:	d047      	beq.n	8000738 <__aeabi_fmul+0xac>
 80006a8:	2eff      	cmp	r6, #255	; 0xff
 80006aa:	d024      	beq.n	80006f6 <__aeabi_fmul+0x6a>
 80006ac:	00fb      	lsls	r3, r7, #3
 80006ae:	2780      	movs	r7, #128	; 0x80
 80006b0:	04ff      	lsls	r7, r7, #19
 80006b2:	431f      	orrs	r7, r3
 80006b4:	2300      	movs	r3, #0
 80006b6:	4699      	mov	r9, r3
 80006b8:	469a      	mov	sl, r3
 80006ba:	3e7f      	subs	r6, #127	; 0x7f
 80006bc:	4643      	mov	r3, r8
 80006be:	025d      	lsls	r5, r3, #9
 80006c0:	0058      	lsls	r0, r3, #1
 80006c2:	0fdb      	lsrs	r3, r3, #31
 80006c4:	0a6d      	lsrs	r5, r5, #9
 80006c6:	0e00      	lsrs	r0, r0, #24
 80006c8:	4698      	mov	r8, r3
 80006ca:	d043      	beq.n	8000754 <__aeabi_fmul+0xc8>
 80006cc:	28ff      	cmp	r0, #255	; 0xff
 80006ce:	d03b      	beq.n	8000748 <__aeabi_fmul+0xbc>
 80006d0:	00eb      	lsls	r3, r5, #3
 80006d2:	2580      	movs	r5, #128	; 0x80
 80006d4:	2200      	movs	r2, #0
 80006d6:	04ed      	lsls	r5, r5, #19
 80006d8:	431d      	orrs	r5, r3
 80006da:	387f      	subs	r0, #127	; 0x7f
 80006dc:	1836      	adds	r6, r6, r0
 80006de:	1c73      	adds	r3, r6, #1
 80006e0:	4641      	mov	r1, r8
 80006e2:	469b      	mov	fp, r3
 80006e4:	464b      	mov	r3, r9
 80006e6:	4061      	eors	r1, r4
 80006e8:	4313      	orrs	r3, r2
 80006ea:	2b0f      	cmp	r3, #15
 80006ec:	d864      	bhi.n	80007b8 <__aeabi_fmul+0x12c>
 80006ee:	4875      	ldr	r0, [pc, #468]	; (80008c4 <__aeabi_fmul+0x238>)
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	58c3      	ldr	r3, [r0, r3]
 80006f4:	469f      	mov	pc, r3
 80006f6:	2f00      	cmp	r7, #0
 80006f8:	d142      	bne.n	8000780 <__aeabi_fmul+0xf4>
 80006fa:	2308      	movs	r3, #8
 80006fc:	4699      	mov	r9, r3
 80006fe:	3b06      	subs	r3, #6
 8000700:	26ff      	movs	r6, #255	; 0xff
 8000702:	469a      	mov	sl, r3
 8000704:	e7da      	b.n	80006bc <__aeabi_fmul+0x30>
 8000706:	4641      	mov	r1, r8
 8000708:	2a02      	cmp	r2, #2
 800070a:	d028      	beq.n	800075e <__aeabi_fmul+0xd2>
 800070c:	2a03      	cmp	r2, #3
 800070e:	d100      	bne.n	8000712 <__aeabi_fmul+0x86>
 8000710:	e0ce      	b.n	80008b0 <__aeabi_fmul+0x224>
 8000712:	2a01      	cmp	r2, #1
 8000714:	d000      	beq.n	8000718 <__aeabi_fmul+0x8c>
 8000716:	e0ac      	b.n	8000872 <__aeabi_fmul+0x1e6>
 8000718:	4011      	ands	r1, r2
 800071a:	2000      	movs	r0, #0
 800071c:	2200      	movs	r2, #0
 800071e:	b2cc      	uxtb	r4, r1
 8000720:	0240      	lsls	r0, r0, #9
 8000722:	05d2      	lsls	r2, r2, #23
 8000724:	0a40      	lsrs	r0, r0, #9
 8000726:	07e4      	lsls	r4, r4, #31
 8000728:	4310      	orrs	r0, r2
 800072a:	4320      	orrs	r0, r4
 800072c:	bc3c      	pop	{r2, r3, r4, r5}
 800072e:	4690      	mov	r8, r2
 8000730:	4699      	mov	r9, r3
 8000732:	46a2      	mov	sl, r4
 8000734:	46ab      	mov	fp, r5
 8000736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000738:	2f00      	cmp	r7, #0
 800073a:	d115      	bne.n	8000768 <__aeabi_fmul+0xdc>
 800073c:	2304      	movs	r3, #4
 800073e:	4699      	mov	r9, r3
 8000740:	3b03      	subs	r3, #3
 8000742:	2600      	movs	r6, #0
 8000744:	469a      	mov	sl, r3
 8000746:	e7b9      	b.n	80006bc <__aeabi_fmul+0x30>
 8000748:	20ff      	movs	r0, #255	; 0xff
 800074a:	2202      	movs	r2, #2
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0c5      	beq.n	80006dc <__aeabi_fmul+0x50>
 8000750:	2203      	movs	r2, #3
 8000752:	e7c3      	b.n	80006dc <__aeabi_fmul+0x50>
 8000754:	2d00      	cmp	r5, #0
 8000756:	d119      	bne.n	800078c <__aeabi_fmul+0x100>
 8000758:	2000      	movs	r0, #0
 800075a:	2201      	movs	r2, #1
 800075c:	e7be      	b.n	80006dc <__aeabi_fmul+0x50>
 800075e:	2401      	movs	r4, #1
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	400c      	ands	r4, r1
 8000764:	2000      	movs	r0, #0
 8000766:	e7db      	b.n	8000720 <__aeabi_fmul+0x94>
 8000768:	0038      	movs	r0, r7
 800076a:	f001 fe6b 	bl	8002444 <__clzsi2>
 800076e:	2676      	movs	r6, #118	; 0x76
 8000770:	1f43      	subs	r3, r0, #5
 8000772:	409f      	lsls	r7, r3
 8000774:	2300      	movs	r3, #0
 8000776:	4276      	negs	r6, r6
 8000778:	1a36      	subs	r6, r6, r0
 800077a:	4699      	mov	r9, r3
 800077c:	469a      	mov	sl, r3
 800077e:	e79d      	b.n	80006bc <__aeabi_fmul+0x30>
 8000780:	230c      	movs	r3, #12
 8000782:	4699      	mov	r9, r3
 8000784:	3b09      	subs	r3, #9
 8000786:	26ff      	movs	r6, #255	; 0xff
 8000788:	469a      	mov	sl, r3
 800078a:	e797      	b.n	80006bc <__aeabi_fmul+0x30>
 800078c:	0028      	movs	r0, r5
 800078e:	f001 fe59 	bl	8002444 <__clzsi2>
 8000792:	1f43      	subs	r3, r0, #5
 8000794:	409d      	lsls	r5, r3
 8000796:	2376      	movs	r3, #118	; 0x76
 8000798:	425b      	negs	r3, r3
 800079a:	1a18      	subs	r0, r3, r0
 800079c:	2200      	movs	r2, #0
 800079e:	e79d      	b.n	80006dc <__aeabi_fmul+0x50>
 80007a0:	2080      	movs	r0, #128	; 0x80
 80007a2:	2400      	movs	r4, #0
 80007a4:	03c0      	lsls	r0, r0, #15
 80007a6:	22ff      	movs	r2, #255	; 0xff
 80007a8:	e7ba      	b.n	8000720 <__aeabi_fmul+0x94>
 80007aa:	003d      	movs	r5, r7
 80007ac:	4652      	mov	r2, sl
 80007ae:	e7ab      	b.n	8000708 <__aeabi_fmul+0x7c>
 80007b0:	003d      	movs	r5, r7
 80007b2:	0021      	movs	r1, r4
 80007b4:	4652      	mov	r2, sl
 80007b6:	e7a7      	b.n	8000708 <__aeabi_fmul+0x7c>
 80007b8:	0c3b      	lsrs	r3, r7, #16
 80007ba:	469c      	mov	ip, r3
 80007bc:	042a      	lsls	r2, r5, #16
 80007be:	0c12      	lsrs	r2, r2, #16
 80007c0:	0c2b      	lsrs	r3, r5, #16
 80007c2:	0014      	movs	r4, r2
 80007c4:	4660      	mov	r0, ip
 80007c6:	4665      	mov	r5, ip
 80007c8:	043f      	lsls	r7, r7, #16
 80007ca:	0c3f      	lsrs	r7, r7, #16
 80007cc:	437c      	muls	r4, r7
 80007ce:	4342      	muls	r2, r0
 80007d0:	435d      	muls	r5, r3
 80007d2:	437b      	muls	r3, r7
 80007d4:	0c27      	lsrs	r7, r4, #16
 80007d6:	189b      	adds	r3, r3, r2
 80007d8:	18ff      	adds	r7, r7, r3
 80007da:	42ba      	cmp	r2, r7
 80007dc:	d903      	bls.n	80007e6 <__aeabi_fmul+0x15a>
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	025b      	lsls	r3, r3, #9
 80007e2:	469c      	mov	ip, r3
 80007e4:	4465      	add	r5, ip
 80007e6:	0424      	lsls	r4, r4, #16
 80007e8:	043a      	lsls	r2, r7, #16
 80007ea:	0c24      	lsrs	r4, r4, #16
 80007ec:	1912      	adds	r2, r2, r4
 80007ee:	0193      	lsls	r3, r2, #6
 80007f0:	1e5c      	subs	r4, r3, #1
 80007f2:	41a3      	sbcs	r3, r4
 80007f4:	0c3f      	lsrs	r7, r7, #16
 80007f6:	0e92      	lsrs	r2, r2, #26
 80007f8:	197d      	adds	r5, r7, r5
 80007fa:	431a      	orrs	r2, r3
 80007fc:	01ad      	lsls	r5, r5, #6
 80007fe:	4315      	orrs	r5, r2
 8000800:	012b      	lsls	r3, r5, #4
 8000802:	d504      	bpl.n	800080e <__aeabi_fmul+0x182>
 8000804:	2301      	movs	r3, #1
 8000806:	465e      	mov	r6, fp
 8000808:	086a      	lsrs	r2, r5, #1
 800080a:	401d      	ands	r5, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	0032      	movs	r2, r6
 8000810:	327f      	adds	r2, #127	; 0x7f
 8000812:	2a00      	cmp	r2, #0
 8000814:	dd25      	ble.n	8000862 <__aeabi_fmul+0x1d6>
 8000816:	076b      	lsls	r3, r5, #29
 8000818:	d004      	beq.n	8000824 <__aeabi_fmul+0x198>
 800081a:	230f      	movs	r3, #15
 800081c:	402b      	ands	r3, r5
 800081e:	2b04      	cmp	r3, #4
 8000820:	d000      	beq.n	8000824 <__aeabi_fmul+0x198>
 8000822:	3504      	adds	r5, #4
 8000824:	012b      	lsls	r3, r5, #4
 8000826:	d503      	bpl.n	8000830 <__aeabi_fmul+0x1a4>
 8000828:	0032      	movs	r2, r6
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <__aeabi_fmul+0x23c>)
 800082c:	3280      	adds	r2, #128	; 0x80
 800082e:	401d      	ands	r5, r3
 8000830:	2afe      	cmp	r2, #254	; 0xfe
 8000832:	dc94      	bgt.n	800075e <__aeabi_fmul+0xd2>
 8000834:	2401      	movs	r4, #1
 8000836:	01a8      	lsls	r0, r5, #6
 8000838:	0a40      	lsrs	r0, r0, #9
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	400c      	ands	r4, r1
 800083e:	e76f      	b.n	8000720 <__aeabi_fmul+0x94>
 8000840:	2080      	movs	r0, #128	; 0x80
 8000842:	03c0      	lsls	r0, r0, #15
 8000844:	4207      	tst	r7, r0
 8000846:	d007      	beq.n	8000858 <__aeabi_fmul+0x1cc>
 8000848:	4205      	tst	r5, r0
 800084a:	d105      	bne.n	8000858 <__aeabi_fmul+0x1cc>
 800084c:	4328      	orrs	r0, r5
 800084e:	0240      	lsls	r0, r0, #9
 8000850:	0a40      	lsrs	r0, r0, #9
 8000852:	4644      	mov	r4, r8
 8000854:	22ff      	movs	r2, #255	; 0xff
 8000856:	e763      	b.n	8000720 <__aeabi_fmul+0x94>
 8000858:	4338      	orrs	r0, r7
 800085a:	0240      	lsls	r0, r0, #9
 800085c:	0a40      	lsrs	r0, r0, #9
 800085e:	22ff      	movs	r2, #255	; 0xff
 8000860:	e75e      	b.n	8000720 <__aeabi_fmul+0x94>
 8000862:	2401      	movs	r4, #1
 8000864:	1aa3      	subs	r3, r4, r2
 8000866:	2b1b      	cmp	r3, #27
 8000868:	dd05      	ble.n	8000876 <__aeabi_fmul+0x1ea>
 800086a:	400c      	ands	r4, r1
 800086c:	2200      	movs	r2, #0
 800086e:	2000      	movs	r0, #0
 8000870:	e756      	b.n	8000720 <__aeabi_fmul+0x94>
 8000872:	465e      	mov	r6, fp
 8000874:	e7cb      	b.n	800080e <__aeabi_fmul+0x182>
 8000876:	002a      	movs	r2, r5
 8000878:	2020      	movs	r0, #32
 800087a:	40da      	lsrs	r2, r3
 800087c:	1ac3      	subs	r3, r0, r3
 800087e:	409d      	lsls	r5, r3
 8000880:	002b      	movs	r3, r5
 8000882:	1e5d      	subs	r5, r3, #1
 8000884:	41ab      	sbcs	r3, r5
 8000886:	4313      	orrs	r3, r2
 8000888:	075a      	lsls	r2, r3, #29
 800088a:	d004      	beq.n	8000896 <__aeabi_fmul+0x20a>
 800088c:	220f      	movs	r2, #15
 800088e:	401a      	ands	r2, r3
 8000890:	2a04      	cmp	r2, #4
 8000892:	d000      	beq.n	8000896 <__aeabi_fmul+0x20a>
 8000894:	3304      	adds	r3, #4
 8000896:	015a      	lsls	r2, r3, #5
 8000898:	d504      	bpl.n	80008a4 <__aeabi_fmul+0x218>
 800089a:	2401      	movs	r4, #1
 800089c:	2201      	movs	r2, #1
 800089e:	400c      	ands	r4, r1
 80008a0:	2000      	movs	r0, #0
 80008a2:	e73d      	b.n	8000720 <__aeabi_fmul+0x94>
 80008a4:	2401      	movs	r4, #1
 80008a6:	019b      	lsls	r3, r3, #6
 80008a8:	0a58      	lsrs	r0, r3, #9
 80008aa:	400c      	ands	r4, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	e737      	b.n	8000720 <__aeabi_fmul+0x94>
 80008b0:	2080      	movs	r0, #128	; 0x80
 80008b2:	2401      	movs	r4, #1
 80008b4:	03c0      	lsls	r0, r0, #15
 80008b6:	4328      	orrs	r0, r5
 80008b8:	0240      	lsls	r0, r0, #9
 80008ba:	0a40      	lsrs	r0, r0, #9
 80008bc:	400c      	ands	r4, r1
 80008be:	22ff      	movs	r2, #255	; 0xff
 80008c0:	e72e      	b.n	8000720 <__aeabi_fmul+0x94>
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	08009f2c 	.word	0x08009f2c
 80008c8:	f7ffffff 	.word	0xf7ffffff

080008cc <__aeabi_fsub>:
 80008cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ce:	464f      	mov	r7, r9
 80008d0:	46d6      	mov	lr, sl
 80008d2:	4646      	mov	r6, r8
 80008d4:	0044      	lsls	r4, r0, #1
 80008d6:	b5c0      	push	{r6, r7, lr}
 80008d8:	0fc2      	lsrs	r2, r0, #31
 80008da:	0247      	lsls	r7, r0, #9
 80008dc:	0248      	lsls	r0, r1, #9
 80008de:	0a40      	lsrs	r0, r0, #9
 80008e0:	4684      	mov	ip, r0
 80008e2:	4666      	mov	r6, ip
 80008e4:	0a7b      	lsrs	r3, r7, #9
 80008e6:	0048      	lsls	r0, r1, #1
 80008e8:	0fc9      	lsrs	r1, r1, #31
 80008ea:	469a      	mov	sl, r3
 80008ec:	0e24      	lsrs	r4, r4, #24
 80008ee:	0015      	movs	r5, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	0e00      	lsrs	r0, r0, #24
 80008f4:	4689      	mov	r9, r1
 80008f6:	00f6      	lsls	r6, r6, #3
 80008f8:	28ff      	cmp	r0, #255	; 0xff
 80008fa:	d100      	bne.n	80008fe <__aeabi_fsub+0x32>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fsub+0x152>
 80008fe:	2101      	movs	r1, #1
 8000900:	464f      	mov	r7, r9
 8000902:	404f      	eors	r7, r1
 8000904:	0039      	movs	r1, r7
 8000906:	4291      	cmp	r1, r2
 8000908:	d066      	beq.n	80009d8 <__aeabi_fsub+0x10c>
 800090a:	1a22      	subs	r2, r4, r0
 800090c:	2a00      	cmp	r2, #0
 800090e:	dc00      	bgt.n	8000912 <__aeabi_fsub+0x46>
 8000910:	e09d      	b.n	8000a4e <__aeabi_fsub+0x182>
 8000912:	2800      	cmp	r0, #0
 8000914:	d13d      	bne.n	8000992 <__aeabi_fsub+0xc6>
 8000916:	2e00      	cmp	r6, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fsub+0x50>
 800091a:	e08b      	b.n	8000a34 <__aeabi_fsub+0x168>
 800091c:	1e51      	subs	r1, r2, #1
 800091e:	2900      	cmp	r1, #0
 8000920:	d000      	beq.n	8000924 <__aeabi_fsub+0x58>
 8000922:	e0b5      	b.n	8000a90 <__aeabi_fsub+0x1c4>
 8000924:	2401      	movs	r4, #1
 8000926:	1b9b      	subs	r3, r3, r6
 8000928:	015a      	lsls	r2, r3, #5
 800092a:	d544      	bpl.n	80009b6 <__aeabi_fsub+0xea>
 800092c:	019b      	lsls	r3, r3, #6
 800092e:	099f      	lsrs	r7, r3, #6
 8000930:	0038      	movs	r0, r7
 8000932:	f001 fd87 	bl	8002444 <__clzsi2>
 8000936:	3805      	subs	r0, #5
 8000938:	4087      	lsls	r7, r0
 800093a:	4284      	cmp	r4, r0
 800093c:	dd00      	ble.n	8000940 <__aeabi_fsub+0x74>
 800093e:	e096      	b.n	8000a6e <__aeabi_fsub+0x1a2>
 8000940:	1b04      	subs	r4, r0, r4
 8000942:	003a      	movs	r2, r7
 8000944:	2020      	movs	r0, #32
 8000946:	3401      	adds	r4, #1
 8000948:	40e2      	lsrs	r2, r4
 800094a:	1b04      	subs	r4, r0, r4
 800094c:	40a7      	lsls	r7, r4
 800094e:	003b      	movs	r3, r7
 8000950:	1e5f      	subs	r7, r3, #1
 8000952:	41bb      	sbcs	r3, r7
 8000954:	2400      	movs	r4, #0
 8000956:	4313      	orrs	r3, r2
 8000958:	075a      	lsls	r2, r3, #29
 800095a:	d004      	beq.n	8000966 <__aeabi_fsub+0x9a>
 800095c:	220f      	movs	r2, #15
 800095e:	401a      	ands	r2, r3
 8000960:	2a04      	cmp	r2, #4
 8000962:	d000      	beq.n	8000966 <__aeabi_fsub+0x9a>
 8000964:	3304      	adds	r3, #4
 8000966:	015a      	lsls	r2, r3, #5
 8000968:	d527      	bpl.n	80009ba <__aeabi_fsub+0xee>
 800096a:	3401      	adds	r4, #1
 800096c:	2cff      	cmp	r4, #255	; 0xff
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0xa6>
 8000970:	e079      	b.n	8000a66 <__aeabi_fsub+0x19a>
 8000972:	2201      	movs	r2, #1
 8000974:	019b      	lsls	r3, r3, #6
 8000976:	0a5b      	lsrs	r3, r3, #9
 8000978:	b2e4      	uxtb	r4, r4
 800097a:	402a      	ands	r2, r5
 800097c:	025b      	lsls	r3, r3, #9
 800097e:	05e4      	lsls	r4, r4, #23
 8000980:	0a58      	lsrs	r0, r3, #9
 8000982:	07d2      	lsls	r2, r2, #31
 8000984:	4320      	orrs	r0, r4
 8000986:	4310      	orrs	r0, r2
 8000988:	bc1c      	pop	{r2, r3, r4}
 800098a:	4690      	mov	r8, r2
 800098c:	4699      	mov	r9, r3
 800098e:	46a2      	mov	sl, r4
 8000990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000992:	2cff      	cmp	r4, #255	; 0xff
 8000994:	d0e0      	beq.n	8000958 <__aeabi_fsub+0x8c>
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	04c9      	lsls	r1, r1, #19
 800099a:	430e      	orrs	r6, r1
 800099c:	2a1b      	cmp	r2, #27
 800099e:	dc7b      	bgt.n	8000a98 <__aeabi_fsub+0x1cc>
 80009a0:	0031      	movs	r1, r6
 80009a2:	2020      	movs	r0, #32
 80009a4:	40d1      	lsrs	r1, r2
 80009a6:	1a82      	subs	r2, r0, r2
 80009a8:	4096      	lsls	r6, r2
 80009aa:	1e72      	subs	r2, r6, #1
 80009ac:	4196      	sbcs	r6, r2
 80009ae:	430e      	orrs	r6, r1
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	015a      	lsls	r2, r3, #5
 80009b4:	d4ba      	bmi.n	800092c <__aeabi_fsub+0x60>
 80009b6:	075a      	lsls	r2, r3, #29
 80009b8:	d1d0      	bne.n	800095c <__aeabi_fsub+0x90>
 80009ba:	2201      	movs	r2, #1
 80009bc:	08df      	lsrs	r7, r3, #3
 80009be:	402a      	ands	r2, r5
 80009c0:	2cff      	cmp	r4, #255	; 0xff
 80009c2:	d133      	bne.n	8000a2c <__aeabi_fsub+0x160>
 80009c4:	2f00      	cmp	r7, #0
 80009c6:	d100      	bne.n	80009ca <__aeabi_fsub+0xfe>
 80009c8:	e0a8      	b.n	8000b1c <__aeabi_fsub+0x250>
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	03db      	lsls	r3, r3, #15
 80009ce:	433b      	orrs	r3, r7
 80009d0:	025b      	lsls	r3, r3, #9
 80009d2:	0a5b      	lsrs	r3, r3, #9
 80009d4:	24ff      	movs	r4, #255	; 0xff
 80009d6:	e7d1      	b.n	800097c <__aeabi_fsub+0xb0>
 80009d8:	1a21      	subs	r1, r4, r0
 80009da:	2900      	cmp	r1, #0
 80009dc:	dd4c      	ble.n	8000a78 <__aeabi_fsub+0x1ac>
 80009de:	2800      	cmp	r0, #0
 80009e0:	d02a      	beq.n	8000a38 <__aeabi_fsub+0x16c>
 80009e2:	2cff      	cmp	r4, #255	; 0xff
 80009e4:	d0b8      	beq.n	8000958 <__aeabi_fsub+0x8c>
 80009e6:	2080      	movs	r0, #128	; 0x80
 80009e8:	04c0      	lsls	r0, r0, #19
 80009ea:	4306      	orrs	r6, r0
 80009ec:	291b      	cmp	r1, #27
 80009ee:	dd00      	ble.n	80009f2 <__aeabi_fsub+0x126>
 80009f0:	e0af      	b.n	8000b52 <__aeabi_fsub+0x286>
 80009f2:	0030      	movs	r0, r6
 80009f4:	2720      	movs	r7, #32
 80009f6:	40c8      	lsrs	r0, r1
 80009f8:	1a79      	subs	r1, r7, r1
 80009fa:	408e      	lsls	r6, r1
 80009fc:	1e71      	subs	r1, r6, #1
 80009fe:	418e      	sbcs	r6, r1
 8000a00:	4306      	orrs	r6, r0
 8000a02:	199b      	adds	r3, r3, r6
 8000a04:	0159      	lsls	r1, r3, #5
 8000a06:	d5d6      	bpl.n	80009b6 <__aeabi_fsub+0xea>
 8000a08:	3401      	adds	r4, #1
 8000a0a:	2cff      	cmp	r4, #255	; 0xff
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fsub+0x144>
 8000a0e:	e085      	b.n	8000b1c <__aeabi_fsub+0x250>
 8000a10:	2201      	movs	r2, #1
 8000a12:	497a      	ldr	r1, [pc, #488]	; (8000bfc <__aeabi_fsub+0x330>)
 8000a14:	401a      	ands	r2, r3
 8000a16:	085b      	lsrs	r3, r3, #1
 8000a18:	400b      	ands	r3, r1
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	e79c      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fsub+0x158>
 8000a22:	e770      	b.n	8000906 <__aeabi_fsub+0x3a>
 8000a24:	e76b      	b.n	80008fe <__aeabi_fsub+0x32>
 8000a26:	1e3b      	subs	r3, r7, #0
 8000a28:	d1c5      	bne.n	80009b6 <__aeabi_fsub+0xea>
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	027b      	lsls	r3, r7, #9
 8000a2e:	0a5b      	lsrs	r3, r3, #9
 8000a30:	b2e4      	uxtb	r4, r4
 8000a32:	e7a3      	b.n	800097c <__aeabi_fsub+0xb0>
 8000a34:	0014      	movs	r4, r2
 8000a36:	e78f      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000a38:	2e00      	cmp	r6, #0
 8000a3a:	d04d      	beq.n	8000ad8 <__aeabi_fsub+0x20c>
 8000a3c:	1e48      	subs	r0, r1, #1
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d157      	bne.n	8000af2 <__aeabi_fsub+0x226>
 8000a42:	199b      	adds	r3, r3, r6
 8000a44:	2401      	movs	r4, #1
 8000a46:	015a      	lsls	r2, r3, #5
 8000a48:	d5b5      	bpl.n	80009b6 <__aeabi_fsub+0xea>
 8000a4a:	2402      	movs	r4, #2
 8000a4c:	e7e0      	b.n	8000a10 <__aeabi_fsub+0x144>
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d125      	bne.n	8000a9e <__aeabi_fsub+0x1d2>
 8000a52:	1c62      	adds	r2, r4, #1
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	2a01      	cmp	r2, #1
 8000a58:	dd72      	ble.n	8000b40 <__aeabi_fsub+0x274>
 8000a5a:	1b9f      	subs	r7, r3, r6
 8000a5c:	017a      	lsls	r2, r7, #5
 8000a5e:	d535      	bpl.n	8000acc <__aeabi_fsub+0x200>
 8000a60:	1af7      	subs	r7, r6, r3
 8000a62:	000d      	movs	r5, r1
 8000a64:	e764      	b.n	8000930 <__aeabi_fsub+0x64>
 8000a66:	2201      	movs	r2, #1
 8000a68:	2300      	movs	r3, #0
 8000a6a:	402a      	ands	r2, r5
 8000a6c:	e786      	b.n	800097c <__aeabi_fsub+0xb0>
 8000a6e:	003b      	movs	r3, r7
 8000a70:	4a63      	ldr	r2, [pc, #396]	; (8000c00 <__aeabi_fsub+0x334>)
 8000a72:	1a24      	subs	r4, r4, r0
 8000a74:	4013      	ands	r3, r2
 8000a76:	e76f      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	d16c      	bne.n	8000b56 <__aeabi_fsub+0x28a>
 8000a7c:	1c61      	adds	r1, r4, #1
 8000a7e:	b2c8      	uxtb	r0, r1
 8000a80:	2801      	cmp	r0, #1
 8000a82:	dd4e      	ble.n	8000b22 <__aeabi_fsub+0x256>
 8000a84:	29ff      	cmp	r1, #255	; 0xff
 8000a86:	d049      	beq.n	8000b1c <__aeabi_fsub+0x250>
 8000a88:	199b      	adds	r3, r3, r6
 8000a8a:	085b      	lsrs	r3, r3, #1
 8000a8c:	000c      	movs	r4, r1
 8000a8e:	e763      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000a90:	2aff      	cmp	r2, #255	; 0xff
 8000a92:	d041      	beq.n	8000b18 <__aeabi_fsub+0x24c>
 8000a94:	000a      	movs	r2, r1
 8000a96:	e781      	b.n	800099c <__aeabi_fsub+0xd0>
 8000a98:	2601      	movs	r6, #1
 8000a9a:	1b9b      	subs	r3, r3, r6
 8000a9c:	e789      	b.n	80009b2 <__aeabi_fsub+0xe6>
 8000a9e:	2c00      	cmp	r4, #0
 8000aa0:	d01c      	beq.n	8000adc <__aeabi_fsub+0x210>
 8000aa2:	28ff      	cmp	r0, #255	; 0xff
 8000aa4:	d021      	beq.n	8000aea <__aeabi_fsub+0x21e>
 8000aa6:	2480      	movs	r4, #128	; 0x80
 8000aa8:	04e4      	lsls	r4, r4, #19
 8000aaa:	4252      	negs	r2, r2
 8000aac:	4323      	orrs	r3, r4
 8000aae:	2a1b      	cmp	r2, #27
 8000ab0:	dd00      	ble.n	8000ab4 <__aeabi_fsub+0x1e8>
 8000ab2:	e096      	b.n	8000be2 <__aeabi_fsub+0x316>
 8000ab4:	001c      	movs	r4, r3
 8000ab6:	2520      	movs	r5, #32
 8000ab8:	40d4      	lsrs	r4, r2
 8000aba:	1aaa      	subs	r2, r5, r2
 8000abc:	4093      	lsls	r3, r2
 8000abe:	1e5a      	subs	r2, r3, #1
 8000ac0:	4193      	sbcs	r3, r2
 8000ac2:	4323      	orrs	r3, r4
 8000ac4:	1af3      	subs	r3, r6, r3
 8000ac6:	0004      	movs	r4, r0
 8000ac8:	000d      	movs	r5, r1
 8000aca:	e72d      	b.n	8000928 <__aeabi_fsub+0x5c>
 8000acc:	2f00      	cmp	r7, #0
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_fsub+0x206>
 8000ad0:	e72e      	b.n	8000930 <__aeabi_fsub+0x64>
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	e7a9      	b.n	8000a2c <__aeabi_fsub+0x160>
 8000ad8:	000c      	movs	r4, r1
 8000ada:	e73d      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d058      	beq.n	8000b92 <__aeabi_fsub+0x2c6>
 8000ae0:	43d2      	mvns	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d0ee      	beq.n	8000ac4 <__aeabi_fsub+0x1f8>
 8000ae6:	28ff      	cmp	r0, #255	; 0xff
 8000ae8:	d1e1      	bne.n	8000aae <__aeabi_fsub+0x1e2>
 8000aea:	0033      	movs	r3, r6
 8000aec:	24ff      	movs	r4, #255	; 0xff
 8000aee:	000d      	movs	r5, r1
 8000af0:	e732      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000af2:	29ff      	cmp	r1, #255	; 0xff
 8000af4:	d010      	beq.n	8000b18 <__aeabi_fsub+0x24c>
 8000af6:	0001      	movs	r1, r0
 8000af8:	e778      	b.n	80009ec <__aeabi_fsub+0x120>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d06e      	beq.n	8000bdc <__aeabi_fsub+0x310>
 8000afe:	24ff      	movs	r4, #255	; 0xff
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d100      	bne.n	8000b06 <__aeabi_fsub+0x23a>
 8000b04:	e728      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	4651      	mov	r1, sl
 8000b0a:	03d2      	lsls	r2, r2, #15
 8000b0c:	4211      	tst	r1, r2
 8000b0e:	d003      	beq.n	8000b18 <__aeabi_fsub+0x24c>
 8000b10:	4661      	mov	r1, ip
 8000b12:	4211      	tst	r1, r2
 8000b14:	d100      	bne.n	8000b18 <__aeabi_fsub+0x24c>
 8000b16:	0033      	movs	r3, r6
 8000b18:	24ff      	movs	r4, #255	; 0xff
 8000b1a:	e71d      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b1c:	24ff      	movs	r4, #255	; 0xff
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e72c      	b.n	800097c <__aeabi_fsub+0xb0>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d1e9      	bne.n	8000afa <__aeabi_fsub+0x22e>
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d063      	beq.n	8000bf2 <__aeabi_fsub+0x326>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_fsub+0x264>
 8000b2e:	e713      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b30:	199b      	adds	r3, r3, r6
 8000b32:	015a      	lsls	r2, r3, #5
 8000b34:	d400      	bmi.n	8000b38 <__aeabi_fsub+0x26c>
 8000b36:	e73e      	b.n	80009b6 <__aeabi_fsub+0xea>
 8000b38:	4a31      	ldr	r2, [pc, #196]	; (8000c00 <__aeabi_fsub+0x334>)
 8000b3a:	000c      	movs	r4, r1
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	e70b      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d11e      	bne.n	8000b82 <__aeabi_fsub+0x2b6>
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d12f      	bne.n	8000ba8 <__aeabi_fsub+0x2dc>
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d04f      	beq.n	8000bec <__aeabi_fsub+0x320>
 8000b4c:	0033      	movs	r3, r6
 8000b4e:	000d      	movs	r5, r1
 8000b50:	e702      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b52:	2601      	movs	r6, #1
 8000b54:	e755      	b.n	8000a02 <__aeabi_fsub+0x136>
 8000b56:	2c00      	cmp	r4, #0
 8000b58:	d11f      	bne.n	8000b9a <__aeabi_fsub+0x2ce>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d043      	beq.n	8000be6 <__aeabi_fsub+0x31a>
 8000b5e:	43c9      	mvns	r1, r1
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d00b      	beq.n	8000b7c <__aeabi_fsub+0x2b0>
 8000b64:	28ff      	cmp	r0, #255	; 0xff
 8000b66:	d039      	beq.n	8000bdc <__aeabi_fsub+0x310>
 8000b68:	291b      	cmp	r1, #27
 8000b6a:	dc44      	bgt.n	8000bf6 <__aeabi_fsub+0x32a>
 8000b6c:	001c      	movs	r4, r3
 8000b6e:	2720      	movs	r7, #32
 8000b70:	40cc      	lsrs	r4, r1
 8000b72:	1a79      	subs	r1, r7, r1
 8000b74:	408b      	lsls	r3, r1
 8000b76:	1e59      	subs	r1, r3, #1
 8000b78:	418b      	sbcs	r3, r1
 8000b7a:	4323      	orrs	r3, r4
 8000b7c:	199b      	adds	r3, r3, r6
 8000b7e:	0004      	movs	r4, r0
 8000b80:	e740      	b.n	8000a04 <__aeabi_fsub+0x138>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d11a      	bne.n	8000bbc <__aeabi_fsub+0x2f0>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d124      	bne.n	8000bd4 <__aeabi_fsub+0x308>
 8000b8a:	2780      	movs	r7, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	03ff      	lsls	r7, r7, #15
 8000b90:	e71b      	b.n	80009ca <__aeabi_fsub+0xfe>
 8000b92:	0033      	movs	r3, r6
 8000b94:	0004      	movs	r4, r0
 8000b96:	000d      	movs	r5, r1
 8000b98:	e6de      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b9a:	28ff      	cmp	r0, #255	; 0xff
 8000b9c:	d01e      	beq.n	8000bdc <__aeabi_fsub+0x310>
 8000b9e:	2480      	movs	r4, #128	; 0x80
 8000ba0:	04e4      	lsls	r4, r4, #19
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	4323      	orrs	r3, r4
 8000ba6:	e7df      	b.n	8000b68 <__aeabi_fsub+0x29c>
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x2e2>
 8000bac:	e6d4      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bae:	1b9f      	subs	r7, r3, r6
 8000bb0:	017a      	lsls	r2, r7, #5
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_fsub+0x2ea>
 8000bb4:	e737      	b.n	8000a26 <__aeabi_fsub+0x15a>
 8000bb6:	1af3      	subs	r3, r6, r3
 8000bb8:	000d      	movs	r5, r1
 8000bba:	e6cd      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bbc:	24ff      	movs	r4, #255	; 0xff
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x2f8>
 8000bc2:	e6c9      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	4650      	mov	r0, sl
 8000bc8:	03d2      	lsls	r2, r2, #15
 8000bca:	4210      	tst	r0, r2
 8000bcc:	d0a4      	beq.n	8000b18 <__aeabi_fsub+0x24c>
 8000bce:	4660      	mov	r0, ip
 8000bd0:	4210      	tst	r0, r2
 8000bd2:	d1a1      	bne.n	8000b18 <__aeabi_fsub+0x24c>
 8000bd4:	0033      	movs	r3, r6
 8000bd6:	000d      	movs	r5, r1
 8000bd8:	24ff      	movs	r4, #255	; 0xff
 8000bda:	e6bd      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bdc:	0033      	movs	r3, r6
 8000bde:	24ff      	movs	r4, #255	; 0xff
 8000be0:	e6ba      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e76e      	b.n	8000ac4 <__aeabi_fsub+0x1f8>
 8000be6:	0033      	movs	r3, r6
 8000be8:	0004      	movs	r4, r0
 8000bea:	e6b5      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bec:	2700      	movs	r7, #0
 8000bee:	2200      	movs	r2, #0
 8000bf0:	e71c      	b.n	8000a2c <__aeabi_fsub+0x160>
 8000bf2:	0033      	movs	r3, r6
 8000bf4:	e6b0      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e7c0      	b.n	8000b7c <__aeabi_fsub+0x2b0>
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	7dffffff 	.word	0x7dffffff
 8000c00:	fbffffff 	.word	0xfbffffff

08000c04 <__aeabi_f2iz>:
 8000c04:	0241      	lsls	r1, r0, #9
 8000c06:	0043      	lsls	r3, r0, #1
 8000c08:	0fc2      	lsrs	r2, r0, #31
 8000c0a:	0a49      	lsrs	r1, r1, #9
 8000c0c:	0e1b      	lsrs	r3, r3, #24
 8000c0e:	2000      	movs	r0, #0
 8000c10:	2b7e      	cmp	r3, #126	; 0x7e
 8000c12:	dd0d      	ble.n	8000c30 <__aeabi_f2iz+0x2c>
 8000c14:	2b9d      	cmp	r3, #157	; 0x9d
 8000c16:	dc0c      	bgt.n	8000c32 <__aeabi_f2iz+0x2e>
 8000c18:	2080      	movs	r0, #128	; 0x80
 8000c1a:	0400      	lsls	r0, r0, #16
 8000c1c:	4301      	orrs	r1, r0
 8000c1e:	2b95      	cmp	r3, #149	; 0x95
 8000c20:	dc0a      	bgt.n	8000c38 <__aeabi_f2iz+0x34>
 8000c22:	2096      	movs	r0, #150	; 0x96
 8000c24:	1ac3      	subs	r3, r0, r3
 8000c26:	40d9      	lsrs	r1, r3
 8000c28:	4248      	negs	r0, r1
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_f2iz+0x2c>
 8000c2e:	0008      	movs	r0, r1
 8000c30:	4770      	bx	lr
 8000c32:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <__aeabi_f2iz+0x3c>)
 8000c34:	18d0      	adds	r0, r2, r3
 8000c36:	e7fb      	b.n	8000c30 <__aeabi_f2iz+0x2c>
 8000c38:	3b96      	subs	r3, #150	; 0x96
 8000c3a:	4099      	lsls	r1, r3
 8000c3c:	e7f4      	b.n	8000c28 <__aeabi_f2iz+0x24>
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	7fffffff 	.word	0x7fffffff

08000c44 <__aeabi_i2f>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d030      	beq.n	8000cac <__aeabi_i2f+0x68>
 8000c4a:	17c3      	asrs	r3, r0, #31
 8000c4c:	18c4      	adds	r4, r0, r3
 8000c4e:	405c      	eors	r4, r3
 8000c50:	0fc5      	lsrs	r5, r0, #31
 8000c52:	0020      	movs	r0, r4
 8000c54:	f001 fbf6 	bl	8002444 <__clzsi2>
 8000c58:	239e      	movs	r3, #158	; 0x9e
 8000c5a:	1a1b      	subs	r3, r3, r0
 8000c5c:	2b96      	cmp	r3, #150	; 0x96
 8000c5e:	dc0d      	bgt.n	8000c7c <__aeabi_i2f+0x38>
 8000c60:	2296      	movs	r2, #150	; 0x96
 8000c62:	1ad2      	subs	r2, r2, r3
 8000c64:	4094      	lsls	r4, r2
 8000c66:	002a      	movs	r2, r5
 8000c68:	0264      	lsls	r4, r4, #9
 8000c6a:	0a64      	lsrs	r4, r4, #9
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	0264      	lsls	r4, r4, #9
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	0a60      	lsrs	r0, r4, #9
 8000c74:	07d2      	lsls	r2, r2, #31
 8000c76:	4318      	orrs	r0, r3
 8000c78:	4310      	orrs	r0, r2
 8000c7a:	bd70      	pop	{r4, r5, r6, pc}
 8000c7c:	2b99      	cmp	r3, #153	; 0x99
 8000c7e:	dc19      	bgt.n	8000cb4 <__aeabi_i2f+0x70>
 8000c80:	2299      	movs	r2, #153	; 0x99
 8000c82:	1ad2      	subs	r2, r2, r3
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	dd29      	ble.n	8000cdc <__aeabi_i2f+0x98>
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	0022      	movs	r2, r4
 8000c8c:	4c14      	ldr	r4, [pc, #80]	; (8000ce0 <__aeabi_i2f+0x9c>)
 8000c8e:	4014      	ands	r4, r2
 8000c90:	0751      	lsls	r1, r2, #29
 8000c92:	d004      	beq.n	8000c9e <__aeabi_i2f+0x5a>
 8000c94:	210f      	movs	r1, #15
 8000c96:	400a      	ands	r2, r1
 8000c98:	2a04      	cmp	r2, #4
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_i2f+0x5a>
 8000c9c:	3404      	adds	r4, #4
 8000c9e:	0162      	lsls	r2, r4, #5
 8000ca0:	d413      	bmi.n	8000cca <__aeabi_i2f+0x86>
 8000ca2:	01a4      	lsls	r4, r4, #6
 8000ca4:	0a64      	lsrs	r4, r4, #9
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	002a      	movs	r2, r5
 8000caa:	e7e0      	b.n	8000c6e <__aeabi_i2f+0x2a>
 8000cac:	2200      	movs	r2, #0
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2400      	movs	r4, #0
 8000cb2:	e7dc      	b.n	8000c6e <__aeabi_i2f+0x2a>
 8000cb4:	2205      	movs	r2, #5
 8000cb6:	0021      	movs	r1, r4
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	40d1      	lsrs	r1, r2
 8000cbc:	22b9      	movs	r2, #185	; 0xb9
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	1e62      	subs	r2, r4, #1
 8000cc4:	4194      	sbcs	r4, r2
 8000cc6:	430c      	orrs	r4, r1
 8000cc8:	e7da      	b.n	8000c80 <__aeabi_i2f+0x3c>
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <__aeabi_i2f+0x9c>)
 8000ccc:	002a      	movs	r2, r5
 8000cce:	401c      	ands	r4, r3
 8000cd0:	239f      	movs	r3, #159	; 0x9f
 8000cd2:	01a4      	lsls	r4, r4, #6
 8000cd4:	1a1b      	subs	r3, r3, r0
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	e7c8      	b.n	8000c6e <__aeabi_i2f+0x2a>
 8000cdc:	0022      	movs	r2, r4
 8000cde:	e7d5      	b.n	8000c8c <__aeabi_i2f+0x48>
 8000ce0:	fbffffff 	.word	0xfbffffff

08000ce4 <__aeabi_ui2f>:
 8000ce4:	b510      	push	{r4, lr}
 8000ce6:	1e04      	subs	r4, r0, #0
 8000ce8:	d027      	beq.n	8000d3a <__aeabi_ui2f+0x56>
 8000cea:	f001 fbab 	bl	8002444 <__clzsi2>
 8000cee:	239e      	movs	r3, #158	; 0x9e
 8000cf0:	1a1b      	subs	r3, r3, r0
 8000cf2:	2b96      	cmp	r3, #150	; 0x96
 8000cf4:	dc0a      	bgt.n	8000d0c <__aeabi_ui2f+0x28>
 8000cf6:	2296      	movs	r2, #150	; 0x96
 8000cf8:	1ad2      	subs	r2, r2, r3
 8000cfa:	4094      	lsls	r4, r2
 8000cfc:	0264      	lsls	r4, r4, #9
 8000cfe:	0a64      	lsrs	r4, r4, #9
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	0264      	lsls	r4, r4, #9
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	0a60      	lsrs	r0, r4, #9
 8000d08:	4318      	orrs	r0, r3
 8000d0a:	bd10      	pop	{r4, pc}
 8000d0c:	2b99      	cmp	r3, #153	; 0x99
 8000d0e:	dc17      	bgt.n	8000d40 <__aeabi_ui2f+0x5c>
 8000d10:	2299      	movs	r2, #153	; 0x99
 8000d12:	1ad2      	subs	r2, r2, r3
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	dd27      	ble.n	8000d68 <__aeabi_ui2f+0x84>
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	0022      	movs	r2, r4
 8000d1c:	4c13      	ldr	r4, [pc, #76]	; (8000d6c <__aeabi_ui2f+0x88>)
 8000d1e:	4014      	ands	r4, r2
 8000d20:	0751      	lsls	r1, r2, #29
 8000d22:	d004      	beq.n	8000d2e <__aeabi_ui2f+0x4a>
 8000d24:	210f      	movs	r1, #15
 8000d26:	400a      	ands	r2, r1
 8000d28:	2a04      	cmp	r2, #4
 8000d2a:	d000      	beq.n	8000d2e <__aeabi_ui2f+0x4a>
 8000d2c:	3404      	adds	r4, #4
 8000d2e:	0162      	lsls	r2, r4, #5
 8000d30:	d412      	bmi.n	8000d58 <__aeabi_ui2f+0x74>
 8000d32:	01a4      	lsls	r4, r4, #6
 8000d34:	0a64      	lsrs	r4, r4, #9
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	e7e3      	b.n	8000d02 <__aeabi_ui2f+0x1e>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	e7e0      	b.n	8000d02 <__aeabi_ui2f+0x1e>
 8000d40:	22b9      	movs	r2, #185	; 0xb9
 8000d42:	0021      	movs	r1, r4
 8000d44:	1ad2      	subs	r2, r2, r3
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	1e51      	subs	r1, r2, #1
 8000d4c:	418a      	sbcs	r2, r1
 8000d4e:	2105      	movs	r1, #5
 8000d50:	1a09      	subs	r1, r1, r0
 8000d52:	40cc      	lsrs	r4, r1
 8000d54:	4314      	orrs	r4, r2
 8000d56:	e7db      	b.n	8000d10 <__aeabi_ui2f+0x2c>
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__aeabi_ui2f+0x88>)
 8000d5a:	401c      	ands	r4, r3
 8000d5c:	239f      	movs	r3, #159	; 0x9f
 8000d5e:	01a4      	lsls	r4, r4, #6
 8000d60:	1a1b      	subs	r3, r3, r0
 8000d62:	0a64      	lsrs	r4, r4, #9
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	e7cc      	b.n	8000d02 <__aeabi_ui2f+0x1e>
 8000d68:	0022      	movs	r2, r4
 8000d6a:	e7d7      	b.n	8000d1c <__aeabi_ui2f+0x38>
 8000d6c:	fbffffff 	.word	0xfbffffff

08000d70 <__aeabi_dadd>:
 8000d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d72:	4645      	mov	r5, r8
 8000d74:	46de      	mov	lr, fp
 8000d76:	4657      	mov	r7, sl
 8000d78:	464e      	mov	r6, r9
 8000d7a:	030c      	lsls	r4, r1, #12
 8000d7c:	b5e0      	push	{r5, r6, r7, lr}
 8000d7e:	004e      	lsls	r6, r1, #1
 8000d80:	0fc9      	lsrs	r1, r1, #31
 8000d82:	4688      	mov	r8, r1
 8000d84:	000d      	movs	r5, r1
 8000d86:	0a61      	lsrs	r1, r4, #9
 8000d88:	0f44      	lsrs	r4, r0, #29
 8000d8a:	430c      	orrs	r4, r1
 8000d8c:	00c7      	lsls	r7, r0, #3
 8000d8e:	0319      	lsls	r1, r3, #12
 8000d90:	0058      	lsls	r0, r3, #1
 8000d92:	0fdb      	lsrs	r3, r3, #31
 8000d94:	469b      	mov	fp, r3
 8000d96:	0a4b      	lsrs	r3, r1, #9
 8000d98:	0f51      	lsrs	r1, r2, #29
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	0d76      	lsrs	r6, r6, #21
 8000d9e:	0d40      	lsrs	r0, r0, #21
 8000da0:	0019      	movs	r1, r3
 8000da2:	00d2      	lsls	r2, r2, #3
 8000da4:	45d8      	cmp	r8, fp
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0x3a>
 8000da8:	e0ae      	b.n	8000f08 <__aeabi_dadd+0x198>
 8000daa:	1a35      	subs	r5, r6, r0
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	dc00      	bgt.n	8000db2 <__aeabi_dadd+0x42>
 8000db0:	e0f6      	b.n	8000fa0 <__aeabi_dadd+0x230>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d10f      	bne.n	8000dd6 <__aeabi_dadd+0x66>
 8000db6:	4313      	orrs	r3, r2
 8000db8:	d100      	bne.n	8000dbc <__aeabi_dadd+0x4c>
 8000dba:	e0db      	b.n	8000f74 <__aeabi_dadd+0x204>
 8000dbc:	1e6b      	subs	r3, r5, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_dadd+0x54>
 8000dc2:	e137      	b.n	8001034 <__aeabi_dadd+0x2c4>
 8000dc4:	1aba      	subs	r2, r7, r2
 8000dc6:	4297      	cmp	r7, r2
 8000dc8:	41bf      	sbcs	r7, r7
 8000dca:	1a64      	subs	r4, r4, r1
 8000dcc:	427f      	negs	r7, r7
 8000dce:	1be4      	subs	r4, r4, r7
 8000dd0:	2601      	movs	r6, #1
 8000dd2:	0017      	movs	r7, r2
 8000dd4:	e024      	b.n	8000e20 <__aeabi_dadd+0xb0>
 8000dd6:	4bc6      	ldr	r3, [pc, #792]	; (80010f0 <__aeabi_dadd+0x380>)
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d04d      	beq.n	8000e78 <__aeabi_dadd+0x108>
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	041b      	lsls	r3, r3, #16
 8000de0:	4319      	orrs	r1, r3
 8000de2:	2d38      	cmp	r5, #56	; 0x38
 8000de4:	dd00      	ble.n	8000de8 <__aeabi_dadd+0x78>
 8000de6:	e107      	b.n	8000ff8 <__aeabi_dadd+0x288>
 8000de8:	2d1f      	cmp	r5, #31
 8000dea:	dd00      	ble.n	8000dee <__aeabi_dadd+0x7e>
 8000dec:	e138      	b.n	8001060 <__aeabi_dadd+0x2f0>
 8000dee:	2020      	movs	r0, #32
 8000df0:	1b43      	subs	r3, r0, r5
 8000df2:	469a      	mov	sl, r3
 8000df4:	000b      	movs	r3, r1
 8000df6:	4650      	mov	r0, sl
 8000df8:	4083      	lsls	r3, r0
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	4648      	mov	r0, r9
 8000e00:	40eb      	lsrs	r3, r5
 8000e02:	4318      	orrs	r0, r3
 8000e04:	0003      	movs	r3, r0
 8000e06:	4650      	mov	r0, sl
 8000e08:	4082      	lsls	r2, r0
 8000e0a:	1e50      	subs	r0, r2, #1
 8000e0c:	4182      	sbcs	r2, r0
 8000e0e:	40e9      	lsrs	r1, r5
 8000e10:	431a      	orrs	r2, r3
 8000e12:	1aba      	subs	r2, r7, r2
 8000e14:	1a61      	subs	r1, r4, r1
 8000e16:	4297      	cmp	r7, r2
 8000e18:	41a4      	sbcs	r4, r4
 8000e1a:	0017      	movs	r7, r2
 8000e1c:	4264      	negs	r4, r4
 8000e1e:	1b0c      	subs	r4, r1, r4
 8000e20:	0223      	lsls	r3, r4, #8
 8000e22:	d562      	bpl.n	8000eea <__aeabi_dadd+0x17a>
 8000e24:	0264      	lsls	r4, r4, #9
 8000e26:	0a65      	lsrs	r5, r4, #9
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_dadd+0xbe>
 8000e2c:	e0df      	b.n	8000fee <__aeabi_dadd+0x27e>
 8000e2e:	0028      	movs	r0, r5
 8000e30:	f001 fb08 	bl	8002444 <__clzsi2>
 8000e34:	0003      	movs	r3, r0
 8000e36:	3b08      	subs	r3, #8
 8000e38:	2b1f      	cmp	r3, #31
 8000e3a:	dd00      	ble.n	8000e3e <__aeabi_dadd+0xce>
 8000e3c:	e0d2      	b.n	8000fe4 <__aeabi_dadd+0x274>
 8000e3e:	2220      	movs	r2, #32
 8000e40:	003c      	movs	r4, r7
 8000e42:	1ad2      	subs	r2, r2, r3
 8000e44:	409d      	lsls	r5, r3
 8000e46:	40d4      	lsrs	r4, r2
 8000e48:	409f      	lsls	r7, r3
 8000e4a:	4325      	orrs	r5, r4
 8000e4c:	429e      	cmp	r6, r3
 8000e4e:	dd00      	ble.n	8000e52 <__aeabi_dadd+0xe2>
 8000e50:	e0c4      	b.n	8000fdc <__aeabi_dadd+0x26c>
 8000e52:	1b9e      	subs	r6, r3, r6
 8000e54:	1c73      	adds	r3, r6, #1
 8000e56:	2b1f      	cmp	r3, #31
 8000e58:	dd00      	ble.n	8000e5c <__aeabi_dadd+0xec>
 8000e5a:	e0f1      	b.n	8001040 <__aeabi_dadd+0x2d0>
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	0038      	movs	r0, r7
 8000e60:	0029      	movs	r1, r5
 8000e62:	1ad2      	subs	r2, r2, r3
 8000e64:	40d8      	lsrs	r0, r3
 8000e66:	4091      	lsls	r1, r2
 8000e68:	4097      	lsls	r7, r2
 8000e6a:	002c      	movs	r4, r5
 8000e6c:	4301      	orrs	r1, r0
 8000e6e:	1e78      	subs	r0, r7, #1
 8000e70:	4187      	sbcs	r7, r0
 8000e72:	40dc      	lsrs	r4, r3
 8000e74:	2600      	movs	r6, #0
 8000e76:	430f      	orrs	r7, r1
 8000e78:	077b      	lsls	r3, r7, #29
 8000e7a:	d009      	beq.n	8000e90 <__aeabi_dadd+0x120>
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	403b      	ands	r3, r7
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d005      	beq.n	8000e90 <__aeabi_dadd+0x120>
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	42bb      	cmp	r3, r7
 8000e88:	41bf      	sbcs	r7, r7
 8000e8a:	427f      	negs	r7, r7
 8000e8c:	19e4      	adds	r4, r4, r7
 8000e8e:	001f      	movs	r7, r3
 8000e90:	0223      	lsls	r3, r4, #8
 8000e92:	d52c      	bpl.n	8000eee <__aeabi_dadd+0x17e>
 8000e94:	4b96      	ldr	r3, [pc, #600]	; (80010f0 <__aeabi_dadd+0x380>)
 8000e96:	3601      	adds	r6, #1
 8000e98:	429e      	cmp	r6, r3
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_dadd+0x12e>
 8000e9c:	e09a      	b.n	8000fd4 <__aeabi_dadd+0x264>
 8000e9e:	4645      	mov	r5, r8
 8000ea0:	4b94      	ldr	r3, [pc, #592]	; (80010f4 <__aeabi_dadd+0x384>)
 8000ea2:	08ff      	lsrs	r7, r7, #3
 8000ea4:	401c      	ands	r4, r3
 8000ea6:	0760      	lsls	r0, r4, #29
 8000ea8:	0576      	lsls	r6, r6, #21
 8000eaa:	0264      	lsls	r4, r4, #9
 8000eac:	4307      	orrs	r7, r0
 8000eae:	0b24      	lsrs	r4, r4, #12
 8000eb0:	0d76      	lsrs	r6, r6, #21
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	0324      	lsls	r4, r4, #12
 8000eb6:	0b23      	lsrs	r3, r4, #12
 8000eb8:	0d0c      	lsrs	r4, r1, #20
 8000eba:	4a8f      	ldr	r2, [pc, #572]	; (80010f8 <__aeabi_dadd+0x388>)
 8000ebc:	0524      	lsls	r4, r4, #20
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	4014      	ands	r4, r2
 8000ec2:	0533      	lsls	r3, r6, #20
 8000ec4:	4323      	orrs	r3, r4
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	07ed      	lsls	r5, r5, #31
 8000eca:	085b      	lsrs	r3, r3, #1
 8000ecc:	432b      	orrs	r3, r5
 8000ece:	0038      	movs	r0, r7
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	bc3c      	pop	{r2, r3, r4, r5}
 8000ed4:	4690      	mov	r8, r2
 8000ed6:	4699      	mov	r9, r3
 8000ed8:	46a2      	mov	sl, r4
 8000eda:	46ab      	mov	fp, r5
 8000edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ede:	4664      	mov	r4, ip
 8000ee0:	4304      	orrs	r4, r0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dadd+0x176>
 8000ee4:	e211      	b.n	800130a <__aeabi_dadd+0x59a>
 8000ee6:	0004      	movs	r4, r0
 8000ee8:	4667      	mov	r7, ip
 8000eea:	077b      	lsls	r3, r7, #29
 8000eec:	d1c6      	bne.n	8000e7c <__aeabi_dadd+0x10c>
 8000eee:	4645      	mov	r5, r8
 8000ef0:	0760      	lsls	r0, r4, #29
 8000ef2:	08ff      	lsrs	r7, r7, #3
 8000ef4:	4307      	orrs	r7, r0
 8000ef6:	08e4      	lsrs	r4, r4, #3
 8000ef8:	4b7d      	ldr	r3, [pc, #500]	; (80010f0 <__aeabi_dadd+0x380>)
 8000efa:	429e      	cmp	r6, r3
 8000efc:	d030      	beq.n	8000f60 <__aeabi_dadd+0x1f0>
 8000efe:	0324      	lsls	r4, r4, #12
 8000f00:	0576      	lsls	r6, r6, #21
 8000f02:	0b24      	lsrs	r4, r4, #12
 8000f04:	0d76      	lsrs	r6, r6, #21
 8000f06:	e7d4      	b.n	8000eb2 <__aeabi_dadd+0x142>
 8000f08:	1a33      	subs	r3, r6, r0
 8000f0a:	469a      	mov	sl, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	dd78      	ble.n	8001002 <__aeabi_dadd+0x292>
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d031      	beq.n	8000f78 <__aeabi_dadd+0x208>
 8000f14:	4876      	ldr	r0, [pc, #472]	; (80010f0 <__aeabi_dadd+0x380>)
 8000f16:	4286      	cmp	r6, r0
 8000f18:	d0ae      	beq.n	8000e78 <__aeabi_dadd+0x108>
 8000f1a:	2080      	movs	r0, #128	; 0x80
 8000f1c:	0400      	lsls	r0, r0, #16
 8000f1e:	4301      	orrs	r1, r0
 8000f20:	4653      	mov	r3, sl
 8000f22:	2b38      	cmp	r3, #56	; 0x38
 8000f24:	dc00      	bgt.n	8000f28 <__aeabi_dadd+0x1b8>
 8000f26:	e0e9      	b.n	80010fc <__aeabi_dadd+0x38c>
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	1e51      	subs	r1, r2, #1
 8000f2c:	418a      	sbcs	r2, r1
 8000f2e:	2100      	movs	r1, #0
 8000f30:	19d2      	adds	r2, r2, r7
 8000f32:	42ba      	cmp	r2, r7
 8000f34:	41bf      	sbcs	r7, r7
 8000f36:	1909      	adds	r1, r1, r4
 8000f38:	427c      	negs	r4, r7
 8000f3a:	0017      	movs	r7, r2
 8000f3c:	190c      	adds	r4, r1, r4
 8000f3e:	0223      	lsls	r3, r4, #8
 8000f40:	d5d3      	bpl.n	8000eea <__aeabi_dadd+0x17a>
 8000f42:	4b6b      	ldr	r3, [pc, #428]	; (80010f0 <__aeabi_dadd+0x380>)
 8000f44:	3601      	adds	r6, #1
 8000f46:	429e      	cmp	r6, r3
 8000f48:	d100      	bne.n	8000f4c <__aeabi_dadd+0x1dc>
 8000f4a:	e13a      	b.n	80011c2 <__aeabi_dadd+0x452>
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	4b69      	ldr	r3, [pc, #420]	; (80010f4 <__aeabi_dadd+0x384>)
 8000f50:	401c      	ands	r4, r3
 8000f52:	087b      	lsrs	r3, r7, #1
 8000f54:	4007      	ands	r7, r0
 8000f56:	431f      	orrs	r7, r3
 8000f58:	07e0      	lsls	r0, r4, #31
 8000f5a:	4307      	orrs	r7, r0
 8000f5c:	0864      	lsrs	r4, r4, #1
 8000f5e:	e78b      	b.n	8000e78 <__aeabi_dadd+0x108>
 8000f60:	0023      	movs	r3, r4
 8000f62:	433b      	orrs	r3, r7
 8000f64:	d100      	bne.n	8000f68 <__aeabi_dadd+0x1f8>
 8000f66:	e1cb      	b.n	8001300 <__aeabi_dadd+0x590>
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	0312      	lsls	r2, r2, #12
 8000f6c:	4314      	orrs	r4, r2
 8000f6e:	0324      	lsls	r4, r4, #12
 8000f70:	0b24      	lsrs	r4, r4, #12
 8000f72:	e79e      	b.n	8000eb2 <__aeabi_dadd+0x142>
 8000f74:	002e      	movs	r6, r5
 8000f76:	e77f      	b.n	8000e78 <__aeabi_dadd+0x108>
 8000f78:	0008      	movs	r0, r1
 8000f7a:	4310      	orrs	r0, r2
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dadd+0x210>
 8000f7e:	e0b4      	b.n	80010ea <__aeabi_dadd+0x37a>
 8000f80:	1e58      	subs	r0, r3, #1
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d000      	beq.n	8000f88 <__aeabi_dadd+0x218>
 8000f86:	e0de      	b.n	8001146 <__aeabi_dadd+0x3d6>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	42ba      	cmp	r2, r7
 8000f8c:	419b      	sbcs	r3, r3
 8000f8e:	1864      	adds	r4, r4, r1
 8000f90:	425b      	negs	r3, r3
 8000f92:	18e4      	adds	r4, r4, r3
 8000f94:	0017      	movs	r7, r2
 8000f96:	2601      	movs	r6, #1
 8000f98:	0223      	lsls	r3, r4, #8
 8000f9a:	d5a6      	bpl.n	8000eea <__aeabi_dadd+0x17a>
 8000f9c:	2602      	movs	r6, #2
 8000f9e:	e7d5      	b.n	8000f4c <__aeabi_dadd+0x1dc>
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d16e      	bne.n	8001082 <__aeabi_dadd+0x312>
 8000fa4:	1c70      	adds	r0, r6, #1
 8000fa6:	0540      	lsls	r0, r0, #21
 8000fa8:	0d40      	lsrs	r0, r0, #21
 8000faa:	2801      	cmp	r0, #1
 8000fac:	dc00      	bgt.n	8000fb0 <__aeabi_dadd+0x240>
 8000fae:	e0f9      	b.n	80011a4 <__aeabi_dadd+0x434>
 8000fb0:	1ab8      	subs	r0, r7, r2
 8000fb2:	4684      	mov	ip, r0
 8000fb4:	4287      	cmp	r7, r0
 8000fb6:	4180      	sbcs	r0, r0
 8000fb8:	1ae5      	subs	r5, r4, r3
 8000fba:	4240      	negs	r0, r0
 8000fbc:	1a2d      	subs	r5, r5, r0
 8000fbe:	0228      	lsls	r0, r5, #8
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_dadd+0x254>
 8000fc2:	e089      	b.n	80010d8 <__aeabi_dadd+0x368>
 8000fc4:	1bd7      	subs	r7, r2, r7
 8000fc6:	42ba      	cmp	r2, r7
 8000fc8:	4192      	sbcs	r2, r2
 8000fca:	1b1c      	subs	r4, r3, r4
 8000fcc:	4252      	negs	r2, r2
 8000fce:	1aa5      	subs	r5, r4, r2
 8000fd0:	46d8      	mov	r8, fp
 8000fd2:	e729      	b.n	8000e28 <__aeabi_dadd+0xb8>
 8000fd4:	4645      	mov	r5, r8
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	2700      	movs	r7, #0
 8000fda:	e76a      	b.n	8000eb2 <__aeabi_dadd+0x142>
 8000fdc:	4c45      	ldr	r4, [pc, #276]	; (80010f4 <__aeabi_dadd+0x384>)
 8000fde:	1af6      	subs	r6, r6, r3
 8000fe0:	402c      	ands	r4, r5
 8000fe2:	e749      	b.n	8000e78 <__aeabi_dadd+0x108>
 8000fe4:	003d      	movs	r5, r7
 8000fe6:	3828      	subs	r0, #40	; 0x28
 8000fe8:	4085      	lsls	r5, r0
 8000fea:	2700      	movs	r7, #0
 8000fec:	e72e      	b.n	8000e4c <__aeabi_dadd+0xdc>
 8000fee:	0038      	movs	r0, r7
 8000ff0:	f001 fa28 	bl	8002444 <__clzsi2>
 8000ff4:	3020      	adds	r0, #32
 8000ff6:	e71d      	b.n	8000e34 <__aeabi_dadd+0xc4>
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	1e51      	subs	r1, r2, #1
 8000ffc:	418a      	sbcs	r2, r1
 8000ffe:	2100      	movs	r1, #0
 8001000:	e707      	b.n	8000e12 <__aeabi_dadd+0xa2>
 8001002:	2b00      	cmp	r3, #0
 8001004:	d000      	beq.n	8001008 <__aeabi_dadd+0x298>
 8001006:	e0f3      	b.n	80011f0 <__aeabi_dadd+0x480>
 8001008:	1c70      	adds	r0, r6, #1
 800100a:	0543      	lsls	r3, r0, #21
 800100c:	0d5b      	lsrs	r3, r3, #21
 800100e:	2b01      	cmp	r3, #1
 8001010:	dc00      	bgt.n	8001014 <__aeabi_dadd+0x2a4>
 8001012:	e0ad      	b.n	8001170 <__aeabi_dadd+0x400>
 8001014:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <__aeabi_dadd+0x380>)
 8001016:	4298      	cmp	r0, r3
 8001018:	d100      	bne.n	800101c <__aeabi_dadd+0x2ac>
 800101a:	e0d1      	b.n	80011c0 <__aeabi_dadd+0x450>
 800101c:	18ba      	adds	r2, r7, r2
 800101e:	42ba      	cmp	r2, r7
 8001020:	41bf      	sbcs	r7, r7
 8001022:	1864      	adds	r4, r4, r1
 8001024:	427f      	negs	r7, r7
 8001026:	19e4      	adds	r4, r4, r7
 8001028:	07e7      	lsls	r7, r4, #31
 800102a:	0852      	lsrs	r2, r2, #1
 800102c:	4317      	orrs	r7, r2
 800102e:	0864      	lsrs	r4, r4, #1
 8001030:	0006      	movs	r6, r0
 8001032:	e721      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001034:	482e      	ldr	r0, [pc, #184]	; (80010f0 <__aeabi_dadd+0x380>)
 8001036:	4285      	cmp	r5, r0
 8001038:	d100      	bne.n	800103c <__aeabi_dadd+0x2cc>
 800103a:	e093      	b.n	8001164 <__aeabi_dadd+0x3f4>
 800103c:	001d      	movs	r5, r3
 800103e:	e6d0      	b.n	8000de2 <__aeabi_dadd+0x72>
 8001040:	0029      	movs	r1, r5
 8001042:	3e1f      	subs	r6, #31
 8001044:	40f1      	lsrs	r1, r6
 8001046:	2b20      	cmp	r3, #32
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x2dc>
 800104a:	e08d      	b.n	8001168 <__aeabi_dadd+0x3f8>
 800104c:	2240      	movs	r2, #64	; 0x40
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	409d      	lsls	r5, r3
 8001052:	432f      	orrs	r7, r5
 8001054:	1e7d      	subs	r5, r7, #1
 8001056:	41af      	sbcs	r7, r5
 8001058:	2400      	movs	r4, #0
 800105a:	430f      	orrs	r7, r1
 800105c:	2600      	movs	r6, #0
 800105e:	e744      	b.n	8000eea <__aeabi_dadd+0x17a>
 8001060:	002b      	movs	r3, r5
 8001062:	0008      	movs	r0, r1
 8001064:	3b20      	subs	r3, #32
 8001066:	40d8      	lsrs	r0, r3
 8001068:	0003      	movs	r3, r0
 800106a:	2d20      	cmp	r5, #32
 800106c:	d100      	bne.n	8001070 <__aeabi_dadd+0x300>
 800106e:	e07d      	b.n	800116c <__aeabi_dadd+0x3fc>
 8001070:	2040      	movs	r0, #64	; 0x40
 8001072:	1b45      	subs	r5, r0, r5
 8001074:	40a9      	lsls	r1, r5
 8001076:	430a      	orrs	r2, r1
 8001078:	1e51      	subs	r1, r2, #1
 800107a:	418a      	sbcs	r2, r1
 800107c:	2100      	movs	r1, #0
 800107e:	431a      	orrs	r2, r3
 8001080:	e6c7      	b.n	8000e12 <__aeabi_dadd+0xa2>
 8001082:	2e00      	cmp	r6, #0
 8001084:	d050      	beq.n	8001128 <__aeabi_dadd+0x3b8>
 8001086:	4e1a      	ldr	r6, [pc, #104]	; (80010f0 <__aeabi_dadd+0x380>)
 8001088:	42b0      	cmp	r0, r6
 800108a:	d057      	beq.n	800113c <__aeabi_dadd+0x3cc>
 800108c:	2680      	movs	r6, #128	; 0x80
 800108e:	426b      	negs	r3, r5
 8001090:	4699      	mov	r9, r3
 8001092:	0436      	lsls	r6, r6, #16
 8001094:	4334      	orrs	r4, r6
 8001096:	464b      	mov	r3, r9
 8001098:	2b38      	cmp	r3, #56	; 0x38
 800109a:	dd00      	ble.n	800109e <__aeabi_dadd+0x32e>
 800109c:	e0d6      	b.n	800124c <__aeabi_dadd+0x4dc>
 800109e:	2b1f      	cmp	r3, #31
 80010a0:	dd00      	ble.n	80010a4 <__aeabi_dadd+0x334>
 80010a2:	e135      	b.n	8001310 <__aeabi_dadd+0x5a0>
 80010a4:	2620      	movs	r6, #32
 80010a6:	1af5      	subs	r5, r6, r3
 80010a8:	0026      	movs	r6, r4
 80010aa:	40ae      	lsls	r6, r5
 80010ac:	46b2      	mov	sl, r6
 80010ae:	003e      	movs	r6, r7
 80010b0:	40de      	lsrs	r6, r3
 80010b2:	46ac      	mov	ip, r5
 80010b4:	0035      	movs	r5, r6
 80010b6:	4656      	mov	r6, sl
 80010b8:	432e      	orrs	r6, r5
 80010ba:	4665      	mov	r5, ip
 80010bc:	40af      	lsls	r7, r5
 80010be:	1e7d      	subs	r5, r7, #1
 80010c0:	41af      	sbcs	r7, r5
 80010c2:	40dc      	lsrs	r4, r3
 80010c4:	4337      	orrs	r7, r6
 80010c6:	1bd7      	subs	r7, r2, r7
 80010c8:	42ba      	cmp	r2, r7
 80010ca:	4192      	sbcs	r2, r2
 80010cc:	1b0c      	subs	r4, r1, r4
 80010ce:	4252      	negs	r2, r2
 80010d0:	1aa4      	subs	r4, r4, r2
 80010d2:	0006      	movs	r6, r0
 80010d4:	46d8      	mov	r8, fp
 80010d6:	e6a3      	b.n	8000e20 <__aeabi_dadd+0xb0>
 80010d8:	4664      	mov	r4, ip
 80010da:	4667      	mov	r7, ip
 80010dc:	432c      	orrs	r4, r5
 80010de:	d000      	beq.n	80010e2 <__aeabi_dadd+0x372>
 80010e0:	e6a2      	b.n	8000e28 <__aeabi_dadd+0xb8>
 80010e2:	2500      	movs	r5, #0
 80010e4:	2600      	movs	r6, #0
 80010e6:	2700      	movs	r7, #0
 80010e8:	e706      	b.n	8000ef8 <__aeabi_dadd+0x188>
 80010ea:	001e      	movs	r6, r3
 80010ec:	e6c4      	b.n	8000e78 <__aeabi_dadd+0x108>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	000007ff 	.word	0x000007ff
 80010f4:	ff7fffff 	.word	0xff7fffff
 80010f8:	800fffff 	.word	0x800fffff
 80010fc:	2b1f      	cmp	r3, #31
 80010fe:	dc63      	bgt.n	80011c8 <__aeabi_dadd+0x458>
 8001100:	2020      	movs	r0, #32
 8001102:	1ac3      	subs	r3, r0, r3
 8001104:	0008      	movs	r0, r1
 8001106:	4098      	lsls	r0, r3
 8001108:	469c      	mov	ip, r3
 800110a:	4683      	mov	fp, r0
 800110c:	4653      	mov	r3, sl
 800110e:	0010      	movs	r0, r2
 8001110:	40d8      	lsrs	r0, r3
 8001112:	0003      	movs	r3, r0
 8001114:	4658      	mov	r0, fp
 8001116:	4318      	orrs	r0, r3
 8001118:	4663      	mov	r3, ip
 800111a:	409a      	lsls	r2, r3
 800111c:	1e53      	subs	r3, r2, #1
 800111e:	419a      	sbcs	r2, r3
 8001120:	4653      	mov	r3, sl
 8001122:	4302      	orrs	r2, r0
 8001124:	40d9      	lsrs	r1, r3
 8001126:	e703      	b.n	8000f30 <__aeabi_dadd+0x1c0>
 8001128:	0026      	movs	r6, r4
 800112a:	433e      	orrs	r6, r7
 800112c:	d006      	beq.n	800113c <__aeabi_dadd+0x3cc>
 800112e:	43eb      	mvns	r3, r5
 8001130:	4699      	mov	r9, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0c7      	beq.n	80010c6 <__aeabi_dadd+0x356>
 8001136:	4e94      	ldr	r6, [pc, #592]	; (8001388 <__aeabi_dadd+0x618>)
 8001138:	42b0      	cmp	r0, r6
 800113a:	d1ac      	bne.n	8001096 <__aeabi_dadd+0x326>
 800113c:	000c      	movs	r4, r1
 800113e:	0017      	movs	r7, r2
 8001140:	0006      	movs	r6, r0
 8001142:	46d8      	mov	r8, fp
 8001144:	e698      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001146:	4b90      	ldr	r3, [pc, #576]	; (8001388 <__aeabi_dadd+0x618>)
 8001148:	459a      	cmp	sl, r3
 800114a:	d00b      	beq.n	8001164 <__aeabi_dadd+0x3f4>
 800114c:	4682      	mov	sl, r0
 800114e:	e6e7      	b.n	8000f20 <__aeabi_dadd+0x1b0>
 8001150:	2800      	cmp	r0, #0
 8001152:	d000      	beq.n	8001156 <__aeabi_dadd+0x3e6>
 8001154:	e09e      	b.n	8001294 <__aeabi_dadd+0x524>
 8001156:	0018      	movs	r0, r3
 8001158:	4310      	orrs	r0, r2
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x3ee>
 800115c:	e0e9      	b.n	8001332 <__aeabi_dadd+0x5c2>
 800115e:	001c      	movs	r4, r3
 8001160:	0017      	movs	r7, r2
 8001162:	46d8      	mov	r8, fp
 8001164:	4e88      	ldr	r6, [pc, #544]	; (8001388 <__aeabi_dadd+0x618>)
 8001166:	e687      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001168:	2500      	movs	r5, #0
 800116a:	e772      	b.n	8001052 <__aeabi_dadd+0x2e2>
 800116c:	2100      	movs	r1, #0
 800116e:	e782      	b.n	8001076 <__aeabi_dadd+0x306>
 8001170:	0023      	movs	r3, r4
 8001172:	433b      	orrs	r3, r7
 8001174:	2e00      	cmp	r6, #0
 8001176:	d000      	beq.n	800117a <__aeabi_dadd+0x40a>
 8001178:	e0ab      	b.n	80012d2 <__aeabi_dadd+0x562>
 800117a:	2b00      	cmp	r3, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_dadd+0x410>
 800117e:	e0e7      	b.n	8001350 <__aeabi_dadd+0x5e0>
 8001180:	000b      	movs	r3, r1
 8001182:	4313      	orrs	r3, r2
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x418>
 8001186:	e677      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001188:	18ba      	adds	r2, r7, r2
 800118a:	42ba      	cmp	r2, r7
 800118c:	41bf      	sbcs	r7, r7
 800118e:	1864      	adds	r4, r4, r1
 8001190:	427f      	negs	r7, r7
 8001192:	19e4      	adds	r4, r4, r7
 8001194:	0223      	lsls	r3, r4, #8
 8001196:	d400      	bmi.n	800119a <__aeabi_dadd+0x42a>
 8001198:	e0f2      	b.n	8001380 <__aeabi_dadd+0x610>
 800119a:	4b7c      	ldr	r3, [pc, #496]	; (800138c <__aeabi_dadd+0x61c>)
 800119c:	0017      	movs	r7, r2
 800119e:	401c      	ands	r4, r3
 80011a0:	0006      	movs	r6, r0
 80011a2:	e669      	b.n	8000e78 <__aeabi_dadd+0x108>
 80011a4:	0020      	movs	r0, r4
 80011a6:	4338      	orrs	r0, r7
 80011a8:	2e00      	cmp	r6, #0
 80011aa:	d1d1      	bne.n	8001150 <__aeabi_dadd+0x3e0>
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d15b      	bne.n	8001268 <__aeabi_dadd+0x4f8>
 80011b0:	001c      	movs	r4, r3
 80011b2:	4314      	orrs	r4, r2
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x448>
 80011b6:	e0a8      	b.n	800130a <__aeabi_dadd+0x59a>
 80011b8:	001c      	movs	r4, r3
 80011ba:	0017      	movs	r7, r2
 80011bc:	46d8      	mov	r8, fp
 80011be:	e65b      	b.n	8000e78 <__aeabi_dadd+0x108>
 80011c0:	0006      	movs	r6, r0
 80011c2:	2400      	movs	r4, #0
 80011c4:	2700      	movs	r7, #0
 80011c6:	e697      	b.n	8000ef8 <__aeabi_dadd+0x188>
 80011c8:	4650      	mov	r0, sl
 80011ca:	000b      	movs	r3, r1
 80011cc:	3820      	subs	r0, #32
 80011ce:	40c3      	lsrs	r3, r0
 80011d0:	4699      	mov	r9, r3
 80011d2:	4653      	mov	r3, sl
 80011d4:	2b20      	cmp	r3, #32
 80011d6:	d100      	bne.n	80011da <__aeabi_dadd+0x46a>
 80011d8:	e095      	b.n	8001306 <__aeabi_dadd+0x596>
 80011da:	2340      	movs	r3, #64	; 0x40
 80011dc:	4650      	mov	r0, sl
 80011de:	1a1b      	subs	r3, r3, r0
 80011e0:	4099      	lsls	r1, r3
 80011e2:	430a      	orrs	r2, r1
 80011e4:	1e51      	subs	r1, r2, #1
 80011e6:	418a      	sbcs	r2, r1
 80011e8:	464b      	mov	r3, r9
 80011ea:	2100      	movs	r1, #0
 80011ec:	431a      	orrs	r2, r3
 80011ee:	e69f      	b.n	8000f30 <__aeabi_dadd+0x1c0>
 80011f0:	2e00      	cmp	r6, #0
 80011f2:	d130      	bne.n	8001256 <__aeabi_dadd+0x4e6>
 80011f4:	0026      	movs	r6, r4
 80011f6:	433e      	orrs	r6, r7
 80011f8:	d067      	beq.n	80012ca <__aeabi_dadd+0x55a>
 80011fa:	43db      	mvns	r3, r3
 80011fc:	469a      	mov	sl, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d01c      	beq.n	800123c <__aeabi_dadd+0x4cc>
 8001202:	4e61      	ldr	r6, [pc, #388]	; (8001388 <__aeabi_dadd+0x618>)
 8001204:	42b0      	cmp	r0, r6
 8001206:	d060      	beq.n	80012ca <__aeabi_dadd+0x55a>
 8001208:	4653      	mov	r3, sl
 800120a:	2b38      	cmp	r3, #56	; 0x38
 800120c:	dd00      	ble.n	8001210 <__aeabi_dadd+0x4a0>
 800120e:	e096      	b.n	800133e <__aeabi_dadd+0x5ce>
 8001210:	2b1f      	cmp	r3, #31
 8001212:	dd00      	ble.n	8001216 <__aeabi_dadd+0x4a6>
 8001214:	e09f      	b.n	8001356 <__aeabi_dadd+0x5e6>
 8001216:	2620      	movs	r6, #32
 8001218:	1af3      	subs	r3, r6, r3
 800121a:	0026      	movs	r6, r4
 800121c:	409e      	lsls	r6, r3
 800121e:	469c      	mov	ip, r3
 8001220:	46b3      	mov	fp, r6
 8001222:	4653      	mov	r3, sl
 8001224:	003e      	movs	r6, r7
 8001226:	40de      	lsrs	r6, r3
 8001228:	0033      	movs	r3, r6
 800122a:	465e      	mov	r6, fp
 800122c:	431e      	orrs	r6, r3
 800122e:	4663      	mov	r3, ip
 8001230:	409f      	lsls	r7, r3
 8001232:	1e7b      	subs	r3, r7, #1
 8001234:	419f      	sbcs	r7, r3
 8001236:	4653      	mov	r3, sl
 8001238:	40dc      	lsrs	r4, r3
 800123a:	4337      	orrs	r7, r6
 800123c:	18bf      	adds	r7, r7, r2
 800123e:	4297      	cmp	r7, r2
 8001240:	4192      	sbcs	r2, r2
 8001242:	1864      	adds	r4, r4, r1
 8001244:	4252      	negs	r2, r2
 8001246:	18a4      	adds	r4, r4, r2
 8001248:	0006      	movs	r6, r0
 800124a:	e678      	b.n	8000f3e <__aeabi_dadd+0x1ce>
 800124c:	4327      	orrs	r7, r4
 800124e:	1e7c      	subs	r4, r7, #1
 8001250:	41a7      	sbcs	r7, r4
 8001252:	2400      	movs	r4, #0
 8001254:	e737      	b.n	80010c6 <__aeabi_dadd+0x356>
 8001256:	4e4c      	ldr	r6, [pc, #304]	; (8001388 <__aeabi_dadd+0x618>)
 8001258:	42b0      	cmp	r0, r6
 800125a:	d036      	beq.n	80012ca <__aeabi_dadd+0x55a>
 800125c:	2680      	movs	r6, #128	; 0x80
 800125e:	425b      	negs	r3, r3
 8001260:	0436      	lsls	r6, r6, #16
 8001262:	469a      	mov	sl, r3
 8001264:	4334      	orrs	r4, r6
 8001266:	e7cf      	b.n	8001208 <__aeabi_dadd+0x498>
 8001268:	0018      	movs	r0, r3
 800126a:	4310      	orrs	r0, r2
 800126c:	d100      	bne.n	8001270 <__aeabi_dadd+0x500>
 800126e:	e603      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001270:	1ab8      	subs	r0, r7, r2
 8001272:	4684      	mov	ip, r0
 8001274:	4567      	cmp	r7, ip
 8001276:	41ad      	sbcs	r5, r5
 8001278:	1ae0      	subs	r0, r4, r3
 800127a:	426d      	negs	r5, r5
 800127c:	1b40      	subs	r0, r0, r5
 800127e:	0205      	lsls	r5, r0, #8
 8001280:	d400      	bmi.n	8001284 <__aeabi_dadd+0x514>
 8001282:	e62c      	b.n	8000ede <__aeabi_dadd+0x16e>
 8001284:	1bd7      	subs	r7, r2, r7
 8001286:	42ba      	cmp	r2, r7
 8001288:	4192      	sbcs	r2, r2
 800128a:	1b1c      	subs	r4, r3, r4
 800128c:	4252      	negs	r2, r2
 800128e:	1aa4      	subs	r4, r4, r2
 8001290:	46d8      	mov	r8, fp
 8001292:	e5f1      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001294:	0018      	movs	r0, r3
 8001296:	4310      	orrs	r0, r2
 8001298:	d100      	bne.n	800129c <__aeabi_dadd+0x52c>
 800129a:	e763      	b.n	8001164 <__aeabi_dadd+0x3f4>
 800129c:	08f8      	lsrs	r0, r7, #3
 800129e:	0767      	lsls	r7, r4, #29
 80012a0:	4307      	orrs	r7, r0
 80012a2:	2080      	movs	r0, #128	; 0x80
 80012a4:	08e4      	lsrs	r4, r4, #3
 80012a6:	0300      	lsls	r0, r0, #12
 80012a8:	4204      	tst	r4, r0
 80012aa:	d008      	beq.n	80012be <__aeabi_dadd+0x54e>
 80012ac:	08dd      	lsrs	r5, r3, #3
 80012ae:	4205      	tst	r5, r0
 80012b0:	d105      	bne.n	80012be <__aeabi_dadd+0x54e>
 80012b2:	08d2      	lsrs	r2, r2, #3
 80012b4:	0759      	lsls	r1, r3, #29
 80012b6:	4311      	orrs	r1, r2
 80012b8:	000f      	movs	r7, r1
 80012ba:	002c      	movs	r4, r5
 80012bc:	46d8      	mov	r8, fp
 80012be:	0f7b      	lsrs	r3, r7, #29
 80012c0:	00e4      	lsls	r4, r4, #3
 80012c2:	431c      	orrs	r4, r3
 80012c4:	00ff      	lsls	r7, r7, #3
 80012c6:	4e30      	ldr	r6, [pc, #192]	; (8001388 <__aeabi_dadd+0x618>)
 80012c8:	e5d6      	b.n	8000e78 <__aeabi_dadd+0x108>
 80012ca:	000c      	movs	r4, r1
 80012cc:	0017      	movs	r7, r2
 80012ce:	0006      	movs	r6, r0
 80012d0:	e5d2      	b.n	8000e78 <__aeabi_dadd+0x108>
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d038      	beq.n	8001348 <__aeabi_dadd+0x5d8>
 80012d6:	000b      	movs	r3, r1
 80012d8:	4313      	orrs	r3, r2
 80012da:	d100      	bne.n	80012de <__aeabi_dadd+0x56e>
 80012dc:	e742      	b.n	8001164 <__aeabi_dadd+0x3f4>
 80012de:	08f8      	lsrs	r0, r7, #3
 80012e0:	0767      	lsls	r7, r4, #29
 80012e2:	4307      	orrs	r7, r0
 80012e4:	2080      	movs	r0, #128	; 0x80
 80012e6:	08e4      	lsrs	r4, r4, #3
 80012e8:	0300      	lsls	r0, r0, #12
 80012ea:	4204      	tst	r4, r0
 80012ec:	d0e7      	beq.n	80012be <__aeabi_dadd+0x54e>
 80012ee:	08cb      	lsrs	r3, r1, #3
 80012f0:	4203      	tst	r3, r0
 80012f2:	d1e4      	bne.n	80012be <__aeabi_dadd+0x54e>
 80012f4:	08d2      	lsrs	r2, r2, #3
 80012f6:	0749      	lsls	r1, r1, #29
 80012f8:	4311      	orrs	r1, r2
 80012fa:	000f      	movs	r7, r1
 80012fc:	001c      	movs	r4, r3
 80012fe:	e7de      	b.n	80012be <__aeabi_dadd+0x54e>
 8001300:	2700      	movs	r7, #0
 8001302:	2400      	movs	r4, #0
 8001304:	e5d5      	b.n	8000eb2 <__aeabi_dadd+0x142>
 8001306:	2100      	movs	r1, #0
 8001308:	e76b      	b.n	80011e2 <__aeabi_dadd+0x472>
 800130a:	2500      	movs	r5, #0
 800130c:	2700      	movs	r7, #0
 800130e:	e5f3      	b.n	8000ef8 <__aeabi_dadd+0x188>
 8001310:	464e      	mov	r6, r9
 8001312:	0025      	movs	r5, r4
 8001314:	3e20      	subs	r6, #32
 8001316:	40f5      	lsrs	r5, r6
 8001318:	464b      	mov	r3, r9
 800131a:	002e      	movs	r6, r5
 800131c:	2b20      	cmp	r3, #32
 800131e:	d02d      	beq.n	800137c <__aeabi_dadd+0x60c>
 8001320:	2540      	movs	r5, #64	; 0x40
 8001322:	1aed      	subs	r5, r5, r3
 8001324:	40ac      	lsls	r4, r5
 8001326:	4327      	orrs	r7, r4
 8001328:	1e7c      	subs	r4, r7, #1
 800132a:	41a7      	sbcs	r7, r4
 800132c:	2400      	movs	r4, #0
 800132e:	4337      	orrs	r7, r6
 8001330:	e6c9      	b.n	80010c6 <__aeabi_dadd+0x356>
 8001332:	2480      	movs	r4, #128	; 0x80
 8001334:	2500      	movs	r5, #0
 8001336:	0324      	lsls	r4, r4, #12
 8001338:	4e13      	ldr	r6, [pc, #76]	; (8001388 <__aeabi_dadd+0x618>)
 800133a:	2700      	movs	r7, #0
 800133c:	e5dc      	b.n	8000ef8 <__aeabi_dadd+0x188>
 800133e:	4327      	orrs	r7, r4
 8001340:	1e7c      	subs	r4, r7, #1
 8001342:	41a7      	sbcs	r7, r4
 8001344:	2400      	movs	r4, #0
 8001346:	e779      	b.n	800123c <__aeabi_dadd+0x4cc>
 8001348:	000c      	movs	r4, r1
 800134a:	0017      	movs	r7, r2
 800134c:	4e0e      	ldr	r6, [pc, #56]	; (8001388 <__aeabi_dadd+0x618>)
 800134e:	e593      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001350:	000c      	movs	r4, r1
 8001352:	0017      	movs	r7, r2
 8001354:	e590      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001356:	4656      	mov	r6, sl
 8001358:	0023      	movs	r3, r4
 800135a:	3e20      	subs	r6, #32
 800135c:	40f3      	lsrs	r3, r6
 800135e:	4699      	mov	r9, r3
 8001360:	4653      	mov	r3, sl
 8001362:	2b20      	cmp	r3, #32
 8001364:	d00e      	beq.n	8001384 <__aeabi_dadd+0x614>
 8001366:	2340      	movs	r3, #64	; 0x40
 8001368:	4656      	mov	r6, sl
 800136a:	1b9b      	subs	r3, r3, r6
 800136c:	409c      	lsls	r4, r3
 800136e:	4327      	orrs	r7, r4
 8001370:	1e7c      	subs	r4, r7, #1
 8001372:	41a7      	sbcs	r7, r4
 8001374:	464b      	mov	r3, r9
 8001376:	2400      	movs	r4, #0
 8001378:	431f      	orrs	r7, r3
 800137a:	e75f      	b.n	800123c <__aeabi_dadd+0x4cc>
 800137c:	2400      	movs	r4, #0
 800137e:	e7d2      	b.n	8001326 <__aeabi_dadd+0x5b6>
 8001380:	0017      	movs	r7, r2
 8001382:	e5b2      	b.n	8000eea <__aeabi_dadd+0x17a>
 8001384:	2400      	movs	r4, #0
 8001386:	e7f2      	b.n	800136e <__aeabi_dadd+0x5fe>
 8001388:	000007ff 	.word	0x000007ff
 800138c:	ff7fffff 	.word	0xff7fffff

08001390 <__eqdf2>:
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	464f      	mov	r7, r9
 8001394:	4646      	mov	r6, r8
 8001396:	46d6      	mov	lr, sl
 8001398:	005c      	lsls	r4, r3, #1
 800139a:	b5c0      	push	{r6, r7, lr}
 800139c:	031f      	lsls	r7, r3, #12
 800139e:	0fdb      	lsrs	r3, r3, #31
 80013a0:	469a      	mov	sl, r3
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <__eqdf2+0x70>)
 80013a4:	030e      	lsls	r6, r1, #12
 80013a6:	004d      	lsls	r5, r1, #1
 80013a8:	4684      	mov	ip, r0
 80013aa:	4680      	mov	r8, r0
 80013ac:	0b36      	lsrs	r6, r6, #12
 80013ae:	0d6d      	lsrs	r5, r5, #21
 80013b0:	0fc9      	lsrs	r1, r1, #31
 80013b2:	4691      	mov	r9, r2
 80013b4:	0b3f      	lsrs	r7, r7, #12
 80013b6:	0d64      	lsrs	r4, r4, #21
 80013b8:	2001      	movs	r0, #1
 80013ba:	429d      	cmp	r5, r3
 80013bc:	d008      	beq.n	80013d0 <__eqdf2+0x40>
 80013be:	429c      	cmp	r4, r3
 80013c0:	d001      	beq.n	80013c6 <__eqdf2+0x36>
 80013c2:	42a5      	cmp	r5, r4
 80013c4:	d00b      	beq.n	80013de <__eqdf2+0x4e>
 80013c6:	bc1c      	pop	{r2, r3, r4}
 80013c8:	4690      	mov	r8, r2
 80013ca:	4699      	mov	r9, r3
 80013cc:	46a2      	mov	sl, r4
 80013ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d0:	4663      	mov	r3, ip
 80013d2:	4333      	orrs	r3, r6
 80013d4:	d1f7      	bne.n	80013c6 <__eqdf2+0x36>
 80013d6:	42ac      	cmp	r4, r5
 80013d8:	d1f5      	bne.n	80013c6 <__eqdf2+0x36>
 80013da:	433a      	orrs	r2, r7
 80013dc:	d1f3      	bne.n	80013c6 <__eqdf2+0x36>
 80013de:	2001      	movs	r0, #1
 80013e0:	42be      	cmp	r6, r7
 80013e2:	d1f0      	bne.n	80013c6 <__eqdf2+0x36>
 80013e4:	45c8      	cmp	r8, r9
 80013e6:	d1ee      	bne.n	80013c6 <__eqdf2+0x36>
 80013e8:	4551      	cmp	r1, sl
 80013ea:	d007      	beq.n	80013fc <__eqdf2+0x6c>
 80013ec:	2d00      	cmp	r5, #0
 80013ee:	d1ea      	bne.n	80013c6 <__eqdf2+0x36>
 80013f0:	4663      	mov	r3, ip
 80013f2:	431e      	orrs	r6, r3
 80013f4:	0030      	movs	r0, r6
 80013f6:	1e46      	subs	r6, r0, #1
 80013f8:	41b0      	sbcs	r0, r6
 80013fa:	e7e4      	b.n	80013c6 <__eqdf2+0x36>
 80013fc:	2000      	movs	r0, #0
 80013fe:	e7e2      	b.n	80013c6 <__eqdf2+0x36>
 8001400:	000007ff 	.word	0x000007ff

08001404 <__gedf2>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4645      	mov	r5, r8
 8001408:	46de      	mov	lr, fp
 800140a:	4657      	mov	r7, sl
 800140c:	464e      	mov	r6, r9
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	031f      	lsls	r7, r3, #12
 8001412:	0b3d      	lsrs	r5, r7, #12
 8001414:	4f2c      	ldr	r7, [pc, #176]	; (80014c8 <__gedf2+0xc4>)
 8001416:	030e      	lsls	r6, r1, #12
 8001418:	004c      	lsls	r4, r1, #1
 800141a:	46ab      	mov	fp, r5
 800141c:	005d      	lsls	r5, r3, #1
 800141e:	4684      	mov	ip, r0
 8001420:	0b36      	lsrs	r6, r6, #12
 8001422:	0d64      	lsrs	r4, r4, #21
 8001424:	0fc9      	lsrs	r1, r1, #31
 8001426:	4690      	mov	r8, r2
 8001428:	0d6d      	lsrs	r5, r5, #21
 800142a:	0fdb      	lsrs	r3, r3, #31
 800142c:	42bc      	cmp	r4, r7
 800142e:	d02a      	beq.n	8001486 <__gedf2+0x82>
 8001430:	4f25      	ldr	r7, [pc, #148]	; (80014c8 <__gedf2+0xc4>)
 8001432:	42bd      	cmp	r5, r7
 8001434:	d02d      	beq.n	8001492 <__gedf2+0x8e>
 8001436:	2c00      	cmp	r4, #0
 8001438:	d10f      	bne.n	800145a <__gedf2+0x56>
 800143a:	4330      	orrs	r0, r6
 800143c:	0007      	movs	r7, r0
 800143e:	4681      	mov	r9, r0
 8001440:	4278      	negs	r0, r7
 8001442:	4178      	adcs	r0, r7
 8001444:	b2c0      	uxtb	r0, r0
 8001446:	2d00      	cmp	r5, #0
 8001448:	d117      	bne.n	800147a <__gedf2+0x76>
 800144a:	465f      	mov	r7, fp
 800144c:	433a      	orrs	r2, r7
 800144e:	d114      	bne.n	800147a <__gedf2+0x76>
 8001450:	464b      	mov	r3, r9
 8001452:	2000      	movs	r0, #0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00a      	beq.n	800146e <__gedf2+0x6a>
 8001458:	e006      	b.n	8001468 <__gedf2+0x64>
 800145a:	2d00      	cmp	r5, #0
 800145c:	d102      	bne.n	8001464 <__gedf2+0x60>
 800145e:	4658      	mov	r0, fp
 8001460:	4302      	orrs	r2, r0
 8001462:	d001      	beq.n	8001468 <__gedf2+0x64>
 8001464:	4299      	cmp	r1, r3
 8001466:	d018      	beq.n	800149a <__gedf2+0x96>
 8001468:	4248      	negs	r0, r1
 800146a:	2101      	movs	r1, #1
 800146c:	4308      	orrs	r0, r1
 800146e:	bc3c      	pop	{r2, r3, r4, r5}
 8001470:	4690      	mov	r8, r2
 8001472:	4699      	mov	r9, r3
 8001474:	46a2      	mov	sl, r4
 8001476:	46ab      	mov	fp, r5
 8001478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800147a:	2800      	cmp	r0, #0
 800147c:	d0f2      	beq.n	8001464 <__gedf2+0x60>
 800147e:	2001      	movs	r0, #1
 8001480:	3b01      	subs	r3, #1
 8001482:	4318      	orrs	r0, r3
 8001484:	e7f3      	b.n	800146e <__gedf2+0x6a>
 8001486:	0037      	movs	r7, r6
 8001488:	4307      	orrs	r7, r0
 800148a:	d0d1      	beq.n	8001430 <__gedf2+0x2c>
 800148c:	2002      	movs	r0, #2
 800148e:	4240      	negs	r0, r0
 8001490:	e7ed      	b.n	800146e <__gedf2+0x6a>
 8001492:	465f      	mov	r7, fp
 8001494:	4317      	orrs	r7, r2
 8001496:	d0ce      	beq.n	8001436 <__gedf2+0x32>
 8001498:	e7f8      	b.n	800148c <__gedf2+0x88>
 800149a:	42ac      	cmp	r4, r5
 800149c:	dce4      	bgt.n	8001468 <__gedf2+0x64>
 800149e:	da03      	bge.n	80014a8 <__gedf2+0xa4>
 80014a0:	1e48      	subs	r0, r1, #1
 80014a2:	2101      	movs	r1, #1
 80014a4:	4308      	orrs	r0, r1
 80014a6:	e7e2      	b.n	800146e <__gedf2+0x6a>
 80014a8:	455e      	cmp	r6, fp
 80014aa:	d8dd      	bhi.n	8001468 <__gedf2+0x64>
 80014ac:	d006      	beq.n	80014bc <__gedf2+0xb8>
 80014ae:	2000      	movs	r0, #0
 80014b0:	455e      	cmp	r6, fp
 80014b2:	d2dc      	bcs.n	800146e <__gedf2+0x6a>
 80014b4:	2301      	movs	r3, #1
 80014b6:	1e48      	subs	r0, r1, #1
 80014b8:	4318      	orrs	r0, r3
 80014ba:	e7d8      	b.n	800146e <__gedf2+0x6a>
 80014bc:	45c4      	cmp	ip, r8
 80014be:	d8d3      	bhi.n	8001468 <__gedf2+0x64>
 80014c0:	2000      	movs	r0, #0
 80014c2:	45c4      	cmp	ip, r8
 80014c4:	d3f6      	bcc.n	80014b4 <__gedf2+0xb0>
 80014c6:	e7d2      	b.n	800146e <__gedf2+0x6a>
 80014c8:	000007ff 	.word	0x000007ff

080014cc <__ledf2>:
 80014cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ce:	464e      	mov	r6, r9
 80014d0:	4645      	mov	r5, r8
 80014d2:	46de      	mov	lr, fp
 80014d4:	4657      	mov	r7, sl
 80014d6:	005c      	lsls	r4, r3, #1
 80014d8:	b5e0      	push	{r5, r6, r7, lr}
 80014da:	031f      	lsls	r7, r3, #12
 80014dc:	0fdb      	lsrs	r3, r3, #31
 80014de:	4699      	mov	r9, r3
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <__ledf2+0xc0>)
 80014e2:	030e      	lsls	r6, r1, #12
 80014e4:	004d      	lsls	r5, r1, #1
 80014e6:	0fc9      	lsrs	r1, r1, #31
 80014e8:	4684      	mov	ip, r0
 80014ea:	0b36      	lsrs	r6, r6, #12
 80014ec:	0d6d      	lsrs	r5, r5, #21
 80014ee:	468b      	mov	fp, r1
 80014f0:	4690      	mov	r8, r2
 80014f2:	0b3f      	lsrs	r7, r7, #12
 80014f4:	0d64      	lsrs	r4, r4, #21
 80014f6:	429d      	cmp	r5, r3
 80014f8:	d020      	beq.n	800153c <__ledf2+0x70>
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <__ledf2+0xc0>)
 80014fc:	429c      	cmp	r4, r3
 80014fe:	d022      	beq.n	8001546 <__ledf2+0x7a>
 8001500:	2d00      	cmp	r5, #0
 8001502:	d112      	bne.n	800152a <__ledf2+0x5e>
 8001504:	4330      	orrs	r0, r6
 8001506:	4243      	negs	r3, r0
 8001508:	4143      	adcs	r3, r0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2c00      	cmp	r4, #0
 800150e:	d01f      	beq.n	8001550 <__ledf2+0x84>
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00c      	beq.n	800152e <__ledf2+0x62>
 8001514:	464b      	mov	r3, r9
 8001516:	2001      	movs	r0, #1
 8001518:	3b01      	subs	r3, #1
 800151a:	4303      	orrs	r3, r0
 800151c:	0018      	movs	r0, r3
 800151e:	bc3c      	pop	{r2, r3, r4, r5}
 8001520:	4690      	mov	r8, r2
 8001522:	4699      	mov	r9, r3
 8001524:	46a2      	mov	sl, r4
 8001526:	46ab      	mov	fp, r5
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152a:	2c00      	cmp	r4, #0
 800152c:	d016      	beq.n	800155c <__ledf2+0x90>
 800152e:	45cb      	cmp	fp, r9
 8001530:	d017      	beq.n	8001562 <__ledf2+0x96>
 8001532:	465b      	mov	r3, fp
 8001534:	4259      	negs	r1, r3
 8001536:	2301      	movs	r3, #1
 8001538:	430b      	orrs	r3, r1
 800153a:	e7ef      	b.n	800151c <__ledf2+0x50>
 800153c:	0031      	movs	r1, r6
 800153e:	2302      	movs	r3, #2
 8001540:	4301      	orrs	r1, r0
 8001542:	d1eb      	bne.n	800151c <__ledf2+0x50>
 8001544:	e7d9      	b.n	80014fa <__ledf2+0x2e>
 8001546:	0039      	movs	r1, r7
 8001548:	2302      	movs	r3, #2
 800154a:	4311      	orrs	r1, r2
 800154c:	d1e6      	bne.n	800151c <__ledf2+0x50>
 800154e:	e7d7      	b.n	8001500 <__ledf2+0x34>
 8001550:	433a      	orrs	r2, r7
 8001552:	d1dd      	bne.n	8001510 <__ledf2+0x44>
 8001554:	2300      	movs	r3, #0
 8001556:	2800      	cmp	r0, #0
 8001558:	d0e0      	beq.n	800151c <__ledf2+0x50>
 800155a:	e7ea      	b.n	8001532 <__ledf2+0x66>
 800155c:	433a      	orrs	r2, r7
 800155e:	d1e6      	bne.n	800152e <__ledf2+0x62>
 8001560:	e7e7      	b.n	8001532 <__ledf2+0x66>
 8001562:	42a5      	cmp	r5, r4
 8001564:	dce5      	bgt.n	8001532 <__ledf2+0x66>
 8001566:	db05      	blt.n	8001574 <__ledf2+0xa8>
 8001568:	42be      	cmp	r6, r7
 800156a:	d8e2      	bhi.n	8001532 <__ledf2+0x66>
 800156c:	d007      	beq.n	800157e <__ledf2+0xb2>
 800156e:	2300      	movs	r3, #0
 8001570:	42be      	cmp	r6, r7
 8001572:	d2d3      	bcs.n	800151c <__ledf2+0x50>
 8001574:	4659      	mov	r1, fp
 8001576:	2301      	movs	r3, #1
 8001578:	3901      	subs	r1, #1
 800157a:	430b      	orrs	r3, r1
 800157c:	e7ce      	b.n	800151c <__ledf2+0x50>
 800157e:	45c4      	cmp	ip, r8
 8001580:	d8d7      	bhi.n	8001532 <__ledf2+0x66>
 8001582:	2300      	movs	r3, #0
 8001584:	45c4      	cmp	ip, r8
 8001586:	d3f5      	bcc.n	8001574 <__ledf2+0xa8>
 8001588:	e7c8      	b.n	800151c <__ledf2+0x50>
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	000007ff 	.word	0x000007ff

08001590 <__aeabi_dmul>:
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	4657      	mov	r7, sl
 8001594:	4645      	mov	r5, r8
 8001596:	46de      	mov	lr, fp
 8001598:	464e      	mov	r6, r9
 800159a:	b5e0      	push	{r5, r6, r7, lr}
 800159c:	030c      	lsls	r4, r1, #12
 800159e:	4698      	mov	r8, r3
 80015a0:	004e      	lsls	r6, r1, #1
 80015a2:	0b23      	lsrs	r3, r4, #12
 80015a4:	b087      	sub	sp, #28
 80015a6:	0007      	movs	r7, r0
 80015a8:	4692      	mov	sl, r2
 80015aa:	469b      	mov	fp, r3
 80015ac:	0d76      	lsrs	r6, r6, #21
 80015ae:	0fcd      	lsrs	r5, r1, #31
 80015b0:	2e00      	cmp	r6, #0
 80015b2:	d06b      	beq.n	800168c <__aeabi_dmul+0xfc>
 80015b4:	4b6d      	ldr	r3, [pc, #436]	; (800176c <__aeabi_dmul+0x1dc>)
 80015b6:	429e      	cmp	r6, r3
 80015b8:	d035      	beq.n	8001626 <__aeabi_dmul+0x96>
 80015ba:	2480      	movs	r4, #128	; 0x80
 80015bc:	465b      	mov	r3, fp
 80015be:	0f42      	lsrs	r2, r0, #29
 80015c0:	0424      	lsls	r4, r4, #16
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4314      	orrs	r4, r2
 80015c6:	431c      	orrs	r4, r3
 80015c8:	00c3      	lsls	r3, r0, #3
 80015ca:	4699      	mov	r9, r3
 80015cc:	4b68      	ldr	r3, [pc, #416]	; (8001770 <__aeabi_dmul+0x1e0>)
 80015ce:	46a3      	mov	fp, r4
 80015d0:	469c      	mov	ip, r3
 80015d2:	2300      	movs	r3, #0
 80015d4:	2700      	movs	r7, #0
 80015d6:	4466      	add	r6, ip
 80015d8:	9302      	str	r3, [sp, #8]
 80015da:	4643      	mov	r3, r8
 80015dc:	031c      	lsls	r4, r3, #12
 80015de:	005a      	lsls	r2, r3, #1
 80015e0:	0fdb      	lsrs	r3, r3, #31
 80015e2:	4650      	mov	r0, sl
 80015e4:	0b24      	lsrs	r4, r4, #12
 80015e6:	0d52      	lsrs	r2, r2, #21
 80015e8:	4698      	mov	r8, r3
 80015ea:	d100      	bne.n	80015ee <__aeabi_dmul+0x5e>
 80015ec:	e076      	b.n	80016dc <__aeabi_dmul+0x14c>
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <__aeabi_dmul+0x1dc>)
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d06d      	beq.n	80016d0 <__aeabi_dmul+0x140>
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	0f41      	lsrs	r1, r0, #29
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	430b      	orrs	r3, r1
 80015fc:	495c      	ldr	r1, [pc, #368]	; (8001770 <__aeabi_dmul+0x1e0>)
 80015fe:	00e4      	lsls	r4, r4, #3
 8001600:	468c      	mov	ip, r1
 8001602:	431c      	orrs	r4, r3
 8001604:	00c3      	lsls	r3, r0, #3
 8001606:	2000      	movs	r0, #0
 8001608:	4462      	add	r2, ip
 800160a:	4641      	mov	r1, r8
 800160c:	18b6      	adds	r6, r6, r2
 800160e:	4069      	eors	r1, r5
 8001610:	1c72      	adds	r2, r6, #1
 8001612:	9101      	str	r1, [sp, #4]
 8001614:	4694      	mov	ip, r2
 8001616:	4307      	orrs	r7, r0
 8001618:	2f0f      	cmp	r7, #15
 800161a:	d900      	bls.n	800161e <__aeabi_dmul+0x8e>
 800161c:	e0b0      	b.n	8001780 <__aeabi_dmul+0x1f0>
 800161e:	4a55      	ldr	r2, [pc, #340]	; (8001774 <__aeabi_dmul+0x1e4>)
 8001620:	00bf      	lsls	r7, r7, #2
 8001622:	59d2      	ldr	r2, [r2, r7]
 8001624:	4697      	mov	pc, r2
 8001626:	465b      	mov	r3, fp
 8001628:	4303      	orrs	r3, r0
 800162a:	4699      	mov	r9, r3
 800162c:	d000      	beq.n	8001630 <__aeabi_dmul+0xa0>
 800162e:	e087      	b.n	8001740 <__aeabi_dmul+0x1b0>
 8001630:	2300      	movs	r3, #0
 8001632:	469b      	mov	fp, r3
 8001634:	3302      	adds	r3, #2
 8001636:	2708      	movs	r7, #8
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	e7ce      	b.n	80015da <__aeabi_dmul+0x4a>
 800163c:	4642      	mov	r2, r8
 800163e:	9201      	str	r2, [sp, #4]
 8001640:	2802      	cmp	r0, #2
 8001642:	d067      	beq.n	8001714 <__aeabi_dmul+0x184>
 8001644:	2803      	cmp	r0, #3
 8001646:	d100      	bne.n	800164a <__aeabi_dmul+0xba>
 8001648:	e20e      	b.n	8001a68 <__aeabi_dmul+0x4d8>
 800164a:	2801      	cmp	r0, #1
 800164c:	d000      	beq.n	8001650 <__aeabi_dmul+0xc0>
 800164e:	e162      	b.n	8001916 <__aeabi_dmul+0x386>
 8001650:	2300      	movs	r3, #0
 8001652:	2400      	movs	r4, #0
 8001654:	2200      	movs	r2, #0
 8001656:	4699      	mov	r9, r3
 8001658:	9901      	ldr	r1, [sp, #4]
 800165a:	4001      	ands	r1, r0
 800165c:	b2cd      	uxtb	r5, r1
 800165e:	2100      	movs	r1, #0
 8001660:	0312      	lsls	r2, r2, #12
 8001662:	0d0b      	lsrs	r3, r1, #20
 8001664:	0b12      	lsrs	r2, r2, #12
 8001666:	051b      	lsls	r3, r3, #20
 8001668:	4313      	orrs	r3, r2
 800166a:	4a43      	ldr	r2, [pc, #268]	; (8001778 <__aeabi_dmul+0x1e8>)
 800166c:	0524      	lsls	r4, r4, #20
 800166e:	4013      	ands	r3, r2
 8001670:	431c      	orrs	r4, r3
 8001672:	0064      	lsls	r4, r4, #1
 8001674:	07ed      	lsls	r5, r5, #31
 8001676:	0864      	lsrs	r4, r4, #1
 8001678:	432c      	orrs	r4, r5
 800167a:	4648      	mov	r0, r9
 800167c:	0021      	movs	r1, r4
 800167e:	b007      	add	sp, #28
 8001680:	bc3c      	pop	{r2, r3, r4, r5}
 8001682:	4690      	mov	r8, r2
 8001684:	4699      	mov	r9, r3
 8001686:	46a2      	mov	sl, r4
 8001688:	46ab      	mov	fp, r5
 800168a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168c:	4303      	orrs	r3, r0
 800168e:	4699      	mov	r9, r3
 8001690:	d04f      	beq.n	8001732 <__aeabi_dmul+0x1a2>
 8001692:	465b      	mov	r3, fp
 8001694:	2b00      	cmp	r3, #0
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x10a>
 8001698:	e189      	b.n	80019ae <__aeabi_dmul+0x41e>
 800169a:	4658      	mov	r0, fp
 800169c:	f000 fed2 	bl	8002444 <__clzsi2>
 80016a0:	0003      	movs	r3, r0
 80016a2:	3b0b      	subs	r3, #11
 80016a4:	2b1c      	cmp	r3, #28
 80016a6:	dd00      	ble.n	80016aa <__aeabi_dmul+0x11a>
 80016a8:	e17a      	b.n	80019a0 <__aeabi_dmul+0x410>
 80016aa:	221d      	movs	r2, #29
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	003a      	movs	r2, r7
 80016b0:	0001      	movs	r1, r0
 80016b2:	465c      	mov	r4, fp
 80016b4:	40da      	lsrs	r2, r3
 80016b6:	3908      	subs	r1, #8
 80016b8:	408c      	lsls	r4, r1
 80016ba:	0013      	movs	r3, r2
 80016bc:	408f      	lsls	r7, r1
 80016be:	4323      	orrs	r3, r4
 80016c0:	469b      	mov	fp, r3
 80016c2:	46b9      	mov	r9, r7
 80016c4:	2300      	movs	r3, #0
 80016c6:	4e2d      	ldr	r6, [pc, #180]	; (800177c <__aeabi_dmul+0x1ec>)
 80016c8:	2700      	movs	r7, #0
 80016ca:	1a36      	subs	r6, r6, r0
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	e784      	b.n	80015da <__aeabi_dmul+0x4a>
 80016d0:	4653      	mov	r3, sl
 80016d2:	4323      	orrs	r3, r4
 80016d4:	d12a      	bne.n	800172c <__aeabi_dmul+0x19c>
 80016d6:	2400      	movs	r4, #0
 80016d8:	2002      	movs	r0, #2
 80016da:	e796      	b.n	800160a <__aeabi_dmul+0x7a>
 80016dc:	4653      	mov	r3, sl
 80016de:	4323      	orrs	r3, r4
 80016e0:	d020      	beq.n	8001724 <__aeabi_dmul+0x194>
 80016e2:	2c00      	cmp	r4, #0
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dmul+0x158>
 80016e6:	e157      	b.n	8001998 <__aeabi_dmul+0x408>
 80016e8:	0020      	movs	r0, r4
 80016ea:	f000 feab 	bl	8002444 <__clzsi2>
 80016ee:	0003      	movs	r3, r0
 80016f0:	3b0b      	subs	r3, #11
 80016f2:	2b1c      	cmp	r3, #28
 80016f4:	dd00      	ble.n	80016f8 <__aeabi_dmul+0x168>
 80016f6:	e149      	b.n	800198c <__aeabi_dmul+0x3fc>
 80016f8:	211d      	movs	r1, #29
 80016fa:	1acb      	subs	r3, r1, r3
 80016fc:	4651      	mov	r1, sl
 80016fe:	0002      	movs	r2, r0
 8001700:	40d9      	lsrs	r1, r3
 8001702:	4653      	mov	r3, sl
 8001704:	3a08      	subs	r2, #8
 8001706:	4094      	lsls	r4, r2
 8001708:	4093      	lsls	r3, r2
 800170a:	430c      	orrs	r4, r1
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <__aeabi_dmul+0x1ec>)
 800170e:	1a12      	subs	r2, r2, r0
 8001710:	2000      	movs	r0, #0
 8001712:	e77a      	b.n	800160a <__aeabi_dmul+0x7a>
 8001714:	2501      	movs	r5, #1
 8001716:	9b01      	ldr	r3, [sp, #4]
 8001718:	4c14      	ldr	r4, [pc, #80]	; (800176c <__aeabi_dmul+0x1dc>)
 800171a:	401d      	ands	r5, r3
 800171c:	2300      	movs	r3, #0
 800171e:	2200      	movs	r2, #0
 8001720:	4699      	mov	r9, r3
 8001722:	e79c      	b.n	800165e <__aeabi_dmul+0xce>
 8001724:	2400      	movs	r4, #0
 8001726:	2200      	movs	r2, #0
 8001728:	2001      	movs	r0, #1
 800172a:	e76e      	b.n	800160a <__aeabi_dmul+0x7a>
 800172c:	4653      	mov	r3, sl
 800172e:	2003      	movs	r0, #3
 8001730:	e76b      	b.n	800160a <__aeabi_dmul+0x7a>
 8001732:	2300      	movs	r3, #0
 8001734:	469b      	mov	fp, r3
 8001736:	3301      	adds	r3, #1
 8001738:	2704      	movs	r7, #4
 800173a:	2600      	movs	r6, #0
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	e74c      	b.n	80015da <__aeabi_dmul+0x4a>
 8001740:	2303      	movs	r3, #3
 8001742:	4681      	mov	r9, r0
 8001744:	270c      	movs	r7, #12
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	e747      	b.n	80015da <__aeabi_dmul+0x4a>
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	2300      	movs	r3, #0
 800174e:	2500      	movs	r5, #0
 8001750:	0312      	lsls	r2, r2, #12
 8001752:	4699      	mov	r9, r3
 8001754:	4c05      	ldr	r4, [pc, #20]	; (800176c <__aeabi_dmul+0x1dc>)
 8001756:	e782      	b.n	800165e <__aeabi_dmul+0xce>
 8001758:	465c      	mov	r4, fp
 800175a:	464b      	mov	r3, r9
 800175c:	9802      	ldr	r0, [sp, #8]
 800175e:	e76f      	b.n	8001640 <__aeabi_dmul+0xb0>
 8001760:	465c      	mov	r4, fp
 8001762:	464b      	mov	r3, r9
 8001764:	9501      	str	r5, [sp, #4]
 8001766:	9802      	ldr	r0, [sp, #8]
 8001768:	e76a      	b.n	8001640 <__aeabi_dmul+0xb0>
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	000007ff 	.word	0x000007ff
 8001770:	fffffc01 	.word	0xfffffc01
 8001774:	08009f6c 	.word	0x08009f6c
 8001778:	800fffff 	.word	0x800fffff
 800177c:	fffffc0d 	.word	0xfffffc0d
 8001780:	464a      	mov	r2, r9
 8001782:	4649      	mov	r1, r9
 8001784:	0c17      	lsrs	r7, r2, #16
 8001786:	0c1a      	lsrs	r2, r3, #16
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	0408      	lsls	r0, r1, #16
 800178e:	0019      	movs	r1, r3
 8001790:	0c00      	lsrs	r0, r0, #16
 8001792:	4341      	muls	r1, r0
 8001794:	0015      	movs	r5, r2
 8001796:	4688      	mov	r8, r1
 8001798:	0019      	movs	r1, r3
 800179a:	437d      	muls	r5, r7
 800179c:	4379      	muls	r1, r7
 800179e:	9503      	str	r5, [sp, #12]
 80017a0:	4689      	mov	r9, r1
 80017a2:	0029      	movs	r1, r5
 80017a4:	0015      	movs	r5, r2
 80017a6:	4345      	muls	r5, r0
 80017a8:	444d      	add	r5, r9
 80017aa:	9502      	str	r5, [sp, #8]
 80017ac:	4645      	mov	r5, r8
 80017ae:	0c2d      	lsrs	r5, r5, #16
 80017b0:	46aa      	mov	sl, r5
 80017b2:	9d02      	ldr	r5, [sp, #8]
 80017b4:	4455      	add	r5, sl
 80017b6:	45a9      	cmp	r9, r5
 80017b8:	d906      	bls.n	80017c8 <__aeabi_dmul+0x238>
 80017ba:	468a      	mov	sl, r1
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	0249      	lsls	r1, r1, #9
 80017c0:	4689      	mov	r9, r1
 80017c2:	44ca      	add	sl, r9
 80017c4:	4651      	mov	r1, sl
 80017c6:	9103      	str	r1, [sp, #12]
 80017c8:	0c29      	lsrs	r1, r5, #16
 80017ca:	9104      	str	r1, [sp, #16]
 80017cc:	4641      	mov	r1, r8
 80017ce:	0409      	lsls	r1, r1, #16
 80017d0:	042d      	lsls	r5, r5, #16
 80017d2:	0c09      	lsrs	r1, r1, #16
 80017d4:	4688      	mov	r8, r1
 80017d6:	0029      	movs	r1, r5
 80017d8:	0c25      	lsrs	r5, r4, #16
 80017da:	0424      	lsls	r4, r4, #16
 80017dc:	4441      	add	r1, r8
 80017de:	0c24      	lsrs	r4, r4, #16
 80017e0:	9105      	str	r1, [sp, #20]
 80017e2:	0021      	movs	r1, r4
 80017e4:	4341      	muls	r1, r0
 80017e6:	4688      	mov	r8, r1
 80017e8:	0021      	movs	r1, r4
 80017ea:	4379      	muls	r1, r7
 80017ec:	468a      	mov	sl, r1
 80017ee:	4368      	muls	r0, r5
 80017f0:	4641      	mov	r1, r8
 80017f2:	4450      	add	r0, sl
 80017f4:	4681      	mov	r9, r0
 80017f6:	0c08      	lsrs	r0, r1, #16
 80017f8:	4448      	add	r0, r9
 80017fa:	436f      	muls	r7, r5
 80017fc:	4582      	cmp	sl, r0
 80017fe:	d903      	bls.n	8001808 <__aeabi_dmul+0x278>
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	0249      	lsls	r1, r1, #9
 8001804:	4689      	mov	r9, r1
 8001806:	444f      	add	r7, r9
 8001808:	0c01      	lsrs	r1, r0, #16
 800180a:	4689      	mov	r9, r1
 800180c:	0039      	movs	r1, r7
 800180e:	4449      	add	r1, r9
 8001810:	9102      	str	r1, [sp, #8]
 8001812:	4641      	mov	r1, r8
 8001814:	040f      	lsls	r7, r1, #16
 8001816:	9904      	ldr	r1, [sp, #16]
 8001818:	0c3f      	lsrs	r7, r7, #16
 800181a:	4688      	mov	r8, r1
 800181c:	0400      	lsls	r0, r0, #16
 800181e:	19c0      	adds	r0, r0, r7
 8001820:	4480      	add	r8, r0
 8001822:	4641      	mov	r1, r8
 8001824:	9104      	str	r1, [sp, #16]
 8001826:	4659      	mov	r1, fp
 8001828:	0c0f      	lsrs	r7, r1, #16
 800182a:	0409      	lsls	r1, r1, #16
 800182c:	0c09      	lsrs	r1, r1, #16
 800182e:	4688      	mov	r8, r1
 8001830:	4359      	muls	r1, r3
 8001832:	468a      	mov	sl, r1
 8001834:	0039      	movs	r1, r7
 8001836:	4351      	muls	r1, r2
 8001838:	4689      	mov	r9, r1
 800183a:	4641      	mov	r1, r8
 800183c:	434a      	muls	r2, r1
 800183e:	4651      	mov	r1, sl
 8001840:	0c09      	lsrs	r1, r1, #16
 8001842:	468b      	mov	fp, r1
 8001844:	437b      	muls	r3, r7
 8001846:	18d2      	adds	r2, r2, r3
 8001848:	445a      	add	r2, fp
 800184a:	4293      	cmp	r3, r2
 800184c:	d903      	bls.n	8001856 <__aeabi_dmul+0x2c6>
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	025b      	lsls	r3, r3, #9
 8001852:	469b      	mov	fp, r3
 8001854:	44d9      	add	r9, fp
 8001856:	4651      	mov	r1, sl
 8001858:	0409      	lsls	r1, r1, #16
 800185a:	0c09      	lsrs	r1, r1, #16
 800185c:	468a      	mov	sl, r1
 800185e:	4641      	mov	r1, r8
 8001860:	4361      	muls	r1, r4
 8001862:	437c      	muls	r4, r7
 8001864:	0c13      	lsrs	r3, r2, #16
 8001866:	0412      	lsls	r2, r2, #16
 8001868:	444b      	add	r3, r9
 800186a:	4452      	add	r2, sl
 800186c:	46a1      	mov	r9, r4
 800186e:	468a      	mov	sl, r1
 8001870:	003c      	movs	r4, r7
 8001872:	4641      	mov	r1, r8
 8001874:	436c      	muls	r4, r5
 8001876:	434d      	muls	r5, r1
 8001878:	4651      	mov	r1, sl
 800187a:	444d      	add	r5, r9
 800187c:	0c0f      	lsrs	r7, r1, #16
 800187e:	197d      	adds	r5, r7, r5
 8001880:	45a9      	cmp	r9, r5
 8001882:	d903      	bls.n	800188c <__aeabi_dmul+0x2fc>
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0249      	lsls	r1, r1, #9
 8001888:	4688      	mov	r8, r1
 800188a:	4444      	add	r4, r8
 800188c:	9f04      	ldr	r7, [sp, #16]
 800188e:	9903      	ldr	r1, [sp, #12]
 8001890:	46b8      	mov	r8, r7
 8001892:	4441      	add	r1, r8
 8001894:	468b      	mov	fp, r1
 8001896:	4583      	cmp	fp, r0
 8001898:	4180      	sbcs	r0, r0
 800189a:	4241      	negs	r1, r0
 800189c:	4688      	mov	r8, r1
 800189e:	4651      	mov	r1, sl
 80018a0:	0408      	lsls	r0, r1, #16
 80018a2:	042f      	lsls	r7, r5, #16
 80018a4:	0c00      	lsrs	r0, r0, #16
 80018a6:	183f      	adds	r7, r7, r0
 80018a8:	4658      	mov	r0, fp
 80018aa:	9902      	ldr	r1, [sp, #8]
 80018ac:	1810      	adds	r0, r2, r0
 80018ae:	4689      	mov	r9, r1
 80018b0:	4290      	cmp	r0, r2
 80018b2:	4192      	sbcs	r2, r2
 80018b4:	444f      	add	r7, r9
 80018b6:	46ba      	mov	sl, r7
 80018b8:	4252      	negs	r2, r2
 80018ba:	4699      	mov	r9, r3
 80018bc:	4693      	mov	fp, r2
 80018be:	44c2      	add	sl, r8
 80018c0:	44d1      	add	r9, sl
 80018c2:	44cb      	add	fp, r9
 80018c4:	428f      	cmp	r7, r1
 80018c6:	41bf      	sbcs	r7, r7
 80018c8:	45c2      	cmp	sl, r8
 80018ca:	4189      	sbcs	r1, r1
 80018cc:	4599      	cmp	r9, r3
 80018ce:	419b      	sbcs	r3, r3
 80018d0:	4593      	cmp	fp, r2
 80018d2:	4192      	sbcs	r2, r2
 80018d4:	427f      	negs	r7, r7
 80018d6:	4249      	negs	r1, r1
 80018d8:	0c2d      	lsrs	r5, r5, #16
 80018da:	4252      	negs	r2, r2
 80018dc:	430f      	orrs	r7, r1
 80018de:	425b      	negs	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	197f      	adds	r7, r7, r5
 80018e4:	18ff      	adds	r7, r7, r3
 80018e6:	465b      	mov	r3, fp
 80018e8:	193c      	adds	r4, r7, r4
 80018ea:	0ddb      	lsrs	r3, r3, #23
 80018ec:	9a05      	ldr	r2, [sp, #20]
 80018ee:	0264      	lsls	r4, r4, #9
 80018f0:	431c      	orrs	r4, r3
 80018f2:	0243      	lsls	r3, r0, #9
 80018f4:	4313      	orrs	r3, r2
 80018f6:	1e5d      	subs	r5, r3, #1
 80018f8:	41ab      	sbcs	r3, r5
 80018fa:	465a      	mov	r2, fp
 80018fc:	0dc0      	lsrs	r0, r0, #23
 80018fe:	4303      	orrs	r3, r0
 8001900:	0252      	lsls	r2, r2, #9
 8001902:	4313      	orrs	r3, r2
 8001904:	01e2      	lsls	r2, r4, #7
 8001906:	d556      	bpl.n	80019b6 <__aeabi_dmul+0x426>
 8001908:	2001      	movs	r0, #1
 800190a:	085a      	lsrs	r2, r3, #1
 800190c:	4003      	ands	r3, r0
 800190e:	4313      	orrs	r3, r2
 8001910:	07e2      	lsls	r2, r4, #31
 8001912:	4313      	orrs	r3, r2
 8001914:	0864      	lsrs	r4, r4, #1
 8001916:	485a      	ldr	r0, [pc, #360]	; (8001a80 <__aeabi_dmul+0x4f0>)
 8001918:	4460      	add	r0, ip
 800191a:	2800      	cmp	r0, #0
 800191c:	dd4d      	ble.n	80019ba <__aeabi_dmul+0x42a>
 800191e:	075a      	lsls	r2, r3, #29
 8001920:	d009      	beq.n	8001936 <__aeabi_dmul+0x3a6>
 8001922:	220f      	movs	r2, #15
 8001924:	401a      	ands	r2, r3
 8001926:	2a04      	cmp	r2, #4
 8001928:	d005      	beq.n	8001936 <__aeabi_dmul+0x3a6>
 800192a:	1d1a      	adds	r2, r3, #4
 800192c:	429a      	cmp	r2, r3
 800192e:	419b      	sbcs	r3, r3
 8001930:	425b      	negs	r3, r3
 8001932:	18e4      	adds	r4, r4, r3
 8001934:	0013      	movs	r3, r2
 8001936:	01e2      	lsls	r2, r4, #7
 8001938:	d504      	bpl.n	8001944 <__aeabi_dmul+0x3b4>
 800193a:	2080      	movs	r0, #128	; 0x80
 800193c:	4a51      	ldr	r2, [pc, #324]	; (8001a84 <__aeabi_dmul+0x4f4>)
 800193e:	00c0      	lsls	r0, r0, #3
 8001940:	4014      	ands	r4, r2
 8001942:	4460      	add	r0, ip
 8001944:	4a50      	ldr	r2, [pc, #320]	; (8001a88 <__aeabi_dmul+0x4f8>)
 8001946:	4290      	cmp	r0, r2
 8001948:	dd00      	ble.n	800194c <__aeabi_dmul+0x3bc>
 800194a:	e6e3      	b.n	8001714 <__aeabi_dmul+0x184>
 800194c:	2501      	movs	r5, #1
 800194e:	08db      	lsrs	r3, r3, #3
 8001950:	0762      	lsls	r2, r4, #29
 8001952:	431a      	orrs	r2, r3
 8001954:	0264      	lsls	r4, r4, #9
 8001956:	9b01      	ldr	r3, [sp, #4]
 8001958:	4691      	mov	r9, r2
 800195a:	0b22      	lsrs	r2, r4, #12
 800195c:	0544      	lsls	r4, r0, #21
 800195e:	0d64      	lsrs	r4, r4, #21
 8001960:	401d      	ands	r5, r3
 8001962:	e67c      	b.n	800165e <__aeabi_dmul+0xce>
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	4659      	mov	r1, fp
 8001968:	0312      	lsls	r2, r2, #12
 800196a:	4211      	tst	r1, r2
 800196c:	d008      	beq.n	8001980 <__aeabi_dmul+0x3f0>
 800196e:	4214      	tst	r4, r2
 8001970:	d106      	bne.n	8001980 <__aeabi_dmul+0x3f0>
 8001972:	4322      	orrs	r2, r4
 8001974:	0312      	lsls	r2, r2, #12
 8001976:	0b12      	lsrs	r2, r2, #12
 8001978:	4645      	mov	r5, r8
 800197a:	4699      	mov	r9, r3
 800197c:	4c43      	ldr	r4, [pc, #268]	; (8001a8c <__aeabi_dmul+0x4fc>)
 800197e:	e66e      	b.n	800165e <__aeabi_dmul+0xce>
 8001980:	465b      	mov	r3, fp
 8001982:	431a      	orrs	r2, r3
 8001984:	0312      	lsls	r2, r2, #12
 8001986:	0b12      	lsrs	r2, r2, #12
 8001988:	4c40      	ldr	r4, [pc, #256]	; (8001a8c <__aeabi_dmul+0x4fc>)
 800198a:	e668      	b.n	800165e <__aeabi_dmul+0xce>
 800198c:	0003      	movs	r3, r0
 800198e:	4654      	mov	r4, sl
 8001990:	3b28      	subs	r3, #40	; 0x28
 8001992:	409c      	lsls	r4, r3
 8001994:	2300      	movs	r3, #0
 8001996:	e6b9      	b.n	800170c <__aeabi_dmul+0x17c>
 8001998:	f000 fd54 	bl	8002444 <__clzsi2>
 800199c:	3020      	adds	r0, #32
 800199e:	e6a6      	b.n	80016ee <__aeabi_dmul+0x15e>
 80019a0:	0003      	movs	r3, r0
 80019a2:	3b28      	subs	r3, #40	; 0x28
 80019a4:	409f      	lsls	r7, r3
 80019a6:	2300      	movs	r3, #0
 80019a8:	46bb      	mov	fp, r7
 80019aa:	4699      	mov	r9, r3
 80019ac:	e68a      	b.n	80016c4 <__aeabi_dmul+0x134>
 80019ae:	f000 fd49 	bl	8002444 <__clzsi2>
 80019b2:	3020      	adds	r0, #32
 80019b4:	e674      	b.n	80016a0 <__aeabi_dmul+0x110>
 80019b6:	46b4      	mov	ip, r6
 80019b8:	e7ad      	b.n	8001916 <__aeabi_dmul+0x386>
 80019ba:	2501      	movs	r5, #1
 80019bc:	1a2a      	subs	r2, r5, r0
 80019be:	2a38      	cmp	r2, #56	; 0x38
 80019c0:	dd06      	ble.n	80019d0 <__aeabi_dmul+0x440>
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	2400      	movs	r4, #0
 80019c6:	401d      	ands	r5, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	2200      	movs	r2, #0
 80019cc:	4699      	mov	r9, r3
 80019ce:	e646      	b.n	800165e <__aeabi_dmul+0xce>
 80019d0:	2a1f      	cmp	r2, #31
 80019d2:	dc21      	bgt.n	8001a18 <__aeabi_dmul+0x488>
 80019d4:	2520      	movs	r5, #32
 80019d6:	0020      	movs	r0, r4
 80019d8:	1aad      	subs	r5, r5, r2
 80019da:	001e      	movs	r6, r3
 80019dc:	40ab      	lsls	r3, r5
 80019de:	40a8      	lsls	r0, r5
 80019e0:	40d6      	lsrs	r6, r2
 80019e2:	1e5d      	subs	r5, r3, #1
 80019e4:	41ab      	sbcs	r3, r5
 80019e6:	4330      	orrs	r0, r6
 80019e8:	4318      	orrs	r0, r3
 80019ea:	40d4      	lsrs	r4, r2
 80019ec:	0743      	lsls	r3, r0, #29
 80019ee:	d009      	beq.n	8001a04 <__aeabi_dmul+0x474>
 80019f0:	230f      	movs	r3, #15
 80019f2:	4003      	ands	r3, r0
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d005      	beq.n	8001a04 <__aeabi_dmul+0x474>
 80019f8:	0003      	movs	r3, r0
 80019fa:	1d18      	adds	r0, r3, #4
 80019fc:	4298      	cmp	r0, r3
 80019fe:	419b      	sbcs	r3, r3
 8001a00:	425b      	negs	r3, r3
 8001a02:	18e4      	adds	r4, r4, r3
 8001a04:	0223      	lsls	r3, r4, #8
 8001a06:	d521      	bpl.n	8001a4c <__aeabi_dmul+0x4bc>
 8001a08:	2501      	movs	r5, #1
 8001a0a:	9b01      	ldr	r3, [sp, #4]
 8001a0c:	2401      	movs	r4, #1
 8001a0e:	401d      	ands	r5, r3
 8001a10:	2300      	movs	r3, #0
 8001a12:	2200      	movs	r2, #0
 8001a14:	4699      	mov	r9, r3
 8001a16:	e622      	b.n	800165e <__aeabi_dmul+0xce>
 8001a18:	251f      	movs	r5, #31
 8001a1a:	0021      	movs	r1, r4
 8001a1c:	426d      	negs	r5, r5
 8001a1e:	1a28      	subs	r0, r5, r0
 8001a20:	40c1      	lsrs	r1, r0
 8001a22:	0008      	movs	r0, r1
 8001a24:	2a20      	cmp	r2, #32
 8001a26:	d01d      	beq.n	8001a64 <__aeabi_dmul+0x4d4>
 8001a28:	355f      	adds	r5, #95	; 0x5f
 8001a2a:	1aaa      	subs	r2, r5, r2
 8001a2c:	4094      	lsls	r4, r2
 8001a2e:	4323      	orrs	r3, r4
 8001a30:	1e5c      	subs	r4, r3, #1
 8001a32:	41a3      	sbcs	r3, r4
 8001a34:	2507      	movs	r5, #7
 8001a36:	4303      	orrs	r3, r0
 8001a38:	401d      	ands	r5, r3
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2d00      	cmp	r5, #0
 8001a3e:	d009      	beq.n	8001a54 <__aeabi_dmul+0x4c4>
 8001a40:	220f      	movs	r2, #15
 8001a42:	2400      	movs	r4, #0
 8001a44:	401a      	ands	r2, r3
 8001a46:	0018      	movs	r0, r3
 8001a48:	2a04      	cmp	r2, #4
 8001a4a:	d1d6      	bne.n	80019fa <__aeabi_dmul+0x46a>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	0765      	lsls	r5, r4, #29
 8001a50:	0264      	lsls	r4, r4, #9
 8001a52:	0b22      	lsrs	r2, r4, #12
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	432b      	orrs	r3, r5
 8001a58:	2501      	movs	r5, #1
 8001a5a:	4699      	mov	r9, r3
 8001a5c:	9b01      	ldr	r3, [sp, #4]
 8001a5e:	2400      	movs	r4, #0
 8001a60:	401d      	ands	r5, r3
 8001a62:	e5fc      	b.n	800165e <__aeabi_dmul+0xce>
 8001a64:	2400      	movs	r4, #0
 8001a66:	e7e2      	b.n	8001a2e <__aeabi_dmul+0x49e>
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	2501      	movs	r5, #1
 8001a6c:	0312      	lsls	r2, r2, #12
 8001a6e:	4322      	orrs	r2, r4
 8001a70:	9901      	ldr	r1, [sp, #4]
 8001a72:	0312      	lsls	r2, r2, #12
 8001a74:	0b12      	lsrs	r2, r2, #12
 8001a76:	400d      	ands	r5, r1
 8001a78:	4699      	mov	r9, r3
 8001a7a:	4c04      	ldr	r4, [pc, #16]	; (8001a8c <__aeabi_dmul+0x4fc>)
 8001a7c:	e5ef      	b.n	800165e <__aeabi_dmul+0xce>
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	000003ff 	.word	0x000003ff
 8001a84:	feffffff 	.word	0xfeffffff
 8001a88:	000007fe 	.word	0x000007fe
 8001a8c:	000007ff 	.word	0x000007ff

08001a90 <__aeabi_dsub>:
 8001a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a92:	4646      	mov	r6, r8
 8001a94:	46d6      	mov	lr, sl
 8001a96:	464f      	mov	r7, r9
 8001a98:	030c      	lsls	r4, r1, #12
 8001a9a:	b5c0      	push	{r6, r7, lr}
 8001a9c:	0fcd      	lsrs	r5, r1, #31
 8001a9e:	004e      	lsls	r6, r1, #1
 8001aa0:	0a61      	lsrs	r1, r4, #9
 8001aa2:	0f44      	lsrs	r4, r0, #29
 8001aa4:	430c      	orrs	r4, r1
 8001aa6:	00c1      	lsls	r1, r0, #3
 8001aa8:	0058      	lsls	r0, r3, #1
 8001aaa:	0d40      	lsrs	r0, r0, #21
 8001aac:	4684      	mov	ip, r0
 8001aae:	468a      	mov	sl, r1
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	0319      	lsls	r1, r3, #12
 8001ab4:	0f50      	lsrs	r0, r2, #29
 8001ab6:	0a49      	lsrs	r1, r1, #9
 8001ab8:	4301      	orrs	r1, r0
 8001aba:	48c6      	ldr	r0, [pc, #792]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001abc:	0d76      	lsrs	r6, r6, #21
 8001abe:	46a8      	mov	r8, r5
 8001ac0:	0fdb      	lsrs	r3, r3, #31
 8001ac2:	00d2      	lsls	r2, r2, #3
 8001ac4:	4584      	cmp	ip, r0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x3a>
 8001ac8:	e0d8      	b.n	8001c7c <__aeabi_dsub+0x1ec>
 8001aca:	2001      	movs	r0, #1
 8001acc:	4043      	eors	r3, r0
 8001ace:	42ab      	cmp	r3, r5
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x44>
 8001ad2:	e0a6      	b.n	8001c22 <__aeabi_dsub+0x192>
 8001ad4:	4660      	mov	r0, ip
 8001ad6:	1a35      	subs	r5, r6, r0
 8001ad8:	2d00      	cmp	r5, #0
 8001ada:	dc00      	bgt.n	8001ade <__aeabi_dsub+0x4e>
 8001adc:	e105      	b.n	8001cea <__aeabi_dsub+0x25a>
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	d110      	bne.n	8001b04 <__aeabi_dsub+0x74>
 8001ae2:	000b      	movs	r3, r1
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0x5a>
 8001ae8:	e0d7      	b.n	8001c9a <__aeabi_dsub+0x20a>
 8001aea:	1e6b      	subs	r3, r5, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d000      	beq.n	8001af2 <__aeabi_dsub+0x62>
 8001af0:	e14b      	b.n	8001d8a <__aeabi_dsub+0x2fa>
 8001af2:	4653      	mov	r3, sl
 8001af4:	1a9f      	subs	r7, r3, r2
 8001af6:	45ba      	cmp	sl, r7
 8001af8:	4180      	sbcs	r0, r0
 8001afa:	1a64      	subs	r4, r4, r1
 8001afc:	4240      	negs	r0, r0
 8001afe:	1a24      	subs	r4, r4, r0
 8001b00:	2601      	movs	r6, #1
 8001b02:	e01e      	b.n	8001b42 <__aeabi_dsub+0xb2>
 8001b04:	4bb3      	ldr	r3, [pc, #716]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001b06:	429e      	cmp	r6, r3
 8001b08:	d048      	beq.n	8001b9c <__aeabi_dsub+0x10c>
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	4319      	orrs	r1, r3
 8001b10:	2d38      	cmp	r5, #56	; 0x38
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0x86>
 8001b14:	e119      	b.n	8001d4a <__aeabi_dsub+0x2ba>
 8001b16:	2d1f      	cmp	r5, #31
 8001b18:	dd00      	ble.n	8001b1c <__aeabi_dsub+0x8c>
 8001b1a:	e14c      	b.n	8001db6 <__aeabi_dsub+0x326>
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	000f      	movs	r7, r1
 8001b20:	1b5b      	subs	r3, r3, r5
 8001b22:	0010      	movs	r0, r2
 8001b24:	409a      	lsls	r2, r3
 8001b26:	409f      	lsls	r7, r3
 8001b28:	40e8      	lsrs	r0, r5
 8001b2a:	1e53      	subs	r3, r2, #1
 8001b2c:	419a      	sbcs	r2, r3
 8001b2e:	40e9      	lsrs	r1, r5
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4317      	orrs	r7, r2
 8001b34:	4653      	mov	r3, sl
 8001b36:	1bdf      	subs	r7, r3, r7
 8001b38:	1a61      	subs	r1, r4, r1
 8001b3a:	45ba      	cmp	sl, r7
 8001b3c:	41a4      	sbcs	r4, r4
 8001b3e:	4264      	negs	r4, r4
 8001b40:	1b0c      	subs	r4, r1, r4
 8001b42:	0223      	lsls	r3, r4, #8
 8001b44:	d400      	bmi.n	8001b48 <__aeabi_dsub+0xb8>
 8001b46:	e0c5      	b.n	8001cd4 <__aeabi_dsub+0x244>
 8001b48:	0264      	lsls	r4, r4, #9
 8001b4a:	0a65      	lsrs	r5, r4, #9
 8001b4c:	2d00      	cmp	r5, #0
 8001b4e:	d100      	bne.n	8001b52 <__aeabi_dsub+0xc2>
 8001b50:	e0f6      	b.n	8001d40 <__aeabi_dsub+0x2b0>
 8001b52:	0028      	movs	r0, r5
 8001b54:	f000 fc76 	bl	8002444 <__clzsi2>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	3b08      	subs	r3, #8
 8001b5c:	2b1f      	cmp	r3, #31
 8001b5e:	dd00      	ble.n	8001b62 <__aeabi_dsub+0xd2>
 8001b60:	e0e9      	b.n	8001d36 <__aeabi_dsub+0x2a6>
 8001b62:	2220      	movs	r2, #32
 8001b64:	003c      	movs	r4, r7
 8001b66:	1ad2      	subs	r2, r2, r3
 8001b68:	409d      	lsls	r5, r3
 8001b6a:	40d4      	lsrs	r4, r2
 8001b6c:	409f      	lsls	r7, r3
 8001b6e:	4325      	orrs	r5, r4
 8001b70:	429e      	cmp	r6, r3
 8001b72:	dd00      	ble.n	8001b76 <__aeabi_dsub+0xe6>
 8001b74:	e0db      	b.n	8001d2e <__aeabi_dsub+0x29e>
 8001b76:	1b9e      	subs	r6, r3, r6
 8001b78:	1c73      	adds	r3, r6, #1
 8001b7a:	2b1f      	cmp	r3, #31
 8001b7c:	dd00      	ble.n	8001b80 <__aeabi_dsub+0xf0>
 8001b7e:	e10a      	b.n	8001d96 <__aeabi_dsub+0x306>
 8001b80:	2220      	movs	r2, #32
 8001b82:	0038      	movs	r0, r7
 8001b84:	1ad2      	subs	r2, r2, r3
 8001b86:	0029      	movs	r1, r5
 8001b88:	4097      	lsls	r7, r2
 8001b8a:	002c      	movs	r4, r5
 8001b8c:	4091      	lsls	r1, r2
 8001b8e:	40d8      	lsrs	r0, r3
 8001b90:	1e7a      	subs	r2, r7, #1
 8001b92:	4197      	sbcs	r7, r2
 8001b94:	40dc      	lsrs	r4, r3
 8001b96:	2600      	movs	r6, #0
 8001b98:	4301      	orrs	r1, r0
 8001b9a:	430f      	orrs	r7, r1
 8001b9c:	077b      	lsls	r3, r7, #29
 8001b9e:	d009      	beq.n	8001bb4 <__aeabi_dsub+0x124>
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	403b      	ands	r3, r7
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d005      	beq.n	8001bb4 <__aeabi_dsub+0x124>
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	42bb      	cmp	r3, r7
 8001bac:	41bf      	sbcs	r7, r7
 8001bae:	427f      	negs	r7, r7
 8001bb0:	19e4      	adds	r4, r4, r7
 8001bb2:	001f      	movs	r7, r3
 8001bb4:	0223      	lsls	r3, r4, #8
 8001bb6:	d525      	bpl.n	8001c04 <__aeabi_dsub+0x174>
 8001bb8:	4b86      	ldr	r3, [pc, #536]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001bba:	3601      	adds	r6, #1
 8001bbc:	429e      	cmp	r6, r3
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dsub+0x132>
 8001bc0:	e0af      	b.n	8001d22 <__aeabi_dsub+0x292>
 8001bc2:	4b85      	ldr	r3, [pc, #532]	; (8001dd8 <__aeabi_dsub+0x348>)
 8001bc4:	2501      	movs	r5, #1
 8001bc6:	401c      	ands	r4, r3
 8001bc8:	4643      	mov	r3, r8
 8001bca:	0762      	lsls	r2, r4, #29
 8001bcc:	08ff      	lsrs	r7, r7, #3
 8001bce:	0264      	lsls	r4, r4, #9
 8001bd0:	0576      	lsls	r6, r6, #21
 8001bd2:	4317      	orrs	r7, r2
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	0d76      	lsrs	r6, r6, #21
 8001bd8:	401d      	ands	r5, r3
 8001bda:	2100      	movs	r1, #0
 8001bdc:	0324      	lsls	r4, r4, #12
 8001bde:	0b23      	lsrs	r3, r4, #12
 8001be0:	0d0c      	lsrs	r4, r1, #20
 8001be2:	4a7e      	ldr	r2, [pc, #504]	; (8001ddc <__aeabi_dsub+0x34c>)
 8001be4:	0524      	lsls	r4, r4, #20
 8001be6:	431c      	orrs	r4, r3
 8001be8:	4014      	ands	r4, r2
 8001bea:	0533      	lsls	r3, r6, #20
 8001bec:	4323      	orrs	r3, r4
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	07ed      	lsls	r5, r5, #31
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	432b      	orrs	r3, r5
 8001bf6:	0038      	movs	r0, r7
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	bc1c      	pop	{r2, r3, r4}
 8001bfc:	4690      	mov	r8, r2
 8001bfe:	4699      	mov	r9, r3
 8001c00:	46a2      	mov	sl, r4
 8001c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c04:	2501      	movs	r5, #1
 8001c06:	4643      	mov	r3, r8
 8001c08:	0762      	lsls	r2, r4, #29
 8001c0a:	08ff      	lsrs	r7, r7, #3
 8001c0c:	4317      	orrs	r7, r2
 8001c0e:	08e4      	lsrs	r4, r4, #3
 8001c10:	401d      	ands	r5, r3
 8001c12:	4b70      	ldr	r3, [pc, #448]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001c14:	429e      	cmp	r6, r3
 8001c16:	d036      	beq.n	8001c86 <__aeabi_dsub+0x1f6>
 8001c18:	0324      	lsls	r4, r4, #12
 8001c1a:	0576      	lsls	r6, r6, #21
 8001c1c:	0b24      	lsrs	r4, r4, #12
 8001c1e:	0d76      	lsrs	r6, r6, #21
 8001c20:	e7db      	b.n	8001bda <__aeabi_dsub+0x14a>
 8001c22:	4663      	mov	r3, ip
 8001c24:	1af3      	subs	r3, r6, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	dc00      	bgt.n	8001c2c <__aeabi_dsub+0x19c>
 8001c2a:	e094      	b.n	8001d56 <__aeabi_dsub+0x2c6>
 8001c2c:	4660      	mov	r0, ip
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	d035      	beq.n	8001c9e <__aeabi_dsub+0x20e>
 8001c32:	4868      	ldr	r0, [pc, #416]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001c34:	4286      	cmp	r6, r0
 8001c36:	d0b1      	beq.n	8001b9c <__aeabi_dsub+0x10c>
 8001c38:	2780      	movs	r7, #128	; 0x80
 8001c3a:	043f      	lsls	r7, r7, #16
 8001c3c:	4339      	orrs	r1, r7
 8001c3e:	2b38      	cmp	r3, #56	; 0x38
 8001c40:	dc00      	bgt.n	8001c44 <__aeabi_dsub+0x1b4>
 8001c42:	e0fd      	b.n	8001e40 <__aeabi_dsub+0x3b0>
 8001c44:	430a      	orrs	r2, r1
 8001c46:	0017      	movs	r7, r2
 8001c48:	2100      	movs	r1, #0
 8001c4a:	1e7a      	subs	r2, r7, #1
 8001c4c:	4197      	sbcs	r7, r2
 8001c4e:	4457      	add	r7, sl
 8001c50:	4557      	cmp	r7, sl
 8001c52:	4180      	sbcs	r0, r0
 8001c54:	1909      	adds	r1, r1, r4
 8001c56:	4244      	negs	r4, r0
 8001c58:	190c      	adds	r4, r1, r4
 8001c5a:	0223      	lsls	r3, r4, #8
 8001c5c:	d53a      	bpl.n	8001cd4 <__aeabi_dsub+0x244>
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001c60:	3601      	adds	r6, #1
 8001c62:	429e      	cmp	r6, r3
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x1d8>
 8001c66:	e14b      	b.n	8001f00 <__aeabi_dsub+0x470>
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	; (8001dd8 <__aeabi_dsub+0x348>)
 8001c6c:	401c      	ands	r4, r3
 8001c6e:	087b      	lsrs	r3, r7, #1
 8001c70:	4017      	ands	r7, r2
 8001c72:	431f      	orrs	r7, r3
 8001c74:	07e2      	lsls	r2, r4, #31
 8001c76:	4317      	orrs	r7, r2
 8001c78:	0864      	lsrs	r4, r4, #1
 8001c7a:	e78f      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001c7c:	0008      	movs	r0, r1
 8001c7e:	4310      	orrs	r0, r2
 8001c80:	d000      	beq.n	8001c84 <__aeabi_dsub+0x1f4>
 8001c82:	e724      	b.n	8001ace <__aeabi_dsub+0x3e>
 8001c84:	e721      	b.n	8001aca <__aeabi_dsub+0x3a>
 8001c86:	0023      	movs	r3, r4
 8001c88:	433b      	orrs	r3, r7
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x1fe>
 8001c8c:	e1b9      	b.n	8002002 <__aeabi_dsub+0x572>
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	0312      	lsls	r2, r2, #12
 8001c92:	4314      	orrs	r4, r2
 8001c94:	0324      	lsls	r4, r4, #12
 8001c96:	0b24      	lsrs	r4, r4, #12
 8001c98:	e79f      	b.n	8001bda <__aeabi_dsub+0x14a>
 8001c9a:	002e      	movs	r6, r5
 8001c9c:	e77e      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001c9e:	0008      	movs	r0, r1
 8001ca0:	4310      	orrs	r0, r2
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_dsub+0x216>
 8001ca4:	e0ca      	b.n	8001e3c <__aeabi_dsub+0x3ac>
 8001ca6:	1e58      	subs	r0, r3, #1
 8001ca8:	4684      	mov	ip, r0
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_dsub+0x220>
 8001cae:	e0e7      	b.n	8001e80 <__aeabi_dsub+0x3f0>
 8001cb0:	4452      	add	r2, sl
 8001cb2:	4552      	cmp	r2, sl
 8001cb4:	4180      	sbcs	r0, r0
 8001cb6:	1864      	adds	r4, r4, r1
 8001cb8:	4240      	negs	r0, r0
 8001cba:	1824      	adds	r4, r4, r0
 8001cbc:	0017      	movs	r7, r2
 8001cbe:	2601      	movs	r6, #1
 8001cc0:	0223      	lsls	r3, r4, #8
 8001cc2:	d507      	bpl.n	8001cd4 <__aeabi_dsub+0x244>
 8001cc4:	2602      	movs	r6, #2
 8001cc6:	e7cf      	b.n	8001c68 <__aeabi_dsub+0x1d8>
 8001cc8:	4664      	mov	r4, ip
 8001cca:	432c      	orrs	r4, r5
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x240>
 8001cce:	e1b3      	b.n	8002038 <__aeabi_dsub+0x5a8>
 8001cd0:	002c      	movs	r4, r5
 8001cd2:	4667      	mov	r7, ip
 8001cd4:	077b      	lsls	r3, r7, #29
 8001cd6:	d000      	beq.n	8001cda <__aeabi_dsub+0x24a>
 8001cd8:	e762      	b.n	8001ba0 <__aeabi_dsub+0x110>
 8001cda:	0763      	lsls	r3, r4, #29
 8001cdc:	08ff      	lsrs	r7, r7, #3
 8001cde:	431f      	orrs	r7, r3
 8001ce0:	2501      	movs	r5, #1
 8001ce2:	4643      	mov	r3, r8
 8001ce4:	08e4      	lsrs	r4, r4, #3
 8001ce6:	401d      	ands	r5, r3
 8001ce8:	e793      	b.n	8001c12 <__aeabi_dsub+0x182>
 8001cea:	2d00      	cmp	r5, #0
 8001cec:	d178      	bne.n	8001de0 <__aeabi_dsub+0x350>
 8001cee:	1c75      	adds	r5, r6, #1
 8001cf0:	056d      	lsls	r5, r5, #21
 8001cf2:	0d6d      	lsrs	r5, r5, #21
 8001cf4:	2d01      	cmp	r5, #1
 8001cf6:	dc00      	bgt.n	8001cfa <__aeabi_dsub+0x26a>
 8001cf8:	e0f2      	b.n	8001ee0 <__aeabi_dsub+0x450>
 8001cfa:	4650      	mov	r0, sl
 8001cfc:	1a80      	subs	r0, r0, r2
 8001cfe:	4582      	cmp	sl, r0
 8001d00:	41bf      	sbcs	r7, r7
 8001d02:	1a65      	subs	r5, r4, r1
 8001d04:	427f      	negs	r7, r7
 8001d06:	1bed      	subs	r5, r5, r7
 8001d08:	4684      	mov	ip, r0
 8001d0a:	0228      	lsls	r0, r5, #8
 8001d0c:	d400      	bmi.n	8001d10 <__aeabi_dsub+0x280>
 8001d0e:	e08c      	b.n	8001e2a <__aeabi_dsub+0x39a>
 8001d10:	4650      	mov	r0, sl
 8001d12:	1a17      	subs	r7, r2, r0
 8001d14:	42ba      	cmp	r2, r7
 8001d16:	4192      	sbcs	r2, r2
 8001d18:	1b0c      	subs	r4, r1, r4
 8001d1a:	4255      	negs	r5, r2
 8001d1c:	1b65      	subs	r5, r4, r5
 8001d1e:	4698      	mov	r8, r3
 8001d20:	e714      	b.n	8001b4c <__aeabi_dsub+0xbc>
 8001d22:	2501      	movs	r5, #1
 8001d24:	4643      	mov	r3, r8
 8001d26:	2400      	movs	r4, #0
 8001d28:	401d      	ands	r5, r3
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	e755      	b.n	8001bda <__aeabi_dsub+0x14a>
 8001d2e:	4c2a      	ldr	r4, [pc, #168]	; (8001dd8 <__aeabi_dsub+0x348>)
 8001d30:	1af6      	subs	r6, r6, r3
 8001d32:	402c      	ands	r4, r5
 8001d34:	e732      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001d36:	003d      	movs	r5, r7
 8001d38:	3828      	subs	r0, #40	; 0x28
 8001d3a:	4085      	lsls	r5, r0
 8001d3c:	2700      	movs	r7, #0
 8001d3e:	e717      	b.n	8001b70 <__aeabi_dsub+0xe0>
 8001d40:	0038      	movs	r0, r7
 8001d42:	f000 fb7f 	bl	8002444 <__clzsi2>
 8001d46:	3020      	adds	r0, #32
 8001d48:	e706      	b.n	8001b58 <__aeabi_dsub+0xc8>
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	0017      	movs	r7, r2
 8001d4e:	2100      	movs	r1, #0
 8001d50:	1e7a      	subs	r2, r7, #1
 8001d52:	4197      	sbcs	r7, r2
 8001d54:	e6ee      	b.n	8001b34 <__aeabi_dsub+0xa4>
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d000      	beq.n	8001d5c <__aeabi_dsub+0x2cc>
 8001d5a:	e0e5      	b.n	8001f28 <__aeabi_dsub+0x498>
 8001d5c:	1c73      	adds	r3, r6, #1
 8001d5e:	469c      	mov	ip, r3
 8001d60:	055b      	lsls	r3, r3, #21
 8001d62:	0d5b      	lsrs	r3, r3, #21
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x2da>
 8001d68:	e09f      	b.n	8001eaa <__aeabi_dsub+0x41a>
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001d6c:	459c      	cmp	ip, r3
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x2e2>
 8001d70:	e0c5      	b.n	8001efe <__aeabi_dsub+0x46e>
 8001d72:	4452      	add	r2, sl
 8001d74:	4552      	cmp	r2, sl
 8001d76:	4180      	sbcs	r0, r0
 8001d78:	1864      	adds	r4, r4, r1
 8001d7a:	4240      	negs	r0, r0
 8001d7c:	1824      	adds	r4, r4, r0
 8001d7e:	07e7      	lsls	r7, r4, #31
 8001d80:	0852      	lsrs	r2, r2, #1
 8001d82:	4317      	orrs	r7, r2
 8001d84:	0864      	lsrs	r4, r4, #1
 8001d86:	4666      	mov	r6, ip
 8001d88:	e708      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001d8a:	4812      	ldr	r0, [pc, #72]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001d8c:	4285      	cmp	r5, r0
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dsub+0x302>
 8001d90:	e085      	b.n	8001e9e <__aeabi_dsub+0x40e>
 8001d92:	001d      	movs	r5, r3
 8001d94:	e6bc      	b.n	8001b10 <__aeabi_dsub+0x80>
 8001d96:	0029      	movs	r1, r5
 8001d98:	3e1f      	subs	r6, #31
 8001d9a:	40f1      	lsrs	r1, r6
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x312>
 8001da0:	e07f      	b.n	8001ea2 <__aeabi_dsub+0x412>
 8001da2:	2240      	movs	r2, #64	; 0x40
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	409d      	lsls	r5, r3
 8001da8:	432f      	orrs	r7, r5
 8001daa:	1e7d      	subs	r5, r7, #1
 8001dac:	41af      	sbcs	r7, r5
 8001dae:	2400      	movs	r4, #0
 8001db0:	430f      	orrs	r7, r1
 8001db2:	2600      	movs	r6, #0
 8001db4:	e78e      	b.n	8001cd4 <__aeabi_dsub+0x244>
 8001db6:	002b      	movs	r3, r5
 8001db8:	000f      	movs	r7, r1
 8001dba:	3b20      	subs	r3, #32
 8001dbc:	40df      	lsrs	r7, r3
 8001dbe:	2d20      	cmp	r5, #32
 8001dc0:	d071      	beq.n	8001ea6 <__aeabi_dsub+0x416>
 8001dc2:	2340      	movs	r3, #64	; 0x40
 8001dc4:	1b5d      	subs	r5, r3, r5
 8001dc6:	40a9      	lsls	r1, r5
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	1e51      	subs	r1, r2, #1
 8001dcc:	418a      	sbcs	r2, r1
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4317      	orrs	r7, r2
 8001dd2:	e6af      	b.n	8001b34 <__aeabi_dsub+0xa4>
 8001dd4:	000007ff 	.word	0x000007ff
 8001dd8:	ff7fffff 	.word	0xff7fffff
 8001ddc:	800fffff 	.word	0x800fffff
 8001de0:	2e00      	cmp	r6, #0
 8001de2:	d03e      	beq.n	8001e62 <__aeabi_dsub+0x3d2>
 8001de4:	4eb3      	ldr	r6, [pc, #716]	; (80020b4 <__aeabi_dsub+0x624>)
 8001de6:	45b4      	cmp	ip, r6
 8001de8:	d045      	beq.n	8001e76 <__aeabi_dsub+0x3e6>
 8001dea:	2680      	movs	r6, #128	; 0x80
 8001dec:	0436      	lsls	r6, r6, #16
 8001dee:	426d      	negs	r5, r5
 8001df0:	4334      	orrs	r4, r6
 8001df2:	2d38      	cmp	r5, #56	; 0x38
 8001df4:	dd00      	ble.n	8001df8 <__aeabi_dsub+0x368>
 8001df6:	e0a8      	b.n	8001f4a <__aeabi_dsub+0x4ba>
 8001df8:	2d1f      	cmp	r5, #31
 8001dfa:	dd00      	ble.n	8001dfe <__aeabi_dsub+0x36e>
 8001dfc:	e11f      	b.n	800203e <__aeabi_dsub+0x5ae>
 8001dfe:	2620      	movs	r6, #32
 8001e00:	0027      	movs	r7, r4
 8001e02:	4650      	mov	r0, sl
 8001e04:	1b76      	subs	r6, r6, r5
 8001e06:	40b7      	lsls	r7, r6
 8001e08:	40e8      	lsrs	r0, r5
 8001e0a:	4307      	orrs	r7, r0
 8001e0c:	4650      	mov	r0, sl
 8001e0e:	40b0      	lsls	r0, r6
 8001e10:	1e46      	subs	r6, r0, #1
 8001e12:	41b0      	sbcs	r0, r6
 8001e14:	40ec      	lsrs	r4, r5
 8001e16:	4338      	orrs	r0, r7
 8001e18:	1a17      	subs	r7, r2, r0
 8001e1a:	42ba      	cmp	r2, r7
 8001e1c:	4192      	sbcs	r2, r2
 8001e1e:	1b0c      	subs	r4, r1, r4
 8001e20:	4252      	negs	r2, r2
 8001e22:	1aa4      	subs	r4, r4, r2
 8001e24:	4666      	mov	r6, ip
 8001e26:	4698      	mov	r8, r3
 8001e28:	e68b      	b.n	8001b42 <__aeabi_dsub+0xb2>
 8001e2a:	4664      	mov	r4, ip
 8001e2c:	4667      	mov	r7, ip
 8001e2e:	432c      	orrs	r4, r5
 8001e30:	d000      	beq.n	8001e34 <__aeabi_dsub+0x3a4>
 8001e32:	e68b      	b.n	8001b4c <__aeabi_dsub+0xbc>
 8001e34:	2500      	movs	r5, #0
 8001e36:	2600      	movs	r6, #0
 8001e38:	2700      	movs	r7, #0
 8001e3a:	e6ea      	b.n	8001c12 <__aeabi_dsub+0x182>
 8001e3c:	001e      	movs	r6, r3
 8001e3e:	e6ad      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001e40:	2b1f      	cmp	r3, #31
 8001e42:	dc60      	bgt.n	8001f06 <__aeabi_dsub+0x476>
 8001e44:	2720      	movs	r7, #32
 8001e46:	1af8      	subs	r0, r7, r3
 8001e48:	000f      	movs	r7, r1
 8001e4a:	4684      	mov	ip, r0
 8001e4c:	4087      	lsls	r7, r0
 8001e4e:	0010      	movs	r0, r2
 8001e50:	40d8      	lsrs	r0, r3
 8001e52:	4307      	orrs	r7, r0
 8001e54:	4660      	mov	r0, ip
 8001e56:	4082      	lsls	r2, r0
 8001e58:	1e50      	subs	r0, r2, #1
 8001e5a:	4182      	sbcs	r2, r0
 8001e5c:	40d9      	lsrs	r1, r3
 8001e5e:	4317      	orrs	r7, r2
 8001e60:	e6f5      	b.n	8001c4e <__aeabi_dsub+0x1be>
 8001e62:	0026      	movs	r6, r4
 8001e64:	4650      	mov	r0, sl
 8001e66:	4306      	orrs	r6, r0
 8001e68:	d005      	beq.n	8001e76 <__aeabi_dsub+0x3e6>
 8001e6a:	43ed      	mvns	r5, r5
 8001e6c:	2d00      	cmp	r5, #0
 8001e6e:	d0d3      	beq.n	8001e18 <__aeabi_dsub+0x388>
 8001e70:	4e90      	ldr	r6, [pc, #576]	; (80020b4 <__aeabi_dsub+0x624>)
 8001e72:	45b4      	cmp	ip, r6
 8001e74:	d1bd      	bne.n	8001df2 <__aeabi_dsub+0x362>
 8001e76:	000c      	movs	r4, r1
 8001e78:	0017      	movs	r7, r2
 8001e7a:	4666      	mov	r6, ip
 8001e7c:	4698      	mov	r8, r3
 8001e7e:	e68d      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001e80:	488c      	ldr	r0, [pc, #560]	; (80020b4 <__aeabi_dsub+0x624>)
 8001e82:	4283      	cmp	r3, r0
 8001e84:	d00b      	beq.n	8001e9e <__aeabi_dsub+0x40e>
 8001e86:	4663      	mov	r3, ip
 8001e88:	e6d9      	b.n	8001c3e <__aeabi_dsub+0x1ae>
 8001e8a:	2d00      	cmp	r5, #0
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x400>
 8001e8e:	e096      	b.n	8001fbe <__aeabi_dsub+0x52e>
 8001e90:	0008      	movs	r0, r1
 8001e92:	4310      	orrs	r0, r2
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dsub+0x408>
 8001e96:	e0e2      	b.n	800205e <__aeabi_dsub+0x5ce>
 8001e98:	000c      	movs	r4, r1
 8001e9a:	0017      	movs	r7, r2
 8001e9c:	4698      	mov	r8, r3
 8001e9e:	4e85      	ldr	r6, [pc, #532]	; (80020b4 <__aeabi_dsub+0x624>)
 8001ea0:	e67c      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001ea2:	2500      	movs	r5, #0
 8001ea4:	e780      	b.n	8001da8 <__aeabi_dsub+0x318>
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	e78e      	b.n	8001dc8 <__aeabi_dsub+0x338>
 8001eaa:	0023      	movs	r3, r4
 8001eac:	4650      	mov	r0, sl
 8001eae:	4303      	orrs	r3, r0
 8001eb0:	2e00      	cmp	r6, #0
 8001eb2:	d000      	beq.n	8001eb6 <__aeabi_dsub+0x426>
 8001eb4:	e0a8      	b.n	8002008 <__aeabi_dsub+0x578>
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dsub+0x42c>
 8001eba:	e0de      	b.n	800207a <__aeabi_dsub+0x5ea>
 8001ebc:	000b      	movs	r3, r1
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x434>
 8001ec2:	e66b      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001ec4:	4452      	add	r2, sl
 8001ec6:	4552      	cmp	r2, sl
 8001ec8:	4180      	sbcs	r0, r0
 8001eca:	1864      	adds	r4, r4, r1
 8001ecc:	4240      	negs	r0, r0
 8001ece:	1824      	adds	r4, r4, r0
 8001ed0:	0017      	movs	r7, r2
 8001ed2:	0223      	lsls	r3, r4, #8
 8001ed4:	d400      	bmi.n	8001ed8 <__aeabi_dsub+0x448>
 8001ed6:	e6fd      	b.n	8001cd4 <__aeabi_dsub+0x244>
 8001ed8:	4b77      	ldr	r3, [pc, #476]	; (80020b8 <__aeabi_dsub+0x628>)
 8001eda:	4666      	mov	r6, ip
 8001edc:	401c      	ands	r4, r3
 8001ede:	e65d      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001ee0:	0025      	movs	r5, r4
 8001ee2:	4650      	mov	r0, sl
 8001ee4:	4305      	orrs	r5, r0
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	d1cf      	bne.n	8001e8a <__aeabi_dsub+0x3fa>
 8001eea:	2d00      	cmp	r5, #0
 8001eec:	d14f      	bne.n	8001f8e <__aeabi_dsub+0x4fe>
 8001eee:	000c      	movs	r4, r1
 8001ef0:	4314      	orrs	r4, r2
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x466>
 8001ef4:	e0a0      	b.n	8002038 <__aeabi_dsub+0x5a8>
 8001ef6:	000c      	movs	r4, r1
 8001ef8:	0017      	movs	r7, r2
 8001efa:	4698      	mov	r8, r3
 8001efc:	e64e      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001efe:	4666      	mov	r6, ip
 8001f00:	2400      	movs	r4, #0
 8001f02:	2700      	movs	r7, #0
 8001f04:	e685      	b.n	8001c12 <__aeabi_dsub+0x182>
 8001f06:	001f      	movs	r7, r3
 8001f08:	0008      	movs	r0, r1
 8001f0a:	3f20      	subs	r7, #32
 8001f0c:	40f8      	lsrs	r0, r7
 8001f0e:	0007      	movs	r7, r0
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d100      	bne.n	8001f16 <__aeabi_dsub+0x486>
 8001f14:	e08e      	b.n	8002034 <__aeabi_dsub+0x5a4>
 8001f16:	2040      	movs	r0, #64	; 0x40
 8001f18:	1ac3      	subs	r3, r0, r3
 8001f1a:	4099      	lsls	r1, r3
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	1e51      	subs	r1, r2, #1
 8001f20:	418a      	sbcs	r2, r1
 8001f22:	2100      	movs	r1, #0
 8001f24:	4317      	orrs	r7, r2
 8001f26:	e692      	b.n	8001c4e <__aeabi_dsub+0x1be>
 8001f28:	2e00      	cmp	r6, #0
 8001f2a:	d114      	bne.n	8001f56 <__aeabi_dsub+0x4c6>
 8001f2c:	0026      	movs	r6, r4
 8001f2e:	4650      	mov	r0, sl
 8001f30:	4306      	orrs	r6, r0
 8001f32:	d062      	beq.n	8001ffa <__aeabi_dsub+0x56a>
 8001f34:	43db      	mvns	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d15c      	bne.n	8001ff4 <__aeabi_dsub+0x564>
 8001f3a:	1887      	adds	r7, r0, r2
 8001f3c:	4297      	cmp	r7, r2
 8001f3e:	4192      	sbcs	r2, r2
 8001f40:	1864      	adds	r4, r4, r1
 8001f42:	4252      	negs	r2, r2
 8001f44:	18a4      	adds	r4, r4, r2
 8001f46:	4666      	mov	r6, ip
 8001f48:	e687      	b.n	8001c5a <__aeabi_dsub+0x1ca>
 8001f4a:	4650      	mov	r0, sl
 8001f4c:	4320      	orrs	r0, r4
 8001f4e:	1e44      	subs	r4, r0, #1
 8001f50:	41a0      	sbcs	r0, r4
 8001f52:	2400      	movs	r4, #0
 8001f54:	e760      	b.n	8001e18 <__aeabi_dsub+0x388>
 8001f56:	4e57      	ldr	r6, [pc, #348]	; (80020b4 <__aeabi_dsub+0x624>)
 8001f58:	45b4      	cmp	ip, r6
 8001f5a:	d04e      	beq.n	8001ffa <__aeabi_dsub+0x56a>
 8001f5c:	2680      	movs	r6, #128	; 0x80
 8001f5e:	0436      	lsls	r6, r6, #16
 8001f60:	425b      	negs	r3, r3
 8001f62:	4334      	orrs	r4, r6
 8001f64:	2b38      	cmp	r3, #56	; 0x38
 8001f66:	dd00      	ble.n	8001f6a <__aeabi_dsub+0x4da>
 8001f68:	e07f      	b.n	800206a <__aeabi_dsub+0x5da>
 8001f6a:	2b1f      	cmp	r3, #31
 8001f6c:	dd00      	ble.n	8001f70 <__aeabi_dsub+0x4e0>
 8001f6e:	e08b      	b.n	8002088 <__aeabi_dsub+0x5f8>
 8001f70:	2620      	movs	r6, #32
 8001f72:	0027      	movs	r7, r4
 8001f74:	4650      	mov	r0, sl
 8001f76:	1af6      	subs	r6, r6, r3
 8001f78:	40b7      	lsls	r7, r6
 8001f7a:	40d8      	lsrs	r0, r3
 8001f7c:	4307      	orrs	r7, r0
 8001f7e:	4650      	mov	r0, sl
 8001f80:	40b0      	lsls	r0, r6
 8001f82:	1e46      	subs	r6, r0, #1
 8001f84:	41b0      	sbcs	r0, r6
 8001f86:	4307      	orrs	r7, r0
 8001f88:	40dc      	lsrs	r4, r3
 8001f8a:	18bf      	adds	r7, r7, r2
 8001f8c:	e7d6      	b.n	8001f3c <__aeabi_dsub+0x4ac>
 8001f8e:	000d      	movs	r5, r1
 8001f90:	4315      	orrs	r5, r2
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dsub+0x506>
 8001f94:	e602      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001f96:	4650      	mov	r0, sl
 8001f98:	1a80      	subs	r0, r0, r2
 8001f9a:	4582      	cmp	sl, r0
 8001f9c:	41bf      	sbcs	r7, r7
 8001f9e:	1a65      	subs	r5, r4, r1
 8001fa0:	427f      	negs	r7, r7
 8001fa2:	1bed      	subs	r5, r5, r7
 8001fa4:	4684      	mov	ip, r0
 8001fa6:	0228      	lsls	r0, r5, #8
 8001fa8:	d400      	bmi.n	8001fac <__aeabi_dsub+0x51c>
 8001faa:	e68d      	b.n	8001cc8 <__aeabi_dsub+0x238>
 8001fac:	4650      	mov	r0, sl
 8001fae:	1a17      	subs	r7, r2, r0
 8001fb0:	42ba      	cmp	r2, r7
 8001fb2:	4192      	sbcs	r2, r2
 8001fb4:	1b0c      	subs	r4, r1, r4
 8001fb6:	4252      	negs	r2, r2
 8001fb8:	1aa4      	subs	r4, r4, r2
 8001fba:	4698      	mov	r8, r3
 8001fbc:	e5ee      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001fbe:	000d      	movs	r5, r1
 8001fc0:	4315      	orrs	r5, r2
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_dsub+0x536>
 8001fc4:	e76b      	b.n	8001e9e <__aeabi_dsub+0x40e>
 8001fc6:	4650      	mov	r0, sl
 8001fc8:	0767      	lsls	r7, r4, #29
 8001fca:	08c0      	lsrs	r0, r0, #3
 8001fcc:	4307      	orrs	r7, r0
 8001fce:	2080      	movs	r0, #128	; 0x80
 8001fd0:	08e4      	lsrs	r4, r4, #3
 8001fd2:	0300      	lsls	r0, r0, #12
 8001fd4:	4204      	tst	r4, r0
 8001fd6:	d007      	beq.n	8001fe8 <__aeabi_dsub+0x558>
 8001fd8:	08cd      	lsrs	r5, r1, #3
 8001fda:	4205      	tst	r5, r0
 8001fdc:	d104      	bne.n	8001fe8 <__aeabi_dsub+0x558>
 8001fde:	002c      	movs	r4, r5
 8001fe0:	4698      	mov	r8, r3
 8001fe2:	08d7      	lsrs	r7, r2, #3
 8001fe4:	0749      	lsls	r1, r1, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	0f7b      	lsrs	r3, r7, #29
 8001fea:	00e4      	lsls	r4, r4, #3
 8001fec:	431c      	orrs	r4, r3
 8001fee:	00ff      	lsls	r7, r7, #3
 8001ff0:	4e30      	ldr	r6, [pc, #192]	; (80020b4 <__aeabi_dsub+0x624>)
 8001ff2:	e5d3      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001ff4:	4e2f      	ldr	r6, [pc, #188]	; (80020b4 <__aeabi_dsub+0x624>)
 8001ff6:	45b4      	cmp	ip, r6
 8001ff8:	d1b4      	bne.n	8001f64 <__aeabi_dsub+0x4d4>
 8001ffa:	000c      	movs	r4, r1
 8001ffc:	0017      	movs	r7, r2
 8001ffe:	4666      	mov	r6, ip
 8002000:	e5cc      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8002002:	2700      	movs	r7, #0
 8002004:	2400      	movs	r4, #0
 8002006:	e5e8      	b.n	8001bda <__aeabi_dsub+0x14a>
 8002008:	2b00      	cmp	r3, #0
 800200a:	d039      	beq.n	8002080 <__aeabi_dsub+0x5f0>
 800200c:	000b      	movs	r3, r1
 800200e:	4313      	orrs	r3, r2
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x584>
 8002012:	e744      	b.n	8001e9e <__aeabi_dsub+0x40e>
 8002014:	08c0      	lsrs	r0, r0, #3
 8002016:	0767      	lsls	r7, r4, #29
 8002018:	4307      	orrs	r7, r0
 800201a:	2080      	movs	r0, #128	; 0x80
 800201c:	08e4      	lsrs	r4, r4, #3
 800201e:	0300      	lsls	r0, r0, #12
 8002020:	4204      	tst	r4, r0
 8002022:	d0e1      	beq.n	8001fe8 <__aeabi_dsub+0x558>
 8002024:	08cb      	lsrs	r3, r1, #3
 8002026:	4203      	tst	r3, r0
 8002028:	d1de      	bne.n	8001fe8 <__aeabi_dsub+0x558>
 800202a:	08d7      	lsrs	r7, r2, #3
 800202c:	0749      	lsls	r1, r1, #29
 800202e:	430f      	orrs	r7, r1
 8002030:	001c      	movs	r4, r3
 8002032:	e7d9      	b.n	8001fe8 <__aeabi_dsub+0x558>
 8002034:	2100      	movs	r1, #0
 8002036:	e771      	b.n	8001f1c <__aeabi_dsub+0x48c>
 8002038:	2500      	movs	r5, #0
 800203a:	2700      	movs	r7, #0
 800203c:	e5e9      	b.n	8001c12 <__aeabi_dsub+0x182>
 800203e:	002e      	movs	r6, r5
 8002040:	0027      	movs	r7, r4
 8002042:	3e20      	subs	r6, #32
 8002044:	40f7      	lsrs	r7, r6
 8002046:	2d20      	cmp	r5, #32
 8002048:	d02f      	beq.n	80020aa <__aeabi_dsub+0x61a>
 800204a:	2640      	movs	r6, #64	; 0x40
 800204c:	1b75      	subs	r5, r6, r5
 800204e:	40ac      	lsls	r4, r5
 8002050:	4650      	mov	r0, sl
 8002052:	4320      	orrs	r0, r4
 8002054:	1e44      	subs	r4, r0, #1
 8002056:	41a0      	sbcs	r0, r4
 8002058:	2400      	movs	r4, #0
 800205a:	4338      	orrs	r0, r7
 800205c:	e6dc      	b.n	8001e18 <__aeabi_dsub+0x388>
 800205e:	2480      	movs	r4, #128	; 0x80
 8002060:	2500      	movs	r5, #0
 8002062:	0324      	lsls	r4, r4, #12
 8002064:	4e13      	ldr	r6, [pc, #76]	; (80020b4 <__aeabi_dsub+0x624>)
 8002066:	2700      	movs	r7, #0
 8002068:	e5d3      	b.n	8001c12 <__aeabi_dsub+0x182>
 800206a:	4650      	mov	r0, sl
 800206c:	4320      	orrs	r0, r4
 800206e:	0007      	movs	r7, r0
 8002070:	1e78      	subs	r0, r7, #1
 8002072:	4187      	sbcs	r7, r0
 8002074:	2400      	movs	r4, #0
 8002076:	18bf      	adds	r7, r7, r2
 8002078:	e760      	b.n	8001f3c <__aeabi_dsub+0x4ac>
 800207a:	000c      	movs	r4, r1
 800207c:	0017      	movs	r7, r2
 800207e:	e58d      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8002080:	000c      	movs	r4, r1
 8002082:	0017      	movs	r7, r2
 8002084:	4e0b      	ldr	r6, [pc, #44]	; (80020b4 <__aeabi_dsub+0x624>)
 8002086:	e589      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8002088:	001e      	movs	r6, r3
 800208a:	0027      	movs	r7, r4
 800208c:	3e20      	subs	r6, #32
 800208e:	40f7      	lsrs	r7, r6
 8002090:	2b20      	cmp	r3, #32
 8002092:	d00c      	beq.n	80020ae <__aeabi_dsub+0x61e>
 8002094:	2640      	movs	r6, #64	; 0x40
 8002096:	1af3      	subs	r3, r6, r3
 8002098:	409c      	lsls	r4, r3
 800209a:	4650      	mov	r0, sl
 800209c:	4320      	orrs	r0, r4
 800209e:	1e44      	subs	r4, r0, #1
 80020a0:	41a0      	sbcs	r0, r4
 80020a2:	4307      	orrs	r7, r0
 80020a4:	2400      	movs	r4, #0
 80020a6:	18bf      	adds	r7, r7, r2
 80020a8:	e748      	b.n	8001f3c <__aeabi_dsub+0x4ac>
 80020aa:	2400      	movs	r4, #0
 80020ac:	e7d0      	b.n	8002050 <__aeabi_dsub+0x5c0>
 80020ae:	2400      	movs	r4, #0
 80020b0:	e7f3      	b.n	800209a <__aeabi_dsub+0x60a>
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	000007ff 	.word	0x000007ff
 80020b8:	ff7fffff 	.word	0xff7fffff

080020bc <__aeabi_d2iz>:
 80020bc:	b530      	push	{r4, r5, lr}
 80020be:	4d13      	ldr	r5, [pc, #76]	; (800210c <__aeabi_d2iz+0x50>)
 80020c0:	030a      	lsls	r2, r1, #12
 80020c2:	004b      	lsls	r3, r1, #1
 80020c4:	0b12      	lsrs	r2, r2, #12
 80020c6:	0d5b      	lsrs	r3, r3, #21
 80020c8:	0fc9      	lsrs	r1, r1, #31
 80020ca:	2400      	movs	r4, #0
 80020cc:	42ab      	cmp	r3, r5
 80020ce:	dd10      	ble.n	80020f2 <__aeabi_d2iz+0x36>
 80020d0:	4c0f      	ldr	r4, [pc, #60]	; (8002110 <__aeabi_d2iz+0x54>)
 80020d2:	42a3      	cmp	r3, r4
 80020d4:	dc0f      	bgt.n	80020f6 <__aeabi_d2iz+0x3a>
 80020d6:	2480      	movs	r4, #128	; 0x80
 80020d8:	4d0e      	ldr	r5, [pc, #56]	; (8002114 <__aeabi_d2iz+0x58>)
 80020da:	0364      	lsls	r4, r4, #13
 80020dc:	4322      	orrs	r2, r4
 80020de:	1aed      	subs	r5, r5, r3
 80020e0:	2d1f      	cmp	r5, #31
 80020e2:	dd0b      	ble.n	80020fc <__aeabi_d2iz+0x40>
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <__aeabi_d2iz+0x5c>)
 80020e6:	1ac3      	subs	r3, r0, r3
 80020e8:	40da      	lsrs	r2, r3
 80020ea:	4254      	negs	r4, r2
 80020ec:	2900      	cmp	r1, #0
 80020ee:	d100      	bne.n	80020f2 <__aeabi_d2iz+0x36>
 80020f0:	0014      	movs	r4, r2
 80020f2:	0020      	movs	r0, r4
 80020f4:	bd30      	pop	{r4, r5, pc}
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <__aeabi_d2iz+0x60>)
 80020f8:	18cc      	adds	r4, r1, r3
 80020fa:	e7fa      	b.n	80020f2 <__aeabi_d2iz+0x36>
 80020fc:	4c08      	ldr	r4, [pc, #32]	; (8002120 <__aeabi_d2iz+0x64>)
 80020fe:	40e8      	lsrs	r0, r5
 8002100:	46a4      	mov	ip, r4
 8002102:	4463      	add	r3, ip
 8002104:	409a      	lsls	r2, r3
 8002106:	4302      	orrs	r2, r0
 8002108:	e7ef      	b.n	80020ea <__aeabi_d2iz+0x2e>
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	000003fe 	.word	0x000003fe
 8002110:	0000041d 	.word	0x0000041d
 8002114:	00000433 	.word	0x00000433
 8002118:	00000413 	.word	0x00000413
 800211c:	7fffffff 	.word	0x7fffffff
 8002120:	fffffbed 	.word	0xfffffbed

08002124 <__aeabi_i2d>:
 8002124:	b570      	push	{r4, r5, r6, lr}
 8002126:	2800      	cmp	r0, #0
 8002128:	d030      	beq.n	800218c <__aeabi_i2d+0x68>
 800212a:	17c3      	asrs	r3, r0, #31
 800212c:	18c4      	adds	r4, r0, r3
 800212e:	405c      	eors	r4, r3
 8002130:	0fc5      	lsrs	r5, r0, #31
 8002132:	0020      	movs	r0, r4
 8002134:	f000 f986 	bl	8002444 <__clzsi2>
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <__aeabi_i2d+0x74>)
 800213a:	4a18      	ldr	r2, [pc, #96]	; (800219c <__aeabi_i2d+0x78>)
 800213c:	1a1b      	subs	r3, r3, r0
 800213e:	1ad2      	subs	r2, r2, r3
 8002140:	2a1f      	cmp	r2, #31
 8002142:	dd18      	ble.n	8002176 <__aeabi_i2d+0x52>
 8002144:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <__aeabi_i2d+0x7c>)
 8002146:	1ad2      	subs	r2, r2, r3
 8002148:	4094      	lsls	r4, r2
 800214a:	2200      	movs	r2, #0
 800214c:	0324      	lsls	r4, r4, #12
 800214e:	055b      	lsls	r3, r3, #21
 8002150:	0b24      	lsrs	r4, r4, #12
 8002152:	0d5b      	lsrs	r3, r3, #21
 8002154:	2100      	movs	r1, #0
 8002156:	0010      	movs	r0, r2
 8002158:	0324      	lsls	r4, r4, #12
 800215a:	0d0a      	lsrs	r2, r1, #20
 800215c:	0b24      	lsrs	r4, r4, #12
 800215e:	0512      	lsls	r2, r2, #20
 8002160:	4322      	orrs	r2, r4
 8002162:	4c10      	ldr	r4, [pc, #64]	; (80021a4 <__aeabi_i2d+0x80>)
 8002164:	051b      	lsls	r3, r3, #20
 8002166:	4022      	ands	r2, r4
 8002168:	4313      	orrs	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	07ed      	lsls	r5, r5, #31
 800216e:	085b      	lsrs	r3, r3, #1
 8002170:	432b      	orrs	r3, r5
 8002172:	0019      	movs	r1, r3
 8002174:	bd70      	pop	{r4, r5, r6, pc}
 8002176:	0021      	movs	r1, r4
 8002178:	4091      	lsls	r1, r2
 800217a:	000a      	movs	r2, r1
 800217c:	210b      	movs	r1, #11
 800217e:	1a08      	subs	r0, r1, r0
 8002180:	40c4      	lsrs	r4, r0
 8002182:	055b      	lsls	r3, r3, #21
 8002184:	0324      	lsls	r4, r4, #12
 8002186:	0b24      	lsrs	r4, r4, #12
 8002188:	0d5b      	lsrs	r3, r3, #21
 800218a:	e7e3      	b.n	8002154 <__aeabi_i2d+0x30>
 800218c:	2500      	movs	r5, #0
 800218e:	2300      	movs	r3, #0
 8002190:	2400      	movs	r4, #0
 8002192:	2200      	movs	r2, #0
 8002194:	e7de      	b.n	8002154 <__aeabi_i2d+0x30>
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	0000041e 	.word	0x0000041e
 800219c:	00000433 	.word	0x00000433
 80021a0:	00000413 	.word	0x00000413
 80021a4:	800fffff 	.word	0x800fffff

080021a8 <__aeabi_ui2d>:
 80021a8:	b510      	push	{r4, lr}
 80021aa:	1e04      	subs	r4, r0, #0
 80021ac:	d028      	beq.n	8002200 <__aeabi_ui2d+0x58>
 80021ae:	f000 f949 	bl	8002444 <__clzsi2>
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <__aeabi_ui2d+0x60>)
 80021b4:	4a15      	ldr	r2, [pc, #84]	; (800220c <__aeabi_ui2d+0x64>)
 80021b6:	1a1b      	subs	r3, r3, r0
 80021b8:	1ad2      	subs	r2, r2, r3
 80021ba:	2a1f      	cmp	r2, #31
 80021bc:	dd15      	ble.n	80021ea <__aeabi_ui2d+0x42>
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <__aeabi_ui2d+0x68>)
 80021c0:	1ad2      	subs	r2, r2, r3
 80021c2:	4094      	lsls	r4, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	0324      	lsls	r4, r4, #12
 80021c8:	055b      	lsls	r3, r3, #21
 80021ca:	0b24      	lsrs	r4, r4, #12
 80021cc:	0d5b      	lsrs	r3, r3, #21
 80021ce:	2100      	movs	r1, #0
 80021d0:	0010      	movs	r0, r2
 80021d2:	0324      	lsls	r4, r4, #12
 80021d4:	0d0a      	lsrs	r2, r1, #20
 80021d6:	0b24      	lsrs	r4, r4, #12
 80021d8:	0512      	lsls	r2, r2, #20
 80021da:	4322      	orrs	r2, r4
 80021dc:	4c0d      	ldr	r4, [pc, #52]	; (8002214 <__aeabi_ui2d+0x6c>)
 80021de:	051b      	lsls	r3, r3, #20
 80021e0:	4022      	ands	r2, r4
 80021e2:	4313      	orrs	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	0859      	lsrs	r1, r3, #1
 80021e8:	bd10      	pop	{r4, pc}
 80021ea:	0021      	movs	r1, r4
 80021ec:	4091      	lsls	r1, r2
 80021ee:	000a      	movs	r2, r1
 80021f0:	210b      	movs	r1, #11
 80021f2:	1a08      	subs	r0, r1, r0
 80021f4:	40c4      	lsrs	r4, r0
 80021f6:	055b      	lsls	r3, r3, #21
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	0d5b      	lsrs	r3, r3, #21
 80021fe:	e7e6      	b.n	80021ce <__aeabi_ui2d+0x26>
 8002200:	2300      	movs	r3, #0
 8002202:	2400      	movs	r4, #0
 8002204:	2200      	movs	r2, #0
 8002206:	e7e2      	b.n	80021ce <__aeabi_ui2d+0x26>
 8002208:	0000041e 	.word	0x0000041e
 800220c:	00000433 	.word	0x00000433
 8002210:	00000413 	.word	0x00000413
 8002214:	800fffff 	.word	0x800fffff

08002218 <__aeabi_f2d>:
 8002218:	0041      	lsls	r1, r0, #1
 800221a:	0e09      	lsrs	r1, r1, #24
 800221c:	1c4b      	adds	r3, r1, #1
 800221e:	b570      	push	{r4, r5, r6, lr}
 8002220:	b2db      	uxtb	r3, r3
 8002222:	0246      	lsls	r6, r0, #9
 8002224:	0a75      	lsrs	r5, r6, #9
 8002226:	0fc4      	lsrs	r4, r0, #31
 8002228:	2b01      	cmp	r3, #1
 800222a:	dd14      	ble.n	8002256 <__aeabi_f2d+0x3e>
 800222c:	23e0      	movs	r3, #224	; 0xe0
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	076d      	lsls	r5, r5, #29
 8002232:	0b36      	lsrs	r6, r6, #12
 8002234:	18cb      	adds	r3, r1, r3
 8002236:	2100      	movs	r1, #0
 8002238:	0d0a      	lsrs	r2, r1, #20
 800223a:	0028      	movs	r0, r5
 800223c:	0512      	lsls	r2, r2, #20
 800223e:	4d1c      	ldr	r5, [pc, #112]	; (80022b0 <__aeabi_f2d+0x98>)
 8002240:	4332      	orrs	r2, r6
 8002242:	055b      	lsls	r3, r3, #21
 8002244:	402a      	ands	r2, r5
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	4313      	orrs	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	07e4      	lsls	r4, r4, #31
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	4323      	orrs	r3, r4
 8002252:	0019      	movs	r1, r3
 8002254:	bd70      	pop	{r4, r5, r6, pc}
 8002256:	2900      	cmp	r1, #0
 8002258:	d114      	bne.n	8002284 <__aeabi_f2d+0x6c>
 800225a:	2d00      	cmp	r5, #0
 800225c:	d01e      	beq.n	800229c <__aeabi_f2d+0x84>
 800225e:	0028      	movs	r0, r5
 8002260:	f000 f8f0 	bl	8002444 <__clzsi2>
 8002264:	280a      	cmp	r0, #10
 8002266:	dc1c      	bgt.n	80022a2 <__aeabi_f2d+0x8a>
 8002268:	230b      	movs	r3, #11
 800226a:	002a      	movs	r2, r5
 800226c:	1a1b      	subs	r3, r3, r0
 800226e:	40da      	lsrs	r2, r3
 8002270:	0003      	movs	r3, r0
 8002272:	3315      	adds	r3, #21
 8002274:	409d      	lsls	r5, r3
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <__aeabi_f2d+0x9c>)
 8002278:	0312      	lsls	r2, r2, #12
 800227a:	1a1b      	subs	r3, r3, r0
 800227c:	055b      	lsls	r3, r3, #21
 800227e:	0b16      	lsrs	r6, r2, #12
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	e7d8      	b.n	8002236 <__aeabi_f2d+0x1e>
 8002284:	2d00      	cmp	r5, #0
 8002286:	d006      	beq.n	8002296 <__aeabi_f2d+0x7e>
 8002288:	0b32      	lsrs	r2, r6, #12
 800228a:	2680      	movs	r6, #128	; 0x80
 800228c:	0336      	lsls	r6, r6, #12
 800228e:	076d      	lsls	r5, r5, #29
 8002290:	4316      	orrs	r6, r2
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <__aeabi_f2d+0xa0>)
 8002294:	e7cf      	b.n	8002236 <__aeabi_f2d+0x1e>
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <__aeabi_f2d+0xa0>)
 8002298:	2600      	movs	r6, #0
 800229a:	e7cc      	b.n	8002236 <__aeabi_f2d+0x1e>
 800229c:	2300      	movs	r3, #0
 800229e:	2600      	movs	r6, #0
 80022a0:	e7c9      	b.n	8002236 <__aeabi_f2d+0x1e>
 80022a2:	0003      	movs	r3, r0
 80022a4:	002a      	movs	r2, r5
 80022a6:	3b0b      	subs	r3, #11
 80022a8:	409a      	lsls	r2, r3
 80022aa:	2500      	movs	r5, #0
 80022ac:	e7e3      	b.n	8002276 <__aeabi_f2d+0x5e>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	800fffff 	.word	0x800fffff
 80022b4:	00000389 	.word	0x00000389
 80022b8:	000007ff 	.word	0x000007ff

080022bc <__aeabi_d2f>:
 80022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022be:	004c      	lsls	r4, r1, #1
 80022c0:	0d64      	lsrs	r4, r4, #21
 80022c2:	030b      	lsls	r3, r1, #12
 80022c4:	1c62      	adds	r2, r4, #1
 80022c6:	0f45      	lsrs	r5, r0, #29
 80022c8:	0a5b      	lsrs	r3, r3, #9
 80022ca:	0552      	lsls	r2, r2, #21
 80022cc:	432b      	orrs	r3, r5
 80022ce:	0fc9      	lsrs	r1, r1, #31
 80022d0:	00c5      	lsls	r5, r0, #3
 80022d2:	0d52      	lsrs	r2, r2, #21
 80022d4:	2a01      	cmp	r2, #1
 80022d6:	dd28      	ble.n	800232a <__aeabi_d2f+0x6e>
 80022d8:	4a3a      	ldr	r2, [pc, #232]	; (80023c4 <__aeabi_d2f+0x108>)
 80022da:	18a6      	adds	r6, r4, r2
 80022dc:	2efe      	cmp	r6, #254	; 0xfe
 80022de:	dc1b      	bgt.n	8002318 <__aeabi_d2f+0x5c>
 80022e0:	2e00      	cmp	r6, #0
 80022e2:	dd3e      	ble.n	8002362 <__aeabi_d2f+0xa6>
 80022e4:	0180      	lsls	r0, r0, #6
 80022e6:	0002      	movs	r2, r0
 80022e8:	1e50      	subs	r0, r2, #1
 80022ea:	4182      	sbcs	r2, r0
 80022ec:	0f6d      	lsrs	r5, r5, #29
 80022ee:	432a      	orrs	r2, r5
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4313      	orrs	r3, r2
 80022f4:	075a      	lsls	r2, r3, #29
 80022f6:	d004      	beq.n	8002302 <__aeabi_d2f+0x46>
 80022f8:	220f      	movs	r2, #15
 80022fa:	401a      	ands	r2, r3
 80022fc:	2a04      	cmp	r2, #4
 80022fe:	d000      	beq.n	8002302 <__aeabi_d2f+0x46>
 8002300:	3304      	adds	r3, #4
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	04d2      	lsls	r2, r2, #19
 8002306:	401a      	ands	r2, r3
 8002308:	d05a      	beq.n	80023c0 <__aeabi_d2f+0x104>
 800230a:	3601      	adds	r6, #1
 800230c:	2eff      	cmp	r6, #255	; 0xff
 800230e:	d003      	beq.n	8002318 <__aeabi_d2f+0x5c>
 8002310:	019b      	lsls	r3, r3, #6
 8002312:	0a5b      	lsrs	r3, r3, #9
 8002314:	b2f4      	uxtb	r4, r6
 8002316:	e001      	b.n	800231c <__aeabi_d2f+0x60>
 8002318:	24ff      	movs	r4, #255	; 0xff
 800231a:	2300      	movs	r3, #0
 800231c:	0258      	lsls	r0, r3, #9
 800231e:	05e4      	lsls	r4, r4, #23
 8002320:	0a40      	lsrs	r0, r0, #9
 8002322:	07c9      	lsls	r1, r1, #31
 8002324:	4320      	orrs	r0, r4
 8002326:	4308      	orrs	r0, r1
 8002328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800232a:	2c00      	cmp	r4, #0
 800232c:	d007      	beq.n	800233e <__aeabi_d2f+0x82>
 800232e:	431d      	orrs	r5, r3
 8002330:	d0f2      	beq.n	8002318 <__aeabi_d2f+0x5c>
 8002332:	2080      	movs	r0, #128	; 0x80
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	0480      	lsls	r0, r0, #18
 8002338:	4303      	orrs	r3, r0
 800233a:	26ff      	movs	r6, #255	; 0xff
 800233c:	e7da      	b.n	80022f4 <__aeabi_d2f+0x38>
 800233e:	432b      	orrs	r3, r5
 8002340:	d003      	beq.n	800234a <__aeabi_d2f+0x8e>
 8002342:	2305      	movs	r3, #5
 8002344:	08db      	lsrs	r3, r3, #3
 8002346:	2cff      	cmp	r4, #255	; 0xff
 8002348:	d003      	beq.n	8002352 <__aeabi_d2f+0x96>
 800234a:	025b      	lsls	r3, r3, #9
 800234c:	0a5b      	lsrs	r3, r3, #9
 800234e:	b2e4      	uxtb	r4, r4
 8002350:	e7e4      	b.n	800231c <__aeabi_d2f+0x60>
 8002352:	2b00      	cmp	r3, #0
 8002354:	d032      	beq.n	80023bc <__aeabi_d2f+0x100>
 8002356:	2080      	movs	r0, #128	; 0x80
 8002358:	03c0      	lsls	r0, r0, #15
 800235a:	4303      	orrs	r3, r0
 800235c:	025b      	lsls	r3, r3, #9
 800235e:	0a5b      	lsrs	r3, r3, #9
 8002360:	e7dc      	b.n	800231c <__aeabi_d2f+0x60>
 8002362:	0032      	movs	r2, r6
 8002364:	3217      	adds	r2, #23
 8002366:	db14      	blt.n	8002392 <__aeabi_d2f+0xd6>
 8002368:	2280      	movs	r2, #128	; 0x80
 800236a:	271e      	movs	r7, #30
 800236c:	0412      	lsls	r2, r2, #16
 800236e:	4313      	orrs	r3, r2
 8002370:	1bbf      	subs	r7, r7, r6
 8002372:	2f1f      	cmp	r7, #31
 8002374:	dc0f      	bgt.n	8002396 <__aeabi_d2f+0xda>
 8002376:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <__aeabi_d2f+0x10c>)
 8002378:	4694      	mov	ip, r2
 800237a:	4464      	add	r4, ip
 800237c:	002a      	movs	r2, r5
 800237e:	40a5      	lsls	r5, r4
 8002380:	002e      	movs	r6, r5
 8002382:	40a3      	lsls	r3, r4
 8002384:	1e75      	subs	r5, r6, #1
 8002386:	41ae      	sbcs	r6, r5
 8002388:	40fa      	lsrs	r2, r7
 800238a:	4333      	orrs	r3, r6
 800238c:	4313      	orrs	r3, r2
 800238e:	2600      	movs	r6, #0
 8002390:	e7b0      	b.n	80022f4 <__aeabi_d2f+0x38>
 8002392:	2400      	movs	r4, #0
 8002394:	e7d5      	b.n	8002342 <__aeabi_d2f+0x86>
 8002396:	2202      	movs	r2, #2
 8002398:	4252      	negs	r2, r2
 800239a:	1b96      	subs	r6, r2, r6
 800239c:	001a      	movs	r2, r3
 800239e:	40f2      	lsrs	r2, r6
 80023a0:	2f20      	cmp	r7, #32
 80023a2:	d009      	beq.n	80023b8 <__aeabi_d2f+0xfc>
 80023a4:	4809      	ldr	r0, [pc, #36]	; (80023cc <__aeabi_d2f+0x110>)
 80023a6:	4684      	mov	ip, r0
 80023a8:	4464      	add	r4, ip
 80023aa:	40a3      	lsls	r3, r4
 80023ac:	432b      	orrs	r3, r5
 80023ae:	1e5d      	subs	r5, r3, #1
 80023b0:	41ab      	sbcs	r3, r5
 80023b2:	2600      	movs	r6, #0
 80023b4:	4313      	orrs	r3, r2
 80023b6:	e79d      	b.n	80022f4 <__aeabi_d2f+0x38>
 80023b8:	2300      	movs	r3, #0
 80023ba:	e7f7      	b.n	80023ac <__aeabi_d2f+0xf0>
 80023bc:	2300      	movs	r3, #0
 80023be:	e7ad      	b.n	800231c <__aeabi_d2f+0x60>
 80023c0:	0034      	movs	r4, r6
 80023c2:	e7bf      	b.n	8002344 <__aeabi_d2f+0x88>
 80023c4:	fffffc80 	.word	0xfffffc80
 80023c8:	fffffc82 	.word	0xfffffc82
 80023cc:	fffffca2 	.word	0xfffffca2

080023d0 <__aeabi_cfrcmple>:
 80023d0:	4684      	mov	ip, r0
 80023d2:	1c08      	adds	r0, r1, #0
 80023d4:	4661      	mov	r1, ip
 80023d6:	e7ff      	b.n	80023d8 <__aeabi_cfcmpeq>

080023d8 <__aeabi_cfcmpeq>:
 80023d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80023da:	f000 f8b7 	bl	800254c <__lesf2>
 80023de:	2800      	cmp	r0, #0
 80023e0:	d401      	bmi.n	80023e6 <__aeabi_cfcmpeq+0xe>
 80023e2:	2100      	movs	r1, #0
 80023e4:	42c8      	cmn	r0, r1
 80023e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080023e8 <__aeabi_fcmpeq>:
 80023e8:	b510      	push	{r4, lr}
 80023ea:	f000 f849 	bl	8002480 <__eqsf2>
 80023ee:	4240      	negs	r0, r0
 80023f0:	3001      	adds	r0, #1
 80023f2:	bd10      	pop	{r4, pc}

080023f4 <__aeabi_fcmplt>:
 80023f4:	b510      	push	{r4, lr}
 80023f6:	f000 f8a9 	bl	800254c <__lesf2>
 80023fa:	2800      	cmp	r0, #0
 80023fc:	db01      	blt.n	8002402 <__aeabi_fcmplt+0xe>
 80023fe:	2000      	movs	r0, #0
 8002400:	bd10      	pop	{r4, pc}
 8002402:	2001      	movs	r0, #1
 8002404:	bd10      	pop	{r4, pc}
 8002406:	46c0      	nop			; (mov r8, r8)

08002408 <__aeabi_fcmple>:
 8002408:	b510      	push	{r4, lr}
 800240a:	f000 f89f 	bl	800254c <__lesf2>
 800240e:	2800      	cmp	r0, #0
 8002410:	dd01      	ble.n	8002416 <__aeabi_fcmple+0xe>
 8002412:	2000      	movs	r0, #0
 8002414:	bd10      	pop	{r4, pc}
 8002416:	2001      	movs	r0, #1
 8002418:	bd10      	pop	{r4, pc}
 800241a:	46c0      	nop			; (mov r8, r8)

0800241c <__aeabi_fcmpgt>:
 800241c:	b510      	push	{r4, lr}
 800241e:	f000 f855 	bl	80024cc <__gesf2>
 8002422:	2800      	cmp	r0, #0
 8002424:	dc01      	bgt.n	800242a <__aeabi_fcmpgt+0xe>
 8002426:	2000      	movs	r0, #0
 8002428:	bd10      	pop	{r4, pc}
 800242a:	2001      	movs	r0, #1
 800242c:	bd10      	pop	{r4, pc}
 800242e:	46c0      	nop			; (mov r8, r8)

08002430 <__aeabi_fcmpge>:
 8002430:	b510      	push	{r4, lr}
 8002432:	f000 f84b 	bl	80024cc <__gesf2>
 8002436:	2800      	cmp	r0, #0
 8002438:	da01      	bge.n	800243e <__aeabi_fcmpge+0xe>
 800243a:	2000      	movs	r0, #0
 800243c:	bd10      	pop	{r4, pc}
 800243e:	2001      	movs	r0, #1
 8002440:	bd10      	pop	{r4, pc}
 8002442:	46c0      	nop			; (mov r8, r8)

08002444 <__clzsi2>:
 8002444:	211c      	movs	r1, #28
 8002446:	2301      	movs	r3, #1
 8002448:	041b      	lsls	r3, r3, #16
 800244a:	4298      	cmp	r0, r3
 800244c:	d301      	bcc.n	8002452 <__clzsi2+0xe>
 800244e:	0c00      	lsrs	r0, r0, #16
 8002450:	3910      	subs	r1, #16
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	4298      	cmp	r0, r3
 8002456:	d301      	bcc.n	800245c <__clzsi2+0x18>
 8002458:	0a00      	lsrs	r0, r0, #8
 800245a:	3908      	subs	r1, #8
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	4298      	cmp	r0, r3
 8002460:	d301      	bcc.n	8002466 <__clzsi2+0x22>
 8002462:	0900      	lsrs	r0, r0, #4
 8002464:	3904      	subs	r1, #4
 8002466:	a202      	add	r2, pc, #8	; (adr r2, 8002470 <__clzsi2+0x2c>)
 8002468:	5c10      	ldrb	r0, [r2, r0]
 800246a:	1840      	adds	r0, r0, r1
 800246c:	4770      	bx	lr
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	02020304 	.word	0x02020304
 8002474:	01010101 	.word	0x01010101
	...

08002480 <__eqsf2>:
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	0042      	lsls	r2, r0, #1
 8002484:	0245      	lsls	r5, r0, #9
 8002486:	024e      	lsls	r6, r1, #9
 8002488:	004c      	lsls	r4, r1, #1
 800248a:	0fc3      	lsrs	r3, r0, #31
 800248c:	0a6d      	lsrs	r5, r5, #9
 800248e:	0e12      	lsrs	r2, r2, #24
 8002490:	0a76      	lsrs	r6, r6, #9
 8002492:	0e24      	lsrs	r4, r4, #24
 8002494:	0fc9      	lsrs	r1, r1, #31
 8002496:	2001      	movs	r0, #1
 8002498:	2aff      	cmp	r2, #255	; 0xff
 800249a:	d006      	beq.n	80024aa <__eqsf2+0x2a>
 800249c:	2cff      	cmp	r4, #255	; 0xff
 800249e:	d003      	beq.n	80024a8 <__eqsf2+0x28>
 80024a0:	42a2      	cmp	r2, r4
 80024a2:	d101      	bne.n	80024a8 <__eqsf2+0x28>
 80024a4:	42b5      	cmp	r5, r6
 80024a6:	d006      	beq.n	80024b6 <__eqsf2+0x36>
 80024a8:	bd70      	pop	{r4, r5, r6, pc}
 80024aa:	2d00      	cmp	r5, #0
 80024ac:	d1fc      	bne.n	80024a8 <__eqsf2+0x28>
 80024ae:	2cff      	cmp	r4, #255	; 0xff
 80024b0:	d1fa      	bne.n	80024a8 <__eqsf2+0x28>
 80024b2:	2e00      	cmp	r6, #0
 80024b4:	d1f8      	bne.n	80024a8 <__eqsf2+0x28>
 80024b6:	428b      	cmp	r3, r1
 80024b8:	d006      	beq.n	80024c8 <__eqsf2+0x48>
 80024ba:	2001      	movs	r0, #1
 80024bc:	2a00      	cmp	r2, #0
 80024be:	d1f3      	bne.n	80024a8 <__eqsf2+0x28>
 80024c0:	0028      	movs	r0, r5
 80024c2:	1e45      	subs	r5, r0, #1
 80024c4:	41a8      	sbcs	r0, r5
 80024c6:	e7ef      	b.n	80024a8 <__eqsf2+0x28>
 80024c8:	2000      	movs	r0, #0
 80024ca:	e7ed      	b.n	80024a8 <__eqsf2+0x28>

080024cc <__gesf2>:
 80024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ce:	0042      	lsls	r2, r0, #1
 80024d0:	0245      	lsls	r5, r0, #9
 80024d2:	024c      	lsls	r4, r1, #9
 80024d4:	0fc3      	lsrs	r3, r0, #31
 80024d6:	0048      	lsls	r0, r1, #1
 80024d8:	0a6d      	lsrs	r5, r5, #9
 80024da:	0e12      	lsrs	r2, r2, #24
 80024dc:	0a64      	lsrs	r4, r4, #9
 80024de:	0e00      	lsrs	r0, r0, #24
 80024e0:	0fc9      	lsrs	r1, r1, #31
 80024e2:	2aff      	cmp	r2, #255	; 0xff
 80024e4:	d01e      	beq.n	8002524 <__gesf2+0x58>
 80024e6:	28ff      	cmp	r0, #255	; 0xff
 80024e8:	d021      	beq.n	800252e <__gesf2+0x62>
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	d10a      	bne.n	8002504 <__gesf2+0x38>
 80024ee:	426e      	negs	r6, r5
 80024f0:	416e      	adcs	r6, r5
 80024f2:	b2f6      	uxtb	r6, r6
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d10f      	bne.n	8002518 <__gesf2+0x4c>
 80024f8:	2c00      	cmp	r4, #0
 80024fa:	d10d      	bne.n	8002518 <__gesf2+0x4c>
 80024fc:	2000      	movs	r0, #0
 80024fe:	2d00      	cmp	r5, #0
 8002500:	d009      	beq.n	8002516 <__gesf2+0x4a>
 8002502:	e005      	b.n	8002510 <__gesf2+0x44>
 8002504:	2800      	cmp	r0, #0
 8002506:	d101      	bne.n	800250c <__gesf2+0x40>
 8002508:	2c00      	cmp	r4, #0
 800250a:	d001      	beq.n	8002510 <__gesf2+0x44>
 800250c:	428b      	cmp	r3, r1
 800250e:	d011      	beq.n	8002534 <__gesf2+0x68>
 8002510:	2101      	movs	r1, #1
 8002512:	4258      	negs	r0, r3
 8002514:	4308      	orrs	r0, r1
 8002516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002518:	2e00      	cmp	r6, #0
 800251a:	d0f7      	beq.n	800250c <__gesf2+0x40>
 800251c:	2001      	movs	r0, #1
 800251e:	3901      	subs	r1, #1
 8002520:	4308      	orrs	r0, r1
 8002522:	e7f8      	b.n	8002516 <__gesf2+0x4a>
 8002524:	2d00      	cmp	r5, #0
 8002526:	d0de      	beq.n	80024e6 <__gesf2+0x1a>
 8002528:	2002      	movs	r0, #2
 800252a:	4240      	negs	r0, r0
 800252c:	e7f3      	b.n	8002516 <__gesf2+0x4a>
 800252e:	2c00      	cmp	r4, #0
 8002530:	d0db      	beq.n	80024ea <__gesf2+0x1e>
 8002532:	e7f9      	b.n	8002528 <__gesf2+0x5c>
 8002534:	4282      	cmp	r2, r0
 8002536:	dceb      	bgt.n	8002510 <__gesf2+0x44>
 8002538:	db04      	blt.n	8002544 <__gesf2+0x78>
 800253a:	42a5      	cmp	r5, r4
 800253c:	d8e8      	bhi.n	8002510 <__gesf2+0x44>
 800253e:	2000      	movs	r0, #0
 8002540:	42a5      	cmp	r5, r4
 8002542:	d2e8      	bcs.n	8002516 <__gesf2+0x4a>
 8002544:	2101      	movs	r1, #1
 8002546:	1e58      	subs	r0, r3, #1
 8002548:	4308      	orrs	r0, r1
 800254a:	e7e4      	b.n	8002516 <__gesf2+0x4a>

0800254c <__lesf2>:
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	0042      	lsls	r2, r0, #1
 8002550:	024d      	lsls	r5, r1, #9
 8002552:	004c      	lsls	r4, r1, #1
 8002554:	0246      	lsls	r6, r0, #9
 8002556:	0a76      	lsrs	r6, r6, #9
 8002558:	0e12      	lsrs	r2, r2, #24
 800255a:	0fc3      	lsrs	r3, r0, #31
 800255c:	0a6d      	lsrs	r5, r5, #9
 800255e:	0e24      	lsrs	r4, r4, #24
 8002560:	0fc9      	lsrs	r1, r1, #31
 8002562:	2aff      	cmp	r2, #255	; 0xff
 8002564:	d016      	beq.n	8002594 <__lesf2+0x48>
 8002566:	2cff      	cmp	r4, #255	; 0xff
 8002568:	d018      	beq.n	800259c <__lesf2+0x50>
 800256a:	2a00      	cmp	r2, #0
 800256c:	d10a      	bne.n	8002584 <__lesf2+0x38>
 800256e:	4270      	negs	r0, r6
 8002570:	4170      	adcs	r0, r6
 8002572:	b2c0      	uxtb	r0, r0
 8002574:	2c00      	cmp	r4, #0
 8002576:	d015      	beq.n	80025a4 <__lesf2+0x58>
 8002578:	2800      	cmp	r0, #0
 800257a:	d005      	beq.n	8002588 <__lesf2+0x3c>
 800257c:	2001      	movs	r0, #1
 800257e:	3901      	subs	r1, #1
 8002580:	4308      	orrs	r0, r1
 8002582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002584:	2c00      	cmp	r4, #0
 8002586:	d013      	beq.n	80025b0 <__lesf2+0x64>
 8002588:	4299      	cmp	r1, r3
 800258a:	d014      	beq.n	80025b6 <__lesf2+0x6a>
 800258c:	2001      	movs	r0, #1
 800258e:	425b      	negs	r3, r3
 8002590:	4318      	orrs	r0, r3
 8002592:	e7f6      	b.n	8002582 <__lesf2+0x36>
 8002594:	2002      	movs	r0, #2
 8002596:	2e00      	cmp	r6, #0
 8002598:	d1f3      	bne.n	8002582 <__lesf2+0x36>
 800259a:	e7e4      	b.n	8002566 <__lesf2+0x1a>
 800259c:	2002      	movs	r0, #2
 800259e:	2d00      	cmp	r5, #0
 80025a0:	d1ef      	bne.n	8002582 <__lesf2+0x36>
 80025a2:	e7e2      	b.n	800256a <__lesf2+0x1e>
 80025a4:	2d00      	cmp	r5, #0
 80025a6:	d1e7      	bne.n	8002578 <__lesf2+0x2c>
 80025a8:	2000      	movs	r0, #0
 80025aa:	2e00      	cmp	r6, #0
 80025ac:	d0e9      	beq.n	8002582 <__lesf2+0x36>
 80025ae:	e7ed      	b.n	800258c <__lesf2+0x40>
 80025b0:	2d00      	cmp	r5, #0
 80025b2:	d1e9      	bne.n	8002588 <__lesf2+0x3c>
 80025b4:	e7ea      	b.n	800258c <__lesf2+0x40>
 80025b6:	42a2      	cmp	r2, r4
 80025b8:	dc06      	bgt.n	80025c8 <__lesf2+0x7c>
 80025ba:	dbdf      	blt.n	800257c <__lesf2+0x30>
 80025bc:	42ae      	cmp	r6, r5
 80025be:	d803      	bhi.n	80025c8 <__lesf2+0x7c>
 80025c0:	2000      	movs	r0, #0
 80025c2:	42ae      	cmp	r6, r5
 80025c4:	d3da      	bcc.n	800257c <__lesf2+0x30>
 80025c6:	e7dc      	b.n	8002582 <__lesf2+0x36>
 80025c8:	2001      	movs	r0, #1
 80025ca:	4249      	negs	r1, r1
 80025cc:	4308      	orrs	r0, r1
 80025ce:	e7d8      	b.n	8002582 <__lesf2+0x36>

080025d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_Init+0x24>)
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_Init+0x24>)
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	2110      	movs	r1, #16
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f000 f809 	bl	80025f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e6:	f006 fded 	bl	80091c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	40022000 	.word	0x40022000

080025f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8002600:	f002 f8e8 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8002604:	0002      	movs	r2, r0
 8002606:	23fa      	movs	r3, #250	; 0xfa
 8002608:	0099      	lsls	r1, r3, #2
 800260a:	0010      	movs	r0, r2
 800260c:	f7fd fd7c 	bl	8000108 <__udivsi3>
 8002610:	0003      	movs	r3, r0
 8002612:	0018      	movs	r0, r3
 8002614:	f000 f936 	bl	8002884 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	2301      	movs	r3, #1
 800261c:	425b      	negs	r3, r3
 800261e:	2200      	movs	r2, #0
 8002620:	0018      	movs	r0, r3
 8002622:	f000 f8f9 	bl	8002818 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  uwTick++;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_IncTick+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	4b02      	ldr	r3, [pc, #8]	; (8002644 <HAL_IncTick+0x14>)
 800263c:	601a      	str	r2, [r3, #0]
}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200007b0 	.word	0x200007b0

08002648 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;
 800264c:	4b02      	ldr	r3, [pc, #8]	; (8002658 <HAL_GetTick+0x10>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	200007b0 	.word	0x200007b0

0800265c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff fff0 	bl	8002648 <HAL_GetTick>
 8002668:	0003      	movs	r3, r0
 800266a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3301      	adds	r3, #1
 8002674:	d002      	beq.n	800267c <HAL_Delay+0x20>
  {
     wait++;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3301      	adds	r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	f7ff ffe3 	bl	8002648 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	1ad2      	subs	r2, r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	429a      	cmp	r2, r3
 800268c:	d3f7      	bcc.n	800267e <HAL_Delay+0x22>
  {
  }
}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	0002      	movs	r2, r0
 80026a0:	1dfb      	adds	r3, r7, #7
 80026a2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <NVIC_EnableIRQ+0x28>)
 80026a6:	1dfa      	adds	r2, r7, #7
 80026a8:	7812      	ldrb	r2, [r2, #0]
 80026aa:	0011      	movs	r1, r2
 80026ac:	221f      	movs	r2, #31
 80026ae:	400a      	ands	r2, r1
 80026b0:	2101      	movs	r1, #1
 80026b2:	4091      	lsls	r1, r2
 80026b4:	000a      	movs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b002      	add	sp, #8
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	e000e100 	.word	0xe000e100

080026c4 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	0002      	movs	r2, r0
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026d0:	4907      	ldr	r1, [pc, #28]	; (80026f0 <NVIC_DisableIRQ+0x2c>)
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	001a      	movs	r2, r3
 80026d8:	231f      	movs	r3, #31
 80026da:	4013      	ands	r3, r2
 80026dc:	2201      	movs	r2, #1
 80026de:	409a      	lsls	r2, r3
 80026e0:	0013      	movs	r3, r2
 80026e2:	2280      	movs	r2, #128	; 0x80
 80026e4:	508b      	str	r3, [r1, r2]
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f4:	b5b0      	push	{r4, r5, r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	0002      	movs	r2, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	1dfb      	adds	r3, r7, #7
 8002700:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002702:	1dfb      	adds	r3, r7, #7
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b7f      	cmp	r3, #127	; 0x7f
 8002708:	d932      	bls.n	8002770 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800270a:	4c2f      	ldr	r4, [pc, #188]	; (80027c8 <NVIC_SetPriority+0xd4>)
 800270c:	1dfb      	adds	r3, r7, #7
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	001a      	movs	r2, r3
 8002712:	230f      	movs	r3, #15
 8002714:	4013      	ands	r3, r2
 8002716:	3b08      	subs	r3, #8
 8002718:	0899      	lsrs	r1, r3, #2
 800271a:	4a2b      	ldr	r2, [pc, #172]	; (80027c8 <NVIC_SetPriority+0xd4>)
 800271c:	1dfb      	adds	r3, r7, #7
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	0018      	movs	r0, r3
 8002722:	230f      	movs	r3, #15
 8002724:	4003      	ands	r3, r0
 8002726:	3b08      	subs	r3, #8
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3306      	adds	r3, #6
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	18d3      	adds	r3, r2, r3
 8002730:	3304      	adds	r3, #4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1dfa      	adds	r2, r7, #7
 8002736:	7812      	ldrb	r2, [r2, #0]
 8002738:	0010      	movs	r0, r2
 800273a:	2203      	movs	r2, #3
 800273c:	4002      	ands	r2, r0
 800273e:	00d2      	lsls	r2, r2, #3
 8002740:	20ff      	movs	r0, #255	; 0xff
 8002742:	4090      	lsls	r0, r2
 8002744:	0002      	movs	r2, r0
 8002746:	43d2      	mvns	r2, r2
 8002748:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	019b      	lsls	r3, r3, #6
 800274e:	20ff      	movs	r0, #255	; 0xff
 8002750:	4018      	ands	r0, r3
 8002752:	1dfb      	adds	r3, r7, #7
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	001d      	movs	r5, r3
 8002758:	2303      	movs	r3, #3
 800275a:	402b      	ands	r3, r5
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4098      	lsls	r0, r3
 8002760:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002762:	431a      	orrs	r2, r3
 8002764:	1d8b      	adds	r3, r1, #6
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	18e3      	adds	r3, r4, r3
 800276a:	3304      	adds	r3, #4
 800276c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800276e:	e027      	b.n	80027c0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002770:	4c16      	ldr	r4, [pc, #88]	; (80027cc <NVIC_SetPriority+0xd8>)
 8002772:	1dfb      	adds	r3, r7, #7
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	b25b      	sxtb	r3, r3
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	4914      	ldr	r1, [pc, #80]	; (80027cc <NVIC_SetPriority+0xd8>)
 800277c:	1dfa      	adds	r2, r7, #7
 800277e:	7812      	ldrb	r2, [r2, #0]
 8002780:	b252      	sxtb	r2, r2
 8002782:	0892      	lsrs	r2, r2, #2
 8002784:	32c0      	adds	r2, #192	; 0xc0
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	5852      	ldr	r2, [r2, r1]
 800278a:	1df9      	adds	r1, r7, #7
 800278c:	7809      	ldrb	r1, [r1, #0]
 800278e:	0008      	movs	r0, r1
 8002790:	2103      	movs	r1, #3
 8002792:	4001      	ands	r1, r0
 8002794:	00c9      	lsls	r1, r1, #3
 8002796:	20ff      	movs	r0, #255	; 0xff
 8002798:	4088      	lsls	r0, r1
 800279a:	0001      	movs	r1, r0
 800279c:	43c9      	mvns	r1, r1
 800279e:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	0192      	lsls	r2, r2, #6
 80027a4:	20ff      	movs	r0, #255	; 0xff
 80027a6:	4010      	ands	r0, r2
 80027a8:	1dfa      	adds	r2, r7, #7
 80027aa:	7812      	ldrb	r2, [r2, #0]
 80027ac:	0015      	movs	r5, r2
 80027ae:	2203      	movs	r2, #3
 80027b0:	402a      	ands	r2, r5
 80027b2:	00d2      	lsls	r2, r2, #3
 80027b4:	4090      	lsls	r0, r2
 80027b6:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b8:	430a      	orrs	r2, r1
 80027ba:	33c0      	adds	r3, #192	; 0xc0
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	511a      	str	r2, [r3, r4]
}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bdb0      	pop	{r4, r5, r7, pc}
 80027c8:	e000ed00 	.word	0xe000ed00
 80027cc:	e000e100 	.word	0xe000e100

080027d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <SysTick_Config+0x40>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e2:	2301      	movs	r3, #1
 80027e4:	e010      	b.n	8002808 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <SysTick_Config+0x44>)
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	3a01      	subs	r2, #1
 80027ec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ee:	2301      	movs	r3, #1
 80027f0:	425b      	negs	r3, r3
 80027f2:	2103      	movs	r1, #3
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7ff ff7d 	bl	80026f4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <SysTick_Config+0x44>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <SysTick_Config+0x44>)
 8002802:	2207      	movs	r2, #7
 8002804:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002806:	2300      	movs	r3, #0
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b002      	add	sp, #8
 800280e:	bd80      	pop	{r7, pc}
 8002810:	00ffffff 	.word	0x00ffffff
 8002814:	e000e010 	.word	0xe000e010

08002818 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	230f      	movs	r3, #15
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	1c02      	adds	r2, r0, #0
 8002828:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	230f      	movs	r3, #15
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b25b      	sxtb	r3, r3
 8002834:	0011      	movs	r1, r2
 8002836:	0018      	movs	r0, r3
 8002838:	f7ff ff5c 	bl	80026f4 <NVIC_SetPriority>
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b004      	add	sp, #16
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	0002      	movs	r2, r0
 800284c:	1dfb      	adds	r3, r7, #7
 800284e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002850:	1dfb      	adds	r3, r7, #7
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b25b      	sxtb	r3, r3
 8002856:	0018      	movs	r0, r3
 8002858:	f7ff ff1e 	bl	8002698 <NVIC_EnableIRQ>
}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b002      	add	sp, #8
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	0002      	movs	r2, r0
 800286c:	1dfb      	adds	r3, r7, #7
 800286e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002870:	1dfb      	adds	r3, r7, #7
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b25b      	sxtb	r3, r3
 8002876:	0018      	movs	r0, r3
 8002878:	f7ff ff24 	bl	80026c4 <NVIC_DisableIRQ>
}
 800287c:	46c0      	nop			; (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	b002      	add	sp, #8
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff ff9e 	bl	80027d0 <SysTick_Config>
 8002894:	0003      	movs	r3, r0
}
 8002896:	0018      	movs	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	b002      	add	sp, #8
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d106      	bne.n	80028bc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80028b0:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	2104      	movs	r1, #4
 80028b6:	430a      	orrs	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80028ba:	e005      	b.n	80028c8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80028be:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	2104      	movs	r1, #4
 80028c4:	438a      	bics	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	e000e010 	.word	0xe000e010

080028d4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80028d8:	f000 f803 	bl	80028e2 <HAL_SYSTICK_Callback>
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e042      	b.n	8002988 <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2221      	movs	r2, #33	; 0x21
 8002906:	2102      	movs	r1, #2
 8002908:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_DMA_Init+0xa4>)
 8002916:	4013      	ands	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002922:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	0018      	movs	r0, r3
 8002954:	f000 f998 	bl	8002c88 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2221      	movs	r2, #33	; 0x21
 800297a:	2101      	movs	r1, #1
 800297c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	2100      	movs	r1, #0
 8002984:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}  
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	b004      	add	sp, #16
 800298e:	bd80      	pop	{r7, pc}
 8002990:	ffffc00f 	.word	0xffffc00f

08002994 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80029a2:	2317      	movs	r3, #23
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	5c9b      	ldrb	r3, [r3, r2]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_DMA_Start_IT+0x24>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e04f      	b.n	8002a58 <HAL_DMA_Start_IT+0xc4>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	2101      	movs	r1, #1
 80029be:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2221      	movs	r2, #33	; 0x21
 80029c4:	5c9b      	ldrb	r3, [r3, r2]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d13a      	bne.n	8002a42 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2221      	movs	r2, #33	; 0x21
 80029d0:	2102      	movs	r1, #2
 80029d2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	438a      	bics	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f91d 	bl	8002c30 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	210e      	movs	r1, #14
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e00f      	b.n	8002a30 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	210a      	movs	r1, #10
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	2104      	movs	r1, #4
 8002a2c:	438a      	bics	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e007      	b.n	8002a52 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	2100      	movs	r1, #0
 8002a48:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002a4a:	2317      	movs	r3, #23
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	2202      	movs	r2, #2
 8002a50:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002a52:	2317      	movs	r3, #23
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	781b      	ldrb	r3, [r3, #0]
} 
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b006      	add	sp, #24
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a68:	230f      	movs	r3, #15
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2221      	movs	r2, #33	; 0x21
 8002a74:	5c9b      	ldrb	r3, [r3, r2]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d007      	beq.n	8002a8c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2204      	movs	r2, #4
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a82:	230f      	movs	r3, #15
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e028      	b.n	8002ade <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	210e      	movs	r1, #14
 8002a98:	438a      	bics	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	438a      	bics	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4091      	lsls	r1, r2
 8002ab8:	000a      	movs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2221      	movs	r2, #33	; 0x21
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	2100      	movs	r1, #0
 8002aca:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	0010      	movs	r0, r2
 8002adc:	4798      	blx	r3
    } 
  }
  return status;
 8002ade:	230f      	movs	r3, #15
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	781b      	ldrb	r3, [r3, #0]
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b004      	add	sp, #16
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	2204      	movs	r2, #4
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	0013      	movs	r3, r2
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4013      	ands	r3, r2
 8002b12:	d024      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x72>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2204      	movs	r2, #4
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d020      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2220      	movs	r2, #32
 8002b24:	4013      	ands	r3, r2
 8002b26:	d107      	bne.n	8002b38 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	2104      	movs	r1, #4
 8002b34:	438a      	bics	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b40:	2104      	movs	r1, #4
 8002b42:	4091      	lsls	r1, r2
 8002b44:	000a      	movs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d100      	bne.n	8002b52 <HAL_DMA_IRQHandler+0x66>
 8002b50:	e06a      	b.n	8002c28 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	0010      	movs	r0, r2
 8002b5a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b5c:	e064      	b.n	8002c28 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2202      	movs	r2, #2
 8002b64:	409a      	lsls	r2, r3
 8002b66:	0013      	movs	r3, r2
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d02b      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xda>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2202      	movs	r2, #2
 8002b72:	4013      	ands	r3, r2
 8002b74:	d027      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d10b      	bne.n	8002b9a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	210a      	movs	r1, #10
 8002b8e:	438a      	bics	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2221      	movs	r2, #33	; 0x21
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	4091      	lsls	r1, r2
 8002ba6:	000a      	movs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d036      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	0010      	movs	r0, r2
 8002bc2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002bc4:	e030      	b.n	8002c28 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2208      	movs	r2, #8
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	0013      	movs	r3, r2
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d028      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x13c>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d024      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	210e      	movs	r1, #14
 8002bea:	438a      	bics	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4091      	lsls	r1, r2
 8002bfa:	000a      	movs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2221      	movs	r2, #33	; 0x21
 8002c08:	2101      	movs	r1, #1
 8002c0a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	2100      	movs	r1, #0
 8002c12:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	0010      	movs	r0, r2
 8002c24:	4798      	blx	r3
    }
   }
}  
 8002c26:	e7ff      	b.n	8002c28 <HAL_DMA_IRQHandler+0x13c>
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b004      	add	sp, #16
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c46:	2101      	movs	r1, #1
 8002c48:	4091      	lsls	r1, r2
 8002c4a:	000a      	movs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d108      	bne.n	8002c70 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c6e:	e007      	b.n	8002c80 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	60da      	str	r2, [r3, #12]
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b004      	add	sp, #16
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a08      	ldr	r2, [pc, #32]	; (8002cb8 <DMA_CalcBaseAndBitshift+0x30>)
 8002c96:	4694      	mov	ip, r2
 8002c98:	4463      	add	r3, ip
 8002c9a:	2114      	movs	r1, #20
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7fd fa33 	bl	8000108 <__udivsi3>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	009a      	lsls	r2, r3, #2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a03      	ldr	r2, [pc, #12]	; (8002cbc <DMA_CalcBaseAndBitshift+0x34>)
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	bffdfff8 	.word	0xbffdfff8
 8002cbc:	40020000 	.word	0x40020000

08002cc0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603a      	str	r2, [r7, #0]
 8002ccc:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cce:	2317      	movs	r3, #23
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8002cd6:	2316      	movs	r3, #22
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8002cde:	2315      	movs	r3, #21
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ce6:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <HAL_FLASH_Program+0x124>)
 8002ce8:	7e1b      	ldrb	r3, [r3, #24]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_FLASH_Program+0x32>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e074      	b.n	8002ddc <HAL_FLASH_Program+0x11c>
 8002cf2:	4b3c      	ldr	r3, [pc, #240]	; (8002de4 <HAL_FLASH_Program+0x124>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002cf8:	2317      	movs	r3, #23
 8002cfa:	18fe      	adds	r6, r7, r3
 8002cfc:	4b3a      	ldr	r3, [pc, #232]	; (8002de8 <HAL_FLASH_Program+0x128>)
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 f8ba 	bl	8002e78 <FLASH_WaitForLastOperation>
 8002d04:	0003      	movs	r3, r0
 8002d06:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8002d08:	2317      	movs	r3, #23
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d15e      	bne.n	8002dd0 <HAL_FLASH_Program+0x110>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d104      	bne.n	8002d22 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002d18:	2315      	movs	r3, #21
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	e00b      	b.n	8002d3a <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d104      	bne.n	8002d32 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002d28:	2315      	movs	r3, #21
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e003      	b.n	8002d3a <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002d32:	2315      	movs	r3, #21
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	2204      	movs	r2, #4
 8002d38:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8002d3a:	2316      	movs	r3, #22
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	e03b      	b.n	8002dbc <HAL_FLASH_Program+0xfc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002d44:	2316      	movs	r3, #22
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	005a      	lsls	r2, r3, #1
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	18d0      	adds	r0, r2, r3
 8002d50:	2316      	movs	r3, #22
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	001a      	movs	r2, r3
 8002d5a:	3a20      	subs	r2, #32
 8002d5c:	2a00      	cmp	r2, #0
 8002d5e:	db03      	blt.n	8002d68 <HAL_FLASH_Program+0xa8>
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	40d1      	lsrs	r1, r2
 8002d64:	000c      	movs	r4, r1
 8002d66:	e008      	b.n	8002d7a <HAL_FLASH_Program+0xba>
 8002d68:	2220      	movs	r2, #32
 8002d6a:	1ad2      	subs	r2, r2, r3
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4091      	lsls	r1, r2
 8002d70:	000a      	movs	r2, r1
 8002d72:	6839      	ldr	r1, [r7, #0]
 8002d74:	40d9      	lsrs	r1, r3
 8002d76:	000c      	movs	r4, r1
 8002d78:	4314      	orrs	r4, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	40da      	lsrs	r2, r3
 8002d7e:	0015      	movs	r5, r2
 8002d80:	b2a3      	uxth	r3, r4
 8002d82:	0019      	movs	r1, r3
 8002d84:	f000 f85c 	bl	8002e40 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d88:	2317      	movs	r3, #23
 8002d8a:	18fe      	adds	r6, r7, r3
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_FLASH_Program+0x128>)
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f000 f872 	bl	8002e78 <FLASH_WaitForLastOperation>
 8002d94:	0003      	movs	r3, r0
 8002d96:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <HAL_FLASH_Program+0x12c>)
 8002d9a:	4a14      	ldr	r2, [pc, #80]	; (8002dec <HAL_FLASH_Program+0x12c>)
 8002d9c:	6912      	ldr	r2, [r2, #16]
 8002d9e:	2101      	movs	r1, #1
 8002da0:	438a      	bics	r2, r1
 8002da2:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002da4:	2317      	movs	r3, #23
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10f      	bne.n	8002dce <HAL_FLASH_Program+0x10e>
    for (index = 0U; index < nbiterations; index++)
 8002dae:	2316      	movs	r3, #22
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	2316      	movs	r3, #22
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	3201      	adds	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	2316      	movs	r3, #22
 8002dbe:	18fa      	adds	r2, r7, r3
 8002dc0:	2315      	movs	r3, #21
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d3bb      	bcc.n	8002d44 <HAL_FLASH_Program+0x84>
 8002dcc:	e000      	b.n	8002dd0 <HAL_FLASH_Program+0x110>
      {
        break;
 8002dce:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <HAL_FLASH_Program+0x124>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	761a      	strb	r2, [r3, #24]

  return status;
 8002dd6:	2317      	movs	r3, #23
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	781b      	ldrb	r3, [r3, #0]
}
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b007      	add	sp, #28
 8002de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de4:	200007b8 	.word	0x200007b8
 8002de8:	0000c350 	.word	0x0000c350
 8002dec:	40022000 	.word	0x40022000

08002df0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_FLASH_Unlock+0x28>)
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <HAL_FLASH_Unlock+0x1e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_FLASH_Unlock+0x28>)
 8002e00:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <HAL_FLASH_Unlock+0x2c>)
 8002e02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <HAL_FLASH_Unlock+0x28>)
 8002e06:	4a06      	ldr	r2, [pc, #24]	; (8002e20 <HAL_FLASH_Unlock+0x30>)
 8002e08:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK; 
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <HAL_FLASH_Unlock+0x20>
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	40022000 	.word	0x40022000
 8002e1c:	45670123 	.word	0x45670123
 8002e20:	cdef89ab 	.word	0xcdef89ab

08002e24 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <HAL_FLASH_Lock+0x18>)
 8002e2a:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <HAL_FLASH_Lock+0x18>)
 8002e2c:	6912      	ldr	r2, [r2, #16]
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	430a      	orrs	r2, r1
 8002e32:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	0018      	movs	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40022000 	.word	0x40022000

08002e40 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	000a      	movs	r2, r1
 8002e4a:	1cbb      	adds	r3, r7, #2
 8002e4c:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e4e:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <FLASH_Program_HalfWord+0x30>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002e54:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <FLASH_Program_HalfWord+0x34>)
 8002e56:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <FLASH_Program_HalfWord+0x34>)
 8002e58:	6912      	ldr	r2, [r2, #16]
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	1cba      	adds	r2, r7, #2
 8002e64:	8812      	ldrh	r2, [r2, #0]
 8002e66:	801a      	strh	r2, [r3, #0]
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b002      	add	sp, #8
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200007b8 	.word	0x200007b8
 8002e74:	40022000 	.word	0x40022000

08002e78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff fbe2 	bl	8002648 <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e88:	e00f      	b.n	8002eaa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	d00c      	beq.n	8002eaa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <FLASH_WaitForLastOperation+0x2e>
 8002e96:	f7ff fbd7 	bl	8002648 <HAL_GetTick>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1ad2      	subs	r2, r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d901      	bls.n	8002eaa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e01f      	b.n	8002eea <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <FLASH_WaitForLastOperation+0x7c>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d0e9      	beq.n	8002e8a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <FLASH_WaitForLastOperation+0x7c>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d102      	bne.n	8002ec8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <FLASH_WaitForLastOperation+0x7c>)
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <FLASH_WaitForLastOperation+0x7c>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d005      	beq.n	8002ee0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <FLASH_WaitForLastOperation+0x7c>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2204      	movs	r2, #4
 8002eda:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d103      	bne.n	8002ee8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002ee0:	f000 f80a 	bl	8002ef8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	0018      	movs	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b004      	add	sp, #16
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	40022000 	.word	0x40022000

08002ef8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <FLASH_SetErrorCode+0x58>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2210      	movs	r2, #16
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d109      	bne.n	8002f22 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <FLASH_SetErrorCode+0x5c>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	2202      	movs	r2, #2
 8002f14:	431a      	orrs	r2, r3
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <FLASH_SetErrorCode+0x5c>)
 8002f18:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002f22:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <FLASH_SetErrorCode+0x58>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2204      	movs	r2, #4
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d109      	bne.n	8002f42 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <FLASH_SetErrorCode+0x5c>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	2201      	movs	r2, #1
 8002f34:	431a      	orrs	r2, r3
 8002f36:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <FLASH_SetErrorCode+0x5c>)
 8002f38:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f42:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <FLASH_SetErrorCode+0x58>)
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]
}  
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40022000 	.word	0x40022000
 8002f54:	200007b8 	.word	0x200007b8

08002f58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f62:	230f      	movs	r3, #15
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f6e:	4b33      	ldr	r3, [pc, #204]	; (800303c <HAL_FLASHEx_Erase+0xe4>)
 8002f70:	7e1b      	ldrb	r3, [r3, #24]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_FLASHEx_Erase+0x22>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e05b      	b.n	8003032 <HAL_FLASHEx_Erase+0xda>
 8002f7a:	4b30      	ldr	r3, [pc, #192]	; (800303c <HAL_FLASHEx_Erase+0xe4>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d116      	bne.n	8002fb6 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002f88:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_FLASHEx_Erase+0xe8>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7ff ff74 	bl	8002e78 <FLASH_WaitForLastOperation>
 8002f90:	1e03      	subs	r3, r0, #0
 8002f92:	d148      	bne.n	8003026 <HAL_FLASHEx_Erase+0xce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002f94:	f000 f858 	bl	8003048 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f98:	230f      	movs	r3, #15
 8002f9a:	18fc      	adds	r4, r7, r3
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <HAL_FLASHEx_Erase+0xe8>)
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f7ff ff6a 	bl	8002e78 <FLASH_WaitForLastOperation>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002fa8:	4b26      	ldr	r3, [pc, #152]	; (8003044 <HAL_FLASHEx_Erase+0xec>)
 8002faa:	4a26      	ldr	r2, [pc, #152]	; (8003044 <HAL_FLASHEx_Erase+0xec>)
 8002fac:	6912      	ldr	r2, [r2, #16]
 8002fae:	2104      	movs	r1, #4
 8002fb0:	438a      	bics	r2, r1
 8002fb2:	611a      	str	r2, [r3, #16]
 8002fb4:	e037      	b.n	8003026 <HAL_FLASHEx_Erase+0xce>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <HAL_FLASHEx_Erase+0xe8>)
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f7ff ff5d 	bl	8002e78 <FLASH_WaitForLastOperation>
 8002fbe:	1e03      	subs	r3, r0, #0
 8002fc0:	d131      	bne.n	8003026 <HAL_FLASHEx_Erase+0xce>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	4252      	negs	r2, r2
 8002fc8:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	e020      	b.n	8003014 <HAL_FLASHEx_Erase+0xbc>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 f84f 	bl	8003078 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fda:	230f      	movs	r3, #15
 8002fdc:	18fc      	adds	r4, r7, r3
 8002fde:	4b18      	ldr	r3, [pc, #96]	; (8003040 <HAL_FLASHEx_Erase+0xe8>)
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7ff ff49 	bl	8002e78 <FLASH_WaitForLastOperation>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_FLASHEx_Erase+0xec>)
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <HAL_FLASHEx_Erase+0xec>)
 8002fee:	6912      	ldr	r2, [r2, #16]
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	438a      	bics	r2, r1
 8002ff4:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8002ff6:	230f      	movs	r3, #15
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_FLASHEx_Erase+0xb0>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	601a      	str	r2, [r3, #0]
            break;
 8003006:	e00e      	b.n	8003026 <HAL_FLASHEx_Erase+0xce>
            address += FLASH_PAGE_SIZE)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	00d2      	lsls	r2, r2, #3
 800300e:	4694      	mov	ip, r2
 8003010:	4463      	add	r3, ip
 8003012:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	029a      	lsls	r2, r3, #10
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	18d2      	adds	r2, r2, r3
        for(address = pEraseInit->PageAddress;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	d8d5      	bhi.n	8002fd2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_FLASHEx_Erase+0xe4>)
 8003028:	2200      	movs	r2, #0
 800302a:	761a      	strb	r2, [r3, #24]

  return status;
 800302c:	230f      	movs	r3, #15
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	781b      	ldrb	r3, [r3, #0]
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b005      	add	sp, #20
 8003038:	bd90      	pop	{r4, r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	200007b8 	.word	0x200007b8
 8003040:	0000c350 	.word	0x0000c350
 8003044:	40022000 	.word	0x40022000

08003048 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <FLASH_MassErase+0x28>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <FLASH_MassErase+0x2c>)
 8003054:	4a07      	ldr	r2, [pc, #28]	; (8003074 <FLASH_MassErase+0x2c>)
 8003056:	6912      	ldr	r2, [r2, #16]
 8003058:	2104      	movs	r1, #4
 800305a:	430a      	orrs	r2, r1
 800305c:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <FLASH_MassErase+0x2c>)
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <FLASH_MassErase+0x2c>)
 8003062:	6912      	ldr	r2, [r2, #16]
 8003064:	2140      	movs	r1, #64	; 0x40
 8003066:	430a      	orrs	r2, r1
 8003068:	611a      	str	r2, [r3, #16]
}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	200007b8 	.word	0x200007b8
 8003074:	40022000 	.word	0x40022000

08003078 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <FLASH_PageErase+0x34>)
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <FLASH_PageErase+0x38>)
 8003088:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <FLASH_PageErase+0x38>)
 800308a:	6912      	ldr	r2, [r2, #16]
 800308c:	2102      	movs	r1, #2
 800308e:	430a      	orrs	r2, r1
 8003090:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <FLASH_PageErase+0x38>)
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <FLASH_PageErase+0x38>)
 800309a:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <FLASH_PageErase+0x38>)
 800309c:	6912      	ldr	r2, [r2, #16]
 800309e:	2140      	movs	r1, #64	; 0x40
 80030a0:	430a      	orrs	r2, r1
 80030a2:	611a      	str	r2, [r3, #16]
}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	200007b8 	.word	0x200007b8
 80030b0:	40022000 	.word	0x40022000

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80030ca:	e14f      	b.n	800336c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4091      	lsls	r1, r2
 80030d6:	000a      	movs	r2, r1
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d100      	bne.n	80030e4 <HAL_GPIO_Init+0x30>
 80030e2:	e140      	b.n	8003366 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x40>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b12      	cmp	r3, #18
 80030f2:	d123      	bne.n	800313c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	08da      	lsrs	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3208      	adds	r2, #8
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	58d3      	ldr	r3, [r2, r3]
 8003100:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2207      	movs	r2, #7
 8003106:	4013      	ands	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	220f      	movs	r2, #15
 800310c:	409a      	lsls	r2, r3
 800310e:	0013      	movs	r3, r2
 8003110:	43da      	mvns	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2107      	movs	r1, #7
 8003120:	400b      	ands	r3, r1
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	409a      	lsls	r2, r3
 8003126:	0013      	movs	r3, r2
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	08da      	lsrs	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3208      	adds	r2, #8
 8003136:	0092      	lsls	r2, r2, #2
 8003138:	6939      	ldr	r1, [r7, #16]
 800313a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	409a      	lsls	r2, r3
 800314a:	0013      	movs	r3, r2
 800314c:	43da      	mvns	r2, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2203      	movs	r2, #3
 800315a:	401a      	ands	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	409a      	lsls	r2, r3
 8003162:	0013      	movs	r3, r2
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d00b      	beq.n	8003190 <HAL_GPIO_Init+0xdc>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d007      	beq.n	8003190 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003184:	2b11      	cmp	r3, #17
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b12      	cmp	r3, #18
 800318e:	d130      	bne.n	80031f2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	409a      	lsls	r2, r3
 800319e:	0013      	movs	r3, r2
 80031a0:	43da      	mvns	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	409a      	lsls	r2, r3
 80031b2:	0013      	movs	r3, r2
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80031c6:	2201      	movs	r2, #1
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	409a      	lsls	r2, r3
 80031cc:	0013      	movs	r3, r2
 80031ce:	43da      	mvns	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	2201      	movs	r2, #1
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
 80031e4:	0013      	movs	r3, r2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	409a      	lsls	r2, r3
 8003200:	0013      	movs	r3, r2
 8003202:	43da      	mvns	r2, r3
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	409a      	lsls	r2, r3
 8003214:	0013      	movs	r3, r2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	055b      	lsls	r3, r3, #21
 800322a:	4013      	ands	r3, r2
 800322c:	d100      	bne.n	8003230 <HAL_GPIO_Init+0x17c>
 800322e:	e09a      	b.n	8003366 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003230:	4b54      	ldr	r3, [pc, #336]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 8003232:	4a54      	ldr	r2, [pc, #336]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 8003234:	6992      	ldr	r2, [r2, #24]
 8003236:	2101      	movs	r1, #1
 8003238:	430a      	orrs	r2, r1
 800323a:	619a      	str	r2, [r3, #24]
 800323c:	4b51      	ldr	r3, [pc, #324]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2201      	movs	r2, #1
 8003242:	4013      	ands	r3, r2
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8003248:	4a4f      	ldr	r2, [pc, #316]	; (8003388 <HAL_GPIO_Init+0x2d4>)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	3302      	adds	r3, #2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	589b      	ldr	r3, [r3, r2]
 8003254:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2203      	movs	r2, #3
 800325a:	4013      	ands	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	220f      	movs	r2, #15
 8003260:	409a      	lsls	r2, r3
 8003262:	0013      	movs	r3, r2
 8003264:	43da      	mvns	r2, r3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	2390      	movs	r3, #144	; 0x90
 8003270:	05db      	lsls	r3, r3, #23
 8003272:	429a      	cmp	r2, r3
 8003274:	d013      	beq.n	800329e <HAL_GPIO_Init+0x1ea>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a44      	ldr	r2, [pc, #272]	; (800338c <HAL_GPIO_Init+0x2d8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00d      	beq.n	800329a <HAL_GPIO_Init+0x1e6>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a43      	ldr	r2, [pc, #268]	; (8003390 <HAL_GPIO_Init+0x2dc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <HAL_GPIO_Init+0x1e2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a42      	ldr	r2, [pc, #264]	; (8003394 <HAL_GPIO_Init+0x2e0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d101      	bne.n	8003292 <HAL_GPIO_Init+0x1de>
 800328e:	2303      	movs	r3, #3
 8003290:	e006      	b.n	80032a0 <HAL_GPIO_Init+0x1ec>
 8003292:	2305      	movs	r3, #5
 8003294:	e004      	b.n	80032a0 <HAL_GPIO_Init+0x1ec>
 8003296:	2302      	movs	r3, #2
 8003298:	e002      	b.n	80032a0 <HAL_GPIO_Init+0x1ec>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_GPIO_Init+0x1ec>
 800329e:	2300      	movs	r3, #0
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	2103      	movs	r1, #3
 80032a4:	400a      	ands	r2, r1
 80032a6:	0092      	lsls	r2, r2, #2
 80032a8:	4093      	lsls	r3, r2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032b0:	4935      	ldr	r1, [pc, #212]	; (8003388 <HAL_GPIO_Init+0x2d4>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032be:	4b36      	ldr	r3, [pc, #216]	; (8003398 <HAL_GPIO_Init+0x2e4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	43da      	mvns	r2, r3
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	025b      	lsls	r3, r3, #9
 80032d6:	4013      	ands	r3, r2
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032e2:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <HAL_GPIO_Init+0x2e4>)
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_GPIO_Init+0x2e4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	43da      	mvns	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	029b      	lsls	r3, r3, #10
 8003300:	4013      	ands	r3, r2
 8003302:	d003      	beq.n	800330c <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800330c:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_GPIO_Init+0x2e4>)
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <HAL_GPIO_Init+0x2e4>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43da      	mvns	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	035b      	lsls	r3, r3, #13
 800332a:	4013      	ands	r3, r2
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003336:	4b18      	ldr	r3, [pc, #96]	; (8003398 <HAL_GPIO_Init+0x2e4>)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_GPIO_Init+0x2e4>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43da      	mvns	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	039b      	lsls	r3, r3, #14
 8003354:	4013      	ands	r3, r2
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003360:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <HAL_GPIO_Init+0x2e4>)
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3301      	adds	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	40da      	lsrs	r2, r3
 8003374:	1e13      	subs	r3, r2, #0
 8003376:	d000      	beq.n	800337a <HAL_GPIO_Init+0x2c6>
 8003378:	e6a8      	b.n	80030cc <HAL_GPIO_Init+0x18>
  } 
}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	46bd      	mov	sp, r7
 800337e:	b006      	add	sp, #24
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	40021000 	.word	0x40021000
 8003388:	40010000 	.word	0x40010000
 800338c:	48000400 	.word	0x48000400
 8003390:	48000800 	.word	0x48000800
 8003394:	48000c00 	.word	0x48000c00
 8003398:	40010400 	.word	0x40010400

0800339c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	0008      	movs	r0, r1
 80033a6:	0011      	movs	r1, r2
 80033a8:	1cbb      	adds	r3, r7, #2
 80033aa:	1c02      	adds	r2, r0, #0
 80033ac:	801a      	strh	r2, [r3, #0]
 80033ae:	1c7b      	adds	r3, r7, #1
 80033b0:	1c0a      	adds	r2, r1, #0
 80033b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033b4:	1c7b      	adds	r3, r7, #1
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033bc:	1cbb      	adds	r3, r7, #2
 80033be:	881a      	ldrh	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033c4:	e003      	b.n	80033ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033c6:	1cbb      	adds	r3, r7, #2
 80033c8:	881a      	ldrh	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b002      	add	sp, #8
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	0002      	movs	r2, r0
 80033e0:	1dbb      	adds	r3, r7, #6
 80033e2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	1dba      	adds	r2, r7, #6
 80033ea:	8812      	ldrh	r2, [r2, #0]
 80033ec:	4013      	ands	r3, r2
 80033ee:	d008      	beq.n	8003402 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80033f2:	1dba      	adds	r2, r7, #6
 80033f4:	8812      	ldrh	r2, [r2, #0]
 80033f6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033f8:	1dbb      	adds	r3, r7, #6
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f004 feed 	bl	80081dc <HAL_GPIO_EXTI_Callback>
  }
}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	46bd      	mov	sp, r7
 8003406:	b002      	add	sp, #8
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	40010400 	.word	0x40010400

08003410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e081      	b.n	8003526 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2241      	movs	r2, #65	; 0x41
 8003426:	5c9b      	ldrb	r3, [r3, r2]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2240      	movs	r2, #64	; 0x40
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	0018      	movs	r0, r3
 800343a:	f004 fdb7 	bl	8007fac <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2241      	movs	r2, #65	; 0x41
 8003442:	2124      	movs	r1, #36	; 0x24
 8003444:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	2101      	movs	r1, #1
 8003452:	438a      	bics	r2, r1
 8003454:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6852      	ldr	r2, [r2, #4]
 800345e:	4934      	ldr	r1, [pc, #208]	; (8003530 <HAL_I2C_Init+0x120>)
 8003460:	400a      	ands	r2, r1
 8003462:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	6892      	ldr	r2, [r2, #8]
 800346e:	4931      	ldr	r1, [pc, #196]	; (8003534 <HAL_I2C_Init+0x124>)
 8003470:	400a      	ands	r2, r1
 8003472:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d108      	bne.n	800348e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6892      	ldr	r2, [r2, #8]
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	0209      	lsls	r1, r1, #8
 8003488:	430a      	orrs	r2, r1
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	e007      	b.n	800349e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6892      	ldr	r2, [r2, #8]
 8003496:	2184      	movs	r1, #132	; 0x84
 8003498:	0209      	lsls	r1, r1, #8
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d104      	bne.n	80034b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2280      	movs	r2, #128	; 0x80
 80034ac:	0112      	lsls	r2, r2, #4
 80034ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	6852      	ldr	r2, [r2, #4]
 80034ba:	491f      	ldr	r1, [pc, #124]	; (8003538 <HAL_I2C_Init+0x128>)
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	68d2      	ldr	r2, [r2, #12]
 80034ca:	491a      	ldr	r1, [pc, #104]	; (8003534 <HAL_I2C_Init+0x124>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6911      	ldr	r1, [r2, #16]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6952      	ldr	r2, [r2, #20]
 80034dc:	4311      	orrs	r1, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6992      	ldr	r2, [r2, #24]
 80034e2:	0212      	lsls	r2, r2, #8
 80034e4:	430a      	orrs	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	69d1      	ldr	r1, [r2, #28]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6a12      	ldr	r2, [r2, #32]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	2101      	movs	r1, #1
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2241      	movs	r2, #65	; 0x41
 8003512:	2120      	movs	r1, #32
 8003514:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2242      	movs	r2, #66	; 0x42
 8003520:	2100      	movs	r1, #0
 8003522:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b002      	add	sp, #8
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	f0ffffff 	.word	0xf0ffffff
 8003534:	ffff7fff 	.word	0xffff7fff
 8003538:	02008000 	.word	0x02008000

0800353c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b089      	sub	sp, #36	; 0x24
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	0008      	movs	r0, r1
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	0019      	movs	r1, r3
 800354a:	230a      	movs	r3, #10
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	1c02      	adds	r2, r0, #0
 8003550:	801a      	strh	r2, [r3, #0]
 8003552:	2308      	movs	r3, #8
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	1c0a      	adds	r2, r1, #0
 8003558:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2241      	movs	r2, #65	; 0x41
 8003562:	5c9b      	ldrb	r3, [r3, r2]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b20      	cmp	r3, #32
 8003568:	d000      	beq.n	800356c <HAL_I2C_Master_Transmit+0x30>
 800356a:	e0f3      	b.n	8003754 <HAL_I2C_Master_Transmit+0x218>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2240      	movs	r2, #64	; 0x40
 8003570:	5c9b      	ldrb	r3, [r3, r2]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_I2C_Master_Transmit+0x3e>
 8003576:	2302      	movs	r3, #2
 8003578:	e0ed      	b.n	8003756 <HAL_I2C_Master_Transmit+0x21a>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2240      	movs	r2, #64	; 0x40
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003582:	f7ff f861 	bl	8002648 <HAL_GetTick>
 8003586:	0003      	movs	r3, r0
 8003588:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	0219      	lsls	r1, r3, #8
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2319      	movs	r3, #25
 8003596:	2201      	movs	r2, #1
 8003598:	f000 fab3 	bl	8003b02 <I2C_WaitOnFlagUntilTimeout>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d001      	beq.n	80035a4 <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0d8      	b.n	8003756 <HAL_I2C_Master_Transmit+0x21a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2241      	movs	r2, #65	; 0x41
 80035a8:	2121      	movs	r1, #33	; 0x21
 80035aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2242      	movs	r2, #66	; 0x42
 80035b0:	2110      	movs	r1, #16
 80035b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2208      	movs	r2, #8
 80035c4:	18ba      	adds	r2, r7, r2
 80035c6:	8812      	ldrh	r2, [r2, #0]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2bff      	cmp	r3, #255	; 0xff
 80035d8:	d912      	bls.n	8003600 <HAL_I2C_Master_Transmit+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	22ff      	movs	r2, #255	; 0xff
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	045c      	lsls	r4, r3, #17
 80035ea:	230a      	movs	r3, #10
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	8819      	ldrh	r1, [r3, #0]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	019b      	lsls	r3, r3, #6
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	0023      	movs	r3, r4
 80035fa:	f000 fb95 	bl	8003d28 <I2C_TransferConfig>
 80035fe:	e07a      	b.n	80036f6 <HAL_I2C_Master_Transmit+0x1ba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	b2da      	uxtb	r2, r3
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	049c      	lsls	r4, r3, #18
 8003614:	230a      	movs	r3, #10
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	8819      	ldrh	r1, [r3, #0]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	019b      	lsls	r3, r3, #6
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	0023      	movs	r3, r4
 8003624:	f000 fb80 	bl	8003d28 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003628:	e065      	b.n	80036f6 <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	0018      	movs	r0, r3
 8003632:	f000 fa9f 	bl	8003b74 <I2C_WaitOnTXISFlagUntilTimeout>
 8003636:	1e03      	subs	r3, r0, #0
 8003638:	d007      	beq.n	800364a <HAL_I2C_Master_Transmit+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	2b04      	cmp	r3, #4
 8003640:	d101      	bne.n	8003646 <HAL_I2C_Master_Transmit+0x10a>
        {
          return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e087      	b.n	8003756 <HAL_I2C_Master_Transmit+0x21a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e085      	b.n	8003756 <HAL_I2C_Master_Transmit+0x21a>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003652:	1c50      	adds	r0, r2, #1
 8003654:	68f9      	ldr	r1, [r7, #12]
 8003656:	6248      	str	r0, [r1, #36]	; 0x24
 8003658:	7812      	ldrb	r2, [r2, #0]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	2b00      	cmp	r3, #0
 800367c:	d13b      	bne.n	80036f6 <HAL_I2C_Master_Transmit+0x1ba>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d036      	beq.n	80036f6 <HAL_I2C_Master_Transmit+0x1ba>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	0013      	movs	r3, r2
 8003692:	2200      	movs	r2, #0
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	f000 fa34 	bl	8003b02 <I2C_WaitOnFlagUntilTimeout>
 800369a:	1e03      	subs	r3, r0, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_Master_Transmit+0x166>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e059      	b.n	8003756 <HAL_I2C_Master_Transmit+0x21a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2bff      	cmp	r3, #255	; 0xff
 80036aa:	d911      	bls.n	80036d0 <HAL_I2C_Master_Transmit+0x194>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	22ff      	movs	r2, #255	; 0xff
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	045c      	lsls	r4, r3, #17
 80036bc:	230a      	movs	r3, #10
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	8819      	ldrh	r1, [r3, #0]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	2300      	movs	r3, #0
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	0023      	movs	r3, r4
 80036ca:	f000 fb2d 	bl	8003d28 <I2C_TransferConfig>
 80036ce:	e012      	b.n	80036f6 <HAL_I2C_Master_Transmit+0x1ba>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	049c      	lsls	r4, r3, #18
 80036e4:	230a      	movs	r3, #10
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	8819      	ldrh	r1, [r3, #0]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	2300      	movs	r3, #0
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	0023      	movs	r3, r4
 80036f2:	f000 fb19 	bl	8003d28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d194      	bne.n	800362a <HAL_I2C_Master_Transmit+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	0018      	movs	r0, r3
 8003708:	f000 fa73 	bl	8003bf2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800370c:	1e03      	subs	r3, r0, #0
 800370e:	d007      	beq.n	8003720 <HAL_I2C_Master_Transmit+0x1e4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003714:	2b04      	cmp	r3, #4
 8003716:	d101      	bne.n	800371c <HAL_I2C_Master_Transmit+0x1e0>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e01c      	b.n	8003756 <HAL_I2C_Master_Transmit+0x21a>
      }
      else
      {
        return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e01a      	b.n	8003756 <HAL_I2C_Master_Transmit+0x21a>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2220      	movs	r2, #32
 8003726:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	6852      	ldr	r2, [r2, #4]
 8003732:	490b      	ldr	r1, [pc, #44]	; (8003760 <HAL_I2C_Master_Transmit+0x224>)
 8003734:	400a      	ands	r2, r1
 8003736:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2241      	movs	r2, #65	; 0x41
 800373c:	2120      	movs	r1, #32
 800373e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2242      	movs	r2, #66	; 0x42
 8003744:	2100      	movs	r1, #0
 8003746:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2240      	movs	r2, #64	; 0x40
 800374c:	2100      	movs	r1, #0
 800374e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_I2C_Master_Transmit+0x21a>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b007      	add	sp, #28
 800375c:	bd90      	pop	{r4, r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	fe00e800 	.word	0xfe00e800

08003764 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	000c      	movs	r4, r1
 800376e:	0010      	movs	r0, r2
 8003770:	0019      	movs	r1, r3
 8003772:	230a      	movs	r3, #10
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	1c22      	adds	r2, r4, #0
 8003778:	801a      	strh	r2, [r3, #0]
 800377a:	2308      	movs	r3, #8
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	1c02      	adds	r2, r0, #0
 8003780:	801a      	strh	r2, [r3, #0]
 8003782:	1dbb      	adds	r3, r7, #6
 8003784:	1c0a      	adds	r2, r1, #0
 8003786:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2241      	movs	r2, #65	; 0x41
 8003790:	5c9b      	ldrb	r3, [r3, r2]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b20      	cmp	r3, #32
 8003796:	d000      	beq.n	800379a <HAL_I2C_Mem_Read+0x36>
 8003798:	e11c      	b.n	80039d4 <HAL_I2C_Mem_Read+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <HAL_I2C_Mem_Read+0x46>
 80037a0:	232c      	movs	r3, #44	; 0x2c
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_I2C_Mem_Read+0x4a>
    {
      return  HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e113      	b.n	80039d6 <HAL_I2C_Mem_Read+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2240      	movs	r2, #64	; 0x40
 80037b2:	5c9b      	ldrb	r3, [r3, r2]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_I2C_Mem_Read+0x58>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e10c      	b.n	80039d6 <HAL_I2C_Mem_Read+0x272>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2240      	movs	r2, #64	; 0x40
 80037c0:	2101      	movs	r1, #1
 80037c2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037c4:	f7fe ff40 	bl	8002648 <HAL_GetTick>
 80037c8:	0003      	movs	r3, r0
 80037ca:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	0219      	lsls	r1, r3, #8
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2319      	movs	r3, #25
 80037d8:	2201      	movs	r2, #1
 80037da:	f000 f992 	bl	8003b02 <I2C_WaitOnFlagUntilTimeout>
 80037de:	1e03      	subs	r3, r0, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Mem_Read+0x82>
    {
      return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0f7      	b.n	80039d6 <HAL_I2C_Mem_Read+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2241      	movs	r2, #65	; 0x41
 80037ea:	2122      	movs	r1, #34	; 0x22
 80037ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2242      	movs	r2, #66	; 0x42
 80037f2:	2140      	movs	r1, #64	; 0x40
 80037f4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	222c      	movs	r2, #44	; 0x2c
 8003806:	18ba      	adds	r2, r7, r2
 8003808:	8812      	ldrh	r2, [r2, #0]
 800380a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003812:	1dbb      	adds	r3, r7, #6
 8003814:	881c      	ldrh	r4, [r3, #0]
 8003816:	2308      	movs	r3, #8
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	881a      	ldrh	r2, [r3, #0]
 800381c:	230a      	movs	r3, #10
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	8819      	ldrh	r1, [r3, #0]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	0023      	movs	r3, r4
 800382e:	f000 f8d9 	bl	80039e4 <I2C_RequestMemoryRead>
 8003832:	1e03      	subs	r3, r0, #0
 8003834:	d00f      	beq.n	8003856 <HAL_I2C_Mem_Read+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	2b04      	cmp	r3, #4
 800383c:	d105      	bne.n	800384a <HAL_I2C_Mem_Read+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2240      	movs	r2, #64	; 0x40
 8003842:	2100      	movs	r1, #0
 8003844:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e0c5      	b.n	80039d6 <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	2100      	movs	r1, #0
 8003850:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0bf      	b.n	80039d6 <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	2bff      	cmp	r3, #255	; 0xff
 800385e:	d912      	bls.n	8003886 <HAL_I2C_Mem_Read+0x122>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	22ff      	movs	r2, #255	; 0xff
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	b2da      	uxtb	r2, r3
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	045c      	lsls	r4, r3, #17
 8003870:	230a      	movs	r3, #10
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	8819      	ldrh	r1, [r3, #0]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	2390      	movs	r3, #144	; 0x90
 800387a:	019b      	lsls	r3, r3, #6
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	0023      	movs	r3, r4
 8003880:	f000 fa52 	bl	8003d28 <I2C_TransferConfig>
 8003884:	e013      	b.n	80038ae <HAL_I2C_Mem_Read+0x14a>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	b2da      	uxtb	r2, r3
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	049c      	lsls	r4, r3, #18
 800389a:	230a      	movs	r3, #10
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	8819      	ldrh	r1, [r3, #0]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	2390      	movs	r3, #144	; 0x90
 80038a4:	019b      	lsls	r3, r3, #6
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	0023      	movs	r3, r4
 80038aa:	f000 fa3d 	bl	8003d28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	0013      	movs	r3, r2
 80038b8:	2200      	movs	r2, #0
 80038ba:	2104      	movs	r1, #4
 80038bc:	f000 f921 	bl	8003b02 <I2C_WaitOnFlagUntilTimeout>
 80038c0:	1e03      	subs	r3, r0, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_I2C_Mem_Read+0x164>
      {
        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e086      	b.n	80039d6 <HAL_I2C_Mem_Read+0x272>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	1c59      	adds	r1, r3, #1
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	6251      	str	r1, [r2, #36]	; 0x24
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d13b      	bne.n	8003976 <HAL_I2C_Mem_Read+0x212>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d036      	beq.n	8003976 <HAL_I2C_Mem_Read+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	0013      	movs	r3, r2
 8003912:	2200      	movs	r2, #0
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	f000 f8f4 	bl	8003b02 <I2C_WaitOnFlagUntilTimeout>
 800391a:	1e03      	subs	r3, r0, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Mem_Read+0x1be>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e059      	b.n	80039d6 <HAL_I2C_Mem_Read+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2bff      	cmp	r3, #255	; 0xff
 800392a:	d911      	bls.n	8003950 <HAL_I2C_Mem_Read+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	22ff      	movs	r2, #255	; 0xff
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003936:	b2da      	uxtb	r2, r3
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	045c      	lsls	r4, r3, #17
 800393c:	230a      	movs	r3, #10
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	8819      	ldrh	r1, [r3, #0]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	2300      	movs	r3, #0
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	0023      	movs	r3, r4
 800394a:	f000 f9ed 	bl	8003d28 <I2C_TransferConfig>
 800394e:	e012      	b.n	8003976 <HAL_I2C_Mem_Read+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	b2da      	uxtb	r2, r3
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	049c      	lsls	r4, r3, #18
 8003964:	230a      	movs	r3, #10
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	8819      	ldrh	r1, [r3, #0]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	2300      	movs	r3, #0
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	0023      	movs	r3, r4
 8003972:	f000 f9d9 	bl	8003d28 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d196      	bne.n	80038ae <HAL_I2C_Mem_Read+0x14a>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	0018      	movs	r0, r3
 8003988:	f000 f933 	bl	8003bf2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800398c:	1e03      	subs	r3, r0, #0
 800398e:	d007      	beq.n	80039a0 <HAL_I2C_Mem_Read+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	2b04      	cmp	r3, #4
 8003996:	d101      	bne.n	800399c <HAL_I2C_Mem_Read+0x238>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e01c      	b.n	80039d6 <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e01a      	b.n	80039d6 <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2220      	movs	r2, #32
 80039a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	6852      	ldr	r2, [r2, #4]
 80039b2:	490b      	ldr	r1, [pc, #44]	; (80039e0 <HAL_I2C_Mem_Read+0x27c>)
 80039b4:	400a      	ands	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2241      	movs	r2, #65	; 0x41
 80039bc:	2120      	movs	r1, #32
 80039be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2242      	movs	r2, #66	; 0x42
 80039c4:	2100      	movs	r1, #0
 80039c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	2100      	movs	r1, #0
 80039ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_I2C_Mem_Read+0x272>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b007      	add	sp, #28
 80039dc:	bd90      	pop	{r4, r7, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	fe00e800 	.word	0xfe00e800

080039e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	000c      	movs	r4, r1
 80039ee:	0010      	movs	r0, r2
 80039f0:	0019      	movs	r1, r3
 80039f2:	230a      	movs	r3, #10
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	1c22      	adds	r2, r4, #0
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	2308      	movs	r3, #8
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	1c02      	adds	r2, r0, #0
 8003a00:	801a      	strh	r2, [r3, #0]
 8003a02:	1dbb      	adds	r3, r7, #6
 8003a04:	1c0a      	adds	r2, r1, #0
 8003a06:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a08:	1dbb      	adds	r3, r7, #6
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	230a      	movs	r3, #10
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	8819      	ldrh	r1, [r3, #0]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	019b      	lsls	r3, r3, #6
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f000 f983 	bl	8003d28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	6a39      	ldr	r1, [r7, #32]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f000 f8a3 	bl	8003b74 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a2e:	1e03      	subs	r3, r0, #0
 8003a30:	d007      	beq.n	8003a42 <I2C_RequestMemoryRead+0x5e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d101      	bne.n	8003a3e <I2C_RequestMemoryRead+0x5a>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e03b      	b.n	8003ab6 <I2C_RequestMemoryRead+0xd2>
    }
    else
    {
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e039      	b.n	8003ab6 <I2C_RequestMemoryRead+0xd2>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a42:	1dbb      	adds	r3, r7, #6
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d107      	bne.n	8003a5a <I2C_RequestMemoryRead+0x76>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2208      	movs	r2, #8
 8003a50:	18ba      	adds	r2, r7, r2
 8003a52:	8812      	ldrh	r2, [r2, #0]
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
 8003a58:	e01f      	b.n	8003a9a <I2C_RequestMemoryRead+0xb6>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2208      	movs	r2, #8
 8003a60:	18ba      	adds	r2, r7, r2
 8003a62:	8812      	ldrh	r2, [r2, #0]
 8003a64:	0a12      	lsrs	r2, r2, #8
 8003a66:	b292      	uxth	r2, r2
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	6a39      	ldr	r1, [r7, #32]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 f87e 	bl	8003b74 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d007      	beq.n	8003a8c <I2C_RequestMemoryRead+0xa8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d101      	bne.n	8003a88 <I2C_RequestMemoryRead+0xa4>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e016      	b.n	8003ab6 <I2C_RequestMemoryRead+0xd2>
      }
      else
      {
        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e014      	b.n	8003ab6 <I2C_RequestMemoryRead+0xd2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2208      	movs	r2, #8
 8003a92:	18ba      	adds	r2, r7, r2
 8003a94:	8812      	ldrh	r2, [r2, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a9a:	6a3a      	ldr	r2, [r7, #32]
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	0013      	movs	r3, r2
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2140      	movs	r1, #64	; 0x40
 8003aa8:	f000 f82b 	bl	8003b02 <I2C_WaitOnFlagUntilTimeout>
 8003aac:	1e03      	subs	r3, r0, #0
 8003aae:	d001      	beq.n	8003ab4 <I2C_RequestMemoryRead+0xd0>
  {
    return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e000      	b.n	8003ab6 <I2C_RequestMemoryRead+0xd2>
  }

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b005      	add	sp, #20
 8003abc:	bd90      	pop	{r4, r7, pc}

08003abe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2202      	movs	r2, #2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d103      	bne.n	8003adc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d007      	beq.n	8003afa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	6992      	ldr	r2, [r2, #24]
 8003af4:	2101      	movs	r1, #1
 8003af6:	430a      	orrs	r2, r1
 8003af8:	619a      	str	r2, [r3, #24]
  }
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b002      	add	sp, #8
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	1dfb      	adds	r3, r7, #7
 8003b10:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b12:	e01b      	b.n	8003b4c <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	3301      	adds	r3, #1
 8003b18:	d018      	beq.n	8003b4c <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003b20:	f7fe fd92 	bl	8002648 <HAL_GetTick>
 8003b24:	0002      	movs	r2, r0
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	1ad2      	subs	r2, r2, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d90d      	bls.n	8003b4c <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2241      	movs	r2, #65	; 0x41
 8003b34:	2120      	movs	r1, #32
 8003b36:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2242      	movs	r2, #66	; 0x42
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2240      	movs	r2, #64	; 0x40
 8003b44:	2100      	movs	r1, #0
 8003b46:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e00f      	b.n	8003b6c <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	401a      	ands	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	425a      	negs	r2, r3
 8003b5c:	4153      	adcs	r3, r2
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	001a      	movs	r2, r3
 8003b62:	1dfb      	adds	r3, r7, #7
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d0d4      	beq.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b004      	add	sp, #16
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b80:	e02b      	b.n	8003bda <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 f86f 	bl	8003c6c <I2C_IsAcknowledgeFailed>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d001      	beq.n	8003b96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e029      	b.n	8003bea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	d01e      	beq.n	8003bda <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003ba2:	f7fe fd51 	bl	8002648 <HAL_GetTick>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	1ad2      	subs	r2, r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d913      	bls.n	8003bda <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2241      	movs	r2, #65	; 0x41
 8003bc2:	2120      	movs	r1, #32
 8003bc4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2242      	movs	r2, #66	; 0x42
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2240      	movs	r2, #64	; 0x40
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e007      	b.n	8003bea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2202      	movs	r2, #2
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d1cc      	bne.n	8003b82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b004      	add	sp, #16
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bfe:	e028      	b.n	8003c52 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f000 f830 	bl	8003c6c <I2C_IsAcknowledgeFailed>
 8003c0c:	1e03      	subs	r3, r0, #0
 8003c0e:	d001      	beq.n	8003c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e026      	b.n	8003c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c1a:	f7fe fd15 	bl	8002648 <HAL_GetTick>
 8003c1e:	0002      	movs	r2, r0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	1ad2      	subs	r2, r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d913      	bls.n	8003c52 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	2220      	movs	r2, #32
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2241      	movs	r2, #65	; 0x41
 8003c3a:	2120      	movs	r1, #32
 8003c3c:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2242      	movs	r2, #66	; 0x42
 8003c42:	2100      	movs	r1, #0
 8003c44:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2240      	movs	r2, #64	; 0x40
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e007      	b.n	8003c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d1cf      	bne.n	8003c00 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	0018      	movs	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b004      	add	sp, #16
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d148      	bne.n	8003d18 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c86:	e01b      	b.n	8003cc0 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	d018      	beq.n	8003cc0 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <I2C_IsAcknowledgeFailed+0x38>
 8003c94:	f7fe fcd8 	bl	8002648 <HAL_GetTick>
 8003c98:	0002      	movs	r2, r0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	1ad2      	subs	r2, r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d90d      	bls.n	8003cc0 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2241      	movs	r2, #65	; 0x41
 8003ca8:	2120      	movs	r1, #32
 8003caa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2242      	movs	r2, #66	; 0x42
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2240      	movs	r2, #64	; 0x40
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e02c      	b.n	8003d1a <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d1dc      	bne.n	8003c88 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2210      	movs	r2, #16
 8003cd4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7ff feec 	bl	8003abe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	6852      	ldr	r2, [r2, #4]
 8003cf0:	490c      	ldr	r1, [pc, #48]	; (8003d24 <I2C_IsAcknowledgeFailed+0xb8>)
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2241      	movs	r2, #65	; 0x41
 8003d00:	2120      	movs	r1, #32
 8003d02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2242      	movs	r2, #66	; 0x42
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2240      	movs	r2, #64	; 0x40
 8003d10:	2100      	movs	r1, #0
 8003d12:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b004      	add	sp, #16
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	fe00e800 	.word	0xfe00e800

08003d28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	0008      	movs	r0, r1
 8003d32:	0011      	movs	r1, r2
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	230a      	movs	r3, #10
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	1c02      	adds	r2, r0, #0
 8003d3c:	801a      	strh	r2, [r3, #0]
 8003d3e:	2309      	movs	r3, #9
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	1c0a      	adds	r2, r1, #0
 8003d44:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	4a0f      	ldr	r2, [pc, #60]	; (8003d94 <I2C_TransferConfig+0x6c>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8003d5a:	230a      	movs	r3, #10
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	059b      	lsls	r3, r3, #22
 8003d62:	0d9a      	lsrs	r2, r3, #22
 8003d64:	2309      	movs	r3, #9
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	0419      	lsls	r1, r3, #16
 8003d6c:	23ff      	movs	r3, #255	; 0xff
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	400b      	ands	r3, r1
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	605a      	str	r2, [r3, #4]
}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b006      	add	sp, #24
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	fc009800 	.word	0xfc009800

08003d98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2241      	movs	r2, #65	; 0x41
 8003da6:	5c9b      	ldrb	r3, [r3, r2]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d138      	bne.n	8003e20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2240      	movs	r2, #64	; 0x40
 8003db2:	5c9b      	ldrb	r3, [r3, r2]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e032      	b.n	8003e22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2240      	movs	r2, #64	; 0x40
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2241      	movs	r2, #65	; 0x41
 8003dc8:	2124      	movs	r1, #36	; 0x24
 8003dca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	438a      	bics	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	4911      	ldr	r1, [pc, #68]	; (8003e2c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003de8:	400a      	ands	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	6811      	ldr	r1, [r2, #0]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	2101      	movs	r1, #1
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2241      	movs	r2, #65	; 0x41
 8003e10:	2120      	movs	r1, #32
 8003e12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2240      	movs	r2, #64	; 0x40
 8003e18:	2100      	movs	r1, #0
 8003e1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e000      	b.n	8003e22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
  }
}
 8003e22:	0018      	movs	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b002      	add	sp, #8
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	ffffefff 	.word	0xffffefff

08003e30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2241      	movs	r2, #65	; 0x41
 8003e42:	5c9b      	ldrb	r3, [r3, r2]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d139      	bne.n	8003ebe <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2240      	movs	r2, #64	; 0x40
 8003e4e:	5c9b      	ldrb	r3, [r3, r2]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e033      	b.n	8003ec0 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2241      	movs	r2, #65	; 0x41
 8003e64:	2124      	movs	r1, #36	; 0x24
 8003e66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	2101      	movs	r1, #1
 8003e74:	438a      	bics	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a11      	ldr	r2, [pc, #68]	; (8003ec8 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2241      	movs	r2, #65	; 0x41
 8003eae:	2120      	movs	r1, #32
 8003eb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2240      	movs	r2, #64	; 0x40
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e000      	b.n	8003ec0 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8003ebe:	2302      	movs	r3, #2
  }
}
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b004      	add	sp, #16
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	fffff0ff 	.word	0xfffff0ff

08003ecc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e036      	b.n	8003f4c <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <HAL_IWDG_Init+0x88>)
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1b      	ldr	r2, [pc, #108]	; (8003f58 <HAL_IWDG_Init+0x8c>)
 8003eec:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6852      	ldr	r2, [r2, #4]
 8003ef6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6892      	ldr	r2, [r2, #8]
 8003f00:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003f02:	f7fe fba1 	bl	8002648 <HAL_GetTick>
 8003f06:	0003      	movs	r3, r0
 8003f08:	60fb      	str	r3, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_IWDG_Init+0x52>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003f0c:	f7fe fb9c 	bl	8002648 <HAL_GetTick>
 8003f10:	0002      	movs	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b27      	cmp	r3, #39	; 0x27
 8003f18:	d901      	bls.n	8003f1e <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e016      	b.n	8003f4c <HAL_IWDG_Init+0x80>
  while(hiwdg->Instance->SR != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f1      	bne.n	8003f0c <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d005      	beq.n	8003f42 <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68d2      	ldr	r2, [r2, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
 8003f40:	e003      	b.n	8003f4a <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a05      	ldr	r2, [pc, #20]	; (8003f5c <HAL_IWDG_Init+0x90>)
 8003f48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b004      	add	sp, #16
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	0000cccc 	.word	0x0000cccc
 8003f58:	00005555 	.word	0x00005555
 8003f5c:	0000aaaa 	.word	0x0000aaaa

08003f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2201      	movs	r2, #1
 8003f72:	4013      	ands	r3, r2
 8003f74:	d100      	bne.n	8003f78 <HAL_RCC_OscConfig+0x18>
 8003f76:	e08d      	b.n	8004094 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f78:	4bc3      	ldr	r3, [pc, #780]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	220c      	movs	r2, #12
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d00e      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f84:	4bc0      	ldr	r3, [pc, #768]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	220c      	movs	r2, #12
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d116      	bne.n	8003fbe <HAL_RCC_OscConfig+0x5e>
 8003f90:	4bbd      	ldr	r3, [pc, #756]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	025b      	lsls	r3, r3, #9
 8003f98:	401a      	ands	r2, r3
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	025b      	lsls	r3, r3, #9
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d10d      	bne.n	8003fbe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa2:	4bb9      	ldr	r3, [pc, #740]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	029b      	lsls	r3, r3, #10
 8003faa:	4013      	ands	r3, r2
 8003fac:	d100      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x50>
 8003fae:	e070      	b.n	8004092 <HAL_RCC_OscConfig+0x132>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d000      	beq.n	8003fba <HAL_RCC_OscConfig+0x5a>
 8003fb8:	e06b      	b.n	8004092 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e2b5      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d107      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x76>
 8003fc6:	4bb0      	ldr	r3, [pc, #704]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8003fc8:	4aaf      	ldr	r2, [pc, #700]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	2180      	movs	r1, #128	; 0x80
 8003fce:	0249      	lsls	r1, r1, #9
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	e02f      	b.n	8004036 <HAL_RCC_OscConfig+0xd6>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x98>
 8003fde:	4baa      	ldr	r3, [pc, #680]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8003fe0:	4aa9      	ldr	r2, [pc, #676]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	49a9      	ldr	r1, [pc, #676]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8003fe6:	400a      	ands	r2, r1
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	4ba7      	ldr	r3, [pc, #668]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8003fec:	4aa6      	ldr	r2, [pc, #664]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	49a7      	ldr	r1, [pc, #668]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 8003ff2:	400a      	ands	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	e01e      	b.n	8004036 <HAL_RCC_OscConfig+0xd6>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b05      	cmp	r3, #5
 8003ffe:	d10e      	bne.n	800401e <HAL_RCC_OscConfig+0xbe>
 8004000:	4ba1      	ldr	r3, [pc, #644]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004002:	4aa1      	ldr	r2, [pc, #644]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	2180      	movs	r1, #128	; 0x80
 8004008:	02c9      	lsls	r1, r1, #11
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	4b9e      	ldr	r3, [pc, #632]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004010:	4a9d      	ldr	r2, [pc, #628]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	0249      	lsls	r1, r1, #9
 8004018:	430a      	orrs	r2, r1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e00b      	b.n	8004036 <HAL_RCC_OscConfig+0xd6>
 800401e:	4b9a      	ldr	r3, [pc, #616]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004020:	4a99      	ldr	r2, [pc, #612]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	4999      	ldr	r1, [pc, #612]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004026:	400a      	ands	r2, r1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	4b97      	ldr	r3, [pc, #604]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 800402c:	4a96      	ldr	r2, [pc, #600]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	4997      	ldr	r1, [pc, #604]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 8004032:	400a      	ands	r2, r1
 8004034:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d014      	beq.n	8004068 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fe fb03 	bl	8002648 <HAL_GetTick>
 8004042:	0003      	movs	r3, r0
 8004044:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004048:	f7fe fafe 	bl	8002648 <HAL_GetTick>
 800404c:	0002      	movs	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e267      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405a:	4b8b      	ldr	r3, [pc, #556]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	029b      	lsls	r3, r3, #10
 8004062:	4013      	ands	r3, r2
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0xe8>
 8004066:	e015      	b.n	8004094 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fe faee 	bl	8002648 <HAL_GetTick>
 800406c:	0003      	movs	r3, r0
 800406e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004072:	f7fe fae9 	bl	8002648 <HAL_GetTick>
 8004076:	0002      	movs	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b64      	cmp	r3, #100	; 0x64
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e252      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004084:	4b80      	ldr	r3, [pc, #512]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	029b      	lsls	r3, r3, #10
 800408c:	4013      	ands	r3, r2
 800408e:	d1f0      	bne.n	8004072 <HAL_RCC_OscConfig+0x112>
 8004090:	e000      	b.n	8004094 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004092:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2202      	movs	r2, #2
 800409a:	4013      	ands	r3, r2
 800409c:	d100      	bne.n	80040a0 <HAL_RCC_OscConfig+0x140>
 800409e:	e069      	b.n	8004174 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80040a0:	4b79      	ldr	r3, [pc, #484]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	220c      	movs	r2, #12
 80040a6:	4013      	ands	r3, r2
 80040a8:	d00b      	beq.n	80040c2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80040aa:	4b77      	ldr	r3, [pc, #476]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	220c      	movs	r2, #12
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d11c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x190>
 80040b6:	4b74      	ldr	r3, [pc, #464]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	025b      	lsls	r3, r3, #9
 80040be:	4013      	ands	r3, r2
 80040c0:	d116      	bne.n	80040f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c2:	4b71      	ldr	r3, [pc, #452]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2202      	movs	r2, #2
 80040c8:	4013      	ands	r3, r2
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_OscConfig+0x178>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e228      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d8:	4a6b      	ldr	r2, [pc, #428]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 80040da:	4b6b      	ldr	r3, [pc, #428]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	21f8      	movs	r1, #248	; 0xf8
 80040e0:	438b      	bics	r3, r1
 80040e2:	0019      	movs	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	430b      	orrs	r3, r1
 80040ec:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ee:	e041      	b.n	8004174 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d024      	beq.n	8004142 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f8:	4b63      	ldr	r3, [pc, #396]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 80040fa:	4a63      	ldr	r2, [pc, #396]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	2101      	movs	r1, #1
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fe faa0 	bl	8002648 <HAL_GetTick>
 8004108:	0003      	movs	r3, r0
 800410a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800410e:	f7fe fa9b 	bl	8002648 <HAL_GetTick>
 8004112:	0002      	movs	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e204      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2202      	movs	r2, #2
 8004126:	4013      	ands	r3, r2
 8004128:	d0f1      	beq.n	800410e <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412a:	4a57      	ldr	r2, [pc, #348]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 800412c:	4b56      	ldr	r3, [pc, #344]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	21f8      	movs	r1, #248	; 0xf8
 8004132:	438b      	bics	r3, r1
 8004134:	0019      	movs	r1, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	430b      	orrs	r3, r1
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	e018      	b.n	8004174 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004142:	4b51      	ldr	r3, [pc, #324]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004144:	4a50      	ldr	r2, [pc, #320]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	2101      	movs	r1, #1
 800414a:	438a      	bics	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414e:	f7fe fa7b 	bl	8002648 <HAL_GetTick>
 8004152:	0003      	movs	r3, r0
 8004154:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004158:	f7fe fa76 	bl	8002648 <HAL_GetTick>
 800415c:	0002      	movs	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e1df      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2202      	movs	r2, #2
 8004170:	4013      	ands	r3, r2
 8004172:	d1f1      	bne.n	8004158 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2208      	movs	r2, #8
 800417a:	4013      	ands	r3, r2
 800417c:	d036      	beq.n	80041ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d019      	beq.n	80041ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004186:	4b40      	ldr	r3, [pc, #256]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004188:	4a3f      	ldr	r2, [pc, #252]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 800418a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800418c:	2101      	movs	r1, #1
 800418e:	430a      	orrs	r2, r1
 8004190:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004192:	f7fe fa59 	bl	8002648 <HAL_GetTick>
 8004196:	0003      	movs	r3, r0
 8004198:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800419c:	f7fe fa54 	bl	8002648 <HAL_GetTick>
 80041a0:	0002      	movs	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e1bd      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ae:	4b36      	ldr	r3, [pc, #216]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	2202      	movs	r2, #2
 80041b4:	4013      	ands	r3, r2
 80041b6:	d0f1      	beq.n	800419c <HAL_RCC_OscConfig+0x23c>
 80041b8:	e018      	b.n	80041ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ba:	4b33      	ldr	r3, [pc, #204]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 80041bc:	4a32      	ldr	r2, [pc, #200]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 80041be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041c0:	2101      	movs	r1, #1
 80041c2:	438a      	bics	r2, r1
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c6:	f7fe fa3f 	bl	8002648 <HAL_GetTick>
 80041ca:	0003      	movs	r3, r0
 80041cc:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d0:	f7fe fa3a 	bl	8002648 <HAL_GetTick>
 80041d4:	0002      	movs	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e1a3      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e2:	4b29      	ldr	r3, [pc, #164]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	2202      	movs	r2, #2
 80041e8:	4013      	ands	r3, r2
 80041ea:	d1f1      	bne.n	80041d0 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2204      	movs	r2, #4
 80041f2:	4013      	ands	r3, r2
 80041f4:	d100      	bne.n	80041f8 <HAL_RCC_OscConfig+0x298>
 80041f6:	e0b5      	b.n	8004364 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f8:	2317      	movs	r3, #23
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004200:	4b21      	ldr	r3, [pc, #132]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	055b      	lsls	r3, r3, #21
 8004208:	4013      	ands	r3, r2
 800420a:	d111      	bne.n	8004230 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 800420e:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 8004210:	69d2      	ldr	r2, [r2, #28]
 8004212:	2180      	movs	r1, #128	; 0x80
 8004214:	0549      	lsls	r1, r1, #21
 8004216:	430a      	orrs	r2, r1
 8004218:	61da      	str	r2, [r3, #28]
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	055b      	lsls	r3, r3, #21
 8004222:	4013      	ands	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004228:	2317      	movs	r3, #23
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	2201      	movs	r2, #1
 800422e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004230:	4b18      	ldr	r3, [pc, #96]	; (8004294 <HAL_RCC_OscConfig+0x334>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4013      	ands	r3, r2
 800423a:	d11a      	bne.n	8004272 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800423c:	4b15      	ldr	r3, [pc, #84]	; (8004294 <HAL_RCC_OscConfig+0x334>)
 800423e:	4a15      	ldr	r2, [pc, #84]	; (8004294 <HAL_RCC_OscConfig+0x334>)
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	2180      	movs	r1, #128	; 0x80
 8004244:	0049      	lsls	r1, r1, #1
 8004246:	430a      	orrs	r2, r1
 8004248:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424a:	f7fe f9fd 	bl	8002648 <HAL_GetTick>
 800424e:	0003      	movs	r3, r0
 8004250:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004254:	f7fe f9f8 	bl	8002648 <HAL_GetTick>
 8004258:	0002      	movs	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e161      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_RCC_OscConfig+0x334>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	2380      	movs	r3, #128	; 0x80
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4013      	ands	r3, r2
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d10e      	bne.n	8004298 <HAL_RCC_OscConfig+0x338>
 800427a:	4b03      	ldr	r3, [pc, #12]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 800427c:	4a02      	ldr	r2, [pc, #8]	; (8004288 <HAL_RCC_OscConfig+0x328>)
 800427e:	6a12      	ldr	r2, [r2, #32]
 8004280:	2101      	movs	r1, #1
 8004282:	430a      	orrs	r2, r1
 8004284:	621a      	str	r2, [r3, #32]
 8004286:	e035      	b.n	80042f4 <HAL_RCC_OscConfig+0x394>
 8004288:	40021000 	.word	0x40021000
 800428c:	fffeffff 	.word	0xfffeffff
 8004290:	fffbffff 	.word	0xfffbffff
 8004294:	40007000 	.word	0x40007000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10c      	bne.n	80042ba <HAL_RCC_OscConfig+0x35a>
 80042a0:	4ba4      	ldr	r3, [pc, #656]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80042a2:	4aa4      	ldr	r2, [pc, #656]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80042a4:	6a12      	ldr	r2, [r2, #32]
 80042a6:	2101      	movs	r1, #1
 80042a8:	438a      	bics	r2, r1
 80042aa:	621a      	str	r2, [r3, #32]
 80042ac:	4ba1      	ldr	r3, [pc, #644]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80042ae:	4aa1      	ldr	r2, [pc, #644]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80042b0:	6a12      	ldr	r2, [r2, #32]
 80042b2:	2104      	movs	r1, #4
 80042b4:	438a      	bics	r2, r1
 80042b6:	621a      	str	r2, [r3, #32]
 80042b8:	e01c      	b.n	80042f4 <HAL_RCC_OscConfig+0x394>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b05      	cmp	r3, #5
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0x37c>
 80042c2:	4b9c      	ldr	r3, [pc, #624]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80042c4:	4a9b      	ldr	r2, [pc, #620]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80042c6:	6a12      	ldr	r2, [r2, #32]
 80042c8:	2104      	movs	r1, #4
 80042ca:	430a      	orrs	r2, r1
 80042cc:	621a      	str	r2, [r3, #32]
 80042ce:	4b99      	ldr	r3, [pc, #612]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80042d0:	4a98      	ldr	r2, [pc, #608]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80042d2:	6a12      	ldr	r2, [r2, #32]
 80042d4:	2101      	movs	r1, #1
 80042d6:	430a      	orrs	r2, r1
 80042d8:	621a      	str	r2, [r3, #32]
 80042da:	e00b      	b.n	80042f4 <HAL_RCC_OscConfig+0x394>
 80042dc:	4b95      	ldr	r3, [pc, #596]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80042de:	4a95      	ldr	r2, [pc, #596]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80042e0:	6a12      	ldr	r2, [r2, #32]
 80042e2:	2101      	movs	r1, #1
 80042e4:	438a      	bics	r2, r1
 80042e6:	621a      	str	r2, [r3, #32]
 80042e8:	4b92      	ldr	r3, [pc, #584]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80042ea:	4a92      	ldr	r2, [pc, #584]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80042ec:	6a12      	ldr	r2, [r2, #32]
 80042ee:	2104      	movs	r1, #4
 80042f0:	438a      	bics	r2, r1
 80042f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d014      	beq.n	8004326 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042fc:	f7fe f9a4 	bl	8002648 <HAL_GetTick>
 8004300:	0003      	movs	r3, r0
 8004302:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004304:	e009      	b.n	800431a <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004306:	f7fe f99f 	bl	8002648 <HAL_GetTick>
 800430a:	0002      	movs	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	4a89      	ldr	r2, [pc, #548]	; (8004538 <HAL_RCC_OscConfig+0x5d8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e107      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431a:	4b86      	ldr	r3, [pc, #536]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	2202      	movs	r2, #2
 8004320:	4013      	ands	r3, r2
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x3a6>
 8004324:	e013      	b.n	800434e <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004326:	f7fe f98f 	bl	8002648 <HAL_GetTick>
 800432a:	0003      	movs	r3, r0
 800432c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432e:	e009      	b.n	8004344 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004330:	f7fe f98a 	bl	8002648 <HAL_GetTick>
 8004334:	0002      	movs	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	4a7f      	ldr	r2, [pc, #508]	; (8004538 <HAL_RCC_OscConfig+0x5d8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e0f2      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004344:	4b7b      	ldr	r3, [pc, #492]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	2202      	movs	r2, #2
 800434a:	4013      	ands	r3, r2
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800434e:	2317      	movs	r3, #23
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d105      	bne.n	8004364 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004358:	4b76      	ldr	r3, [pc, #472]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 800435a:	4a76      	ldr	r2, [pc, #472]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 800435c:	69d2      	ldr	r2, [r2, #28]
 800435e:	4977      	ldr	r1, [pc, #476]	; (800453c <HAL_RCC_OscConfig+0x5dc>)
 8004360:	400a      	ands	r2, r1
 8004362:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2210      	movs	r2, #16
 800436a:	4013      	ands	r3, r2
 800436c:	d063      	beq.n	8004436 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d12a      	bne.n	80043cc <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004376:	4b6f      	ldr	r3, [pc, #444]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 8004378:	4a6e      	ldr	r2, [pc, #440]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 800437a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800437c:	2104      	movs	r1, #4
 800437e:	430a      	orrs	r2, r1
 8004380:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004382:	4b6c      	ldr	r3, [pc, #432]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 8004384:	4a6b      	ldr	r2, [pc, #428]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 8004386:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004388:	2101      	movs	r1, #1
 800438a:	430a      	orrs	r2, r1
 800438c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438e:	f7fe f95b 	bl	8002648 <HAL_GetTick>
 8004392:	0003      	movs	r3, r0
 8004394:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004398:	f7fe f956 	bl	8002648 <HAL_GetTick>
 800439c:	0002      	movs	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0bf      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80043aa:	4b62      	ldr	r3, [pc, #392]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80043ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ae:	2202      	movs	r2, #2
 80043b0:	4013      	ands	r3, r2
 80043b2:	d0f1      	beq.n	8004398 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80043b4:	4a5f      	ldr	r2, [pc, #380]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80043b6:	4b5f      	ldr	r3, [pc, #380]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80043b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ba:	21f8      	movs	r1, #248	; 0xf8
 80043bc:	438b      	bics	r3, r1
 80043be:	0019      	movs	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	430b      	orrs	r3, r1
 80043c8:	6353      	str	r3, [r2, #52]	; 0x34
 80043ca:	e034      	b.n	8004436 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	3305      	adds	r3, #5
 80043d2:	d111      	bne.n	80043f8 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80043d4:	4b57      	ldr	r3, [pc, #348]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80043d6:	4a57      	ldr	r2, [pc, #348]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80043d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043da:	2104      	movs	r1, #4
 80043dc:	438a      	bics	r2, r1
 80043de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80043e0:	4a54      	ldr	r2, [pc, #336]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80043e2:	4b54      	ldr	r3, [pc, #336]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e6:	21f8      	movs	r1, #248	; 0xf8
 80043e8:	438b      	bics	r3, r1
 80043ea:	0019      	movs	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	430b      	orrs	r3, r1
 80043f4:	6353      	str	r3, [r2, #52]	; 0x34
 80043f6:	e01e      	b.n	8004436 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80043f8:	4b4e      	ldr	r3, [pc, #312]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80043fa:	4a4e      	ldr	r2, [pc, #312]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80043fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043fe:	2104      	movs	r1, #4
 8004400:	430a      	orrs	r2, r1
 8004402:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004404:	4b4b      	ldr	r3, [pc, #300]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 8004406:	4a4b      	ldr	r2, [pc, #300]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 8004408:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800440a:	2101      	movs	r1, #1
 800440c:	438a      	bics	r2, r1
 800440e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004410:	f7fe f91a 	bl	8002648 <HAL_GetTick>
 8004414:	0003      	movs	r3, r0
 8004416:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800441a:	f7fe f915 	bl	8002648 <HAL_GetTick>
 800441e:	0002      	movs	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e07e      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800442c:	4b41      	ldr	r3, [pc, #260]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 800442e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004430:	2202      	movs	r2, #2
 8004432:	4013      	ands	r3, r2
 8004434:	d1f1      	bne.n	800441a <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d100      	bne.n	8004440 <HAL_RCC_OscConfig+0x4e0>
 800443e:	e073      	b.n	8004528 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004440:	4b3c      	ldr	r3, [pc, #240]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	220c      	movs	r2, #12
 8004446:	4013      	ands	r3, r2
 8004448:	2b08      	cmp	r3, #8
 800444a:	d100      	bne.n	800444e <HAL_RCC_OscConfig+0x4ee>
 800444c:	e06a      	b.n	8004524 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d14b      	bne.n	80044ee <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004456:	4b37      	ldr	r3, [pc, #220]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 8004458:	4a36      	ldr	r2, [pc, #216]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	4938      	ldr	r1, [pc, #224]	; (8004540 <HAL_RCC_OscConfig+0x5e0>)
 800445e:	400a      	ands	r2, r1
 8004460:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004462:	f7fe f8f1 	bl	8002648 <HAL_GetTick>
 8004466:	0003      	movs	r3, r0
 8004468:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446c:	f7fe f8ec 	bl	8002648 <HAL_GetTick>
 8004470:	0002      	movs	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e055      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800447e:	4b2d      	ldr	r3, [pc, #180]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	049b      	lsls	r3, r3, #18
 8004486:	4013      	ands	r3, r2
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800448a:	4a2a      	ldr	r2, [pc, #168]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 800448c:	4b29      	ldr	r3, [pc, #164]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	210f      	movs	r1, #15
 8004492:	438b      	bics	r3, r1
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	430b      	orrs	r3, r1
 800449c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800449e:	4a25      	ldr	r2, [pc, #148]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80044a0:	4b24      	ldr	r3, [pc, #144]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4927      	ldr	r1, [pc, #156]	; (8004544 <HAL_RCC_OscConfig+0x5e4>)
 80044a6:	4019      	ands	r1, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	4303      	orrs	r3, r0
 80044b2:	430b      	orrs	r3, r1
 80044b4:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b6:	4b1f      	ldr	r3, [pc, #124]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80044b8:	4a1e      	ldr	r2, [pc, #120]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	0449      	lsls	r1, r1, #17
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fe f8c0 	bl	8002648 <HAL_GetTick>
 80044c8:	0003      	movs	r3, r0
 80044ca:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ce:	f7fe f8bb 	bl	8002648 <HAL_GetTick>
 80044d2:	0002      	movs	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e024      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044e0:	4b14      	ldr	r3, [pc, #80]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	049b      	lsls	r3, r3, #18
 80044e8:	4013      	ands	r3, r2
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x56e>
 80044ec:	e01c      	b.n	8004528 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80044f0:	4a10      	ldr	r2, [pc, #64]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	4912      	ldr	r1, [pc, #72]	; (8004540 <HAL_RCC_OscConfig+0x5e0>)
 80044f6:	400a      	ands	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fa:	f7fe f8a5 	bl	8002648 <HAL_GetTick>
 80044fe:	0003      	movs	r3, r0
 8004500:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004504:	f7fe f8a0 	bl	8002648 <HAL_GetTick>
 8004508:	0002      	movs	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e009      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <HAL_RCC_OscConfig+0x5d4>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	049b      	lsls	r3, r3, #18
 800451e:	4013      	ands	r3, r2
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x5a4>
 8004522:	e001      	b.n	8004528 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b006      	add	sp, #24
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	40021000 	.word	0x40021000
 8004538:	00001388 	.word	0x00001388
 800453c:	efffffff 	.word	0xefffffff
 8004540:	feffffff 	.word	0xfeffffff
 8004544:	ffc2ffff 	.word	0xffc2ffff

08004548 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004556:	4b69      	ldr	r3, [pc, #420]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	401a      	ands	r2, r3
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d211      	bcs.n	8004588 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004564:	4b65      	ldr	r3, [pc, #404]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 8004566:	4a65      	ldr	r2, [pc, #404]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	2101      	movs	r1, #1
 800456c:	438a      	bics	r2, r1
 800456e:	0011      	movs	r1, r2
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004576:	4b61      	ldr	r3, [pc, #388]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2201      	movs	r2, #1
 800457c:	401a      	ands	r2, r3
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0b5      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2202      	movs	r2, #2
 800458e:	4013      	ands	r3, r2
 8004590:	d009      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004592:	4a5b      	ldr	r2, [pc, #364]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	4b5a      	ldr	r3, [pc, #360]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	21f0      	movs	r1, #240	; 0xf0
 800459a:	438b      	bics	r3, r1
 800459c:	0019      	movs	r1, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	430b      	orrs	r3, r1
 80045a4:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2201      	movs	r2, #1
 80045ac:	4013      	ands	r3, r2
 80045ae:	d100      	bne.n	80045b2 <HAL_RCC_ClockConfig+0x6a>
 80045b0:	e067      	b.n	8004682 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d107      	bne.n	80045ca <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ba:	4b51      	ldr	r3, [pc, #324]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	029b      	lsls	r3, r3, #10
 80045c2:	4013      	ands	r3, r2
 80045c4:	d114      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e094      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d2:	4b4b      	ldr	r3, [pc, #300]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	049b      	lsls	r3, r3, #18
 80045da:	4013      	ands	r3, r2
 80045dc:	d108      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e088      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e2:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2202      	movs	r2, #2
 80045e8:	4013      	ands	r3, r2
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e081      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045f0:	4a43      	ldr	r2, [pc, #268]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 80045f2:	4b43      	ldr	r3, [pc, #268]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2103      	movs	r1, #3
 80045f8:	438b      	bics	r3, r1
 80045fa:	0019      	movs	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	430b      	orrs	r3, r1
 8004602:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004604:	f7fe f820 	bl	8002648 <HAL_GetTick>
 8004608:	0003      	movs	r3, r0
 800460a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d111      	bne.n	8004638 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004614:	e009      	b.n	800462a <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004616:	f7fe f817 	bl	8002648 <HAL_GetTick>
 800461a:	0002      	movs	r2, r0
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	4a38      	ldr	r2, [pc, #224]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e064      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800462a:	4b35      	ldr	r3, [pc, #212]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	220c      	movs	r2, #12
 8004630:	4013      	ands	r3, r2
 8004632:	2b04      	cmp	r3, #4
 8004634:	d1ef      	bne.n	8004616 <HAL_RCC_ClockConfig+0xce>
 8004636:	e024      	b.n	8004682 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d11b      	bne.n	8004678 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004640:	e009      	b.n	8004656 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004642:	f7fe f801 	bl	8002648 <HAL_GetTick>
 8004646:	0002      	movs	r2, r0
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	4a2d      	ldr	r2, [pc, #180]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e04e      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004656:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	220c      	movs	r2, #12
 800465c:	4013      	ands	r3, r2
 800465e:	2b08      	cmp	r3, #8
 8004660:	d1ef      	bne.n	8004642 <HAL_RCC_ClockConfig+0xfa>
 8004662:	e00e      	b.n	8004682 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004664:	f7fd fff0 	bl	8002648 <HAL_GetTick>
 8004668:	0002      	movs	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	4a25      	ldr	r2, [pc, #148]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e03d      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004678:	4b21      	ldr	r3, [pc, #132]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	220c      	movs	r2, #12
 800467e:	4013      	ands	r3, r2
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004682:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2201      	movs	r2, #1
 8004688:	401a      	ands	r2, r3
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d911      	bls.n	80046b4 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004690:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 8004692:	4a1a      	ldr	r2, [pc, #104]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	2101      	movs	r1, #1
 8004698:	438a      	bics	r2, r1
 800469a:	0011      	movs	r1, r2
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046a2:	4b16      	ldr	r3, [pc, #88]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2201      	movs	r2, #1
 80046a8:	401a      	ands	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e01f      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2204      	movs	r2, #4
 80046ba:	4013      	ands	r3, r2
 80046bc:	d008      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80046be:	4a10      	ldr	r2, [pc, #64]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4910      	ldr	r1, [pc, #64]	; (8004708 <HAL_RCC_ClockConfig+0x1c0>)
 80046c6:	4019      	ands	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046d0:	f000 f820 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 80046d4:	0001      	movs	r1, r0
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	220f      	movs	r2, #15
 80046de:	4013      	ands	r3, r2
 80046e0:	4a0a      	ldr	r2, [pc, #40]	; (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80046e2:	5cd3      	ldrb	r3, [r2, r3]
 80046e4:	000a      	movs	r2, r1
 80046e6:	40da      	lsrs	r2, r3
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x1c8>)
 80046ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80046ec:	2000      	movs	r0, #0
 80046ee:	f7fd ff83 	bl	80025f8 <HAL_InitTick>
  
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	0018      	movs	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b004      	add	sp, #16
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40022000 	.word	0x40022000
 8004700:	40021000 	.word	0x40021000
 8004704:	00001388 	.word	0x00001388
 8004708:	fffff8ff 	.word	0xfffff8ff
 800470c:	08009fb0 	.word	0x08009fb0
 8004710:	20000298 	.word	0x20000298

08004714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b08f      	sub	sp, #60	; 0x3c
 8004718:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800471a:	2314      	movs	r3, #20
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xac>)
 8004720:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004722:	c313      	stmia	r3!, {r0, r1, r4}
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004728:	1d3b      	adds	r3, r7, #4
 800472a:	4a26      	ldr	r2, [pc, #152]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800472c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800472e:	c313      	stmia	r3!, {r0, r1, r4}
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004738:	2300      	movs	r3, #0
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
 800473c:	2300      	movs	r3, #0
 800473e:	637b      	str	r3, [r7, #52]	; 0x34
 8004740:	2300      	movs	r3, #0
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004748:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	220c      	movs	r2, #12
 8004752:	4013      	ands	r3, r2
 8004754:	2b04      	cmp	r3, #4
 8004756:	d002      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0x4a>
 8004758:	2b08      	cmp	r3, #8
 800475a:	d003      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x50>
 800475c:	e027      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800475e:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004760:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004762:	e027      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	0c9b      	lsrs	r3, r3, #18
 8004768:	220f      	movs	r2, #15
 800476a:	4013      	ands	r3, r2
 800476c:	2214      	movs	r2, #20
 800476e:	18ba      	adds	r2, r7, r2
 8004770:	5cd3      	ldrb	r3, [r2, r3]
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004774:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	220f      	movs	r2, #15
 800477a:	4013      	ands	r3, r2
 800477c:	1d3a      	adds	r2, r7, #4
 800477e:	5cd3      	ldrb	r3, [r2, r3]
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004784:	2380      	movs	r3, #128	; 0x80
 8004786:	025b      	lsls	r3, r3, #9
 8004788:	4013      	ands	r3, r2
 800478a:	d009      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800478c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800478e:	480f      	ldr	r0, [pc, #60]	; (80047cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004790:	f7fb fcba 	bl	8000108 <__udivsi3>
 8004794:	0003      	movs	r3, r0
 8004796:	001a      	movs	r2, r3
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	4353      	muls	r3, r2
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
 800479e:	e003      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047a4:	4353      	muls	r3, r2
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80047a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047ac:	e002      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047ae:	4b07      	ldr	r3, [pc, #28]	; (80047cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b00f      	add	sp, #60	; 0x3c
 80047bc:	bd90      	pop	{r4, r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	08009e3c 	.word	0x08009e3c
 80047c4:	08009e4c 	.word	0x08009e4c
 80047c8:	40021000 	.word	0x40021000
 80047cc:	007a1200 	.word	0x007a1200
 80047d0:	003d0900 	.word	0x003d0900

080047d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d8:	4b02      	ldr	r3, [pc, #8]	; (80047e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	20000298 	.word	0x20000298

080047e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80047ec:	f7ff fff2 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047f0:	0001      	movs	r1, r0
 80047f2:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	2207      	movs	r2, #7
 80047fa:	4013      	ands	r3, r2
 80047fc:	4a04      	ldr	r2, [pc, #16]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047fe:	5cd3      	ldrb	r3, [r2, r3]
 8004800:	40d9      	lsrs	r1, r3
 8004802:	000b      	movs	r3, r1
}    
 8004804:	0018      	movs	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	40021000 	.word	0x40021000
 8004810:	08009fc0 	.word	0x08009fc0

08004814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	025b      	lsls	r3, r3, #9
 800482c:	4013      	ands	r3, r2
 800482e:	d100      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004830:	e08e      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004832:	2317      	movs	r3, #23
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800483a:	4b5f      	ldr	r3, [pc, #380]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	055b      	lsls	r3, r3, #21
 8004842:	4013      	ands	r3, r2
 8004844:	d111      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004846:	4b5c      	ldr	r3, [pc, #368]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004848:	4a5b      	ldr	r2, [pc, #364]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800484a:	69d2      	ldr	r2, [r2, #28]
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	0549      	lsls	r1, r1, #21
 8004850:	430a      	orrs	r2, r1
 8004852:	61da      	str	r2, [r3, #28]
 8004854:	4b58      	ldr	r3, [pc, #352]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	055b      	lsls	r3, r3, #21
 800485c:	4013      	ands	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004862:	2317      	movs	r3, #23
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	2201      	movs	r2, #1
 8004868:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486a:	4b54      	ldr	r3, [pc, #336]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4013      	ands	r3, r2
 8004874:	d11a      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004876:	4b51      	ldr	r3, [pc, #324]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004878:	4a50      	ldr	r2, [pc, #320]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	2180      	movs	r1, #128	; 0x80
 800487e:	0049      	lsls	r1, r1, #1
 8004880:	430a      	orrs	r2, r1
 8004882:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004884:	f7fd fee0 	bl	8002648 <HAL_GetTick>
 8004888:	0003      	movs	r3, r0
 800488a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488c:	e008      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488e:	f7fd fedb 	bl	8002648 <HAL_GetTick>
 8004892:	0002      	movs	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b64      	cmp	r3, #100	; 0x64
 800489a:	d901      	bls.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e086      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a0:	4b46      	ldr	r3, [pc, #280]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	4013      	ands	r3, r2
 80048aa:	d0f0      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048ac:	4b42      	ldr	r3, [pc, #264]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048ae:	6a1a      	ldr	r2, [r3, #32]
 80048b0:	23c0      	movs	r3, #192	; 0xc0
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4013      	ands	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d034      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	23c0      	movs	r3, #192	; 0xc0
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	401a      	ands	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d02c      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048ce:	4b3a      	ldr	r3, [pc, #232]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	4a3b      	ldr	r2, [pc, #236]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048d8:	4b37      	ldr	r3, [pc, #220]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048da:	4a37      	ldr	r2, [pc, #220]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048dc:	6a12      	ldr	r2, [r2, #32]
 80048de:	2180      	movs	r1, #128	; 0x80
 80048e0:	0249      	lsls	r1, r1, #9
 80048e2:	430a      	orrs	r2, r1
 80048e4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048e6:	4b34      	ldr	r3, [pc, #208]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048e8:	4a33      	ldr	r2, [pc, #204]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048ea:	6a12      	ldr	r2, [r2, #32]
 80048ec:	4935      	ldr	r1, [pc, #212]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80048ee:	400a      	ands	r2, r1
 80048f0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048f2:	4b31      	ldr	r3, [pc, #196]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	4013      	ands	r3, r2
 80048fe:	d013      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7fd fea2 	bl	8002648 <HAL_GetTick>
 8004904:	0003      	movs	r3, r0
 8004906:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004908:	e009      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490a:	f7fd fe9d 	bl	8002648 <HAL_GetTick>
 800490e:	0002      	movs	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	4a2c      	ldr	r2, [pc, #176]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e047      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491e:	4b26      	ldr	r3, [pc, #152]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	2202      	movs	r2, #2
 8004924:	4013      	ands	r3, r2
 8004926:	d0f0      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004928:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800492a:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	4924      	ldr	r1, [pc, #144]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004930:	4019      	ands	r1, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	430b      	orrs	r3, r1
 8004938:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800493a:	2317      	movs	r3, #23
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d105      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004944:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004948:	69d2      	ldr	r2, [r2, #28]
 800494a:	4920      	ldr	r1, [pc, #128]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800494c:	400a      	ands	r2, r1
 800494e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2201      	movs	r2, #1
 8004956:	4013      	ands	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800495a:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800495c:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	2103      	movs	r1, #3
 8004962:	438b      	bics	r3, r1
 8004964:	0019      	movs	r1, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	430b      	orrs	r3, r1
 800496c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2220      	movs	r2, #32
 8004974:	4013      	ands	r3, r2
 8004976:	d009      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004978:	4a0f      	ldr	r2, [pc, #60]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800497a:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	2110      	movs	r1, #16
 8004980:	438b      	bics	r3, r1
 8004982:	0019      	movs	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	430b      	orrs	r3, r1
 800498a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	4013      	ands	r3, r2
 8004996:	d009      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004998:	4a07      	ldr	r2, [pc, #28]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800499a:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	2140      	movs	r1, #64	; 0x40
 80049a0:	438b      	bics	r3, r1
 80049a2:	0019      	movs	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	0018      	movs	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b006      	add	sp, #24
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40007000 	.word	0x40007000
 80049c0:	fffffcff 	.word	0xfffffcff
 80049c4:	fffeffff 	.word	0xfffeffff
 80049c8:	00001388 	.word	0x00001388
 80049cc:	efffffff 	.word	0xefffffff

080049d0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e01e      	b.n	8004a20 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	223d      	movs	r2, #61	; 0x3d
 80049e6:	5c9b      	ldrb	r3, [r3, r2]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d107      	bne.n	80049fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	223c      	movs	r2, #60	; 0x3c
 80049f2:	2100      	movs	r1, #0
 80049f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	0018      	movs	r0, r3
 80049fa:	f004 fed1 	bl	80097a0 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	223d      	movs	r2, #61	; 0x3d
 8004a02:	2102      	movs	r1, #2
 8004a04:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	0019      	movs	r1, r3
 8004a10:	0010      	movs	r0, r2
 8004a12:	f000 fae7 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	223d      	movs	r2, #61	; 0x3d
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	0018      	movs	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b002      	add	sp, #8
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e01e      	b.n	8004a78 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	223d      	movs	r2, #61	; 0x3d
 8004a3e:	5c9b      	ldrb	r3, [r3, r2]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d107      	bne.n	8004a56 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	223c      	movs	r2, #60	; 0x3c
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f004 ff0d 	bl	8009870 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	223d      	movs	r2, #61	; 0x3d
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	0019      	movs	r1, r3
 8004a68:	0010      	movs	r0, r2
 8004a6a:	f000 fabb 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	223d      	movs	r2, #61	; 0x3d
 8004a72:	2101      	movs	r1, #1
 8004a74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	0018      	movs	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	b002      	add	sp, #8
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	2201      	movs	r2, #1
 8004a92:	0018      	movs	r0, r3
 8004a94:	f000 fe50 	bl	8005738 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <HAL_TIM_PWM_Start+0x78>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0x40>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a15      	ldr	r2, [pc, #84]	; (8004afc <HAL_TIM_PWM_Start+0x7c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a13      	ldr	r2, [pc, #76]	; (8004b00 <HAL_TIM_PWM_Start+0x80>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_PWM_Start+0x40>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <HAL_TIM_PWM_Start+0x84>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIM_PWM_Start+0x44>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_TIM_PWM_Start+0x46>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004ad4:	2180      	movs	r1, #128	; 0x80
 8004ad6:	0209      	lsls	r1, r1, #8
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	0018      	movs	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40014000 	.word	0x40014000
 8004b00:	40014400 	.word	0x40014400
 8004b04:	40014800 	.word	0x40014800

08004b08 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses wil be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e02e      	b.n	8004b7a <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	223d      	movs	r2, #61	; 0x3d
 8004b20:	5c9b      	ldrb	r3, [r3, r2]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d107      	bne.n	8004b38 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	223c      	movs	r2, #60	; 0x3c
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	0018      	movs	r0, r3
 8004b34:	f000 f825 	bl	8004b82 <HAL_TIM_OnePulse_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	223d      	movs	r2, #61	; 0x3d
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3304      	adds	r3, #4
 8004b48:	0019      	movs	r1, r3
 8004b4a:	0010      	movs	r0, r2
 8004b4c:	f000 fa4a 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	2108      	movs	r1, #8
 8004b5c:	438a      	bics	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	6811      	ldr	r1, [r2, #0]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	223d      	movs	r2, #61	; 0x3d
 8004b74:	2101      	movs	r1, #1
 8004b76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	b002      	add	sp, #8
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b002      	add	sp, #8
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d124      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d11d      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2203      	movs	r2, #3
 8004bbc:	4252      	negs	r2, r2
 8004bbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	2203      	movs	r2, #3
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f000 f9ed 	bl	8004fb4 <HAL_TIM_IC_CaptureCallback>
 8004bda:	e007      	b.n	8004bec <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	0018      	movs	r0, r3
 8004be0:	f000 f9e0 	bl	8004fa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	0018      	movs	r0, r3
 8004be8:	f000 f9ec 	bl	8004fc4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d125      	bne.n	8004c4c <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2204      	movs	r2, #4
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d11e      	bne.n	8004c4c <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2205      	movs	r2, #5
 8004c14:	4252      	negs	r2, r2
 8004c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	23c0      	movs	r3, #192	; 0xc0
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d004      	beq.n	8004c36 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f000 f9c0 	bl	8004fb4 <HAL_TIM_IC_CaptureCallback>
 8004c34:	e007      	b.n	8004c46 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f000 f9b3 	bl	8004fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f000 f9bf 	bl	8004fc4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2208      	movs	r2, #8
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d124      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2208      	movs	r2, #8
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d11d      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2209      	movs	r2, #9
 8004c6e:	4252      	negs	r2, r2
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2204      	movs	r2, #4
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	2203      	movs	r2, #3
 8004c80:	4013      	ands	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	0018      	movs	r0, r3
 8004c88:	f000 f994 	bl	8004fb4 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e007      	b.n	8004c9e <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	0018      	movs	r0, r3
 8004c92:	f000 f987 	bl	8004fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f000 f993 	bl	8004fc4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2210      	movs	r2, #16
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b10      	cmp	r3, #16
 8004cb0:	d125      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2210      	movs	r2, #16
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d11e      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2211      	movs	r2, #17
 8004cc6:	4252      	negs	r2, r2
 8004cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2208      	movs	r2, #8
 8004cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69da      	ldr	r2, [r3, #28]
 8004cd6:	23c0      	movs	r3, #192	; 0xc0
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d004      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f000 f967 	bl	8004fb4 <HAL_TIM_IC_CaptureCallback>
 8004ce6:	e007      	b.n	8004cf8 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	0018      	movs	r0, r3
 8004cec:	f000 f95a 	bl	8004fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f000 f966 	bl	8004fc4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2201      	movs	r2, #1
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d10f      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d108      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	4252      	negs	r2, r2
 8004d22:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	0018      	movs	r0, r3
 8004d28:	f003 faac 	bl	8008284 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2280      	movs	r2, #128	; 0x80
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b80      	cmp	r3, #128	; 0x80
 8004d38:	d10f      	bne.n	8004d5a <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	2280      	movs	r2, #128	; 0x80
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b80      	cmp	r3, #128	; 0x80
 8004d46:	d108      	bne.n	8004d5a <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2281      	movs	r2, #129	; 0x81
 8004d4e:	4252      	negs	r2, r2
 8004d50:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	0018      	movs	r0, r3
 8004d56:	f000 fd5b 	bl	8005810 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	2240      	movs	r2, #64	; 0x40
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b40      	cmp	r3, #64	; 0x40
 8004d66:	d10f      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	2240      	movs	r2, #64	; 0x40
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b40      	cmp	r3, #64	; 0x40
 8004d74:	d108      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2241      	movs	r2, #65	; 0x41
 8004d7c:	4252      	negs	r2, r2
 8004d7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	0018      	movs	r0, r3
 8004d84:	f000 f926 	bl	8004fd4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d10f      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d108      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2221      	movs	r2, #33	; 0x21
 8004daa:	4252      	negs	r2, r2
 8004dac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 fd25 	bl	8005800 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b002      	add	sp, #8
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	223c      	movs	r2, #60	; 0x3c
 8004dd0:	5c9b      	ldrb	r3, [r3, r2]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e0a4      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x164>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	223c      	movs	r2, #60	; 0x3c
 8004dde:	2101      	movs	r1, #1
 8004de0:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	223d      	movs	r2, #61	; 0x3d
 8004de6:	2102      	movs	r1, #2
 8004de8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d029      	beq.n	8004e44 <HAL_TIM_PWM_ConfigChannel+0x84>
 8004df0:	d802      	bhi.n	8004df8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 8004df6:	e08c      	b.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d046      	beq.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0xca>
 8004dfc:	2b0c      	cmp	r3, #12
 8004dfe:	d065      	beq.n	8004ecc <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 8004e00:	e087      	b.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	0011      	movs	r1, r2
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f000 f96c 	bl	80050e8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	6992      	ldr	r2, [r2, #24]
 8004e1a:	2108      	movs	r1, #8
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	6992      	ldr	r2, [r2, #24]
 8004e2a:	2104      	movs	r1, #4
 8004e2c:	438a      	bics	r2, r1
 8004e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	6991      	ldr	r1, [r2, #24]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	6912      	ldr	r2, [r2, #16]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	619a      	str	r2, [r3, #24]
    break;
 8004e42:	e066      	b.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	0011      	movs	r1, r2
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f000 f9d9 	bl	8005204 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	6992      	ldr	r2, [r2, #24]
 8004e5c:	2180      	movs	r1, #128	; 0x80
 8004e5e:	0109      	lsls	r1, r1, #4
 8004e60:	430a      	orrs	r2, r1
 8004e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	6992      	ldr	r2, [r2, #24]
 8004e6e:	492f      	ldr	r1, [pc, #188]	; (8004f2c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8004e70:	400a      	ands	r2, r1
 8004e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	6991      	ldr	r1, [r2, #24]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	6912      	ldr	r2, [r2, #16]
 8004e82:	0212      	lsls	r2, r2, #8
 8004e84:	430a      	orrs	r2, r1
 8004e86:	619a      	str	r2, [r3, #24]
    break;
 8004e88:	e043      	b.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	0011      	movs	r1, r2
 8004e92:	0018      	movs	r0, r3
 8004e94:	f000 fa40 	bl	8005318 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	69d2      	ldr	r2, [r2, #28]
 8004ea2:	2108      	movs	r1, #8
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	69d2      	ldr	r2, [r2, #28]
 8004eb2:	2104      	movs	r1, #4
 8004eb4:	438a      	bics	r2, r1
 8004eb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	69d1      	ldr	r1, [r2, #28]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	6912      	ldr	r2, [r2, #16]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	61da      	str	r2, [r3, #28]
    break;
 8004eca:	e022      	b.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	0011      	movs	r1, r2
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f000 faab 	bl	8005430 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	69d2      	ldr	r2, [r2, #28]
 8004ee4:	2180      	movs	r1, #128	; 0x80
 8004ee6:	0109      	lsls	r1, r1, #4
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	69d2      	ldr	r2, [r2, #28]
 8004ef6:	490d      	ldr	r1, [pc, #52]	; (8004f2c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8004ef8:	400a      	ands	r2, r1
 8004efa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	69d1      	ldr	r1, [r2, #28]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	6912      	ldr	r2, [r2, #16]
 8004f0a:	0212      	lsls	r2, r2, #8
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	61da      	str	r2, [r3, #28]
    break;
 8004f10:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	223d      	movs	r2, #61	; 0x3d
 8004f16:	2101      	movs	r1, #1
 8004f18:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	223c      	movs	r2, #60	; 0x3c
 8004f1e:	2100      	movs	r1, #0
 8004f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	0018      	movs	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b004      	add	sp, #16
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	fffffbff 	.word	0xfffffbff

08004f30 <HAL_TIM_SlaveConfigSynchronization>:
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	223c      	movs	r2, #60	; 0x3c
 8004f3e:	5c9b      	ldrb	r3, [r3, r2]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIM_SlaveConfigSynchronization+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e026      	b.n	8004f96 <HAL_TIM_SlaveConfigSynchronization+0x66>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	223c      	movs	r2, #60	; 0x3c
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	223d      	movs	r2, #61	; 0x3d
 8004f54:	2102      	movs	r1, #2
 8004f56:	5499      	strb	r1, [r3, r2]

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	0011      	movs	r1, r2
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f000 fad6 	bl	8005510 <TIM_SlaveTimer_SetConfig>

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	68d2      	ldr	r2, [r2, #12]
 8004f6e:	2140      	movs	r1, #64	; 0x40
 8004f70:	438a      	bics	r2, r1
 8004f72:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	68d2      	ldr	r2, [r2, #12]
 8004f7e:	4908      	ldr	r1, [pc, #32]	; (8004fa0 <HAL_TIM_SlaveConfigSynchronization+0x70>)
 8004f80:	400a      	ands	r2, r1
 8004f82:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	223d      	movs	r2, #61	; 0x3d
 8004f88:	2101      	movs	r1, #1
 8004f8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	223c      	movs	r2, #60	; 0x3c
 8004f90:	2100      	movs	r1, #0
 8004f92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
    }
 8004f96:	0018      	movs	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b002      	add	sp, #8
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	ffffbfff 	.word	0xffffbfff

08004fa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b002      	add	sp, #8
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b002      	add	sp, #8
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fcc:	46c0      	nop			; (mov r8, r8)
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b002      	add	sp, #8
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b002      	add	sp, #8
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a34      	ldr	r2, [pc, #208]	; (80050cc <TIM_Base_SetConfig+0xe8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d008      	beq.n	8005012 <TIM_Base_SetConfig+0x2e>
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	2380      	movs	r3, #128	; 0x80
 8005004:	05db      	lsls	r3, r3, #23
 8005006:	429a      	cmp	r2, r3
 8005008:	d003      	beq.n	8005012 <TIM_Base_SetConfig+0x2e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a30      	ldr	r2, [pc, #192]	; (80050d0 <TIM_Base_SetConfig+0xec>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d108      	bne.n	8005024 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2270      	movs	r2, #112	; 0x70
 8005016:	4393      	bics	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a29      	ldr	r2, [pc, #164]	; (80050cc <TIM_Base_SetConfig+0xe8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d018      	beq.n	800505e <TIM_Base_SetConfig+0x7a>
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	05db      	lsls	r3, r3, #23
 8005032:	429a      	cmp	r2, r3
 8005034:	d013      	beq.n	800505e <TIM_Base_SetConfig+0x7a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a25      	ldr	r2, [pc, #148]	; (80050d0 <TIM_Base_SetConfig+0xec>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00f      	beq.n	800505e <TIM_Base_SetConfig+0x7a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a24      	ldr	r2, [pc, #144]	; (80050d4 <TIM_Base_SetConfig+0xf0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00b      	beq.n	800505e <TIM_Base_SetConfig+0x7a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a23      	ldr	r2, [pc, #140]	; (80050d8 <TIM_Base_SetConfig+0xf4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d007      	beq.n	800505e <TIM_Base_SetConfig+0x7a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a22      	ldr	r2, [pc, #136]	; (80050dc <TIM_Base_SetConfig+0xf8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_Base_SetConfig+0x7a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a21      	ldr	r2, [pc, #132]	; (80050e0 <TIM_Base_SetConfig+0xfc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d108      	bne.n	8005070 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a20      	ldr	r2, [pc, #128]	; (80050e4 <TIM_Base_SetConfig+0x100>)
 8005062:	4013      	ands	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2280      	movs	r2, #128	; 0x80
 8005074:	4393      	bics	r3, r2
 8005076:	001a      	movs	r2, r3
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a0c      	ldr	r2, [pc, #48]	; (80050cc <TIM_Base_SetConfig+0xe8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00b      	beq.n	80050b6 <TIM_Base_SetConfig+0xd2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a0d      	ldr	r2, [pc, #52]	; (80050d8 <TIM_Base_SetConfig+0xf4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d007      	beq.n	80050b6 <TIM_Base_SetConfig+0xd2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a0c      	ldr	r2, [pc, #48]	; (80050dc <TIM_Base_SetConfig+0xf8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_Base_SetConfig+0xd2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a0b      	ldr	r2, [pc, #44]	; (80050e0 <TIM_Base_SetConfig+0xfc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d103      	bne.n	80050be <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	615a      	str	r2, [r3, #20]
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b004      	add	sp, #16
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40012c00 	.word	0x40012c00
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40002000 	.word	0x40002000
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40014400 	.word	0x40014400
 80050e0:	40014800 	.word	0x40014800
 80050e4:	fffffcff 	.word	0xfffffcff

080050e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	2201      	movs	r2, #1
 8005104:	4393      	bics	r3, r2
 8005106:	001a      	movs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2270      	movs	r2, #112	; 0x70
 8005122:	4393      	bics	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2203      	movs	r2, #3
 800512a:	4393      	bics	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2202      	movs	r2, #2
 800513c:	4393      	bics	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a27      	ldr	r2, [pc, #156]	; (80051ec <TIM_OC1_SetConfig+0x104>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00b      	beq.n	800516a <TIM_OC1_SetConfig+0x82>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a26      	ldr	r2, [pc, #152]	; (80051f0 <TIM_OC1_SetConfig+0x108>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <TIM_OC1_SetConfig+0x82>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a25      	ldr	r2, [pc, #148]	; (80051f4 <TIM_OC1_SetConfig+0x10c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_OC1_SetConfig+0x82>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a24      	ldr	r2, [pc, #144]	; (80051f8 <TIM_OC1_SetConfig+0x110>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d10c      	bne.n	8005184 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2208      	movs	r2, #8
 800516e:	4393      	bics	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2204      	movs	r2, #4
 8005180:	4393      	bics	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a19      	ldr	r2, [pc, #100]	; (80051ec <TIM_OC1_SetConfig+0x104>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00b      	beq.n	80051a4 <TIM_OC1_SetConfig+0xbc>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <TIM_OC1_SetConfig+0x108>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d007      	beq.n	80051a4 <TIM_OC1_SetConfig+0xbc>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a17      	ldr	r2, [pc, #92]	; (80051f4 <TIM_OC1_SetConfig+0x10c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_OC1_SetConfig+0xbc>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a16      	ldr	r2, [pc, #88]	; (80051f8 <TIM_OC1_SetConfig+0x110>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d111      	bne.n	80051c8 <TIM_OC1_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4a15      	ldr	r2, [pc, #84]	; (80051fc <TIM_OC1_SetConfig+0x114>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4a14      	ldr	r2, [pc, #80]	; (8005200 <TIM_OC1_SetConfig+0x118>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	621a      	str	r2, [r3, #32]
}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b006      	add	sp, #24
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40014400 	.word	0x40014400
 80051f8:	40014800 	.word	0x40014800
 80051fc:	fffffeff 	.word	0xfffffeff
 8005200:	fffffdff 	.word	0xfffffdff

08005204 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	2210      	movs	r2, #16
 8005220:	4393      	bics	r3, r2
 8005222:	001a      	movs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4a2e      	ldr	r2, [pc, #184]	; (80052f8 <TIM_OC2_SetConfig+0xf4>)
 800523e:	4013      	ands	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4a2d      	ldr	r2, [pc, #180]	; (80052fc <TIM_OC2_SetConfig+0xf8>)
 8005246:	4013      	ands	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2220      	movs	r2, #32
 800525a:	4393      	bics	r3, r2
 800525c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a24      	ldr	r2, [pc, #144]	; (8005300 <TIM_OC2_SetConfig+0xfc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10d      	bne.n	800528e <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2280      	movs	r2, #128	; 0x80
 8005276:	4393      	bics	r3, r2
 8005278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2240      	movs	r2, #64	; 0x40
 800528a:	4393      	bics	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <TIM_OC2_SetConfig+0xfc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00b      	beq.n	80052ae <TIM_OC2_SetConfig+0xaa>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a1a      	ldr	r2, [pc, #104]	; (8005304 <TIM_OC2_SetConfig+0x100>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <TIM_OC2_SetConfig+0xaa>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a19      	ldr	r2, [pc, #100]	; (8005308 <TIM_OC2_SetConfig+0x104>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_OC2_SetConfig+0xaa>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a18      	ldr	r2, [pc, #96]	; (800530c <TIM_OC2_SetConfig+0x108>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d113      	bne.n	80052d6 <TIM_OC2_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4a17      	ldr	r2, [pc, #92]	; (8005310 <TIM_OC2_SetConfig+0x10c>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4a16      	ldr	r2, [pc, #88]	; (8005314 <TIM_OC2_SetConfig+0x110>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	621a      	str	r2, [r3, #32]
}
 80052f0:	46c0      	nop			; (mov r8, r8)
 80052f2:	46bd      	mov	sp, r7
 80052f4:	b006      	add	sp, #24
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	ffff8fff 	.word	0xffff8fff
 80052fc:	fffffcff 	.word	0xfffffcff
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800
 8005310:	fffffbff 	.word	0xfffffbff
 8005314:	fffff7ff 	.word	0xfffff7ff

08005318 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	4a35      	ldr	r2, [pc, #212]	; (8005408 <TIM_OC3_SetConfig+0xf0>)
 8005334:	401a      	ands	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2270      	movs	r2, #112	; 0x70
 8005350:	4393      	bics	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2203      	movs	r2, #3
 8005358:	4393      	bics	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	4a28      	ldr	r2, [pc, #160]	; (800540c <TIM_OC3_SetConfig+0xf4>)
 800536a:	4013      	ands	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a24      	ldr	r2, [pc, #144]	; (8005410 <TIM_OC3_SetConfig+0xf8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d10d      	bne.n	800539e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	4a23      	ldr	r2, [pc, #140]	; (8005414 <TIM_OC3_SetConfig+0xfc>)
 8005386:	4013      	ands	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <TIM_OC3_SetConfig+0x100>)
 800539a:	4013      	ands	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <TIM_OC3_SetConfig+0xf8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00b      	beq.n	80053be <TIM_OC3_SetConfig+0xa6>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1c      	ldr	r2, [pc, #112]	; (800541c <TIM_OC3_SetConfig+0x104>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d007      	beq.n	80053be <TIM_OC3_SetConfig+0xa6>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <TIM_OC3_SetConfig+0x108>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d003      	beq.n	80053be <TIM_OC3_SetConfig+0xa6>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <TIM_OC3_SetConfig+0x10c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d113      	bne.n	80053e6 <TIM_OC3_SetConfig+0xce>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4a19      	ldr	r2, [pc, #100]	; (8005428 <TIM_OC3_SetConfig+0x110>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4a18      	ldr	r2, [pc, #96]	; (800542c <TIM_OC3_SetConfig+0x114>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	621a      	str	r2, [r3, #32]
}
 8005400:	46c0      	nop			; (mov r8, r8)
 8005402:	46bd      	mov	sp, r7
 8005404:	b006      	add	sp, #24
 8005406:	bd80      	pop	{r7, pc}
 8005408:	fffffeff 	.word	0xfffffeff
 800540c:	fffffdff 	.word	0xfffffdff
 8005410:	40012c00 	.word	0x40012c00
 8005414:	fffff7ff 	.word	0xfffff7ff
 8005418:	fffffbff 	.word	0xfffffbff
 800541c:	40014000 	.word	0x40014000
 8005420:	40014400 	.word	0x40014400
 8005424:	40014800 	.word	0x40014800
 8005428:	ffffefff 	.word	0xffffefff
 800542c:	ffffdfff 	.word	0xffffdfff

08005430 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	4a28      	ldr	r2, [pc, #160]	; (80054ec <TIM_OC4_SetConfig+0xbc>)
 800544c:	401a      	ands	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4a22      	ldr	r2, [pc, #136]	; (80054f0 <TIM_OC4_SetConfig+0xc0>)
 8005468:	4013      	ands	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4a21      	ldr	r2, [pc, #132]	; (80054f4 <TIM_OC4_SetConfig+0xc4>)
 8005470:	4013      	ands	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <TIM_OC4_SetConfig+0xc8>)
 8005484:	4013      	ands	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	031b      	lsls	r3, r3, #12
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a19      	ldr	r2, [pc, #100]	; (80054fc <TIM_OC4_SetConfig+0xcc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00b      	beq.n	80054b4 <TIM_OC4_SetConfig+0x84>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a18      	ldr	r2, [pc, #96]	; (8005500 <TIM_OC4_SetConfig+0xd0>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_OC4_SetConfig+0x84>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a17      	ldr	r2, [pc, #92]	; (8005504 <TIM_OC4_SetConfig+0xd4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_OC4_SetConfig+0x84>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a16      	ldr	r2, [pc, #88]	; (8005508 <TIM_OC4_SetConfig+0xd8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d109      	bne.n	80054c8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	4a15      	ldr	r2, [pc, #84]	; (800550c <TIM_OC4_SetConfig+0xdc>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	019b      	lsls	r3, r3, #6
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b006      	add	sp, #24
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	ffffefff 	.word	0xffffefff
 80054f0:	ffff8fff 	.word	0xffff8fff
 80054f4:	fffffcff 	.word	0xfffffcff
 80054f8:	ffffdfff 	.word	0xffffdfff
 80054fc:	40012c00 	.word	0x40012c00
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800
 800550c:	ffffbfff 	.word	0xffffbfff

08005510 <TIM_SlaveTimer_SetConfig>:

static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2270      	movs	r2, #112	; 0x70
 8005532:	4393      	bics	r3, r2
 8005534:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2207      	movs	r2, #7
 8005544:	4393      	bics	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b30      	cmp	r3, #48	; 0x30
 8005560:	d054      	beq.n	800560c <TIM_SlaveTimer_SetConfig+0xfc>
 8005562:	d806      	bhi.n	8005572 <TIM_SlaveTimer_SetConfig+0x62>
 8005564:	2b10      	cmp	r3, #16
 8005566:	d053      	beq.n	8005610 <TIM_SlaveTimer_SetConfig+0x100>
 8005568:	2b20      	cmp	r3, #32
 800556a:	d053      	beq.n	8005614 <TIM_SlaveTimer_SetConfig+0x104>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d053      	beq.n	8005618 <TIM_SlaveTimer_SetConfig+0x108>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;

  default:
    break;
 8005570:	e053      	b.n	800561a <TIM_SlaveTimer_SetConfig+0x10a>
  switch (sSlaveConfig->InputTrigger)
 8005572:	2b50      	cmp	r3, #80	; 0x50
 8005574:	d036      	beq.n	80055e4 <TIM_SlaveTimer_SetConfig+0xd4>
 8005576:	d802      	bhi.n	800557e <TIM_SlaveTimer_SetConfig+0x6e>
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d010      	beq.n	800559e <TIM_SlaveTimer_SetConfig+0x8e>
    break;
 800557c:	e04d      	b.n	800561a <TIM_SlaveTimer_SetConfig+0x10a>
  switch (sSlaveConfig->InputTrigger)
 800557e:	2b60      	cmp	r3, #96	; 0x60
 8005580:	d03a      	beq.n	80055f8 <TIM_SlaveTimer_SetConfig+0xe8>
 8005582:	2b70      	cmp	r3, #112	; 0x70
 8005584:	d000      	beq.n	8005588 <TIM_SlaveTimer_SetConfig+0x78>
    break;
 8005586:	e048      	b.n	800561a <TIM_SlaveTimer_SetConfig+0x10a>
      TIM_ETR_SetConfig(htim->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68d9      	ldr	r1, [r3, #12]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f000 f8ac 	bl	80056f4 <TIM_ETR_SetConfig>
    break;
 800559c:	e03d      	b.n	800561a <TIM_SlaveTimer_SetConfig+0x10a>
      tmpccer = htim->Instance->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	6a12      	ldr	r2, [r2, #32]
 80055b0:	2101      	movs	r1, #1
 80055b2:	438a      	bics	r2, r1
 80055b4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	613b      	str	r3, [r7, #16]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	22f0      	movs	r2, #240	; 0xf0
 80055c2:	4393      	bics	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCMR1 = tmpccmr1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	621a      	str	r2, [r3, #32]
    break;
 80055e2:	e01a      	b.n	800561a <TIM_SlaveTimer_SetConfig+0x10a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6899      	ldr	r1, [r3, #8]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	001a      	movs	r2, r3
 80055f2:	f000 f816 	bl	8005622 <TIM_TI1_ConfigInputStage>
    break;
 80055f6:	e010      	b.n	800561a <TIM_SlaveTimer_SetConfig+0x10a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6899      	ldr	r1, [r3, #8]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	001a      	movs	r2, r3
 8005606:	f000 f83f 	bl	8005688 <TIM_TI2_ConfigInputStage>
    break;
 800560a:	e006      	b.n	800561a <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 800560c:	46c0      	nop			; (mov r8, r8)
 800560e:	e004      	b.n	800561a <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	e002      	b.n	800561a <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 8005614:	46c0      	nop			; (mov r8, r8)
 8005616:	e000      	b.n	800561a <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 8005618:	46c0      	nop			; (mov r8, r8)
  }
}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b006      	add	sp, #24
 8005620:	bd80      	pop	{r7, pc}

08005622 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b086      	sub	sp, #24
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	2201      	movs	r2, #1
 8005642:	4393      	bics	r3, r2
 8005644:	001a      	movs	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	22f0      	movs	r2, #240	; 0xf0
 8005654:	4393      	bics	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	220a      	movs	r2, #10
 8005666:	4393      	bics	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	46bd      	mov	sp, r7
 8005682:	b006      	add	sp, #24
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	2210      	movs	r2, #16
 80056a2:	4393      	bics	r3, r2
 80056a4:	001a      	movs	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	4a0d      	ldr	r2, [pc, #52]	; (80056f0 <TIM_TI2_ConfigInputStage+0x68>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	031b      	lsls	r3, r3, #12
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	22a0      	movs	r2, #160	; 0xa0
 80056cc:	4393      	bics	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b006      	add	sp, #24
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	ffff0fff 	.word	0xffff0fff

080056f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4a09      	ldr	r2, [pc, #36]	; (8005734 <TIM_ETR_SetConfig+0x40>)
 8005710:	4013      	ands	r3, r2
 8005712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	431a      	orrs	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4313      	orrs	r3, r2
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	46c0      	nop			; (mov r8, r8)
 800572e:	46bd      	mov	sp, r7
 8005730:	b006      	add	sp, #24
 8005732:	bd80      	pop	{r7, pc}
 8005734:	ffff00ff 	.word	0xffff00ff

08005738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8005748:	2201      	movs	r2, #1
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	409a      	lsls	r2, r3
 800574e:	0013      	movs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	43d2      	mvns	r2, r2
 800575a:	401a      	ands	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4099      	lsls	r1, r3
 800576a:	000b      	movs	r3, r1
 800576c:	431a      	orrs	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	621a      	str	r2, [r3, #32]
}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	46bd      	mov	sp, r7
 8005776:	b006      	add	sp, #24
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	223c      	movs	r2, #60	; 0x3c
 8005788:	5c9b      	ldrb	r3, [r3, r2]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800578e:	2302      	movs	r3, #2
 8005790:	e032      	b.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	223c      	movs	r2, #60	; 0x3c
 8005796:	2101      	movs	r1, #1
 8005798:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	223d      	movs	r2, #61	; 0x3d
 800579e:	2102      	movs	r1, #2
 80057a0:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	6852      	ldr	r2, [r2, #4]
 80057ac:	2170      	movs	r1, #112	; 0x70
 80057ae:	438a      	bics	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	6851      	ldr	r1, [r2, #4]
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	6892      	ldr	r2, [r2, #8]
 80057ce:	2180      	movs	r1, #128	; 0x80
 80057d0:	438a      	bics	r2, r1
 80057d2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	6891      	ldr	r1, [r2, #8]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	6852      	ldr	r2, [r2, #4]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	223d      	movs	r2, #61	; 0x3d
 80057ea:	2101      	movs	r1, #1
 80057ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	223c      	movs	r2, #60	; 0x3c
 80057f2:	2100      	movs	r1, #0
 80057f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b002      	add	sp, #8
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	b002      	add	sp, #8
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005818:	46c0      	nop			; (mov r8, r8)
 800581a:	46bd      	mov	sp, r7
 800581c:	b002      	add	sp, #8
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e047      	b.n	80058c2 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2269      	movs	r2, #105	; 0x69
 8005836:	5c9b      	ldrb	r3, [r3, r2]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d107      	bne.n	800584e <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2268      	movs	r2, #104	; 0x68
 8005842:	2100      	movs	r1, #0
 8005844:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	0018      	movs	r0, r3
 800584a:	f004 f91b 	bl	8009a84 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2269      	movs	r2, #105	; 0x69
 8005852:	2124      	movs	r1, #36	; 0x24
 8005854:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	2101      	movs	r1, #1
 8005862:	438a      	bics	r2, r1
 8005864:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	0018      	movs	r0, r3
 800586a:	f000 fa67 	bl	8005d3c <UART_SetConfig>
 800586e:	0003      	movs	r3, r0
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e024      	b.n	80058c2 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	0018      	movs	r0, r3
 8005884:	f000 fbd0 	bl	8006028 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	6852      	ldr	r2, [r2, #4]
 8005892:	490e      	ldr	r1, [pc, #56]	; (80058cc <HAL_UART_Init+0xac>)
 8005894:	400a      	ands	r2, r1
 8005896:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	6892      	ldr	r2, [r2, #8]
 80058a2:	212a      	movs	r1, #42	; 0x2a
 80058a4:	438a      	bics	r2, r1
 80058a6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6812      	ldr	r2, [r2, #0]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	2101      	movs	r1, #1
 80058b4:	430a      	orrs	r2, r1
 80058b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	0018      	movs	r0, r3
 80058bc:	f000 fc60 	bl	8006180 <UART_CheckIdleState>
 80058c0:	0003      	movs	r3, r0
}
 80058c2:	0018      	movs	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b002      	add	sp, #8
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	ffffb7ff 	.word	0xffffb7ff

080058d0 <HAL_UART_Transmit_DMA>:
  *         (as sent data will be handled by DMA from halfword frontier). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	1dbb      	adds	r3, r7, #6
 80058dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2269      	movs	r2, #105	; 0x69
 80058e2:	5c9b      	ldrb	r3, [r3, r2]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b20      	cmp	r3, #32
 80058e8:	d166      	bne.n	80059b8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0U))
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_UART_Transmit_DMA+0x28>
 80058f0:	1dbb      	adds	r3, r7, #6
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e05e      	b.n	80059ba <HAL_UART_Transmit_DMA+0xea>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data copy into TDR will be 
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	2380      	movs	r3, #128	; 0x80
 8005902:	015b      	lsls	r3, r3, #5
 8005904:	429a      	cmp	r2, r3
 8005906:	d109      	bne.n	800591c <HAL_UART_Transmit_DMA+0x4c>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d105      	bne.n	800591c <HAL_UART_Transmit_DMA+0x4c>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2201      	movs	r2, #1
 8005914:	4013      	ands	r3, r2
 8005916:	d001      	beq.n	800591c <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e04e      	b.n	80059ba <HAL_UART_Transmit_DMA+0xea>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2268      	movs	r2, #104	; 0x68
 8005920:	5c9b      	ldrb	r3, [r3, r2]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_UART_Transmit_DMA+0x5a>
 8005926:	2302      	movs	r3, #2
 8005928:	e047      	b.n	80059ba <HAL_UART_Transmit_DMA+0xea>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2268      	movs	r2, #104	; 0x68
 800592e:	2101      	movs	r1, #1
 8005930:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr = pData;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	1dba      	adds	r2, r7, #6
 800593c:	2150      	movs	r1, #80	; 0x50
 800593e:	8812      	ldrh	r2, [r2, #0]
 8005940:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1dba      	adds	r2, r7, #6
 8005946:	2152      	movs	r1, #82	; 0x52
 8005948:	8812      	ldrh	r2, [r2, #0]
 800594a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2269      	movs	r2, #105	; 0x69
 8005956:	2121      	movs	r1, #33	; 0x21
 8005958:	5499      	strb	r1, [r3, r2]

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595e:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <HAL_UART_Transmit_DMA+0xf4>)
 8005960:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005966:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <HAL_UART_Transmit_DMA+0xf8>)
 8005968:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800596e:	4a17      	ldr	r2, [pc, #92]	; (80059cc <HAL_UART_Transmit_DMA+0xfc>)
 8005970:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005976:	2200      	movs	r2, #0
 8005978:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005982:	0019      	movs	r1, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3328      	adds	r3, #40	; 0x28
 800598a:	001a      	movs	r2, r3
 800598c:	1dbb      	adds	r3, r7, #6
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	f7fd f800 	bl	8002994 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2240      	movs	r2, #64	; 0x40
 800599a:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2268      	movs	r2, #104	; 0x68
 80059a0:	2100      	movs	r1, #0
 80059a2:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	6892      	ldr	r2, [r2, #8]
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	430a      	orrs	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	e000      	b.n	80059ba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80059b8:	2302      	movs	r3, #2
  }
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b004      	add	sp, #16
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	08006321 	.word	0x08006321
 80059c8:	08006375 	.word	0x08006375
 80059cc:	08006423 	.word	0x08006423

080059d0 <HAL_UART_Receive_DMA>:
  *         (as received data will be handled by DMA from halfword frontier). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	1dbb      	adds	r3, r7, #6
 80059dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	226a      	movs	r2, #106	; 0x6a
 80059e2:	5c9b      	ldrb	r3, [r3, r2]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d000      	beq.n	80059ec <HAL_UART_Receive_DMA+0x1c>
 80059ea:	e06e      	b.n	8005aca <HAL_UART_Receive_DMA+0xfa>
  {
    if((pData == NULL ) || (Size == 0U))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_UART_Receive_DMA+0x2a>
 80059f2:	1dbb      	adds	r3, r7, #6
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Receive_DMA+0x2e>
    {
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e066      	b.n	8005acc <HAL_UART_Receive_DMA+0xfc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data copy from RDR will be 
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	015b      	lsls	r3, r3, #5
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d109      	bne.n	8005a1e <HAL_UART_Receive_DMA+0x4e>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d105      	bne.n	8005a1e <HAL_UART_Receive_DMA+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2201      	movs	r2, #1
 8005a16:	4013      	ands	r3, r2
 8005a18:	d001      	beq.n	8005a1e <HAL_UART_Receive_DMA+0x4e>
      {
        return  HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e056      	b.n	8005acc <HAL_UART_Receive_DMA+0xfc>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2268      	movs	r2, #104	; 0x68
 8005a22:	5c9b      	ldrb	r3, [r3, r2]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_UART_Receive_DMA+0x5c>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e04f      	b.n	8005acc <HAL_UART_Receive_DMA+0xfc>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2268      	movs	r2, #104	; 0x68
 8005a30:	2101      	movs	r1, #1
 8005a32:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1dba      	adds	r2, r7, #6
 8005a3e:	2158      	movs	r1, #88	; 0x58
 8005a40:	8812      	ldrh	r2, [r2, #0]
 8005a42:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	226a      	movs	r2, #106	; 0x6a
 8005a4e:	2122      	movs	r1, #34	; 0x22
 8005a50:	5499      	strb	r1, [r3, r2]

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a56:	4a1f      	ldr	r2, [pc, #124]	; (8005ad4 <HAL_UART_Receive_DMA+0x104>)
 8005a58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5e:	4a1e      	ldr	r2, [pc, #120]	; (8005ad8 <HAL_UART_Receive_DMA+0x108>)
 8005a60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a66:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <HAL_UART_Receive_DMA+0x10c>)
 8005a68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a6e:	2200      	movs	r2, #0
 8005a70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3324      	adds	r3, #36	; 0x24
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a82:	001a      	movs	r2, r3
 8005a84:	1dbb      	adds	r3, r7, #6
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	f7fc ff84 	bl	8002994 <HAL_DMA_Start_IT>

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2268      	movs	r2, #104	; 0x68
 8005a90:	2100      	movs	r1, #0
 8005a92:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	6812      	ldr	r2, [r2, #0]
 8005a9e:	2180      	movs	r1, #128	; 0x80
 8005aa0:	0049      	lsls	r1, r1, #1
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	6892      	ldr	r2, [r2, #8]
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	6812      	ldr	r2, [r2, #0]
 8005abe:	6892      	ldr	r2, [r2, #8]
 8005ac0:	2140      	movs	r1, #64	; 0x40
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e000      	b.n	8005acc <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8005aca:	2302      	movs	r3, #2
  }
}
 8005acc:	0018      	movs	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b004      	add	sp, #16
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	08006395 	.word	0x08006395
 8005ad8:	08006405 	.word	0x08006405
 8005adc:	08006423 	.word	0x08006423

08005ae0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	220f      	movs	r2, #15
 8005afc:	4013      	ands	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10c      	bne.n	8005b20 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d008      	beq.n	8005b20 <HAL_UART_IRQHandler+0x40>
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2220      	movs	r2, #32
 8005b12:	4013      	ands	r3, r2
 8005b14:	d004      	beq.n	8005b20 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f000 fd47 	bl	80065ac <UART_Receive_IT>
      return;
 8005b1e:	e0ef      	b.n	8005d00 <HAL_UART_IRQHandler+0x220>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d100      	bne.n	8005b30 <HAL_UART_IRQHandler+0x50>
 8005b2e:	e0af      	b.n	8005c90 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2201      	movs	r2, #1
 8005b34:	4013      	ands	r3, r2
 8005b36:	d105      	bne.n	8005b44 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	2390      	movs	r3, #144	; 0x90
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d100      	bne.n	8005b44 <HAL_UART_IRQHandler+0x64>
 8005b42:	e0a5      	b.n	8005c90 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2201      	movs	r2, #1
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d00e      	beq.n	8005b6a <HAL_UART_IRQHandler+0x8a>
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	2380      	movs	r3, #128	; 0x80
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	4013      	ands	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b62:	2201      	movs	r2, #1
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	4013      	ands	r3, r2
 8005b70:	d00d      	beq.n	8005b8e <HAL_UART_IRQHandler+0xae>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2201      	movs	r2, #1
 8005b76:	4013      	ands	r3, r2
 8005b78:	d009      	beq.n	8005b8e <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b86:	2204      	movs	r2, #4
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2204      	movs	r2, #4
 8005b92:	4013      	ands	r3, r2
 8005b94:	d00d      	beq.n	8005bb2 <HAL_UART_IRQHandler+0xd2>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	d009      	beq.n	8005bb2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005baa:	2202      	movs	r2, #2
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d011      	beq.n	8005bde <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8005bc0:	d103      	bne.n	8005bca <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	d009      	beq.n	8005bde <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2208      	movs	r2, #8
 8005bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd6:	2208      	movs	r2, #8
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d100      	bne.n	8005be8 <HAL_UART_IRQHandler+0x108>
 8005be6:	e08a      	b.n	8005cfe <HAL_UART_IRQHandler+0x21e>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2220      	movs	r2, #32
 8005bec:	4013      	ands	r3, r2
 8005bee:	d007      	beq.n	8005c00 <HAL_UART_IRQHandler+0x120>
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f000 fcd6 	bl	80065ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c04:	2208      	movs	r2, #8
 8005c06:	4013      	ands	r3, r2
 8005c08:	d105      	bne.n	8005c16 <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2240      	movs	r2, #64	; 0x40
 8005c12:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005c14:	d032      	beq.n	8005c7c <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f000 fb63 	bl	80062e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	2240      	movs	r2, #64	; 0x40
 8005c26:	4013      	ands	r3, r2
 8005c28:	d023      	beq.n	8005c72 <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	6892      	ldr	r2, [r2, #8]
 8005c34:	2140      	movs	r1, #64	; 0x40
 8005c36:	438a      	bics	r2, r1
 8005c38:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d012      	beq.n	8005c68 <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c46:	4a30      	ldr	r2, [pc, #192]	; (8005d08 <HAL_UART_IRQHandler+0x228>)
 8005c48:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f7fc ff06 	bl	8002a60 <HAL_DMA_Abort_IT>
 8005c54:	1e03      	subs	r3, r0, #0
 8005c56:	d019      	beq.n	8005c8c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c62:	0018      	movs	r0, r3
 8005c64:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c66:	e011      	b.n	8005c8c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f000 f85e 	bl	8005d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	e00c      	b.n	8005c8c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	0018      	movs	r0, r3
 8005c76:	f000 f859 	bl	8005d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7a:	e007      	b.n	8005c8c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f000 f854 	bl	8005d2c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 8005c8a:	e038      	b.n	8005cfe <HAL_UART_IRQHandler+0x21e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c8c:	46c0      	nop			; (mov r8, r8)
    return;
 8005c8e:	e036      	b.n	8005cfe <HAL_UART_IRQHandler+0x21e>

  } /* End if some error occurs */

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	035b      	lsls	r3, r3, #13
 8005c96:	4013      	ands	r3, r2
 8005c98:	d016      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x1e8>
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	2380      	movs	r3, #128	; 0x80
 8005c9e:	03db      	lsls	r3, r3, #15
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d011      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x1e8>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2280      	movs	r2, #128	; 0x80
 8005caa:	0352      	lsls	r2, r2, #13
 8005cac:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2269      	movs	r2, #105	; 0x69
 8005cb2:	2120      	movs	r1, #32
 8005cb4:	5499      	strb	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	226a      	movs	r2, #106	; 0x6a
 8005cba:	2120      	movs	r1, #32
 8005cbc:	5499      	strb	r1, [r3, r2]
    HAL_UARTEx_WakeupCallback(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f000 fd61 	bl	8006788 <HAL_UARTEx_WakeupCallback>
    return;
 8005cc6:	e01b      	b.n	8005d00 <HAL_UART_IRQHandler+0x220>
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	4013      	ands	r3, r2
 8005cce:	d008      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x202>
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2280      	movs	r2, #128	; 0x80
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	d004      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x202>
  {
    UART_Transmit_IT(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f000 fbf5 	bl	80064ca <UART_Transmit_IT>
    return;
 8005ce0:	e00e      	b.n	8005d00 <HAL_UART_IRQHandler+0x220>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2240      	movs	r2, #64	; 0x40
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d00a      	beq.n	8005d00 <HAL_UART_IRQHandler+0x220>
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2240      	movs	r2, #64	; 0x40
 8005cee:	4013      	ands	r3, r2
 8005cf0:	d006      	beq.n	8005d00 <HAL_UART_IRQHandler+0x220>
  {
    UART_EndTransmit_IT(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f000 fc3f 	bl	8006578 <UART_EndTransmit_IT>
    return;
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	e000      	b.n	8005d00 <HAL_UART_IRQHandler+0x220>
    return;
 8005cfe:	46c0      	nop			; (mov r8, r8)
  }

}
 8005d00:	46bd      	mov	sp, r7
 8005d02:	b006      	add	sp, #24
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	0800649d 	.word	0x0800649d

08005d0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d14:	46c0      	nop			; (mov r8, r8)
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b002      	add	sp, #8
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005d24:	46c0      	nop			; (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d34:	46c0      	nop			; (mov r8, r8)
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b002      	add	sp, #8
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005d48:	2317      	movs	r3, #23
 8005d4a:	18fb      	adds	r3, r7, r3
 8005d4c:	2210      	movs	r2, #16
 8005d4e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8005d50:	230a      	movs	r3, #10
 8005d52:	18fb      	adds	r3, r7, r3
 8005d54:	2200      	movs	r2, #0
 8005d56:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8005d58:	2314      	movs	r3, #20
 8005d5a:	18fb      	adds	r3, r7, r3
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d60:	2313      	movs	r3, #19
 8005d62:	18fb      	adds	r3, r7, r3
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	499f      	ldr	r1, [pc, #636]	; (8006008 <UART_SetConfig+0x2cc>)
 8005d8c:	4011      	ands	r1, r2
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	6852      	ldr	r2, [r2, #4]
 8005d9e:	499b      	ldr	r1, [pc, #620]	; (800600c <UART_SetConfig+0x2d0>)
 8005da0:	4011      	ands	r1, r2
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	68d2      	ldr	r2, [r2, #12]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	6892      	ldr	r2, [r2, #8]
 8005dc0:	4993      	ldr	r1, [pc, #588]	; (8006010 <UART_SetConfig+0x2d4>)
 8005dc2:	4011      	ands	r1, r2
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a91      	ldr	r2, [pc, #580]	; (8006014 <UART_SetConfig+0x2d8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d125      	bne.n	8005e20 <UART_SetConfig+0xe4>
 8005dd4:	4b90      	ldr	r3, [pc, #576]	; (8006018 <UART_SetConfig+0x2dc>)
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	2203      	movs	r2, #3
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d00f      	beq.n	8005e00 <UART_SetConfig+0xc4>
 8005de0:	d304      	bcc.n	8005dec <UART_SetConfig+0xb0>
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d011      	beq.n	8005e0a <UART_SetConfig+0xce>
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d005      	beq.n	8005df6 <UART_SetConfig+0xba>
 8005dea:	e013      	b.n	8005e14 <UART_SetConfig+0xd8>
 8005dec:	2317      	movs	r3, #23
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	e022      	b.n	8005e3c <UART_SetConfig+0x100>
 8005df6:	2317      	movs	r3, #23
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	e01d      	b.n	8005e3c <UART_SetConfig+0x100>
 8005e00:	2317      	movs	r3, #23
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	2204      	movs	r2, #4
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	e018      	b.n	8005e3c <UART_SetConfig+0x100>
 8005e0a:	2317      	movs	r3, #23
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	2208      	movs	r2, #8
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	e013      	b.n	8005e3c <UART_SetConfig+0x100>
 8005e14:	2317      	movs	r3, #23
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	2210      	movs	r2, #16
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	46c0      	nop			; (mov r8, r8)
 8005e1e:	e00d      	b.n	8005e3c <UART_SetConfig+0x100>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a7d      	ldr	r2, [pc, #500]	; (800601c <UART_SetConfig+0x2e0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d104      	bne.n	8005e34 <UART_SetConfig+0xf8>
 8005e2a:	2317      	movs	r3, #23
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	2200      	movs	r2, #0
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	e003      	b.n	8005e3c <UART_SetConfig+0x100>
 8005e34:	2317      	movs	r3, #23
 8005e36:	18fb      	adds	r3, r7, r3
 8005e38:	2210      	movs	r2, #16
 8005e3a:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d000      	beq.n	8005e4a <UART_SetConfig+0x10e>
 8005e48:	e07b      	b.n	8005f42 <UART_SetConfig+0x206>
  {
    switch (clocksource)
 8005e4a:	2317      	movs	r3, #23
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d01c      	beq.n	8005e8e <UART_SetConfig+0x152>
 8005e54:	dc02      	bgt.n	8005e5c <UART_SetConfig+0x120>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <UART_SetConfig+0x12a>
 8005e5a:	e04f      	b.n	8005efc <UART_SetConfig+0x1c0>
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d027      	beq.n	8005eb0 <UART_SetConfig+0x174>
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d039      	beq.n	8005ed8 <UART_SetConfig+0x19c>
 8005e64:	e04a      	b.n	8005efc <UART_SetConfig+0x1c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005e66:	f7fe fcbf 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005e6a:	0003      	movs	r3, r0
 8005e6c:	005a      	lsls	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	18d2      	adds	r2, r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	0019      	movs	r1, r3
 8005e7c:	0010      	movs	r0, r2
 8005e7e:	f7fa f943 	bl	8000108 <__udivsi3>
 8005e82:	0003      	movs	r3, r0
 8005e84:	001a      	movs	r2, r3
 8005e86:	2314      	movs	r3, #20
 8005e88:	18fb      	adds	r3, r7, r3
 8005e8a:	801a      	strh	r2, [r3, #0]
        break;
 8005e8c:	e03b      	b.n	8005f06 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	4a62      	ldr	r2, [pc, #392]	; (8006020 <UART_SetConfig+0x2e4>)
 8005e96:	189a      	adds	r2, r3, r2
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	0019      	movs	r1, r3
 8005e9e:	0010      	movs	r0, r2
 8005ea0:	f7fa f932 	bl	8000108 <__udivsi3>
 8005ea4:	0003      	movs	r3, r0
 8005ea6:	001a      	movs	r2, r3
 8005ea8:	2314      	movs	r3, #20
 8005eaa:	18fb      	adds	r3, r7, r3
 8005eac:	801a      	strh	r2, [r3, #0]
        break;
 8005eae:	e02a      	b.n	8005f06 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005eb0:	f7fe fc30 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	005a      	lsls	r2, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	085b      	lsrs	r3, r3, #1
 8005ebe:	18d2      	adds	r2, r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	0019      	movs	r1, r3
 8005ec6:	0010      	movs	r0, r2
 8005ec8:	f7fa f91e 	bl	8000108 <__udivsi3>
 8005ecc:	0003      	movs	r3, r0
 8005ece:	001a      	movs	r2, r3
 8005ed0:	2314      	movs	r3, #20
 8005ed2:	18fb      	adds	r3, r7, r3
 8005ed4:	801a      	strh	r2, [r3, #0]
        break;
 8005ed6:	e016      	b.n	8005f06 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	2280      	movs	r2, #128	; 0x80
 8005ee0:	0252      	lsls	r2, r2, #9
 8005ee2:	189a      	adds	r2, r3, r2
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	0019      	movs	r1, r3
 8005eea:	0010      	movs	r0, r2
 8005eec:	f7fa f90c 	bl	8000108 <__udivsi3>
 8005ef0:	0003      	movs	r3, r0
 8005ef2:	001a      	movs	r2, r3
 8005ef4:	2314      	movs	r3, #20
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	801a      	strh	r2, [r3, #0]
        break;
 8005efa:	e004      	b.n	8005f06 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005efc:	2313      	movs	r3, #19
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	2201      	movs	r2, #1
 8005f02:	701a      	strb	r2, [r3, #0]
        break;
 8005f04:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8005f06:	230a      	movs	r3, #10
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	2214      	movs	r2, #20
 8005f0c:	18ba      	adds	r2, r7, r2
 8005f0e:	8812      	ldrh	r2, [r2, #0]
 8005f10:	210f      	movs	r1, #15
 8005f12:	438a      	bics	r2, r1
 8005f14:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f16:	2314      	movs	r3, #20
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	105b      	asrs	r3, r3, #1
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2207      	movs	r2, #7
 8005f22:	4013      	ands	r3, r2
 8005f24:	b299      	uxth	r1, r3
 8005f26:	230a      	movs	r3, #10
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	220a      	movs	r2, #10
 8005f2c:	18ba      	adds	r2, r7, r2
 8005f2e:	8812      	ldrh	r2, [r2, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	220a      	movs	r2, #10
 8005f3a:	18ba      	adds	r2, r7, r2
 8005f3c:	8812      	ldrh	r2, [r2, #0]
 8005f3e:	60da      	str	r2, [r3, #12]
 8005f40:	e05b      	b.n	8005ffa <UART_SetConfig+0x2be>
  }
  else
  {
    switch (clocksource)
 8005f42:	2317      	movs	r3, #23
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d01b      	beq.n	8005f84 <UART_SetConfig+0x248>
 8005f4c:	dc02      	bgt.n	8005f54 <UART_SetConfig+0x218>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <UART_SetConfig+0x222>
 8005f52:	e04d      	b.n	8005ff0 <UART_SetConfig+0x2b4>
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d026      	beq.n	8005fa6 <UART_SetConfig+0x26a>
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d037      	beq.n	8005fcc <UART_SetConfig+0x290>
 8005f5c:	e048      	b.n	8005ff0 <UART_SetConfig+0x2b4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681c      	ldr	r4, [r3, #0]
 8005f62:	f7fe fc41 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8005f66:	0002      	movs	r2, r0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	085b      	lsrs	r3, r3, #1
 8005f6e:	18d2      	adds	r2, r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	0019      	movs	r1, r3
 8005f76:	0010      	movs	r0, r2
 8005f78:	f7fa f8c6 	bl	8000108 <__udivsi3>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	60e3      	str	r3, [r4, #12]
        break;
 8005f82:	e03a      	b.n	8005ffa <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681c      	ldr	r4, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	4a25      	ldr	r2, [pc, #148]	; (8006024 <UART_SetConfig+0x2e8>)
 8005f90:	189a      	adds	r2, r3, r2
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	0019      	movs	r1, r3
 8005f98:	0010      	movs	r0, r2
 8005f9a:	f7fa f8b5 	bl	8000108 <__udivsi3>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	60e3      	str	r3, [r4, #12]
        break;
 8005fa4:	e029      	b.n	8005ffa <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681c      	ldr	r4, [r3, #0]
 8005faa:	f7fe fbb3 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8005fae:	0002      	movs	r2, r0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	085b      	lsrs	r3, r3, #1
 8005fb6:	18d2      	adds	r2, r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	0010      	movs	r0, r2
 8005fc0:	f7fa f8a2 	bl	8000108 <__udivsi3>
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	60e3      	str	r3, [r4, #12]
        break;
 8005fca:	e016      	b.n	8005ffa <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681c      	ldr	r4, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	085b      	lsrs	r3, r3, #1
 8005fd6:	2280      	movs	r2, #128	; 0x80
 8005fd8:	0212      	lsls	r2, r2, #8
 8005fda:	189a      	adds	r2, r3, r2
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	0019      	movs	r1, r3
 8005fe2:	0010      	movs	r0, r2
 8005fe4:	f7fa f890 	bl	8000108 <__udivsi3>
 8005fe8:	0003      	movs	r3, r0
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	60e3      	str	r3, [r4, #12]
        break;
 8005fee:	e004      	b.n	8005ffa <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005ff0:	2313      	movs	r3, #19
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
        break;
 8005ff8:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8005ffa:	2313      	movs	r3, #19
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	781b      	ldrb	r3, [r3, #0]

}
 8006000:	0018      	movs	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	b007      	add	sp, #28
 8006006:	bd90      	pop	{r4, r7, pc}
 8006008:	ffff69f3 	.word	0xffff69f3
 800600c:	ffffcfff 	.word	0xffffcfff
 8006010:	fffff4ff 	.word	0xfffff4ff
 8006014:	40013800 	.word	0x40013800
 8006018:	40021000 	.word	0x40021000
 800601c:	40004400 	.word	0x40004400
 8006020:	00f42400 	.word	0x00f42400
 8006024:	007a1200 	.word	0x007a1200

08006028 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	2201      	movs	r2, #1
 8006036:	4013      	ands	r3, r2
 8006038:	d00a      	beq.n	8006050 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	6852      	ldr	r2, [r2, #4]
 8006044:	4945      	ldr	r1, [pc, #276]	; (800615c <UART_AdvFeatureConfig+0x134>)
 8006046:	4011      	ands	r1, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800604c:	430a      	orrs	r2, r1
 800604e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	2202      	movs	r2, #2
 8006056:	4013      	ands	r3, r2
 8006058:	d00a      	beq.n	8006070 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6812      	ldr	r2, [r2, #0]
 8006062:	6852      	ldr	r2, [r2, #4]
 8006064:	493e      	ldr	r1, [pc, #248]	; (8006160 <UART_AdvFeatureConfig+0x138>)
 8006066:	4011      	ands	r1, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800606c:	430a      	orrs	r2, r1
 800606e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	2204      	movs	r2, #4
 8006076:	4013      	ands	r3, r2
 8006078:	d00a      	beq.n	8006090 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6812      	ldr	r2, [r2, #0]
 8006082:	6852      	ldr	r2, [r2, #4]
 8006084:	4937      	ldr	r1, [pc, #220]	; (8006164 <UART_AdvFeatureConfig+0x13c>)
 8006086:	4011      	ands	r1, r2
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800608c:	430a      	orrs	r2, r1
 800608e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	2208      	movs	r2, #8
 8006096:	4013      	ands	r3, r2
 8006098:	d00a      	beq.n	80060b0 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6812      	ldr	r2, [r2, #0]
 80060a2:	6852      	ldr	r2, [r2, #4]
 80060a4:	4930      	ldr	r1, [pc, #192]	; (8006168 <UART_AdvFeatureConfig+0x140>)
 80060a6:	4011      	ands	r1, r2
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060ac:	430a      	orrs	r2, r1
 80060ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	2210      	movs	r2, #16
 80060b6:	4013      	ands	r3, r2
 80060b8:	d00a      	beq.n	80060d0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6812      	ldr	r2, [r2, #0]
 80060c2:	6892      	ldr	r2, [r2, #8]
 80060c4:	4929      	ldr	r1, [pc, #164]	; (800616c <UART_AdvFeatureConfig+0x144>)
 80060c6:	4011      	ands	r1, r2
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060cc:	430a      	orrs	r2, r1
 80060ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	2220      	movs	r2, #32
 80060d6:	4013      	ands	r3, r2
 80060d8:	d00a      	beq.n	80060f0 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	6892      	ldr	r2, [r2, #8]
 80060e4:	4922      	ldr	r1, [pc, #136]	; (8006170 <UART_AdvFeatureConfig+0x148>)
 80060e6:	4011      	ands	r1, r2
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060ec:	430a      	orrs	r2, r1
 80060ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	2240      	movs	r2, #64	; 0x40
 80060f6:	4013      	ands	r3, r2
 80060f8:	d01b      	beq.n	8006132 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	6852      	ldr	r2, [r2, #4]
 8006104:	491b      	ldr	r1, [pc, #108]	; (8006174 <UART_AdvFeatureConfig+0x14c>)
 8006106:	4011      	ands	r1, r2
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800610c:	430a      	orrs	r2, r1
 800610e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	035b      	lsls	r3, r3, #13
 8006118:	429a      	cmp	r2, r3
 800611a:	d10a      	bne.n	8006132 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	6852      	ldr	r2, [r2, #4]
 8006126:	4914      	ldr	r1, [pc, #80]	; (8006178 <UART_AdvFeatureConfig+0x150>)
 8006128:	4011      	ands	r1, r2
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	2280      	movs	r2, #128	; 0x80
 8006138:	4013      	ands	r3, r2
 800613a:	d00a      	beq.n	8006152 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6812      	ldr	r2, [r2, #0]
 8006144:	6852      	ldr	r2, [r2, #4]
 8006146:	490d      	ldr	r1, [pc, #52]	; (800617c <UART_AdvFeatureConfig+0x154>)
 8006148:	4011      	ands	r1, r2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
  }
}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	46bd      	mov	sp, r7
 8006156:	b002      	add	sp, #8
 8006158:	bd80      	pop	{r7, pc}
 800615a:	46c0      	nop			; (mov r8, r8)
 800615c:	fffdffff 	.word	0xfffdffff
 8006160:	fffeffff 	.word	0xfffeffff
 8006164:	fffbffff 	.word	0xfffbffff
 8006168:	ffff7fff 	.word	0xffff7fff
 800616c:	ffffefff 	.word	0xffffefff
 8006170:	ffffdfff 	.word	0xffffdfff
 8006174:	ffefffff 	.word	0xffefffff
 8006178:	ff9fffff 	.word	0xff9fffff
 800617c:	fff7ffff 	.word	0xfff7ffff

08006180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af02      	add	r7, sp, #8
 8006186:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006192:	f7fc fa59 	bl	8002648 <HAL_GetTick>
 8006196:	0003      	movs	r3, r0
 8006198:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a1f      	ldr	r2, [pc, #124]	; (800621c <UART_CheckIdleState+0x9c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d129      	bne.n	80061f8 <UART_CheckIdleState+0x78>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2208      	movs	r2, #8
 80061ac:	4013      	ands	r3, r2
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d10d      	bne.n	80061ce <UART_CheckIdleState+0x4e>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	2380      	movs	r3, #128	; 0x80
 80061b6:	0399      	lsls	r1, r3, #14
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4b19      	ldr	r3, [pc, #100]	; (8006220 <UART_CheckIdleState+0xa0>)
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	0013      	movs	r3, r2
 80061c0:	2200      	movs	r2, #0
 80061c2:	f000 f82f 	bl	8006224 <UART_WaitOnFlagUntilTimeout>
 80061c6:	1e03      	subs	r3, r0, #0
 80061c8:	d001      	beq.n	80061ce <UART_CheckIdleState+0x4e>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e021      	b.n	8006212 <UART_CheckIdleState+0x92>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2204      	movs	r2, #4
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d10d      	bne.n	80061f8 <UART_CheckIdleState+0x78>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	2380      	movs	r3, #128	; 0x80
 80061e0:	03d9      	lsls	r1, r3, #15
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <UART_CheckIdleState+0xa0>)
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	0013      	movs	r3, r2
 80061ea:	2200      	movs	r2, #0
 80061ec:	f000 f81a 	bl	8006224 <UART_WaitOnFlagUntilTimeout>
 80061f0:	1e03      	subs	r3, r0, #0
 80061f2:	d001      	beq.n	80061f8 <UART_CheckIdleState+0x78>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e00c      	b.n	8006212 <UART_CheckIdleState+0x92>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2269      	movs	r2, #105	; 0x69
 80061fc:	2120      	movs	r1, #32
 80061fe:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	226a      	movs	r2, #106	; 0x6a
 8006204:	2120      	movs	r1, #32
 8006206:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2268      	movs	r2, #104	; 0x68
 800620c:	2100      	movs	r1, #0
 800620e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	0018      	movs	r0, r3
 8006214:	46bd      	mov	sp, r7
 8006216:	b004      	add	sp, #16
 8006218:	bd80      	pop	{r7, pc}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	40013800 	.word	0x40013800
 8006220:	01ffffff 	.word	0x01ffffff

08006224 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	1dfb      	adds	r3, r7, #7
 8006232:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006234:	e02b      	b.n	800628e <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	3301      	adds	r3, #1
 800623a:	d028      	beq.n	800628e <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d007      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006242:	f7fc fa01 	bl	8002648 <HAL_GetTick>
 8006246:	0002      	movs	r2, r0
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	1ad2      	subs	r2, r2, r3
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	429a      	cmp	r2, r3
 8006250:	d91d      	bls.n	800628e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	6812      	ldr	r2, [r2, #0]
 800625c:	4916      	ldr	r1, [pc, #88]	; (80062b8 <UART_WaitOnFlagUntilTimeout+0x94>)
 800625e:	400a      	ands	r2, r1
 8006260:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	6892      	ldr	r2, [r2, #8]
 800626c:	2101      	movs	r1, #1
 800626e:	438a      	bics	r2, r1
 8006270:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2269      	movs	r2, #105	; 0x69
 8006276:	2120      	movs	r1, #32
 8006278:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	226a      	movs	r2, #106	; 0x6a
 800627e:	2120      	movs	r1, #32
 8006280:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2268      	movs	r2, #104	; 0x68
 8006286:	2100      	movs	r1, #0
 8006288:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e00f      	b.n	80062ae <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	401a      	ands	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	425a      	negs	r2, r3
 800629e:	4153      	adcs	r3, r2
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	001a      	movs	r2, r3
 80062a4:	1dfb      	adds	r3, r7, #7
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d0c4      	beq.n	8006236 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	0018      	movs	r0, r3
 80062b0:	46bd      	mov	sp, r7
 80062b2:	b004      	add	sp, #16
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	fffffe5f 	.word	0xfffffe5f

080062bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	6812      	ldr	r2, [r2, #0]
 80062ce:	21c0      	movs	r1, #192	; 0xc0
 80062d0:	438a      	bics	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2269      	movs	r2, #105	; 0x69
 80062d8:	2120      	movs	r1, #32
 80062da:	5499      	strb	r1, [r3, r2]
}
 80062dc:	46c0      	nop			; (mov r8, r8)
 80062de:	46bd      	mov	sp, r7
 80062e0:	b002      	add	sp, #8
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6812      	ldr	r2, [r2, #0]
 80062f4:	6812      	ldr	r2, [r2, #0]
 80062f6:	4909      	ldr	r1, [pc, #36]	; (800631c <UART_EndRxTransfer+0x38>)
 80062f8:	400a      	ands	r2, r1
 80062fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6812      	ldr	r2, [r2, #0]
 8006304:	6892      	ldr	r2, [r2, #8]
 8006306:	2101      	movs	r1, #1
 8006308:	438a      	bics	r2, r1
 800630a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	226a      	movs	r2, #106	; 0x6a
 8006310:	2120      	movs	r1, #32
 8006312:	5499      	strb	r1, [r3, r2]
}
 8006314:	46c0      	nop			; (mov r8, r8)
 8006316:	46bd      	mov	sp, r7
 8006318:	b002      	add	sp, #8
 800631a:	bd80      	pop	{r7, pc}
 800631c:	fffffedf 	.word	0xfffffedf

08006320 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	60fb      	str	r3, [r7, #12]
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2220      	movs	r2, #32
 8006336:	4013      	ands	r3, r2
 8006338:	d114      	bne.n	8006364 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2252      	movs	r2, #82	; 0x52
 800633e:	2100      	movs	r1, #0
 8006340:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	6892      	ldr	r2, [r2, #8]
 800634c:	2180      	movs	r1, #128	; 0x80
 800634e:	438a      	bics	r2, r1
 8006350:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	2140      	movs	r1, #64	; 0x40
 800635e:	430a      	orrs	r2, r1
 8006360:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8006362:	e003      	b.n	800636c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	0018      	movs	r0, r3
 8006368:	f7ff fcd0 	bl	8005d0c <HAL_UART_TxCpltCallback>
}
 800636c:	46c0      	nop			; (mov r8, r8)
 800636e:	46bd      	mov	sp, r7
 8006370:	b004      	add	sp, #16
 8006372:	bd80      	pop	{r7, pc}

08006374 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	0018      	movs	r0, r3
 8006386:	f7ff fcc9 	bl	8005d1c <HAL_UART_TxHalfCpltCallback>
}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	46bd      	mov	sp, r7
 800638e:	b004      	add	sp, #16
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2220      	movs	r2, #32
 80063aa:	4013      	ands	r3, r2
 80063ac:	d11f      	bne.n	80063ee <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	225a      	movs	r2, #90	; 0x5a
 80063b2:	2100      	movs	r1, #0
 80063b4:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	6812      	ldr	r2, [r2, #0]
 80063be:	6812      	ldr	r2, [r2, #0]
 80063c0:	490f      	ldr	r1, [pc, #60]	; (8006400 <UART_DMAReceiveCplt+0x6c>)
 80063c2:	400a      	ands	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	6892      	ldr	r2, [r2, #8]
 80063d0:	2101      	movs	r1, #1
 80063d2:	438a      	bics	r2, r1
 80063d4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	6812      	ldr	r2, [r2, #0]
 80063de:	6892      	ldr	r2, [r2, #8]
 80063e0:	2140      	movs	r1, #64	; 0x40
 80063e2:	438a      	bics	r2, r1
 80063e4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	226a      	movs	r2, #106	; 0x6a
 80063ea:	2120      	movs	r1, #32
 80063ec:	5499      	strb	r1, [r3, r2]
  }

  HAL_UART_RxCpltCallback(huart);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f001 fe97 	bl	8008124 <HAL_UART_RxCpltCallback>
}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b004      	add	sp, #16
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	fffffeff 	.word	0xfffffeff

08006404 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	0018      	movs	r0, r3
 8006416:	f001 fe29 	bl	800806c <HAL_UART_RxHalfCpltCallback>
}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	46bd      	mov	sp, r7
 800641e:	b004      	add	sp, #16
 8006420:	bd80      	pop	{r7, pc}

08006422 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2269      	movs	r2, #105	; 0x69
 8006434:	5c9b      	ldrb	r3, [r3, r2]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b21      	cmp	r3, #33	; 0x21
 800643a:	d10d      	bne.n	8006458 <UART_DMAError+0x36>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2280      	movs	r2, #128	; 0x80
 8006444:	4013      	ands	r3, r2
 8006446:	d007      	beq.n	8006458 <UART_DMAError+0x36>
  {
    huart->TxXferCount = 0U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2252      	movs	r2, #82	; 0x52
 800644c:	2100      	movs	r1, #0
 800644e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	0018      	movs	r0, r3
 8006454:	f7ff ff32 	bl	80062bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	226a      	movs	r2, #106	; 0x6a
 800645c:	5c9b      	ldrb	r3, [r3, r2]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b22      	cmp	r3, #34	; 0x22
 8006462:	d10d      	bne.n	8006480 <UART_DMAError+0x5e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2240      	movs	r2, #64	; 0x40
 800646c:	4013      	ands	r3, r2
 800646e:	d007      	beq.n	8006480 <UART_DMAError+0x5e>
  {
    huart->RxXferCount = 0U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	225a      	movs	r2, #90	; 0x5a
 8006474:	2100      	movs	r1, #0
 8006476:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	0018      	movs	r0, r3
 800647c:	f7ff ff32 	bl	80062e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006484:	2210      	movs	r2, #16
 8006486:	431a      	orrs	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	0018      	movs	r0, r3
 8006490:	f7ff fc4c 	bl	8005d2c <HAL_UART_ErrorCallback>
}
 8006494:	46c0      	nop			; (mov r8, r8)
 8006496:	46bd      	mov	sp, r7
 8006498:	b004      	add	sp, #16
 800649a:	bd80      	pop	{r7, pc}

0800649c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	225a      	movs	r2, #90	; 0x5a
 80064ae:	2100      	movs	r1, #0
 80064b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2252      	movs	r2, #82	; 0x52
 80064b6:	2100      	movs	r1, #0
 80064b8:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	0018      	movs	r0, r3
 80064be:	f7ff fc35 	bl	8005d2c <HAL_UART_ErrorCallback>
}
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	46bd      	mov	sp, r7
 80064c6:	b004      	add	sp, #16
 80064c8:	bd80      	pop	{r7, pc}

080064ca <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2269      	movs	r2, #105	; 0x69
 80064d6:	5c9b      	ldrb	r3, [r3, r2]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b21      	cmp	r3, #33	; 0x21
 80064dc:	d147      	bne.n	800656e <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2252      	movs	r2, #82	; 0x52
 80064e2:	5a9b      	ldrh	r3, [r3, r2]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d111      	bne.n	800650e <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	2180      	movs	r1, #128	; 0x80
 80064f6:	438a      	bics	r2, r1
 80064f8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6812      	ldr	r2, [r2, #0]
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	2140      	movs	r1, #64	; 0x40
 8006506:	430a      	orrs	r2, r1
 8006508:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	e030      	b.n	8006570 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	2380      	movs	r3, #128	; 0x80
 8006514:	015b      	lsls	r3, r3, #5
 8006516:	429a      	cmp	r2, r3
 8006518:	d114      	bne.n	8006544 <UART_Transmit_IT+0x7a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d110      	bne.n	8006544 <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006526:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	8812      	ldrh	r2, [r2, #0]
 8006530:	05d2      	lsls	r2, r2, #23
 8006532:	0dd2      	lsrs	r2, r2, #23
 8006534:	b292      	uxth	r2, r2
 8006536:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653c:	1c9a      	adds	r2, r3, #2
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	64da      	str	r2, [r3, #76]	; 0x4c
 8006542:	e009      	b.n	8006558 <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6819      	ldr	r1, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654c:	1c58      	adds	r0, r3, #1
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	64d0      	str	r0, [r2, #76]	; 0x4c
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	850b      	strh	r3, [r1, #40]	; 0x28
      }
      huart->TxXferCount--;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2252      	movs	r2, #82	; 0x52
 800655c:	5a9b      	ldrh	r3, [r3, r2]
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b299      	uxth	r1, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2252      	movs	r2, #82	; 0x52
 8006568:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	e000      	b.n	8006570 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 800656e:	2302      	movs	r3, #2
  }
}
 8006570:	0018      	movs	r0, r3
 8006572:	46bd      	mov	sp, r7
 8006574:	b004      	add	sp, #16
 8006576:	bd80      	pop	{r7, pc}

08006578 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	2140      	movs	r1, #64	; 0x40
 800658c:	438a      	bics	r2, r1
 800658e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2269      	movs	r2, #105	; 0x69
 8006594:	2120      	movs	r1, #32
 8006596:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	0018      	movs	r0, r3
 800659c:	f7ff fbb6 	bl	8005d0c <HAL_UART_TxCpltCallback>

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	0018      	movs	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	b002      	add	sp, #8
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 80065b4:	230e      	movs	r3, #14
 80065b6:	18fb      	adds	r3, r7, r3
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	215c      	movs	r1, #92	; 0x5c
 80065bc:	5a52      	ldrh	r2, [r2, r1]
 80065be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	226a      	movs	r2, #106	; 0x6a
 80065c4:	5c9b      	ldrb	r3, [r3, r2]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b22      	cmp	r3, #34	; 0x22
 80065ca:	d15a      	bne.n	8006682 <UART_Receive_IT+0xd6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	230c      	movs	r3, #12
 80065d2:	18fb      	adds	r3, r7, r3
 80065d4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80065d6:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	2380      	movs	r3, #128	; 0x80
 80065de:	015b      	lsls	r3, r3, #5
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d116      	bne.n	8006612 <UART_Receive_IT+0x66>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d112      	bne.n	8006612 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f0:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 80065f2:	230c      	movs	r3, #12
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	220e      	movs	r2, #14
 80065f8:	18ba      	adds	r2, r7, r2
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	8812      	ldrh	r2, [r2, #0]
 80065fe:	4013      	ands	r3, r2
 8006600:	b29a      	uxth	r2, r3
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660a:	1c9a      	adds	r2, r3, #2
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	655a      	str	r2, [r3, #84]	; 0x54
 8006610:	e00f      	b.n	8006632 <UART_Receive_IT+0x86>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006616:	1c59      	adds	r1, r3, #1
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6551      	str	r1, [r2, #84]	; 0x54
 800661c:	220c      	movs	r2, #12
 800661e:	18ba      	adds	r2, r7, r2
 8006620:	8812      	ldrh	r2, [r2, #0]
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	210e      	movs	r1, #14
 8006626:	1879      	adds	r1, r7, r1
 8006628:	8809      	ldrh	r1, [r1, #0]
 800662a:	b2c9      	uxtb	r1, r1
 800662c:	400a      	ands	r2, r1
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	225a      	movs	r2, #90	; 0x5a
 8006636:	5a9b      	ldrh	r3, [r3, r2]
 8006638:	b29b      	uxth	r3, r3
 800663a:	3b01      	subs	r3, #1
 800663c:	b29b      	uxth	r3, r3
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	215a      	movs	r1, #90	; 0x5a
 8006642:	1c18      	adds	r0, r3, #0
 8006644:	5250      	strh	r0, [r2, r1]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d119      	bne.n	800667e <UART_Receive_IT+0xd2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6812      	ldr	r2, [r2, #0]
 8006652:	6812      	ldr	r2, [r2, #0]
 8006654:	4911      	ldr	r1, [pc, #68]	; (800669c <UART_Receive_IT+0xf0>)
 8006656:	400a      	ands	r2, r1
 8006658:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	6892      	ldr	r2, [r2, #8]
 8006664:	2101      	movs	r1, #1
 8006666:	438a      	bics	r2, r1
 8006668:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	226a      	movs	r2, #106	; 0x6a
 800666e:	2120      	movs	r1, #32
 8006670:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	0018      	movs	r0, r3
 8006676:	f001 fd55 	bl	8008124 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e00a      	b.n	8006694 <UART_Receive_IT+0xe8>
    }

    return HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	e008      	b.n	8006694 <UART_Receive_IT+0xe8>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6812      	ldr	r2, [r2, #0]
 800668a:	6992      	ldr	r2, [r2, #24]
 800668c:	2108      	movs	r1, #8
 800668e:	430a      	orrs	r2, r1
 8006690:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8006692:	2302      	movs	r3, #2
  }
}
 8006694:	0018      	movs	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	b004      	add	sp, #16
 800669a:	bd80      	pop	{r7, pc}
 800669c:	fffffedf 	.word	0xfffffedf

080066a0 <HAL_RS485Ex_Init>:
  *                         It is expressed in sample time units (1/8 or 1/16 bit time, depending on the
  *                         oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime, uint32_t DeassertionTime)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0x0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]

  /* Check the UART handle allocation */
  if(huart == NULL)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_RS485Ex_Init+0x1c>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e05c      	b.n	8006776 <HAL_RS485Ex_Init+0xd6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if(huart->gState == HAL_UART_STATE_RESET)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2269      	movs	r2, #105	; 0x69
 80066c0:	5c9b      	ldrb	r3, [r3, r2]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d107      	bne.n	80066d8 <HAL_RS485Ex_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2268      	movs	r2, #104	; 0x68
 80066cc:	2100      	movs	r1, #0
 80066ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	0018      	movs	r0, r3
 80066d4:	f003 f9d6 	bl	8009a84 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2269      	movs	r2, #105	; 0x69
 80066dc:	2124      	movs	r1, #36	; 0x24
 80066de:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	6812      	ldr	r2, [r2, #0]
 80066e8:	6812      	ldr	r2, [r2, #0]
 80066ea:	2101      	movs	r1, #1
 80066ec:	438a      	bics	r2, r1
 80066ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	0018      	movs	r0, r3
 80066f4:	f7ff fb22 	bl	8005d3c <UART_SetConfig>
 80066f8:	0003      	movs	r3, r0
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d101      	bne.n	8006702 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e039      	b.n	8006776 <HAL_RS485Ex_Init+0xd6>
  }

  if(huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_RS485Ex_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	0018      	movs	r0, r3
 800670e:	f7ff fc8b 	bl	8006028 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	6892      	ldr	r2, [r2, #8]
 800671c:	2180      	movs	r1, #128	; 0x80
 800671e:	01c9      	lsls	r1, r1, #7
 8006720:	430a      	orrs	r2, r1
 8006722:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	6812      	ldr	r2, [r2, #0]
 800672c:	6892      	ldr	r2, [r2, #8]
 800672e:	4914      	ldr	r1, [pc, #80]	; (8006780 <HAL_RS485Ex_Init+0xe0>)
 8006730:	4011      	ands	r1, r2
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	430a      	orrs	r2, r1
 8006736:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	055b      	lsls	r3, r3, #21
 800673c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	041b      	lsls	r3, r3, #16
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT|USART_CR1_DEAT), temp);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	490c      	ldr	r1, [pc, #48]	; (8006784 <HAL_RS485Ex_Init+0xe4>)
 8006754:	4011      	ands	r1, r2
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	430a      	orrs	r2, r1
 800675a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	6812      	ldr	r2, [r2, #0]
 8006766:	2101      	movs	r1, #1
 8006768:	430a      	orrs	r2, r1
 800676a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	0018      	movs	r0, r3
 8006770:	f7ff fd06 	bl	8006180 <UART_CheckIdleState>
 8006774:	0003      	movs	r3, r0
}
 8006776:	0018      	movs	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	b006      	add	sp, #24
 800677c:	bd80      	pop	{r7, pc}
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	ffff7fff 	.word	0xffff7fff
 8006784:	fc00ffff 	.word	0xfc00ffff

08006788 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006790:	46c0      	nop			; (mov r8, r8)
 8006792:	46bd      	mov	sp, r7
 8006794:	b002      	add	sp, #8
 8006796:	bd80      	pop	{r7, pc}

08006798 <CRC4>:
										MS5837_CONVERSION_TIME_OSR_1024,
										MS5837_CONVERSION_TIME_OSR_2048,
										MS5837_CONVERSION_TIME_OSR_4096,
										MS5837_CONVERSION_TIME_OSR_8192 };

static uint16_t CRC4(uint16_t *n_prom) {
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
	uint16_t n_rem = 0;
 80067a0:	230e      	movs	r3, #14
 80067a2:	18fb      	adds	r3, r7, r3
 80067a4:	2200      	movs	r2, #0
 80067a6:	801a      	strh	r2, [r3, #0]

	for (uint8_t cnt = 0; cnt < 16; cnt++)
 80067a8:	230d      	movs	r3, #13
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	2200      	movs	r2, #0
 80067ae:	701a      	strb	r2, [r3, #0]
 80067b0:	e062      	b.n	8006878 <CRC4+0xe0>
	{
		if (cnt % 2 == 1) n_rem ^= n_prom[cnt >> 1] & 0x00FF;
 80067b2:	230d      	movs	r3, #13
 80067b4:	18fb      	adds	r3, r7, r3
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2201      	movs	r2, #1
 80067ba:	4013      	ands	r3, r2
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d016      	beq.n	80067f0 <CRC4+0x58>
 80067c2:	230d      	movs	r3, #13
 80067c4:	18fb      	adds	r3, r7, r3
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	085b      	lsrs	r3, r3, #1
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	18d3      	adds	r3, r2, r3
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	b21b      	sxth	r3, r3
 80067d6:	22ff      	movs	r2, #255	; 0xff
 80067d8:	4013      	ands	r3, r2
 80067da:	b21a      	sxth	r2, r3
 80067dc:	230e      	movs	r3, #14
 80067de:	18fb      	adds	r3, r7, r3
 80067e0:	2100      	movs	r1, #0
 80067e2:	5e5b      	ldrsh	r3, [r3, r1]
 80067e4:	4053      	eors	r3, r2
 80067e6:	b21a      	sxth	r2, r3
 80067e8:	230e      	movs	r3, #14
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	801a      	strh	r2, [r3, #0]
 80067ee:	e011      	b.n	8006814 <CRC4+0x7c>
		else			  n_rem ^= n_prom[cnt >> 1] >> 8;
 80067f0:	230d      	movs	r3, #13
 80067f2:	18fb      	adds	r3, r7, r3
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	18d3      	adds	r3, r2, r3
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	b299      	uxth	r1, r3
 8006806:	230e      	movs	r3, #14
 8006808:	18fb      	adds	r3, r7, r3
 800680a:	220e      	movs	r2, #14
 800680c:	18ba      	adds	r2, r7, r2
 800680e:	8812      	ldrh	r2, [r2, #0]
 8006810:	404a      	eors	r2, r1
 8006812:	801a      	strh	r2, [r3, #0]

		for (uint8_t n_bit = 8; n_bit > 0; n_bit--)
 8006814:	230c      	movs	r3, #12
 8006816:	18fb      	adds	r3, r7, r3
 8006818:	2208      	movs	r2, #8
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	e020      	b.n	8006860 <CRC4+0xc8>
			if (n_rem & 0x8000) n_rem = (n_rem << 1) ^ 0x3000;
 800681e:	230e      	movs	r3, #14
 8006820:	18fb      	adds	r3, r7, r3
 8006822:	2200      	movs	r2, #0
 8006824:	5e9b      	ldrsh	r3, [r3, r2]
 8006826:	2b00      	cmp	r3, #0
 8006828:	da0c      	bge.n	8006844 <CRC4+0xac>
 800682a:	230e      	movs	r3, #14
 800682c:	18fb      	adds	r3, r7, r3
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	b21b      	sxth	r3, r3
 8006834:	22c0      	movs	r2, #192	; 0xc0
 8006836:	0192      	lsls	r2, r2, #6
 8006838:	4053      	eors	r3, r2
 800683a:	b21a      	sxth	r2, r3
 800683c:	230e      	movs	r3, #14
 800683e:	18fb      	adds	r3, r7, r3
 8006840:	801a      	strh	r2, [r3, #0]
 8006842:	e006      	b.n	8006852 <CRC4+0xba>
			else 				  n_rem = n_rem << 1;
 8006844:	230e      	movs	r3, #14
 8006846:	18fa      	adds	r2, r7, r3
 8006848:	230e      	movs	r3, #14
 800684a:	18fb      	adds	r3, r7, r3
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	18db      	adds	r3, r3, r3
 8006850:	8013      	strh	r3, [r2, #0]
		for (uint8_t n_bit = 8; n_bit > 0; n_bit--)
 8006852:	230c      	movs	r3, #12
 8006854:	18fb      	adds	r3, r7, r3
 8006856:	781a      	ldrb	r2, [r3, #0]
 8006858:	230c      	movs	r3, #12
 800685a:	18fb      	adds	r3, r7, r3
 800685c:	3a01      	subs	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	230c      	movs	r3, #12
 8006862:	18fb      	adds	r3, r7, r3
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1d9      	bne.n	800681e <CRC4+0x86>
	for (uint8_t cnt = 0; cnt < 16; cnt++)
 800686a:	230d      	movs	r3, #13
 800686c:	18fb      	adds	r3, r7, r3
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	230d      	movs	r3, #13
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	3201      	adds	r2, #1
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	230d      	movs	r3, #13
 800687a:	18fb      	adds	r3, r7, r3
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b0f      	cmp	r3, #15
 8006880:	d997      	bls.n	80067b2 <CRC4+0x1a>
	}

	n_rem = n_rem >> 12 & 0x000F;
 8006882:	230e      	movs	r3, #14
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	220e      	movs	r2, #14
 8006888:	18ba      	adds	r2, r7, r2
 800688a:	8812      	ldrh	r2, [r2, #0]
 800688c:	0b12      	lsrs	r2, r2, #12
 800688e:	801a      	strh	r2, [r3, #0]
	return n_rem ^ 0x00;
 8006890:	230e      	movs	r3, #14
 8006892:	18fb      	adds	r3, r7, r3
 8006894:	881b      	ldrh	r3, [r3, #0]
}
 8006896:	0018      	movs	r0, r3
 8006898:	46bd      	mov	sp, r7
 800689a:	b004      	add	sp, #16
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <MS5837ReadEEPROMCoeffs>:

static enum MS5837ErrorCode MS5837ReadEEPROMCoeffs(void) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af04      	add	r7, sp, #16
	uint8_t buffer[MS5837_PROM_DATA_SIZE];

	for (uint8_t i = 0; i < MS5837_COEFFICIENT_NUMBER; i++) {
 80068a6:	1dfb      	adds	r3, r7, #7
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	e02a      	b.n	8006904 <MS5837ReadEEPROMCoeffs+0x64>
		if (HAL_I2C_Mem_Read(&hi2c1, MS5837_ADDR << 1 | MS5837_READ_MASK,
				MS5837_PROM_READ_ADDRESS_0 + (i << 1), MS5837_COMMAND_SIZE,
 80068ae:	1dfb      	adds	r3, r7, #7
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	18db      	adds	r3, r3, r3
 80068b6:	b29b      	uxth	r3, r3
		if (HAL_I2C_Mem_Read(&hi2c1, MS5837_ADDR << 1 | MS5837_READ_MASK,
 80068b8:	33a0      	adds	r3, #160	; 0xa0
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	4826      	ldr	r0, [pc, #152]	; (8006958 <MS5837ReadEEPROMCoeffs+0xb8>)
 80068be:	23fa      	movs	r3, #250	; 0xfa
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	9302      	str	r3, [sp, #8]
 80068c4:	2302      	movs	r3, #2
 80068c6:	9301      	str	r3, [sp, #4]
 80068c8:	1d3b      	adds	r3, r7, #4
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	2301      	movs	r3, #1
 80068ce:	21ec      	movs	r1, #236	; 0xec
 80068d0:	f7fc ff48 	bl	8003764 <HAL_I2C_Mem_Read>
 80068d4:	1e03      	subs	r3, r0, #0
 80068d6:	d001      	beq.n	80068dc <MS5837ReadEEPROMCoeffs+0x3c>
				buffer, MS5837_PROM_DATA_SIZE, MS5837_TIMEOUT_MS))
			return MS5837_ANY_ERROR;
 80068d8:	23ff      	movs	r3, #255	; 0xff
 80068da:	e039      	b.n	8006950 <MS5837ReadEEPROMCoeffs+0xb0>
		m_eepromCoeffs[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 80068dc:	1dfb      	adds	r3, r7, #7
 80068de:	781a      	ldrb	r2, [r3, #0]
 80068e0:	1d3b      	adds	r3, r7, #4
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	b219      	sxth	r1, r3
 80068e8:	1d3b      	adds	r3, r7, #4
 80068ea:	785b      	ldrb	r3, [r3, #1]
 80068ec:	b21b      	sxth	r3, r3
 80068ee:	430b      	orrs	r3, r1
 80068f0:	b21b      	sxth	r3, r3
 80068f2:	b299      	uxth	r1, r3
 80068f4:	4b19      	ldr	r3, [pc, #100]	; (800695c <MS5837ReadEEPROMCoeffs+0xbc>)
 80068f6:	0052      	lsls	r2, r2, #1
 80068f8:	52d1      	strh	r1, [r2, r3]
	for (uint8_t i = 0; i < MS5837_COEFFICIENT_NUMBER; i++) {
 80068fa:	1dfb      	adds	r3, r7, #7
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	1dfb      	adds	r3, r7, #7
 8006900:	3201      	adds	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	1dfb      	adds	r3, r7, #7
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b06      	cmp	r3, #6
 800690a:	d9d0      	bls.n	80068ae <MS5837ReadEEPROMCoeffs+0xe>
	}

	uint8_t prom_crc = (m_eepromCoeffs[MS5837_CRC_INDEX] & 0xF000) >> 12;
 800690c:	4b13      	ldr	r3, [pc, #76]	; (800695c <MS5837ReadEEPROMCoeffs+0xbc>)
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	0b1b      	lsrs	r3, r3, #12
 8006912:	b29a      	uxth	r2, r3
 8006914:	1dbb      	adds	r3, r7, #6
 8006916:	701a      	strb	r2, [r3, #0]
	m_eepromCoeffs[MS5837_CRC_INDEX] = m_eepromCoeffs[MS5837_CRC_INDEX] & 0x0FFF;
 8006918:	4b10      	ldr	r3, [pc, #64]	; (800695c <MS5837ReadEEPROMCoeffs+0xbc>)
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	051b      	lsls	r3, r3, #20
 800691e:	0d1b      	lsrs	r3, r3, #20
 8006920:	b29a      	uxth	r2, r3
 8006922:	4b0e      	ldr	r3, [pc, #56]	; (800695c <MS5837ReadEEPROMCoeffs+0xbc>)
 8006924:	801a      	strh	r2, [r3, #0]
	m_eepromCoeffs[MS5837_SUBSIDIARY_VALUE_INDEX] = 0;
 8006926:	4b0d      	ldr	r3, [pc, #52]	; (800695c <MS5837ReadEEPROMCoeffs+0xbc>)
 8006928:	2200      	movs	r2, #0
 800692a:	81da      	strh	r2, [r3, #14]

	if (CRC4(m_eepromCoeffs) != prom_crc)
 800692c:	4b0b      	ldr	r3, [pc, #44]	; (800695c <MS5837ReadEEPROMCoeffs+0xbc>)
 800692e:	0018      	movs	r0, r3
 8006930:	f7ff ff32 	bl	8006798 <CRC4>
 8006934:	0003      	movs	r3, r0
 8006936:	001a      	movs	r2, r3
 8006938:	1dbb      	adds	r3, r7, #6
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	429a      	cmp	r2, r3
 8006940:	d001      	beq.n	8006946 <MS5837ReadEEPROMCoeffs+0xa6>
		return MS5837_CRC_ERROR;
 8006942:	2302      	movs	r3, #2
 8006944:	e004      	b.n	8006950 <MS5837ReadEEPROMCoeffs+0xb0>

	return m_connectionStatus = MS5837_ALL_OK;
 8006946:	4b06      	ldr	r3, [pc, #24]	; (8006960 <MS5837ReadEEPROMCoeffs+0xc0>)
 8006948:	2200      	movs	r2, #0
 800694a:	701a      	strb	r2, [r3, #0]
 800694c:	4b04      	ldr	r3, [pc, #16]	; (8006960 <MS5837ReadEEPROMCoeffs+0xc0>)
 800694e:	781b      	ldrb	r3, [r3, #0]
}
 8006950:	0018      	movs	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	b002      	add	sp, #8
 8006956:	bd80      	pop	{r7, pc}
 8006958:	2000080c 	.word	0x2000080c
 800695c:	200002bc 	.word	0x200002bc
 8006960:	20000000 	.word	0x20000000

08006964 <MS5837Init>:

enum MS5837ErrorCode MS5837Init(void) {
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
	if (MS5837Reset())
 8006968:	f000 f818 	bl	800699c <MS5837Reset>
 800696c:	1e03      	subs	r3, r0, #0
 800696e:	d001      	beq.n	8006974 <MS5837Init+0x10>
		return MS5837_ANY_ERROR;
 8006970:	23ff      	movs	r3, #255	; 0xff
 8006972:	e005      	b.n	8006980 <MS5837Init+0x1c>
	//10ms like in python driver version
	HAL_Delay(10);
 8006974:	200a      	movs	r0, #10
 8006976:	f7fb fe71 	bl	800265c <HAL_Delay>

	MS5837ReadEEPROMCoeffs();
 800697a:	f7ff ff91 	bl	80068a0 <MS5837ReadEEPROMCoeffs>
	return MS5837_ALL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	0018      	movs	r0, r3
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <MS5837IsConnected>:

enum MS5837ErrorCode MS5837IsConnected(void) {
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
	return m_connectionStatus;
 800698c:	4b02      	ldr	r3, [pc, #8]	; (8006998 <MS5837IsConnected+0x10>)
 800698e:	781b      	ldrb	r3, [r3, #0]
}
 8006990:	0018      	movs	r0, r3
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	46c0      	nop			; (mov r8, r8)
 8006998:	20000000 	.word	0x20000000

0800699c <MS5837Reset>:

enum MS5837ErrorCode MS5837Reset(void) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af02      	add	r7, sp, #8
	uint8_t command = MS5837_RESET_COMMAND;
 80069a2:	1dfb      	adds	r3, r7, #7
 80069a4:	221e      	movs	r2, #30
 80069a6:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Master_Transmit(&hi2c1, MS5837_ADDR << 1 | MS5837_WRITE_MASK,
 80069a8:	1dfa      	adds	r2, r7, #7
 80069aa:	4808      	ldr	r0, [pc, #32]	; (80069cc <MS5837Reset+0x30>)
 80069ac:	23fa      	movs	r3, #250	; 0xfa
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	2301      	movs	r3, #1
 80069b4:	21ed      	movs	r1, #237	; 0xed
 80069b6:	f7fc fdc1 	bl	800353c <HAL_I2C_Master_Transmit>
 80069ba:	1e03      	subs	r3, r0, #0
 80069bc:	d001      	beq.n	80069c2 <MS5837Reset+0x26>
			&command, MS5837_COMMAND_SIZE, MS5837_TIMEOUT_MS))
		return MS5837_ANY_ERROR;
 80069be:	23ff      	movs	r3, #255	; 0xff
 80069c0:	e000      	b.n	80069c4 <MS5837Reset+0x28>

	return MS5837_ALL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	0018      	movs	r0, r3
 80069c6:	46bd      	mov	sp, r7
 80069c8:	b002      	add	sp, #8
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	2000080c 	.word	0x2000080c

080069d0 <MS5837ReadTemperature>:

enum MS5837ErrorCode MS5837ReadTemperature(enum MS5837D2OSRCommand osrD2, float *temperature) {
 80069d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d2:	b095      	sub	sp, #84	; 0x54
 80069d4:	af04      	add	r7, sp, #16
 80069d6:	0002      	movs	r2, r0
 80069d8:	61b9      	str	r1, [r7, #24]
 80069da:	231f      	movs	r3, #31
 80069dc:	18fb      	adds	r3, r7, r3
 80069de:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[MS5837_ADC_DATA_SIZE];
	if (HAL_I2C_Master_Transmit(&hi2c1, MS5837_ADDR << 1 | MS5837_WRITE_MASK,
 80069e0:	231f      	movs	r3, #31
 80069e2:	18fa      	adds	r2, r7, r3
 80069e4:	486e      	ldr	r0, [pc, #440]	; (8006ba0 <MS5837ReadTemperature+0x1d0>)
 80069e6:	23fa      	movs	r3, #250	; 0xfa
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	2301      	movs	r3, #1
 80069ee:	21ed      	movs	r1, #237	; 0xed
 80069f0:	f7fc fda4 	bl	800353c <HAL_I2C_Master_Transmit>
 80069f4:	1e03      	subs	r3, r0, #0
 80069f6:	d001      	beq.n	80069fc <MS5837ReadTemperature+0x2c>
			&osrD2, MS5837_COMMAND_SIZE, MS5837_TIMEOUT_MS))
		return MS5837_ANY_ERROR;
 80069f8:	23ff      	movs	r3, #255	; 0xff
 80069fa:	e0cc      	b.n	8006b96 <MS5837ReadTemperature+0x1c6>

	HAL_Delay(m_conversionTime[(osrD2 & MS5837_CONVERSION_OSR_MASK) / 2]);
 80069fc:	231f      	movs	r3, #31
 80069fe:	18fb      	adds	r3, r7, r3
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	001a      	movs	r2, r3
 8006a04:	230f      	movs	r3, #15
 8006a06:	4013      	ands	r3, r2
 8006a08:	d500      	bpl.n	8006a0c <MS5837ReadTemperature+0x3c>
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	105b      	asrs	r3, r3, #1
 8006a0e:	001a      	movs	r2, r3
 8006a10:	4b64      	ldr	r3, [pc, #400]	; (8006ba4 <MS5837ReadTemperature+0x1d4>)
 8006a12:	0092      	lsls	r2, r2, #2
 8006a14:	58d3      	ldr	r3, [r2, r3]
 8006a16:	0018      	movs	r0, r3
 8006a18:	f7fb fe20 	bl	800265c <HAL_Delay>

	if (HAL_I2C_Mem_Read(&hi2c1, MS5837_ADDR << 1 | MS5837_READ_MASK,
 8006a1c:	4860      	ldr	r0, [pc, #384]	; (8006ba0 <MS5837ReadTemperature+0x1d0>)
 8006a1e:	23fa      	movs	r3, #250	; 0xfa
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	9302      	str	r3, [sp, #8]
 8006a24:	2303      	movs	r3, #3
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	230c      	movs	r3, #12
 8006a2a:	2218      	movs	r2, #24
 8006a2c:	4694      	mov	ip, r2
 8006a2e:	44bc      	add	ip, r7
 8006a30:	4463      	add	r3, ip
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	2301      	movs	r3, #1
 8006a36:	2200      	movs	r2, #0
 8006a38:	21ec      	movs	r1, #236	; 0xec
 8006a3a:	f7fc fe93 	bl	8003764 <HAL_I2C_Mem_Read>
 8006a3e:	1e03      	subs	r3, r0, #0
 8006a40:	d001      	beq.n	8006a46 <MS5837ReadTemperature+0x76>
			MS5837_READ_ADC_COMMAND, MS5837_COMMAND_SIZE,
			buffer, MS5837_ADC_DATA_SIZE, MS5837_TIMEOUT_MS))
		return MS5837_ANY_ERROR;
 8006a42:	23ff      	movs	r3, #255	; 0xff
 8006a44:	e0a7      	b.n	8006b96 <MS5837ReadTemperature+0x1c6>

	uint32_t adc_temperature = buffer[0] << 16 | buffer[1] << 8 | buffer[2];
 8006a46:	230c      	movs	r3, #12
 8006a48:	2218      	movs	r2, #24
 8006a4a:	4694      	mov	ip, r2
 8006a4c:	44bc      	add	ip, r7
 8006a4e:	4463      	add	r3, ip
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	041a      	lsls	r2, r3, #16
 8006a54:	230c      	movs	r3, #12
 8006a56:	2118      	movs	r1, #24
 8006a58:	468c      	mov	ip, r1
 8006a5a:	44bc      	add	ip, r7
 8006a5c:	4463      	add	r3, ip
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	021b      	lsls	r3, r3, #8
 8006a62:	4313      	orrs	r3, r2
 8006a64:	220c      	movs	r2, #12
 8006a66:	2118      	movs	r1, #24
 8006a68:	468c      	mov	ip, r1
 8006a6a:	44bc      	add	ip, r7
 8006a6c:	4462      	add	r2, ip
 8006a6e:	7892      	ldrb	r2, [r2, #2]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (adc_temperature == 0)
 8006a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <MS5837ReadTemperature+0xae>
		return MS5837_I2C_TRANSFER_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e08b      	b.n	8006b96 <MS5837ReadTemperature+0x1c6>

	int32_t dT = (int32_t)adc_temperature -
 8006a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
			((int32_t)m_eepromCoeffs[MS5837_REFERENCE_TEMPERATURE_INDEX] << 8);
 8006a80:	4b49      	ldr	r3, [pc, #292]	; (8006ba8 <MS5837ReadTemperature+0x1d8>)
 8006a82:	895b      	ldrh	r3, [r3, #10]
 8006a84:	021b      	lsls	r3, r3, #8
	int32_t dT = (int32_t)adc_temperature -
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	63bb      	str	r3, [r7, #56]	; 0x38

	int32_t TEMP = 2000	+
			(int32_t)(dT * ((float)m_eepromCoeffs[MS5837_TEMP_COEFF_OF_TEMPERATURE_INDEX] / 8388608));
 8006a8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a8c:	f7fa f8da 	bl	8000c44 <__aeabi_i2f>
 8006a90:	1c06      	adds	r6, r0, #0
 8006a92:	4b45      	ldr	r3, [pc, #276]	; (8006ba8 <MS5837ReadTemperature+0x1d8>)
 8006a94:	899b      	ldrh	r3, [r3, #12]
 8006a96:	0018      	movs	r0, r3
 8006a98:	f7fa f924 	bl	8000ce4 <__aeabi_ui2f>
 8006a9c:	1c03      	adds	r3, r0, #0
 8006a9e:	2196      	movs	r1, #150	; 0x96
 8006aa0:	05c9      	lsls	r1, r1, #23
 8006aa2:	1c18      	adds	r0, r3, #0
 8006aa4:	f7f9 fcaa 	bl	80003fc <__aeabi_fdiv>
 8006aa8:	1c03      	adds	r3, r0, #0
 8006aaa:	1c19      	adds	r1, r3, #0
 8006aac:	1c30      	adds	r0, r6, #0
 8006aae:	f7f9 fded 	bl	800068c <__aeabi_fmul>
 8006ab2:	1c03      	adds	r3, r0, #0
 8006ab4:	1c18      	adds	r0, r3, #0
 8006ab6:	f7fa f8a5 	bl	8000c04 <__aeabi_f2iz>
 8006aba:	0003      	movs	r3, r0
	int32_t TEMP = 2000	+
 8006abc:	22fa      	movs	r2, #250	; 0xfa
 8006abe:	00d2      	lsls	r2, r2, #3
 8006ac0:	4694      	mov	ip, r2
 8006ac2:	4463      	add	r3, ip
 8006ac4:	637b      	str	r3, [r7, #52]	; 0x34

	int64_t T2 = (TEMP < 2000) ?
 8006ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac8:	4a38      	ldr	r2, [pc, #224]	; (8006bac <MS5837ReadTemperature+0x1dc>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	dc26      	bgt.n	8006b1c <MS5837ReadTemperature+0x14c>
				 (float)(3 * (int64_t)dT  * (int64_t)dT) / 8589934592 :
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	17db      	asrs	r3, r3, #31
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	6938      	ldr	r0, [r7, #16]
 8006ad8:	6979      	ldr	r1, [r7, #20]
 8006ada:	0003      	movs	r3, r0
 8006adc:	000c      	movs	r4, r1
 8006ade:	18db      	adds	r3, r3, r3
 8006ae0:	4164      	adcs	r4, r4
 8006ae2:	18c0      	adds	r0, r0, r3
 8006ae4:	4161      	adcs	r1, r4
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	17db      	asrs	r3, r3, #31
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f7f9 fbd3 	bl	800029c <__aeabi_lmul>
 8006af6:	0003      	movs	r3, r0
 8006af8:	000c      	movs	r4, r1
 8006afa:	0018      	movs	r0, r3
 8006afc:	0021      	movs	r1, r4
 8006afe:	f7f9 fc4b 	bl	8000398 <__aeabi_l2f>
 8006b02:	1c03      	adds	r3, r0, #0
 8006b04:	21a0      	movs	r1, #160	; 0xa0
 8006b06:	05c9      	lsls	r1, r1, #23
 8006b08:	1c18      	adds	r0, r3, #0
 8006b0a:	f7f9 fc77 	bl	80003fc <__aeabi_fdiv>
 8006b0e:	1c03      	adds	r3, r0, #0
	int64_t T2 = (TEMP < 2000) ?
 8006b10:	1c18      	adds	r0, r3, #0
 8006b12:	f7f9 fc0b 	bl	800032c <__aeabi_f2lz>
 8006b16:	0003      	movs	r3, r0
 8006b18:	000c      	movs	r4, r1
 8006b1a:	e023      	b.n	8006b64 <MS5837ReadTemperature+0x194>
				 (float)(2 * (int64_t)dT  * (int64_t)dT) / 137438953472;
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	001c      	movs	r4, r3
 8006b20:	17db      	asrs	r3, r3, #31
 8006b22:	001d      	movs	r5, r3
 8006b24:	1924      	adds	r4, r4, r4
 8006b26:	416d      	adcs	r5, r5
 8006b28:	0023      	movs	r3, r4
 8006b2a:	002c      	movs	r4, r5
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	0021      	movs	r1, r4
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	17db      	asrs	r3, r3, #31
 8006b36:	607b      	str	r3, [r7, #4]
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f7f9 fbae 	bl	800029c <__aeabi_lmul>
 8006b40:	0003      	movs	r3, r0
 8006b42:	000c      	movs	r4, r1
 8006b44:	0018      	movs	r0, r3
 8006b46:	0021      	movs	r1, r4
 8006b48:	f7f9 fc26 	bl	8000398 <__aeabi_l2f>
 8006b4c:	1c03      	adds	r3, r0, #0
 8006b4e:	21a4      	movs	r1, #164	; 0xa4
 8006b50:	05c9      	lsls	r1, r1, #23
 8006b52:	1c18      	adds	r0, r3, #0
 8006b54:	f7f9 fc52 	bl	80003fc <__aeabi_fdiv>
 8006b58:	1c03      	adds	r3, r0, #0
	int64_t T2 = (TEMP < 2000) ?
 8006b5a:	1c18      	adds	r0, r3, #0
 8006b5c:	f7f9 fbe6 	bl	800032c <__aeabi_f2lz>
 8006b60:	0003      	movs	r3, r0
 8006b62:	000c      	movs	r4, r1
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b66:	62fc      	str	r4, [r7, #44]	; 0x2c

	*temperature = ((float)TEMP  - T2) / 100;
 8006b68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006b6a:	f7fa f86b 	bl	8000c44 <__aeabi_i2f>
 8006b6e:	1c04      	adds	r4, r0, #0
 8006b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b74:	f7f9 fc10 	bl	8000398 <__aeabi_l2f>
 8006b78:	1c03      	adds	r3, r0, #0
 8006b7a:	1c19      	adds	r1, r3, #0
 8006b7c:	1c20      	adds	r0, r4, #0
 8006b7e:	f7f9 fea5 	bl	80008cc <__aeabi_fsub>
 8006b82:	1c03      	adds	r3, r0, #0
 8006b84:	490a      	ldr	r1, [pc, #40]	; (8006bb0 <MS5837ReadTemperature+0x1e0>)
 8006b86:	1c18      	adds	r0, r3, #0
 8006b88:	f7f9 fc38 	bl	80003fc <__aeabi_fdiv>
 8006b8c:	1c03      	adds	r3, r0, #0
 8006b8e:	1c1a      	adds	r2, r3, #0
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	601a      	str	r2, [r3, #0]

	return MS5837_ALL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	0018      	movs	r0, r3
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	b011      	add	sp, #68	; 0x44
 8006b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b9e:	46c0      	nop			; (mov r8, r8)
 8006ba0:	2000080c 	.word	0x2000080c
 8006ba4:	20000004 	.word	0x20000004
 8006ba8:	200002bc 	.word	0x200002bc
 8006bac:	000007cf 	.word	0x000007cf
 8006bb0:	42c80000 	.word	0x42c80000

08006bb4 <MS5837ReadTemperatureAndPressure>:


enum MS5837ErrorCode MS5837ReadTemperatureAndPressure(enum MS5837D1OSRCommand osrD1,
													  enum MS5837D2OSRCommand osrD2,
													  float *temperature,
													  float *pressure) {
 8006bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb6:	b0d5      	sub	sp, #340	; 0x154
 8006bb8:	af04      	add	r7, sp, #16
 8006bba:	24f8      	movs	r4, #248	; 0xf8
 8006bbc:	193c      	adds	r4, r7, r4
 8006bbe:	6022      	str	r2, [r4, #0]
 8006bc0:	22f4      	movs	r2, #244	; 0xf4
 8006bc2:	18ba      	adds	r2, r7, r2
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	230f      	movs	r3, #15
 8006bc8:	22f0      	movs	r2, #240	; 0xf0
 8006bca:	18ba      	adds	r2, r7, r2
 8006bcc:	18d2      	adds	r2, r2, r3
 8006bce:	1c03      	adds	r3, r0, #0
 8006bd0:	7013      	strb	r3, [r2, #0]
 8006bd2:	230e      	movs	r3, #14
 8006bd4:	22f0      	movs	r2, #240	; 0xf0
 8006bd6:	18ba      	adds	r2, r7, r2
 8006bd8:	18d2      	adds	r2, r2, r3
 8006bda:	1c0b      	adds	r3, r1, #0
 8006bdc:	7013      	strb	r3, [r2, #0]
	uint8_t buffer[MS5837_ADC_DATA_SIZE];
		if (HAL_I2C_Master_Transmit(&hi2c1, MS5837_ADDR << 1 | MS5837_WRITE_MASK,
 8006bde:	230e      	movs	r3, #14
 8006be0:	22f0      	movs	r2, #240	; 0xf0
 8006be2:	18ba      	adds	r2, r7, r2
 8006be4:	18d2      	adds	r2, r2, r3
 8006be6:	4857      	ldr	r0, [pc, #348]	; (8006d44 <MS5837ReadTemperatureAndPressure+0x190>)
 8006be8:	23fa      	movs	r3, #250	; 0xfa
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	2301      	movs	r3, #1
 8006bf0:	21ed      	movs	r1, #237	; 0xed
 8006bf2:	f7fc fca3 	bl	800353c <HAL_I2C_Master_Transmit>
 8006bf6:	1e03      	subs	r3, r0, #0
 8006bf8:	d002      	beq.n	8006c00 <MS5837ReadTemperatureAndPressure+0x4c>
				&osrD2, MS5837_COMMAND_SIZE, MS5837_TIMEOUT_MS))
			return MS5837_ANY_ERROR;
 8006bfa:	23ff      	movs	r3, #255	; 0xff
 8006bfc:	f000 fc00 	bl	8007400 <MS5837ReadTemperatureAndPressure+0x84c>

		HAL_Delay(m_conversionTime[(osrD2 & MS5837_CONVERSION_OSR_MASK) / 2]);
 8006c00:	230e      	movs	r3, #14
 8006c02:	22f0      	movs	r2, #240	; 0xf0
 8006c04:	4694      	mov	ip, r2
 8006c06:	44bc      	add	ip, r7
 8006c08:	4463      	add	r3, ip
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	001a      	movs	r2, r3
 8006c0e:	230f      	movs	r3, #15
 8006c10:	4013      	ands	r3, r2
 8006c12:	d500      	bpl.n	8006c16 <MS5837ReadTemperatureAndPressure+0x62>
 8006c14:	3301      	adds	r3, #1
 8006c16:	105b      	asrs	r3, r3, #1
 8006c18:	4a4b      	ldr	r2, [pc, #300]	; (8006d48 <MS5837ReadTemperatureAndPressure+0x194>)
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	589b      	ldr	r3, [r3, r2]
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f7fb fd1c 	bl	800265c <HAL_Delay>

		if (HAL_I2C_Mem_Read(&hi2c1, MS5837_ADDR << 1 | MS5837_READ_MASK,
 8006c24:	4847      	ldr	r0, [pc, #284]	; (8006d44 <MS5837ReadTemperatureAndPressure+0x190>)
 8006c26:	23fa      	movs	r3, #250	; 0xfa
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	9302      	str	r3, [sp, #8]
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	2310      	movs	r3, #16
 8006c32:	22f0      	movs	r2, #240	; 0xf0
 8006c34:	4694      	mov	ip, r2
 8006c36:	44bc      	add	ip, r7
 8006c38:	4463      	add	r3, ip
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	2200      	movs	r2, #0
 8006c40:	21ec      	movs	r1, #236	; 0xec
 8006c42:	f7fc fd8f 	bl	8003764 <HAL_I2C_Mem_Read>
 8006c46:	1e03      	subs	r3, r0, #0
 8006c48:	d002      	beq.n	8006c50 <MS5837ReadTemperatureAndPressure+0x9c>
				MS5837_READ_ADC_COMMAND, MS5837_COMMAND_SIZE,
				buffer, MS5837_ADC_DATA_SIZE, MS5837_TIMEOUT_MS))
			return MS5837_ANY_ERROR;
 8006c4a:	23ff      	movs	r3, #255	; 0xff
 8006c4c:	f000 fbd8 	bl	8007400 <MS5837ReadTemperatureAndPressure+0x84c>

		uint32_t adc_temperature = buffer[0] << 16 | buffer[1] << 8 | buffer[2];
 8006c50:	2310      	movs	r3, #16
 8006c52:	22f0      	movs	r2, #240	; 0xf0
 8006c54:	4694      	mov	ip, r2
 8006c56:	44bc      	add	ip, r7
 8006c58:	4463      	add	r3, ip
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	041a      	lsls	r2, r3, #16
 8006c5e:	2310      	movs	r3, #16
 8006c60:	21f0      	movs	r1, #240	; 0xf0
 8006c62:	468c      	mov	ip, r1
 8006c64:	44bc      	add	ip, r7
 8006c66:	4463      	add	r3, ip
 8006c68:	785b      	ldrb	r3, [r3, #1]
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	2310      	movs	r3, #16
 8006c70:	21f0      	movs	r1, #240	; 0xf0
 8006c72:	468c      	mov	ip, r1
 8006c74:	44bc      	add	ip, r7
 8006c76:	4463      	add	r3, ip
 8006c78:	789b      	ldrb	r3, [r3, #2]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	2292      	movs	r2, #146	; 0x92
 8006c7e:	0052      	lsls	r2, r2, #1
 8006c80:	18ba      	adds	r2, r7, r2
 8006c82:	6013      	str	r3, [r2, #0]

		if (HAL_I2C_Master_Transmit(&hi2c1, MS5837_ADDR << 1 | MS5837_WRITE_MASK,
 8006c84:	230f      	movs	r3, #15
 8006c86:	22f0      	movs	r2, #240	; 0xf0
 8006c88:	18ba      	adds	r2, r7, r2
 8006c8a:	18d2      	adds	r2, r2, r3
 8006c8c:	482d      	ldr	r0, [pc, #180]	; (8006d44 <MS5837ReadTemperatureAndPressure+0x190>)
 8006c8e:	23fa      	movs	r3, #250	; 0xfa
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	2301      	movs	r3, #1
 8006c96:	21ed      	movs	r1, #237	; 0xed
 8006c98:	f7fc fc50 	bl	800353c <HAL_I2C_Master_Transmit>
 8006c9c:	1e03      	subs	r3, r0, #0
 8006c9e:	d001      	beq.n	8006ca4 <MS5837ReadTemperatureAndPressure+0xf0>
				&osrD1, MS5837_COMMAND_SIZE, MS5837_TIMEOUT_MS))
			return MS5837_ANY_ERROR;
 8006ca0:	23ff      	movs	r3, #255	; 0xff
 8006ca2:	e3ad      	b.n	8007400 <MS5837ReadTemperatureAndPressure+0x84c>

		HAL_Delay(m_conversionTime[(osrD1 & MS5837_CONVERSION_OSR_MASK) / 2]);
 8006ca4:	230f      	movs	r3, #15
 8006ca6:	22f0      	movs	r2, #240	; 0xf0
 8006ca8:	4694      	mov	ip, r2
 8006caa:	44bc      	add	ip, r7
 8006cac:	4463      	add	r3, ip
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	001a      	movs	r2, r3
 8006cb2:	230f      	movs	r3, #15
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	d500      	bpl.n	8006cba <MS5837ReadTemperatureAndPressure+0x106>
 8006cb8:	3301      	adds	r3, #1
 8006cba:	105b      	asrs	r3, r3, #1
 8006cbc:	4a22      	ldr	r2, [pc, #136]	; (8006d48 <MS5837ReadTemperatureAndPressure+0x194>)
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	589b      	ldr	r3, [r3, r2]
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	f7fb fcca 	bl	800265c <HAL_Delay>

		if (HAL_I2C_Mem_Read(&hi2c1, MS5837_ADDR << 1 | MS5837_READ_MASK,
 8006cc8:	481e      	ldr	r0, [pc, #120]	; (8006d44 <MS5837ReadTemperatureAndPressure+0x190>)
 8006cca:	23fa      	movs	r3, #250	; 0xfa
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	9302      	str	r3, [sp, #8]
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	9301      	str	r3, [sp, #4]
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	22f0      	movs	r2, #240	; 0xf0
 8006cd8:	4694      	mov	ip, r2
 8006cda:	44bc      	add	ip, r7
 8006cdc:	4463      	add	r3, ip
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	21ec      	movs	r1, #236	; 0xec
 8006ce6:	f7fc fd3d 	bl	8003764 <HAL_I2C_Mem_Read>
 8006cea:	1e03      	subs	r3, r0, #0
 8006cec:	d001      	beq.n	8006cf2 <MS5837ReadTemperatureAndPressure+0x13e>
				MS5837_READ_ADC_COMMAND, MS5837_COMMAND_SIZE,
				buffer, MS5837_ADC_DATA_SIZE, MS5837_TIMEOUT_MS))
			return MS5837_ANY_ERROR;
 8006cee:	23ff      	movs	r3, #255	; 0xff
 8006cf0:	e386      	b.n	8007400 <MS5837ReadTemperatureAndPressure+0x84c>

		uint32_t adc_pressure = buffer[0] << 16 | buffer[1] << 8 | buffer[2];
 8006cf2:	2310      	movs	r3, #16
 8006cf4:	22f0      	movs	r2, #240	; 0xf0
 8006cf6:	4694      	mov	ip, r2
 8006cf8:	44bc      	add	ip, r7
 8006cfa:	4463      	add	r3, ip
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	041a      	lsls	r2, r3, #16
 8006d00:	2310      	movs	r3, #16
 8006d02:	21f0      	movs	r1, #240	; 0xf0
 8006d04:	468c      	mov	ip, r1
 8006d06:	44bc      	add	ip, r7
 8006d08:	4463      	add	r3, ip
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	021b      	lsls	r3, r3, #8
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	2310      	movs	r3, #16
 8006d12:	21f0      	movs	r1, #240	; 0xf0
 8006d14:	468c      	mov	ip, r1
 8006d16:	44bc      	add	ip, r7
 8006d18:	4463      	add	r3, ip
 8006d1a:	789b      	ldrb	r3, [r3, #2]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	2290      	movs	r2, #144	; 0x90
 8006d20:	0052      	lsls	r2, r2, #1
 8006d22:	18ba      	adds	r2, r7, r2
 8006d24:	6013      	str	r3, [r2, #0]

		if (adc_temperature == 0 || adc_pressure == 0)
 8006d26:	2392      	movs	r3, #146	; 0x92
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	18fb      	adds	r3, r7, r3
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <MS5837ReadTemperatureAndPressure+0x18a>
 8006d32:	2390      	movs	r3, #144	; 0x90
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	18fb      	adds	r3, r7, r3
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d106      	bne.n	8006d4c <MS5837ReadTemperatureAndPressure+0x198>
			return MS5837_I2C_TRANSFER_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e35e      	b.n	8007400 <MS5837ReadTemperatureAndPressure+0x84c>
 8006d42:	46c0      	nop			; (mov r8, r8)
 8006d44:	2000080c 	.word	0x2000080c
 8006d48:	20000004 	.word	0x20000004

		int32_t dT = (int32_t)adc_temperature - ((int32_t)m_eepromCoeffs[MS5837_REFERENCE_TEMPERATURE_INDEX] << 8);
 8006d4c:	2392      	movs	r3, #146	; 0x92
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	18fb      	adds	r3, r7, r3
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4bd8      	ldr	r3, [pc, #864]	; (80070b8 <MS5837ReadTemperatureAndPressure+0x504>)
 8006d56:	895b      	ldrh	r3, [r3, #10]
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	228e      	movs	r2, #142	; 0x8e
 8006d5e:	0052      	lsls	r2, r2, #1
 8006d60:	18ba      	adds	r2, r7, r2
 8006d62:	6013      	str	r3, [r2, #0]

		int32_t TEMP = 2000	+ (int32_t)(dT * ((float)m_eepromCoeffs[MS5837_TEMP_COEFF_OF_TEMPERATURE_INDEX] / 8388608));
 8006d64:	238e      	movs	r3, #142	; 0x8e
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	18fb      	adds	r3, r7, r3
 8006d6a:	6818      	ldr	r0, [r3, #0]
 8006d6c:	f7f9 ff6a 	bl	8000c44 <__aeabi_i2f>
 8006d70:	1c04      	adds	r4, r0, #0
 8006d72:	4bd1      	ldr	r3, [pc, #836]	; (80070b8 <MS5837ReadTemperatureAndPressure+0x504>)
 8006d74:	899b      	ldrh	r3, [r3, #12]
 8006d76:	0018      	movs	r0, r3
 8006d78:	f7f9 ffb4 	bl	8000ce4 <__aeabi_ui2f>
 8006d7c:	1c03      	adds	r3, r0, #0
 8006d7e:	2196      	movs	r1, #150	; 0x96
 8006d80:	05c9      	lsls	r1, r1, #23
 8006d82:	1c18      	adds	r0, r3, #0
 8006d84:	f7f9 fb3a 	bl	80003fc <__aeabi_fdiv>
 8006d88:	1c03      	adds	r3, r0, #0
 8006d8a:	1c19      	adds	r1, r3, #0
 8006d8c:	1c20      	adds	r0, r4, #0
 8006d8e:	f7f9 fc7d 	bl	800068c <__aeabi_fmul>
 8006d92:	1c03      	adds	r3, r0, #0
 8006d94:	1c18      	adds	r0, r3, #0
 8006d96:	f7f9 ff35 	bl	8000c04 <__aeabi_f2iz>
 8006d9a:	0003      	movs	r3, r0
 8006d9c:	22fa      	movs	r2, #250	; 0xfa
 8006d9e:	00d2      	lsls	r2, r2, #3
 8006da0:	4694      	mov	ip, r2
 8006da2:	4463      	add	r3, ip
 8006da4:	228c      	movs	r2, #140	; 0x8c
 8006da6:	0052      	lsls	r2, r2, #1
 8006da8:	18ba      	adds	r2, r7, r2
 8006daa:	6013      	str	r3, [r2, #0]

		int64_t T2, SENS, OFF, OFF2, SENS2;

		if (TEMP < 2000)
 8006dac:	238c      	movs	r3, #140	; 0x8c
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	18fb      	adds	r3, r7, r3
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	4bc1      	ldr	r3, [pc, #772]	; (80070bc <MS5837ReadTemperatureAndPressure+0x508>)
 8006db6:	429a      	cmp	r2, r3
 8006db8:	dd00      	ble.n	8006dbc <MS5837ReadTemperatureAndPressure+0x208>
 8006dba:	e187      	b.n	80070cc <MS5837ReadTemperatureAndPressure+0x518>
		{
			T2 = (float)(3 * (int64_t)dT  * (int64_t)dT) / 8589934592;
 8006dbc:	238e      	movs	r3, #142	; 0x8e
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	18fb      	adds	r3, r7, r3
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	22b0      	movs	r2, #176	; 0xb0
 8006dc6:	18ba      	adds	r2, r7, r2
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	17db      	asrs	r3, r3, #31
 8006dcc:	22b4      	movs	r2, #180	; 0xb4
 8006dce:	18ba      	adds	r2, r7, r2
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	23b0      	movs	r3, #176	; 0xb0
 8006dd4:	18fb      	adds	r3, r7, r3
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	6859      	ldr	r1, [r3, #4]
 8006dda:	0003      	movs	r3, r0
 8006ddc:	000c      	movs	r4, r1
 8006dde:	18db      	adds	r3, r3, r3
 8006de0:	4164      	adcs	r4, r4
 8006de2:	18c0      	adds	r0, r0, r3
 8006de4:	4161      	adcs	r1, r4
 8006de6:	238e      	movs	r3, #142	; 0x8e
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	22a8      	movs	r2, #168	; 0xa8
 8006df0:	18ba      	adds	r2, r7, r2
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	17db      	asrs	r3, r3, #31
 8006df6:	22ac      	movs	r2, #172	; 0xac
 8006df8:	18ba      	adds	r2, r7, r2
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	23a8      	movs	r3, #168	; 0xa8
 8006dfe:	18fb      	adds	r3, r7, r3
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f7f9 fa4a 	bl	800029c <__aeabi_lmul>
 8006e08:	0003      	movs	r3, r0
 8006e0a:	000c      	movs	r4, r1
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	0021      	movs	r1, r4
 8006e10:	f7f9 fac2 	bl	8000398 <__aeabi_l2f>
 8006e14:	1c03      	adds	r3, r0, #0
 8006e16:	21a0      	movs	r1, #160	; 0xa0
 8006e18:	05c9      	lsls	r1, r1, #23
 8006e1a:	1c18      	adds	r0, r3, #0
 8006e1c:	f7f9 faee 	bl	80003fc <__aeabi_fdiv>
 8006e20:	1c03      	adds	r3, r0, #0
 8006e22:	1c18      	adds	r0, r3, #0
 8006e24:	f7f9 fa82 	bl	800032c <__aeabi_f2lz>
 8006e28:	0003      	movs	r3, r0
 8006e2a:	000c      	movs	r4, r1
 8006e2c:	229c      	movs	r2, #156	; 0x9c
 8006e2e:	0052      	lsls	r2, r2, #1
 8006e30:	18ba      	adds	r2, r7, r2
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	6054      	str	r4, [r2, #4]
			OFF2 = (float)(3 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000)) / 2;
 8006e36:	238c      	movs	r3, #140	; 0x8c
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	18fb      	adds	r3, r7, r3
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	22a0      	movs	r2, #160	; 0xa0
 8006e40:	18ba      	adds	r2, r7, r2
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	17db      	asrs	r3, r3, #31
 8006e46:	22a4      	movs	r2, #164	; 0xa4
 8006e48:	18ba      	adds	r2, r7, r2
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	4b9c      	ldr	r3, [pc, #624]	; (80070c0 <MS5837ReadTemperatureAndPressure+0x50c>)
 8006e4e:	2401      	movs	r4, #1
 8006e50:	4264      	negs	r4, r4
 8006e52:	22a0      	movs	r2, #160	; 0xa0
 8006e54:	18ba      	adds	r2, r7, r2
 8006e56:	6811      	ldr	r1, [r2, #0]
 8006e58:	6852      	ldr	r2, [r2, #4]
 8006e5a:	18c9      	adds	r1, r1, r3
 8006e5c:	4162      	adcs	r2, r4
 8006e5e:	000b      	movs	r3, r1
 8006e60:	0014      	movs	r4, r2
 8006e62:	18db      	adds	r3, r3, r3
 8006e64:	4164      	adcs	r4, r4
 8006e66:	185b      	adds	r3, r3, r1
 8006e68:	4154      	adcs	r4, r2
 8006e6a:	22b0      	movs	r2, #176	; 0xb0
 8006e6c:	18ba      	adds	r2, r7, r2
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	6054      	str	r4, [r2, #4]
 8006e72:	238c      	movs	r3, #140	; 0x8c
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	18fb      	adds	r3, r7, r3
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2298      	movs	r2, #152	; 0x98
 8006e7c:	18ba      	adds	r2, r7, r2
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	17db      	asrs	r3, r3, #31
 8006e82:	229c      	movs	r2, #156	; 0x9c
 8006e84:	18ba      	adds	r2, r7, r2
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	4b8d      	ldr	r3, [pc, #564]	; (80070c0 <MS5837ReadTemperatureAndPressure+0x50c>)
 8006e8a:	2401      	movs	r4, #1
 8006e8c:	4264      	negs	r4, r4
 8006e8e:	2298      	movs	r2, #152	; 0x98
 8006e90:	18ba      	adds	r2, r7, r2
 8006e92:	6811      	ldr	r1, [r2, #0]
 8006e94:	6852      	ldr	r2, [r2, #4]
 8006e96:	18c9      	adds	r1, r1, r3
 8006e98:	4162      	adcs	r2, r4
 8006e9a:	000b      	movs	r3, r1
 8006e9c:	0014      	movs	r4, r2
 8006e9e:	001a      	movs	r2, r3
 8006ea0:	0023      	movs	r3, r4
 8006ea2:	21b0      	movs	r1, #176	; 0xb0
 8006ea4:	1879      	adds	r1, r7, r1
 8006ea6:	6808      	ldr	r0, [r1, #0]
 8006ea8:	6849      	ldr	r1, [r1, #4]
 8006eaa:	f7f9 f9f7 	bl	800029c <__aeabi_lmul>
 8006eae:	0003      	movs	r3, r0
 8006eb0:	000c      	movs	r4, r1
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	0021      	movs	r1, r4
 8006eb6:	f7f9 fa6f 	bl	8000398 <__aeabi_l2f>
 8006eba:	1c03      	adds	r3, r0, #0
 8006ebc:	2180      	movs	r1, #128	; 0x80
 8006ebe:	05c9      	lsls	r1, r1, #23
 8006ec0:	1c18      	adds	r0, r3, #0
 8006ec2:	f7f9 fa9b 	bl	80003fc <__aeabi_fdiv>
 8006ec6:	1c03      	adds	r3, r0, #0
 8006ec8:	1c18      	adds	r0, r3, #0
 8006eca:	f7f9 fa2f 	bl	800032c <__aeabi_f2lz>
 8006ece:	0003      	movs	r3, r0
 8006ed0:	000c      	movs	r4, r1
 8006ed2:	2298      	movs	r2, #152	; 0x98
 8006ed4:	0052      	lsls	r2, r2, #1
 8006ed6:	18ba      	adds	r2, r7, r2
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	6054      	str	r4, [r2, #4]
			SENS2 = (float)(5 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000)) / 8;
 8006edc:	238c      	movs	r3, #140	; 0x8c
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	18fb      	adds	r3, r7, r3
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2290      	movs	r2, #144	; 0x90
 8006ee6:	18ba      	adds	r2, r7, r2
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	17db      	asrs	r3, r3, #31
 8006eec:	2294      	movs	r2, #148	; 0x94
 8006eee:	18ba      	adds	r2, r7, r2
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	4b73      	ldr	r3, [pc, #460]	; (80070c0 <MS5837ReadTemperatureAndPressure+0x50c>)
 8006ef4:	2401      	movs	r4, #1
 8006ef6:	4264      	negs	r4, r4
 8006ef8:	2290      	movs	r2, #144	; 0x90
 8006efa:	18ba      	adds	r2, r7, r2
 8006efc:	6811      	ldr	r1, [r2, #0]
 8006efe:	6852      	ldr	r2, [r2, #4]
 8006f00:	18c9      	adds	r1, r1, r3
 8006f02:	4162      	adcs	r2, r4
 8006f04:	000b      	movs	r3, r1
 8006f06:	0014      	movs	r4, r2
 8006f08:	0f98      	lsrs	r0, r3, #30
 8006f0a:	00a6      	lsls	r6, r4, #2
 8006f0c:	4306      	orrs	r6, r0
 8006f0e:	009d      	lsls	r5, r3, #2
 8006f10:	186d      	adds	r5, r5, r1
 8006f12:	4156      	adcs	r6, r2
 8006f14:	0028      	movs	r0, r5
 8006f16:	0031      	movs	r1, r6
 8006f18:	238c      	movs	r3, #140	; 0x8c
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	18fb      	adds	r3, r7, r3
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2288      	movs	r2, #136	; 0x88
 8006f22:	18ba      	adds	r2, r7, r2
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	17db      	asrs	r3, r3, #31
 8006f28:	228c      	movs	r2, #140	; 0x8c
 8006f2a:	18ba      	adds	r2, r7, r2
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	4b64      	ldr	r3, [pc, #400]	; (80070c0 <MS5837ReadTemperatureAndPressure+0x50c>)
 8006f30:	2401      	movs	r4, #1
 8006f32:	4264      	negs	r4, r4
 8006f34:	2288      	movs	r2, #136	; 0x88
 8006f36:	18ba      	adds	r2, r7, r2
 8006f38:	6815      	ldr	r5, [r2, #0]
 8006f3a:	6856      	ldr	r6, [r2, #4]
 8006f3c:	18ed      	adds	r5, r5, r3
 8006f3e:	4166      	adcs	r6, r4
 8006f40:	002b      	movs	r3, r5
 8006f42:	0034      	movs	r4, r6
 8006f44:	001a      	movs	r2, r3
 8006f46:	0023      	movs	r3, r4
 8006f48:	f7f9 f9a8 	bl	800029c <__aeabi_lmul>
 8006f4c:	0003      	movs	r3, r0
 8006f4e:	000c      	movs	r4, r1
 8006f50:	0018      	movs	r0, r3
 8006f52:	0021      	movs	r1, r4
 8006f54:	f7f9 fa20 	bl	8000398 <__aeabi_l2f>
 8006f58:	1c03      	adds	r3, r0, #0
 8006f5a:	2182      	movs	r1, #130	; 0x82
 8006f5c:	05c9      	lsls	r1, r1, #23
 8006f5e:	1c18      	adds	r0, r3, #0
 8006f60:	f7f9 fa4c 	bl	80003fc <__aeabi_fdiv>
 8006f64:	1c03      	adds	r3, r0, #0
 8006f66:	1c18      	adds	r0, r3, #0
 8006f68:	f7f9 f9e0 	bl	800032c <__aeabi_f2lz>
 8006f6c:	0003      	movs	r3, r0
 8006f6e:	000c      	movs	r4, r1
 8006f70:	2294      	movs	r2, #148	; 0x94
 8006f72:	0052      	lsls	r2, r2, #1
 8006f74:	18ba      	adds	r2, r7, r2
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	6054      	str	r4, [r2, #4]

			if (TEMP < -1500)
 8006f7a:	238c      	movs	r3, #140	; 0x8c
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	18fb      	adds	r3, r7, r3
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	4b50      	ldr	r3, [pc, #320]	; (80070c4 <MS5837ReadTemperatureAndPressure+0x510>)
 8006f84:	429a      	cmp	r2, r3
 8006f86:	db00      	blt.n	8006f8a <MS5837ReadTemperatureAndPressure+0x3d6>
 8006f88:	e113      	b.n	80071b2 <MS5837ReadTemperatureAndPressure+0x5fe>
			{
				OFF2 += 7 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500);
 8006f8a:	238c      	movs	r3, #140	; 0x8c
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	18fb      	adds	r3, r7, r3
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2280      	movs	r2, #128	; 0x80
 8006f94:	18ba      	adds	r2, r7, r2
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	17db      	asrs	r3, r3, #31
 8006f9a:	2284      	movs	r2, #132	; 0x84
 8006f9c:	18ba      	adds	r2, r7, r2
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	4b49      	ldr	r3, [pc, #292]	; (80070c8 <MS5837ReadTemperatureAndPressure+0x514>)
 8006fa2:	2400      	movs	r4, #0
 8006fa4:	2280      	movs	r2, #128	; 0x80
 8006fa6:	18ba      	adds	r2, r7, r2
 8006fa8:	6811      	ldr	r1, [r2, #0]
 8006faa:	6852      	ldr	r2, [r2, #4]
 8006fac:	18c9      	adds	r1, r1, r3
 8006fae:	4162      	adcs	r2, r4
 8006fb0:	000b      	movs	r3, r1
 8006fb2:	0014      	movs	r4, r2
 8006fb4:	0f58      	lsrs	r0, r3, #29
 8006fb6:	00e5      	lsls	r5, r4, #3
 8006fb8:	26bc      	movs	r6, #188	; 0xbc
 8006fba:	19be      	adds	r6, r7, r6
 8006fbc:	6035      	str	r5, [r6, #0]
 8006fbe:	25bc      	movs	r5, #188	; 0xbc
 8006fc0:	197d      	adds	r5, r7, r5
 8006fc2:	682d      	ldr	r5, [r5, #0]
 8006fc4:	4305      	orrs	r5, r0
 8006fc6:	20bc      	movs	r0, #188	; 0xbc
 8006fc8:	1838      	adds	r0, r7, r0
 8006fca:	6005      	str	r5, [r0, #0]
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	20b8      	movs	r0, #184	; 0xb8
 8006fd0:	1838      	adds	r0, r7, r0
 8006fd2:	6003      	str	r3, [r0, #0]
 8006fd4:	23b8      	movs	r3, #184	; 0xb8
 8006fd6:	18fb      	adds	r3, r7, r3
 8006fd8:	685c      	ldr	r4, [r3, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	1a5b      	subs	r3, r3, r1
 8006fde:	4194      	sbcs	r4, r2
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	0021      	movs	r1, r4
 8006fe4:	238c      	movs	r3, #140	; 0x8c
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	18fb      	adds	r3, r7, r3
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fee:	17db      	asrs	r3, r3, #31
 8006ff0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ff2:	4b35      	ldr	r3, [pc, #212]	; (80070c8 <MS5837ReadTemperatureAndPressure+0x514>)
 8006ff4:	2400      	movs	r4, #0
 8006ff6:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8006ff8:	6ffe      	ldr	r6, [r7, #124]	; 0x7c
 8006ffa:	18ed      	adds	r5, r5, r3
 8006ffc:	4166      	adcs	r6, r4
 8006ffe:	002b      	movs	r3, r5
 8007000:	0034      	movs	r4, r6
 8007002:	001a      	movs	r2, r3
 8007004:	0023      	movs	r3, r4
 8007006:	f7f9 f949 	bl	800029c <__aeabi_lmul>
 800700a:	0003      	movs	r3, r0
 800700c:	000c      	movs	r4, r1
 800700e:	0019      	movs	r1, r3
 8007010:	0022      	movs	r2, r4
 8007012:	2398      	movs	r3, #152	; 0x98
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	685c      	ldr	r4, [r3, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	185b      	adds	r3, r3, r1
 800701e:	4154      	adcs	r4, r2
 8007020:	2298      	movs	r2, #152	; 0x98
 8007022:	0052      	lsls	r2, r2, #1
 8007024:	18ba      	adds	r2, r7, r2
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	6054      	str	r4, [r2, #4]
				SENS2 += 4 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500);
 800702a:	238c      	movs	r3, #140	; 0x8c
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	673b      	str	r3, [r7, #112]	; 0x70
 8007034:	17db      	asrs	r3, r3, #31
 8007036:	677b      	str	r3, [r7, #116]	; 0x74
 8007038:	4b23      	ldr	r3, [pc, #140]	; (80070c8 <MS5837ReadTemperatureAndPressure+0x514>)
 800703a:	2400      	movs	r4, #0
 800703c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800703e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007040:	18c9      	adds	r1, r1, r3
 8007042:	4162      	adcs	r2, r4
 8007044:	000b      	movs	r3, r1
 8007046:	0014      	movs	r4, r2
 8007048:	0f9a      	lsrs	r2, r3, #30
 800704a:	00a1      	lsls	r1, r4, #2
 800704c:	20ec      	movs	r0, #236	; 0xec
 800704e:	1838      	adds	r0, r7, r0
 8007050:	6001      	str	r1, [r0, #0]
 8007052:	21ec      	movs	r1, #236	; 0xec
 8007054:	1879      	adds	r1, r7, r1
 8007056:	6809      	ldr	r1, [r1, #0]
 8007058:	4311      	orrs	r1, r2
 800705a:	22ec      	movs	r2, #236	; 0xec
 800705c:	18ba      	adds	r2, r7, r2
 800705e:	6011      	str	r1, [r2, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	22e8      	movs	r2, #232	; 0xe8
 8007064:	18ba      	adds	r2, r7, r2
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	238c      	movs	r3, #140	; 0x8c
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	18fb      	adds	r3, r7, r3
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	66bb      	str	r3, [r7, #104]	; 0x68
 8007072:	17db      	asrs	r3, r3, #31
 8007074:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007076:	4b14      	ldr	r3, [pc, #80]	; (80070c8 <MS5837ReadTemperatureAndPressure+0x514>)
 8007078:	2400      	movs	r4, #0
 800707a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800707c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800707e:	18c9      	adds	r1, r1, r3
 8007080:	4162      	adcs	r2, r4
 8007082:	000b      	movs	r3, r1
 8007084:	0014      	movs	r4, r2
 8007086:	001a      	movs	r2, r3
 8007088:	0023      	movs	r3, r4
 800708a:	21e8      	movs	r1, #232	; 0xe8
 800708c:	1879      	adds	r1, r7, r1
 800708e:	6808      	ldr	r0, [r1, #0]
 8007090:	6849      	ldr	r1, [r1, #4]
 8007092:	f7f9 f903 	bl	800029c <__aeabi_lmul>
 8007096:	0003      	movs	r3, r0
 8007098:	000c      	movs	r4, r1
 800709a:	0019      	movs	r1, r3
 800709c:	0022      	movs	r2, r4
 800709e:	2394      	movs	r3, #148	; 0x94
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	18fb      	adds	r3, r7, r3
 80070a4:	685c      	ldr	r4, [r3, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	185b      	adds	r3, r3, r1
 80070aa:	4154      	adcs	r4, r2
 80070ac:	2294      	movs	r2, #148	; 0x94
 80070ae:	0052      	lsls	r2, r2, #1
 80070b0:	18ba      	adds	r2, r7, r2
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	6054      	str	r4, [r2, #4]
 80070b6:	e07c      	b.n	80071b2 <MS5837ReadTemperatureAndPressure+0x5fe>
 80070b8:	200002bc 	.word	0x200002bc
 80070bc:	000007cf 	.word	0x000007cf
 80070c0:	fffff830 	.word	0xfffff830
 80070c4:	fffffa24 	.word	0xfffffa24
 80070c8:	000005dc 	.word	0x000005dc
			}
		}
		else
		{
			T2 = (float)(2 * (int64_t)dT  * (int64_t)dT) / 137438953472;
 80070cc:	238e      	movs	r3, #142	; 0x8e
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	663b      	str	r3, [r7, #96]	; 0x60
 80070d6:	17db      	asrs	r3, r3, #31
 80070d8:	667b      	str	r3, [r7, #100]	; 0x64
 80070da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070dc:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80070de:	18db      	adds	r3, r3, r3
 80070e0:	4164      	adcs	r4, r4
 80070e2:	0018      	movs	r0, r3
 80070e4:	0021      	movs	r1, r4
 80070e6:	238e      	movs	r3, #142	; 0x8e
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	18fb      	adds	r3, r7, r3
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80070f0:	17db      	asrs	r3, r3, #31
 80070f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070f8:	f7f9 f8d0 	bl	800029c <__aeabi_lmul>
 80070fc:	0003      	movs	r3, r0
 80070fe:	000c      	movs	r4, r1
 8007100:	0018      	movs	r0, r3
 8007102:	0021      	movs	r1, r4
 8007104:	f7f9 f948 	bl	8000398 <__aeabi_l2f>
 8007108:	1c03      	adds	r3, r0, #0
 800710a:	21a4      	movs	r1, #164	; 0xa4
 800710c:	05c9      	lsls	r1, r1, #23
 800710e:	1c18      	adds	r0, r3, #0
 8007110:	f7f9 f974 	bl	80003fc <__aeabi_fdiv>
 8007114:	1c03      	adds	r3, r0, #0
 8007116:	1c18      	adds	r0, r3, #0
 8007118:	f7f9 f908 	bl	800032c <__aeabi_f2lz>
 800711c:	0003      	movs	r3, r0
 800711e:	000c      	movs	r4, r1
 8007120:	229c      	movs	r2, #156	; 0x9c
 8007122:	0052      	lsls	r2, r2, #1
 8007124:	18ba      	adds	r2, r7, r2
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	6054      	str	r4, [r2, #4]
			OFF2 = (float)((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) / 16;
 800712a:	238c      	movs	r3, #140	; 0x8c
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	653b      	str	r3, [r7, #80]	; 0x50
 8007134:	17db      	asrs	r3, r3, #31
 8007136:	657b      	str	r3, [r7, #84]	; 0x54
 8007138:	4bb3      	ldr	r3, [pc, #716]	; (8007408 <MS5837ReadTemperatureAndPressure+0x854>)
 800713a:	2400      	movs	r4, #0
 800713c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800713e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007140:	18c9      	adds	r1, r1, r3
 8007142:	4162      	adcs	r2, r4
 8007144:	000b      	movs	r3, r1
 8007146:	0014      	movs	r4, r2
 8007148:	0018      	movs	r0, r3
 800714a:	0021      	movs	r1, r4
 800714c:	f7f9 f924 	bl	8000398 <__aeabi_l2f>
 8007150:	1c05      	adds	r5, r0, #0
 8007152:	238c      	movs	r3, #140	; 0x8c
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	18fb      	adds	r3, r7, r3
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	64bb      	str	r3, [r7, #72]	; 0x48
 800715c:	17db      	asrs	r3, r3, #31
 800715e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007160:	4ba9      	ldr	r3, [pc, #676]	; (8007408 <MS5837ReadTemperatureAndPressure+0x854>)
 8007162:	2400      	movs	r4, #0
 8007164:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007166:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007168:	18c9      	adds	r1, r1, r3
 800716a:	4162      	adcs	r2, r4
 800716c:	000b      	movs	r3, r1
 800716e:	0014      	movs	r4, r2
 8007170:	0018      	movs	r0, r3
 8007172:	0021      	movs	r1, r4
 8007174:	f7f9 f910 	bl	8000398 <__aeabi_l2f>
 8007178:	1c03      	adds	r3, r0, #0
 800717a:	1c19      	adds	r1, r3, #0
 800717c:	1c28      	adds	r0, r5, #0
 800717e:	f7f9 fa85 	bl	800068c <__aeabi_fmul>
 8007182:	1c03      	adds	r3, r0, #0
 8007184:	2183      	movs	r1, #131	; 0x83
 8007186:	05c9      	lsls	r1, r1, #23
 8007188:	1c18      	adds	r0, r3, #0
 800718a:	f7f9 f937 	bl	80003fc <__aeabi_fdiv>
 800718e:	1c03      	adds	r3, r0, #0
 8007190:	1c18      	adds	r0, r3, #0
 8007192:	f7f9 f8cb 	bl	800032c <__aeabi_f2lz>
 8007196:	0003      	movs	r3, r0
 8007198:	000c      	movs	r4, r1
 800719a:	2298      	movs	r2, #152	; 0x98
 800719c:	0052      	lsls	r2, r2, #1
 800719e:	18ba      	adds	r2, r7, r2
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	6054      	str	r4, [r2, #4]
			SENS2 = 0 ;
 80071a4:	2300      	movs	r3, #0
 80071a6:	2400      	movs	r4, #0
 80071a8:	2294      	movs	r2, #148	; 0x94
 80071aa:	0052      	lsls	r2, r2, #1
 80071ac:	18ba      	adds	r2, r7, r2
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	6054      	str	r4, [r2, #4]
		}

		OFF = ((int64_t)m_eepromCoeffs[MS5837_PRESSURE_OFFSET_INDEX] << 16) +
 80071b2:	4b96      	ldr	r3, [pc, #600]	; (800740c <MS5837ReadTemperatureAndPressure+0x858>)
 80071b4:	889b      	ldrh	r3, [r3, #4]
 80071b6:	643b      	str	r3, [r7, #64]	; 0x40
 80071b8:	2300      	movs	r3, #0
 80071ba:	647b      	str	r3, [r7, #68]	; 0x44
 80071bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071be:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80071c0:	001a      	movs	r2, r3
 80071c2:	0c12      	lsrs	r2, r2, #16
 80071c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	63bb      	str	r3, [r7, #56]	; 0x38
				(((int64_t)m_eepromCoeffs[MS5837_TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX] * dT) >> 7);
 80071ca:	4b90      	ldr	r3, [pc, #576]	; (800740c <MS5837ReadTemperatureAndPressure+0x858>)
 80071cc:	891b      	ldrh	r3, [r3, #8]
 80071ce:	633b      	str	r3, [r7, #48]	; 0x30
 80071d0:	2300      	movs	r3, #0
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34
 80071d4:	238e      	movs	r3, #142	; 0x8e
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	18fb      	adds	r3, r7, r3
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80071de:	17db      	asrs	r3, r3, #31
 80071e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071ea:	f7f9 f857 	bl	800029c <__aeabi_lmul>
 80071ee:	0003      	movs	r3, r0
 80071f0:	000c      	movs	r4, r1
 80071f2:	0662      	lsls	r2, r4, #25
 80071f4:	09d9      	lsrs	r1, r3, #7
 80071f6:	20e0      	movs	r0, #224	; 0xe0
 80071f8:	1838      	adds	r0, r7, r0
 80071fa:	6001      	str	r1, [r0, #0]
 80071fc:	21e0      	movs	r1, #224	; 0xe0
 80071fe:	1879      	adds	r1, r7, r1
 8007200:	6809      	ldr	r1, [r1, #0]
 8007202:	4311      	orrs	r1, r2
 8007204:	22e0      	movs	r2, #224	; 0xe0
 8007206:	18ba      	adds	r2, r7, r2
 8007208:	6011      	str	r1, [r2, #0]
 800720a:	11e3      	asrs	r3, r4, #7
 800720c:	22e4      	movs	r2, #228	; 0xe4
 800720e:	18ba      	adds	r2, r7, r2
 8007210:	6013      	str	r3, [r2, #0]
		OFF = ((int64_t)m_eepromCoeffs[MS5837_PRESSURE_OFFSET_INDEX] << 16) +
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8007216:	22e0      	movs	r2, #224	; 0xe0
 8007218:	18ba      	adds	r2, r7, r2
 800721a:	6811      	ldr	r1, [r2, #0]
 800721c:	6852      	ldr	r2, [r2, #4]
 800721e:	185b      	adds	r3, r3, r1
 8007220:	4154      	adcs	r4, r2
 8007222:	2288      	movs	r2, #136	; 0x88
 8007224:	0052      	lsls	r2, r2, #1
 8007226:	18ba      	adds	r2, r7, r2
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	6054      	str	r4, [r2, #4]
		OFF -= OFF2;
 800722c:	2388      	movs	r3, #136	; 0x88
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	18fb      	adds	r3, r7, r3
 8007232:	6819      	ldr	r1, [r3, #0]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	2398      	movs	r3, #152	; 0x98
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	18fb      	adds	r3, r7, r3
 800723c:	685c      	ldr	r4, [r3, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	1ac9      	subs	r1, r1, r3
 8007242:	41a2      	sbcs	r2, r4
 8007244:	000b      	movs	r3, r1
 8007246:	0014      	movs	r4, r2
 8007248:	2288      	movs	r2, #136	; 0x88
 800724a:	0052      	lsls	r2, r2, #1
 800724c:	18ba      	adds	r2, r7, r2
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	6054      	str	r4, [r2, #4]

		SENS = ((int64_t)m_eepromCoeffs[MS5837_PRESSURE_SENSITIVITY_INDEX] << 15) +
 8007252:	4b6e      	ldr	r3, [pc, #440]	; (800740c <MS5837ReadTemperatureAndPressure+0x858>)
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	623b      	str	r3, [r7, #32]
 8007258:	2300      	movs	r3, #0
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
 800725c:	6a39      	ldr	r1, [r7, #32]
 800725e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007260:	000b      	movs	r3, r1
 8007262:	0c5b      	lsrs	r3, r3, #17
 8007264:	0010      	movs	r0, r2
 8007266:	03c0      	lsls	r0, r0, #15
 8007268:	24dc      	movs	r4, #220	; 0xdc
 800726a:	193c      	adds	r4, r7, r4
 800726c:	6020      	str	r0, [r4, #0]
 800726e:	20dc      	movs	r0, #220	; 0xdc
 8007270:	1838      	adds	r0, r7, r0
 8007272:	6800      	ldr	r0, [r0, #0]
 8007274:	4318      	orrs	r0, r3
 8007276:	23dc      	movs	r3, #220	; 0xdc
 8007278:	18fb      	adds	r3, r7, r3
 800727a:	6018      	str	r0, [r3, #0]
 800727c:	000b      	movs	r3, r1
 800727e:	03db      	lsls	r3, r3, #15
 8007280:	22d8      	movs	r2, #216	; 0xd8
 8007282:	18ba      	adds	r2, r7, r2
 8007284:	6013      	str	r3, [r2, #0]
				(((int64_t)m_eepromCoeffs[MS5837_TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 8);
 8007286:	4b61      	ldr	r3, [pc, #388]	; (800740c <MS5837ReadTemperatureAndPressure+0x858>)
 8007288:	88db      	ldrh	r3, [r3, #6]
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	2300      	movs	r3, #0
 800728e:	61fb      	str	r3, [r7, #28]
 8007290:	238e      	movs	r3, #142	; 0x8e
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	18fb      	adds	r3, r7, r3
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	613b      	str	r3, [r7, #16]
 800729a:	17db      	asrs	r3, r3, #31
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	69b8      	ldr	r0, [r7, #24]
 80072a4:	69f9      	ldr	r1, [r7, #28]
 80072a6:	f7f8 fff9 	bl	800029c <__aeabi_lmul>
 80072aa:	0003      	movs	r3, r0
 80072ac:	000c      	movs	r4, r1
 80072ae:	0622      	lsls	r2, r4, #24
 80072b0:	0a19      	lsrs	r1, r3, #8
 80072b2:	20d0      	movs	r0, #208	; 0xd0
 80072b4:	1838      	adds	r0, r7, r0
 80072b6:	6001      	str	r1, [r0, #0]
 80072b8:	21d0      	movs	r1, #208	; 0xd0
 80072ba:	1879      	adds	r1, r7, r1
 80072bc:	6809      	ldr	r1, [r1, #0]
 80072be:	4311      	orrs	r1, r2
 80072c0:	22d0      	movs	r2, #208	; 0xd0
 80072c2:	18ba      	adds	r2, r7, r2
 80072c4:	6011      	str	r1, [r2, #0]
 80072c6:	1223      	asrs	r3, r4, #8
 80072c8:	22d4      	movs	r2, #212	; 0xd4
 80072ca:	18ba      	adds	r2, r7, r2
 80072cc:	6013      	str	r3, [r2, #0]
		SENS = ((int64_t)m_eepromCoeffs[MS5837_PRESSURE_SENSITIVITY_INDEX] << 15) +
 80072ce:	23d8      	movs	r3, #216	; 0xd8
 80072d0:	18fb      	adds	r3, r7, r3
 80072d2:	685c      	ldr	r4, [r3, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	22d0      	movs	r2, #208	; 0xd0
 80072d8:	18ba      	adds	r2, r7, r2
 80072da:	6811      	ldr	r1, [r2, #0]
 80072dc:	6852      	ldr	r2, [r2, #4]
 80072de:	185b      	adds	r3, r3, r1
 80072e0:	4154      	adcs	r4, r2
 80072e2:	2284      	movs	r2, #132	; 0x84
 80072e4:	0052      	lsls	r2, r2, #1
 80072e6:	18ba      	adds	r2, r7, r2
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	6054      	str	r4, [r2, #4]
		SENS -= SENS2;
 80072ec:	2384      	movs	r3, #132	; 0x84
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	18fb      	adds	r3, r7, r3
 80072f2:	6819      	ldr	r1, [r3, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	2394      	movs	r3, #148	; 0x94
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	18fb      	adds	r3, r7, r3
 80072fc:	685c      	ldr	r4, [r3, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	1ac9      	subs	r1, r1, r3
 8007302:	41a2      	sbcs	r2, r4
 8007304:	000b      	movs	r3, r1
 8007306:	0014      	movs	r4, r2
 8007308:	2284      	movs	r2, #132	; 0x84
 800730a:	0052      	lsls	r2, r2, #1
 800730c:	18ba      	adds	r2, r7, r2
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	6054      	str	r4, [r2, #4]

		int32_t P = (((adc_pressure * SENS) >> 21) - OFF) >> 13;
 8007312:	2390      	movs	r3, #144	; 0x90
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	18fb      	adds	r3, r7, r3
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60bb      	str	r3, [r7, #8]
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	2384      	movs	r3, #132	; 0x84
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	18fb      	adds	r3, r7, r3
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	68b8      	ldr	r0, [r7, #8]
 800732c:	68f9      	ldr	r1, [r7, #12]
 800732e:	f7f8 ffb5 	bl	800029c <__aeabi_lmul>
 8007332:	0003      	movs	r3, r0
 8007334:	000c      	movs	r4, r1
 8007336:	02e2      	lsls	r2, r4, #11
 8007338:	0d59      	lsrs	r1, r3, #21
 800733a:	20c8      	movs	r0, #200	; 0xc8
 800733c:	1838      	adds	r0, r7, r0
 800733e:	6001      	str	r1, [r0, #0]
 8007340:	21c8      	movs	r1, #200	; 0xc8
 8007342:	1879      	adds	r1, r7, r1
 8007344:	6809      	ldr	r1, [r1, #0]
 8007346:	4311      	orrs	r1, r2
 8007348:	22c8      	movs	r2, #200	; 0xc8
 800734a:	18ba      	adds	r2, r7, r2
 800734c:	6011      	str	r1, [r2, #0]
 800734e:	1563      	asrs	r3, r4, #21
 8007350:	22cc      	movs	r2, #204	; 0xcc
 8007352:	18ba      	adds	r2, r7, r2
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	2388      	movs	r3, #136	; 0x88
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	18fb      	adds	r3, r7, r3
 800735c:	685c      	ldr	r4, [r3, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	22c8      	movs	r2, #200	; 0xc8
 8007362:	18ba      	adds	r2, r7, r2
 8007364:	6811      	ldr	r1, [r2, #0]
 8007366:	6852      	ldr	r2, [r2, #4]
 8007368:	1ac9      	subs	r1, r1, r3
 800736a:	41a2      	sbcs	r2, r4
 800736c:	000b      	movs	r3, r1
 800736e:	0014      	movs	r4, r2
 8007370:	04e2      	lsls	r2, r4, #19
 8007372:	0b59      	lsrs	r1, r3, #13
 8007374:	20c0      	movs	r0, #192	; 0xc0
 8007376:	1838      	adds	r0, r7, r0
 8007378:	6001      	str	r1, [r0, #0]
 800737a:	21c0      	movs	r1, #192	; 0xc0
 800737c:	1879      	adds	r1, r7, r1
 800737e:	6809      	ldr	r1, [r1, #0]
 8007380:	4311      	orrs	r1, r2
 8007382:	22c0      	movs	r2, #192	; 0xc0
 8007384:	18ba      	adds	r2, r7, r2
 8007386:	6011      	str	r1, [r2, #0]
 8007388:	1363      	asrs	r3, r4, #13
 800738a:	22c4      	movs	r2, #196	; 0xc4
 800738c:	18ba      	adds	r2, r7, r2
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	23c0      	movs	r3, #192	; 0xc0
 8007392:	18fb      	adds	r3, r7, r3
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	1d7a      	adds	r2, r7, #5
 8007398:	32ff      	adds	r2, #255	; 0xff
 800739a:	6013      	str	r3, [r2, #0]

		*temperature = (float)(TEMP  - T2) / 100;
 800739c:	238c      	movs	r3, #140	; 0x8c
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	18fb      	adds	r3, r7, r3
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	603b      	str	r3, [r7, #0]
 80073a6:	17db      	asrs	r3, r3, #31
 80073a8:	607b      	str	r3, [r7, #4]
 80073aa:	239c      	movs	r3, #156	; 0x9c
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	18fb      	adds	r3, r7, r3
 80073b0:	685c      	ldr	r4, [r3, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	1ac9      	subs	r1, r1, r3
 80073ba:	41a2      	sbcs	r2, r4
 80073bc:	000b      	movs	r3, r1
 80073be:	0014      	movs	r4, r2
 80073c0:	0018      	movs	r0, r3
 80073c2:	0021      	movs	r1, r4
 80073c4:	f7f8 ffe8 	bl	8000398 <__aeabi_l2f>
 80073c8:	1c03      	adds	r3, r0, #0
 80073ca:	4911      	ldr	r1, [pc, #68]	; (8007410 <MS5837ReadTemperatureAndPressure+0x85c>)
 80073cc:	1c18      	adds	r0, r3, #0
 80073ce:	f7f9 f815 	bl	80003fc <__aeabi_fdiv>
 80073d2:	1c03      	adds	r3, r0, #0
 80073d4:	1c1a      	adds	r2, r3, #0
 80073d6:	23f8      	movs	r3, #248	; 0xf8
 80073d8:	18fb      	adds	r3, r7, r3
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	601a      	str	r2, [r3, #0]
		*pressure = (float)P / 10;
 80073de:	1d7b      	adds	r3, r7, #5
 80073e0:	33ff      	adds	r3, #255	; 0xff
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	f7f9 fc2e 	bl	8000c44 <__aeabi_i2f>
 80073e8:	1c03      	adds	r3, r0, #0
 80073ea:	490a      	ldr	r1, [pc, #40]	; (8007414 <MS5837ReadTemperatureAndPressure+0x860>)
 80073ec:	1c18      	adds	r0, r3, #0
 80073ee:	f7f9 f805 	bl	80003fc <__aeabi_fdiv>
 80073f2:	1c03      	adds	r3, r0, #0
 80073f4:	1c1a      	adds	r2, r3, #0
 80073f6:	23f4      	movs	r3, #244	; 0xf4
 80073f8:	18fb      	adds	r3, r7, r3
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	601a      	str	r2, [r3, #0]

		return MS5837_ALL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	0018      	movs	r0, r3
 8007402:	46bd      	mov	sp, r7
 8007404:	b051      	add	sp, #324	; 0x144
 8007406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007408:	000005dc 	.word	0x000005dc
 800740c:	200002bc 	.word	0x200002bc
 8007410:	42c80000 	.word	0x42c80000
 8007414:	41200000 	.word	0x41200000

08007418 <FindCommand>:
												   .WriteFunction = NULL}};
static struct ModbusRecvMessage m_message;

uint8_t FindCommand(uint16_t commandCode, struct Command **command);

uint8_t FindCommand(uint16_t commandCode, struct Command **command) {
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	0002      	movs	r2, r0
 8007420:	6039      	str	r1, [r7, #0]
 8007422:	1dbb      	adds	r3, r7, #6
 8007424:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < m_registeredCommandsCount; i++)
 8007426:	230f      	movs	r3, #15
 8007428:	18fb      	adds	r3, r7, r3
 800742a:	2200      	movs	r2, #0
 800742c:	701a      	strb	r2, [r3, #0]
 800742e:	e022      	b.n	8007476 <FindCommand+0x5e>
		if(m_commands[i].CommandCode == commandCode) {
 8007430:	230f      	movs	r3, #15
 8007432:	18fb      	adds	r3, r7, r3
 8007434:	781a      	ldrb	r2, [r3, #0]
 8007436:	4916      	ldr	r1, [pc, #88]	; (8007490 <FindCommand+0x78>)
 8007438:	0013      	movs	r3, r2
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	189b      	adds	r3, r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	18cb      	adds	r3, r1, r3
 8007442:	3308      	adds	r3, #8
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	1dba      	adds	r2, r7, #6
 8007448:	8812      	ldrh	r2, [r2, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d10c      	bne.n	8007468 <FindCommand+0x50>
			*command = &m_commands[i];
 800744e:	230f      	movs	r3, #15
 8007450:	18fb      	adds	r3, r7, r3
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	0013      	movs	r3, r2
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	189b      	adds	r3, r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4a0c      	ldr	r2, [pc, #48]	; (8007490 <FindCommand+0x78>)
 800745e:	189a      	adds	r2, r3, r2
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	601a      	str	r2, [r3, #0]
			return ALL_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	e00f      	b.n	8007488 <FindCommand+0x70>
	for(uint8_t i = 0; i < m_registeredCommandsCount; i++)
 8007468:	230f      	movs	r3, #15
 800746a:	18fb      	adds	r3, r7, r3
 800746c:	781a      	ldrb	r2, [r3, #0]
 800746e:	230f      	movs	r3, #15
 8007470:	18fb      	adds	r3, r7, r3
 8007472:	3201      	adds	r2, #1
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	230f      	movs	r3, #15
 8007478:	18fb      	adds	r3, r7, r3
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	b29a      	uxth	r2, r3
 800747e:	4b05      	ldr	r3, [pc, #20]	; (8007494 <FindCommand+0x7c>)
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	429a      	cmp	r2, r3
 8007484:	d3d4      	bcc.n	8007430 <FindCommand+0x18>
		}

	return ANY_ERROR;
 8007486:	23ff      	movs	r3, #255	; 0xff
}
 8007488:	0018      	movs	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	b004      	add	sp, #16
 800748e:	bd80      	pop	{r7, pc}
 8007490:	200002d0 	.word	0x200002d0
 8007494:	200002cc 	.word	0x200002cc

08007498 <ProcessCommand>:

enum CommandErrorCode ProcessCommand(uint8_t *recvBuffer,
								     uint8_t requestLength,
									 uint8_t *sendBuffer,
									 uint8_t *resultLength) {
 8007498:	b590      	push	{r4, r7, lr}
 800749a:	b089      	sub	sp, #36	; 0x24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	607a      	str	r2, [r7, #4]
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	230b      	movs	r3, #11
 80074a6:	18fb      	adds	r3, r7, r3
 80074a8:	1c0a      	adds	r2, r1, #0
 80074aa:	701a      	strb	r2, [r3, #0]
	{
		enum ModbusErrorCode errorCode;
		if((errorCode = DecodeRequest(recvBuffer, requestLength, &m_message)))
 80074ac:	231f      	movs	r3, #31
 80074ae:	18fc      	adds	r4, r7, r3
 80074b0:	4a31      	ldr	r2, [pc, #196]	; (8007578 <ProcessCommand+0xe0>)
 80074b2:	230b      	movs	r3, #11
 80074b4:	18fb      	adds	r3, r7, r3
 80074b6:	7819      	ldrb	r1, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	0018      	movs	r0, r3
 80074bc:	f001 f9a4 	bl	8008808 <DecodeRequest>
 80074c0:	0003      	movs	r3, r0
 80074c2:	7023      	strb	r3, [r4, #0]
 80074c4:	231f      	movs	r3, #31
 80074c6:	18fb      	adds	r3, r7, r3
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <ProcessCommand+0x4a>
			return ProcessError(errorCode, sendBuffer, resultLength);
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	231f      	movs	r3, #31
 80074d4:	18fb      	adds	r3, r7, r3
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	0018      	movs	r0, r3
 80074da:	f001 f9fd 	bl	80088d8 <ProcessError>
 80074de:	0003      	movs	r3, r0
 80074e0:	e046      	b.n	8007570 <ProcessCommand+0xd8>
	}

	struct Command *calledCommand;

	if(FindCommand(m_message.Command.CommandCode, &calledCommand))
 80074e2:	4b25      	ldr	r3, [pc, #148]	; (8007578 <ProcessCommand+0xe0>)
 80074e4:	885b      	ldrh	r3, [r3, #2]
 80074e6:	2218      	movs	r2, #24
 80074e8:	18ba      	adds	r2, r7, r2
 80074ea:	0011      	movs	r1, r2
 80074ec:	0018      	movs	r0, r3
 80074ee:	f7ff ff93 	bl	8007418 <FindCommand>
 80074f2:	1e03      	subs	r3, r0, #0
 80074f4:	d001      	beq.n	80074fa <ProcessCommand+0x62>
		return CMD_NO_COMMAND;
 80074f6:	2302      	movs	r3, #2
 80074f8:	e03a      	b.n	8007570 <ProcessCommand+0xd8>

	switch(m_message.Function) {
 80074fa:	4b1f      	ldr	r3, [pc, #124]	; (8007578 <ProcessCommand+0xe0>)
 80074fc:	785b      	ldrb	r3, [r3, #1]
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d002      	beq.n	8007508 <ProcessCommand+0x70>
 8007502:	2b06      	cmp	r3, #6
 8007504:	d01c      	beq.n	8007540 <ProcessCommand+0xa8>
 8007506:	e032      	b.n	800756e <ProcessCommand+0xd6>
		case READ: {
			if(calledCommand->ReadFunction == NULL)
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <ProcessCommand+0x7c>
				return CMD_NO_SUBCOMMAND;
 8007510:	2301      	movs	r3, #1
 8007512:	e02d      	b.n	8007570 <ProcessCommand+0xd8>

			uint8_t commandResultLength;
			if(calledCommand->ReadFunction(&m_message,
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	1cd1      	adds	r1, r2, #3
 800751c:	2217      	movs	r2, #23
 800751e:	18ba      	adds	r2, r7, r2
 8007520:	4815      	ldr	r0, [pc, #84]	; (8007578 <ProcessCommand+0xe0>)
 8007522:	4798      	blx	r3
 8007524:	1e03      	subs	r3, r0, #0
 8007526:	d001      	beq.n	800752c <ProcessCommand+0x94>
								 	       sendBuffer + RP_DATA_COUNT_INDEX,
										   &commandResultLength))
				return CMD_ANY_ERROR;
 8007528:	23ff      	movs	r3, #255	; 0xff
 800752a:	e021      	b.n	8007570 <ProcessCommand+0xd8>
			EncodeReplyRead(&m_message, sendBuffer, commandResultLength, resultLength);
 800752c:	2317      	movs	r3, #23
 800752e:	18fb      	adds	r3, r7, r3
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	6879      	ldr	r1, [r7, #4]
 8007536:	4810      	ldr	r0, [pc, #64]	; (8007578 <ProcessCommand+0xe0>)
 8007538:	f001 f91e 	bl	8008778 <EncodeReplyRead>
			return CMD_ALL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e017      	b.n	8007570 <ProcessCommand+0xd8>
		}

		case WRITE:
			if(calledCommand->WriteFunction == NULL)
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <ProcessCommand+0xb4>
				return CMD_NO_SUBCOMMAND;
 8007548:	2301      	movs	r3, #1
 800754a:	e011      	b.n	8007570 <ProcessCommand+0xd8>

			if(calledCommand->WriteFunction(&m_message))
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a09      	ldr	r2, [pc, #36]	; (8007578 <ProcessCommand+0xe0>)
 8007552:	0010      	movs	r0, r2
 8007554:	4798      	blx	r3
 8007556:	1e03      	subs	r3, r0, #0
 8007558:	d001      	beq.n	800755e <ProcessCommand+0xc6>
				return CMD_ANY_ERROR;
 800755a:	23ff      	movs	r3, #255	; 0xff
 800755c:	e008      	b.n	8007570 <ProcessCommand+0xd8>
			EncodeReplyWrite(&m_message, sendBuffer, resultLength);
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	6879      	ldr	r1, [r7, #4]
 8007562:	4b05      	ldr	r3, [pc, #20]	; (8007578 <ProcessCommand+0xe0>)
 8007564:	0018      	movs	r0, r3
 8007566:	f001 f899 	bl	800869c <EncodeReplyWrite>
			return CMD_ALL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	e000      	b.n	8007570 <ProcessCommand+0xd8>
	}

	return CMD_ANY_ERROR;
 800756e:	23ff      	movs	r3, #255	; 0xff
}
 8007570:	0018      	movs	r0, r3
 8007572:	46bd      	mov	sp, r7
 8007574:	b009      	add	sp, #36	; 0x24
 8007576:	bd90      	pop	{r4, r7, pc}
 8007578:	20000384 	.word	0x20000384

0800757c <AddCommand>:

enum CommandErrorCode AddCommand(uint16_t commandCode,
				   	   	   	     ReadCommandFunction readFunction,
								 WriteCommandFunction writeFunction) {
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	230e      	movs	r3, #14
 8007588:	18fb      	adds	r3, r7, r3
 800758a:	1c02      	adds	r2, r0, #0
 800758c:	801a      	strh	r2, [r3, #0]
	if(m_registeredCommandsCount >= COMMANDS_NUMBER)
 800758e:	4b17      	ldr	r3, [pc, #92]	; (80075ec <AddCommand+0x70>)
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	2b0e      	cmp	r3, #14
 8007594:	d901      	bls.n	800759a <AddCommand+0x1e>
		return CMD_ANY_ERROR;
 8007596:	23ff      	movs	r3, #255	; 0xff
 8007598:	e023      	b.n	80075e2 <AddCommand+0x66>

	if(readFunction == NULL && writeFunction == NULL)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <AddCommand+0x2e>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <AddCommand+0x2e>
		return CMD_ANY_ERROR;
 80075a6:	23ff      	movs	r3, #255	; 0xff
 80075a8:	e01b      	b.n	80075e2 <AddCommand+0x66>

	struct Command *nextCommand = &m_commands[m_registeredCommandsCount];
 80075aa:	4b10      	ldr	r3, [pc, #64]	; (80075ec <AddCommand+0x70>)
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	001a      	movs	r2, r3
 80075b0:	0013      	movs	r3, r2
 80075b2:	005b      	lsls	r3, r3, #1
 80075b4:	189b      	adds	r3, r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4a0d      	ldr	r2, [pc, #52]	; (80075f0 <AddCommand+0x74>)
 80075ba:	189b      	adds	r3, r3, r2
 80075bc:	617b      	str	r3, [r7, #20]

	nextCommand->CommandCode = commandCode;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	220e      	movs	r2, #14
 80075c2:	18ba      	adds	r2, r7, r2
 80075c4:	8812      	ldrh	r2, [r2, #0]
 80075c6:	811a      	strh	r2, [r3, #8]
	nextCommand->ReadFunction = readFunction;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	605a      	str	r2, [r3, #4]
	nextCommand->WriteFunction = writeFunction;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	601a      	str	r2, [r3, #0]

	m_registeredCommandsCount++;
 80075d4:	4b05      	ldr	r3, [pc, #20]	; (80075ec <AddCommand+0x70>)
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	3301      	adds	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	4b03      	ldr	r3, [pc, #12]	; (80075ec <AddCommand+0x70>)
 80075de:	801a      	strh	r2, [r3, #0]

	return CMD_ALL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	0018      	movs	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	b006      	add	sp, #24
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	46c0      	nop			; (mov r8, r8)
 80075ec:	200002cc 	.word	0x200002cc
 80075f0:	200002d0 	.word	0x200002d0

080075f4 <C_R_Ping>:
struct LEDDriverHandle LEDDrivers[4];
uint8_t LEDDriversCounter = 0;

//
uint8_t C_R_Ping(struct ModbusRecvMessage *msg, uint8_t *result,
		uint8_t *resultLength) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
	*resultLength = 0;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]

	return ALL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	0018      	movs	r0, r3
 800760a:	46bd      	mov	sp, r7
 800760c:	b004      	add	sp, #16
 800760e:	bd80      	pop	{r7, pc}

08007610 <C_W_ChangeSlaveId>:
//

//
uint8_t C_W_ChangeSlaveId(struct ModbusRecvMessage *msg) {
 8007610:	b5b0      	push	{r4, r5, r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	if(msg->DataLength != sizeof(uint8_t))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	791b      	ldrb	r3, [r3, #4]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d001      	beq.n	8007624 <C_W_ChangeSlaveId+0x14>
		return ANY_ERROR;
 8007620:	23ff      	movs	r3, #255	; 0xff
 8007622:	e027      	b.n	8007674 <C_W_ChangeSlaveId+0x64>

	uint8_t newId = msg->Data[0];
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	230f      	movs	r3, #15
 800762a:	18fb      	adds	r3, r7, r3
 800762c:	7812      	ldrb	r2, [r2, #0]
 800762e:	701a      	strb	r2, [r3, #0]

	if(newId == 0)
 8007630:	230f      	movs	r3, #15
 8007632:	18fb      	adds	r3, r7, r3
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <C_W_ChangeSlaveId+0x2e>
		return ANY_ERROR;
 800763a:	23ff      	movs	r3, #255	; 0xff
 800763c:	e01a      	b.n	8007674 <C_W_ChangeSlaveId+0x64>

	StartChangeFlashParam();
 800763e:	f001 fd9b 	bl	8009178 <StartChangeFlashParam>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, (uint32_t)&ParamsUnion.Params.F_SlaveId, (uint16_t)newId);
 8007642:	490e      	ldr	r1, [pc, #56]	; (800767c <C_W_ChangeSlaveId+0x6c>)
 8007644:	230f      	movs	r3, #15
 8007646:	18fb      	adds	r3, r7, r3
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	b2db      	uxtb	r3, r3
 800764c:	001c      	movs	r4, r3
 800764e:	2300      	movs	r3, #0
 8007650:	001d      	movs	r5, r3
 8007652:	0022      	movs	r2, r4
 8007654:	002b      	movs	r3, r5
 8007656:	2001      	movs	r0, #1
 8007658:	f7fb fb32 	bl	8002cc0 <HAL_FLASH_Program>

	EndChangeFlashParam((void *)&ParamsUnion.Params.F_SlaveId, sizeof(uint16_t));
 800765c:	4b07      	ldr	r3, [pc, #28]	; (800767c <C_W_ChangeSlaveId+0x6c>)
 800765e:	2102      	movs	r1, #2
 8007660:	0018      	movs	r0, r3
 8007662:	f001 fd9d 	bl	80091a0 <EndChangeFlashParam>

	SlaveId = newId;
 8007666:	230f      	movs	r3, #15
 8007668:	18fb      	adds	r3, r7, r3
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	b29a      	uxth	r2, r3
 800766e:	4b04      	ldr	r3, [pc, #16]	; (8007680 <C_W_ChangeSlaveId+0x70>)
 8007670:	801a      	strh	r2, [r3, #0]

	return ALL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	0018      	movs	r0, r3
 8007676:	46bd      	mov	sp, r7
 8007678:	b004      	add	sp, #16
 800767a:	bdb0      	pop	{r4, r5, r7, pc}
 800767c:	0800f808 	.word	0x0800f808
 8007680:	20000868 	.word	0x20000868

08007684 <C_R_InitializeBESCDevice>:
//

//
uint8_t C_R_InitializeBESCDevice(struct ModbusRecvMessage *msg, uint8_t *result,
		uint8_t *resultLength) {
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
	if (msg->DataLength != sizeof(enum TIMChannel))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	791b      	ldrb	r3, [r3, #4]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d001      	beq.n	800769c <C_R_InitializeBESCDevice+0x18>
		return ANY_ERROR;
 8007698:	23ff      	movs	r3, #255	; 0xff
 800769a:	e01a      	b.n	80076d2 <C_R_InitializeBESCDevice+0x4e>

	if (InitializeBESCDriver(*(enum TIMChannel *) msg->Data,
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	7818      	ldrb	r0, [r3, #0]
			&BESCDrivers[BESCDriversCounter]))
 80076a2:	4b0e      	ldr	r3, [pc, #56]	; (80076dc <C_R_InitializeBESCDevice+0x58>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
	if (InitializeBESCDriver(*(enum TIMChannel *) msg->Data,
 80076a6:	009a      	lsls	r2, r3, #2
 80076a8:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <C_R_InitializeBESCDevice+0x5c>)
 80076aa:	18d3      	adds	r3, r2, r3
 80076ac:	0019      	movs	r1, r3
 80076ae:	f001 f97d 	bl	80089ac <InitializeBESCDriver>
 80076b2:	1e03      	subs	r3, r0, #0
 80076b4:	d001      	beq.n	80076ba <C_R_InitializeBESCDevice+0x36>
		return ANY_ERROR;
 80076b6:	23ff      	movs	r3, #255	; 0xff
 80076b8:	e00b      	b.n	80076d2 <C_R_InitializeBESCDevice+0x4e>

	*result = BESCDriversCounter++;
 80076ba:	4b08      	ldr	r3, [pc, #32]	; (80076dc <C_R_InitializeBESCDevice+0x58>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	b2d1      	uxtb	r1, r2
 80076c2:	4a06      	ldr	r2, [pc, #24]	; (80076dc <C_R_InitializeBESCDevice+0x58>)
 80076c4:	7011      	strb	r1, [r2, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	7013      	strb	r3, [r2, #0]
	*resultLength = 1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	701a      	strb	r2, [r3, #0]

	return ALL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	0018      	movs	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	b004      	add	sp, #16
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	20000390 	.word	0x20000390
 80076e0:	200007e8 	.word	0x200007e8

080076e4 <C_R_InitializeLEDDevice>:
//

//
uint8_t C_R_InitializeLEDDevice(struct ModbusRecvMessage *msg, uint8_t *result,
		uint8_t *resultLength) {
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
	if (msg->DataLength != sizeof(enum TIMChannel))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	791b      	ldrb	r3, [r3, #4]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d001      	beq.n	80076fc <C_R_InitializeLEDDevice+0x18>
		return ANY_ERROR;
 80076f8:	23ff      	movs	r3, #255	; 0xff
 80076fa:	e01a      	b.n	8007732 <C_R_InitializeLEDDevice+0x4e>

	if (InitializeLEDDriver(*(enum TIMChannel *) msg->Data,
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	7818      	ldrb	r0, [r3, #0]
			&LEDDrivers[LEDDriversCounter]))
 8007702:	4b0e      	ldr	r3, [pc, #56]	; (800773c <C_R_InitializeLEDDevice+0x58>)
 8007704:	781b      	ldrb	r3, [r3, #0]
	if (InitializeLEDDriver(*(enum TIMChannel *) msg->Data,
 8007706:	009a      	lsls	r2, r3, #2
 8007708:	4b0d      	ldr	r3, [pc, #52]	; (8007740 <C_R_InitializeLEDDevice+0x5c>)
 800770a:	18d3      	adds	r3, r2, r3
 800770c:	0019      	movs	r1, r3
 800770e:	f001 f99f 	bl	8008a50 <InitializeLEDDriver>
 8007712:	1e03      	subs	r3, r0, #0
 8007714:	d001      	beq.n	800771a <C_R_InitializeLEDDevice+0x36>
		return ANY_ERROR;
 8007716:	23ff      	movs	r3, #255	; 0xff
 8007718:	e00b      	b.n	8007732 <C_R_InitializeLEDDevice+0x4e>

	*result = LEDDriversCounter++;
 800771a:	4b08      	ldr	r3, [pc, #32]	; (800773c <C_R_InitializeLEDDevice+0x58>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	b2d1      	uxtb	r1, r2
 8007722:	4a06      	ldr	r2, [pc, #24]	; (800773c <C_R_InitializeLEDDevice+0x58>)
 8007724:	7011      	strb	r1, [r2, #0]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	7013      	strb	r3, [r2, #0]
	*resultLength = 1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	701a      	strb	r2, [r3, #0]

	return ALL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	0018      	movs	r0, r3
 8007734:	46bd      	mov	sp, r7
 8007736:	b004      	add	sp, #16
 8007738:	bd80      	pop	{r7, pc}
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	20000392 	.word	0x20000392
 8007740:	200007d8 	.word	0x200007d8

08007744 <C_R_InitializeBCSDevice>:
//

//
uint8_t C_R_InitializeBCSDevice(struct ModbusRecvMessage *msg, uint8_t *result,
		uint8_t *resultLength) {
 8007744:	b590      	push	{r4, r7, lr}
 8007746:	b08b      	sub	sp, #44	; 0x2c
 8007748:	af02      	add	r7, sp, #8
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
	if (msg->DataLength
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	791b      	ldrb	r3, [r3, #4]
 8007754:	2b04      	cmp	r3, #4
 8007756:	d001      	beq.n	800775c <C_R_InitializeBCSDevice+0x18>
			!= sizeof(enum TIMChannel) + 3 * sizeof(enum GPIOChannel))
		return ANY_ERROR;
 8007758:	23ff      	movs	r3, #255	; 0xff
 800775a:	e05c      	b.n	8007816 <C_R_InitializeBCSDevice+0xd2>

	uint8_t *data = msg->Data;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	61fb      	str	r3, [r7, #28]

	enum TIMChannel timChannel = (enum TIMChannel) data[0];
 8007762:	231b      	movs	r3, #27
 8007764:	18fb      	adds	r3, r7, r3
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	7812      	ldrb	r2, [r2, #0]
 800776a:	701a      	strb	r2, [r3, #0]
	enum GPIOChannel directionChannel = (enum GPIOChannel) data[1];
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	231a      	movs	r3, #26
 8007772:	18fb      	adds	r3, r7, r3
 8007774:	7812      	ldrb	r2, [r2, #0]
 8007776:	701a      	strb	r2, [r3, #0]
	enum GPIOChannel disableChannel = (enum GPIOChannel) data[2];
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	1c9a      	adds	r2, r3, #2
 800777c:	2319      	movs	r3, #25
 800777e:	18fb      	adds	r3, r7, r3
 8007780:	7812      	ldrb	r2, [r2, #0]
 8007782:	701a      	strb	r2, [r3, #0]
	enum GPIOChannel terminalChannel = (enum GPIOChannel) data[3];
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	1cda      	adds	r2, r3, #3
 8007788:	2318      	movs	r3, #24
 800778a:	18fb      	adds	r3, r7, r3
 800778c:	7812      	ldrb	r2, [r2, #0]
 800778e:	701a      	strb	r2, [r3, #0]

	if (directionChannel == disableChannel || disableChannel == terminalChannel)
 8007790:	231a      	movs	r3, #26
 8007792:	18fa      	adds	r2, r7, r3
 8007794:	2319      	movs	r3, #25
 8007796:	18fb      	adds	r3, r7, r3
 8007798:	7812      	ldrb	r2, [r2, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d007      	beq.n	80077b0 <C_R_InitializeBCSDevice+0x6c>
 80077a0:	2319      	movs	r3, #25
 80077a2:	18fa      	adds	r2, r7, r3
 80077a4:	2318      	movs	r3, #24
 80077a6:	18fb      	adds	r3, r7, r3
 80077a8:	7812      	ldrb	r2, [r2, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d101      	bne.n	80077b4 <C_R_InitializeBCSDevice+0x70>
		return ANY_ERROR;
 80077b0:	23ff      	movs	r3, #255	; 0xff
 80077b2:	e030      	b.n	8007816 <C_R_InitializeBCSDevice+0xd2>

	struct BCSDriverHandle *handle = &BCSDrivers[BCSDriversCounter];
 80077b4:	4b1a      	ldr	r3, [pc, #104]	; (8007820 <C_R_InitializeBCSDevice+0xdc>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	011a      	lsls	r2, r3, #4
 80077ba:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <C_R_InitializeBCSDevice+0xe0>)
 80077bc:	18d3      	adds	r3, r2, r3
 80077be:	617b      	str	r3, [r7, #20]
	if (InitializeBCSDriver(timChannel, directionChannel, disableChannel,
 80077c0:	2318      	movs	r3, #24
 80077c2:	18fb      	adds	r3, r7, r3
 80077c4:	781c      	ldrb	r4, [r3, #0]
 80077c6:	2319      	movs	r3, #25
 80077c8:	18fb      	adds	r3, r7, r3
 80077ca:	781a      	ldrb	r2, [r3, #0]
 80077cc:	231a      	movs	r3, #26
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	7819      	ldrb	r1, [r3, #0]
 80077d2:	231b      	movs	r3, #27
 80077d4:	18fb      	adds	r3, r7, r3
 80077d6:	7818      	ldrb	r0, [r3, #0]
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	0023      	movs	r3, r4
 80077de:	f001 f977 	bl	8008ad0 <InitializeBCSDriver>
 80077e2:	1e03      	subs	r3, r0, #0
 80077e4:	d001      	beq.n	80077ea <C_R_InitializeBCSDevice+0xa6>
			terminalChannel, handle))
		return ANY_ERROR;
 80077e6:	23ff      	movs	r3, #255	; 0xff
 80077e8:	e015      	b.n	8007816 <C_R_InitializeBCSDevice+0xd2>

	//
	if (handle->PWMTIM->ComplementTIM->Instance == TIM1)
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a0d      	ldr	r2, [pc, #52]	; (8007828 <C_R_InitializeBCSDevice+0xe4>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d102      	bne.n	80077fe <C_R_InitializeBCSDevice+0xba>
		TIM1BCS = handle;
 80077f8:	4b0c      	ldr	r3, [pc, #48]	; (800782c <C_R_InitializeBCSDevice+0xe8>)
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	601a      	str	r2, [r3, #0]
	//

	*result = BCSDriversCounter++;
 80077fe:	4b08      	ldr	r3, [pc, #32]	; (8007820 <C_R_InitializeBCSDevice+0xdc>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	b2d1      	uxtb	r1, r2
 8007806:	4a06      	ldr	r2, [pc, #24]	; (8007820 <C_R_InitializeBCSDevice+0xdc>)
 8007808:	7011      	strb	r1, [r2, #0]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	7013      	strb	r3, [r2, #0]
	*resultLength = 1;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	701a      	strb	r2, [r3, #0]

	return ALL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	0018      	movs	r0, r3
 8007818:	46bd      	mov	sp, r7
 800781a:	b009      	add	sp, #36	; 0x24
 800781c:	bd90      	pop	{r4, r7, pc}
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	20000391 	.word	0x20000391
 8007824:	200007fc 	.word	0x200007fc
 8007828:	40012c00 	.word	0x40012c00
 800782c:	200007f8 	.word	0x200007f8

08007830 <C_W_BESCChangeSpeed>:
//

//
uint8_t C_W_BESCChangeSpeed(struct ModbusRecvMessage *msg) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != sizeof(uint8_t) + sizeof(double))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	791b      	ldrb	r3, [r3, #4]
 800783c:	2b09      	cmp	r3, #9
 800783e:	d001      	beq.n	8007844 <C_W_BESCChangeSpeed+0x14>
		return ANY_ERROR;
 8007840:	23ff      	movs	r3, #255	; 0xff
 8007842:	e020      	b.n	8007886 <C_W_BESCChangeSpeed+0x56>

	uint8_t bescDriverId = msg->Data[0];
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	230f      	movs	r3, #15
 800784a:	18fb      	adds	r3, r7, r3
 800784c:	7812      	ldrb	r2, [r2, #0]
 800784e:	701a      	strb	r2, [r3, #0]

	if (bescDriverId >= BESCDriversCounter)
 8007850:	4b0f      	ldr	r3, [pc, #60]	; (8007890 <C_W_BESCChangeSpeed+0x60>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	220f      	movs	r2, #15
 8007856:	18ba      	adds	r2, r7, r2
 8007858:	7812      	ldrb	r2, [r2, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d301      	bcc.n	8007862 <C_W_BESCChangeSpeed+0x32>
		return ANY_ERROR;
 800785e:	23ff      	movs	r3, #255	; 0xff
 8007860:	e011      	b.n	8007886 <C_W_BESCChangeSpeed+0x56>

	if (BESCDriverChangeSpeed(&BESCDrivers[bescDriverId],
 8007862:	230f      	movs	r3, #15
 8007864:	18fb      	adds	r3, r7, r3
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	009a      	lsls	r2, r3, #2
 800786a:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <C_W_BESCChangeSpeed+0x64>)
 800786c:	18d2      	adds	r2, r2, r3
			&(msg->Data[sizeof(uint8_t)])))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
	if (BESCDriverChangeSpeed(&BESCDrivers[bescDriverId],
 8007872:	3301      	adds	r3, #1
 8007874:	0019      	movs	r1, r3
 8007876:	0010      	movs	r0, r2
 8007878:	f001 fa26 	bl	8008cc8 <BESCDriverChangeSpeed>
 800787c:	1e03      	subs	r3, r0, #0
 800787e:	d001      	beq.n	8007884 <C_W_BESCChangeSpeed+0x54>
		return ANY_ERROR;
 8007880:	23ff      	movs	r3, #255	; 0xff
 8007882:	e000      	b.n	8007886 <C_W_BESCChangeSpeed+0x56>

	return ALL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	0018      	movs	r0, r3
 8007888:	46bd      	mov	sp, r7
 800788a:	b004      	add	sp, #16
 800788c:	bd80      	pop	{r7, pc}
 800788e:	46c0      	nop			; (mov r8, r8)
 8007890:	20000390 	.word	0x20000390
 8007894:	200007e8 	.word	0x200007e8

08007898 <C_W_LEDChangeBrightness>:
//

//
uint8_t C_W_LEDChangeBrightness(struct ModbusRecvMessage *msg) {
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != sizeof(uint8_t) + sizeof(double))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	791b      	ldrb	r3, [r3, #4]
 80078a4:	2b09      	cmp	r3, #9
 80078a6:	d001      	beq.n	80078ac <C_W_LEDChangeBrightness+0x14>
		return ANY_ERROR;
 80078a8:	23ff      	movs	r3, #255	; 0xff
 80078aa:	e020      	b.n	80078ee <C_W_LEDChangeBrightness+0x56>

	uint8_t ledDriverId = msg->Data[0];
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	230f      	movs	r3, #15
 80078b2:	18fb      	adds	r3, r7, r3
 80078b4:	7812      	ldrb	r2, [r2, #0]
 80078b6:	701a      	strb	r2, [r3, #0]

	if (ledDriverId >= LEDDriversCounter)
 80078b8:	4b0f      	ldr	r3, [pc, #60]	; (80078f8 <C_W_LEDChangeBrightness+0x60>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	220f      	movs	r2, #15
 80078be:	18ba      	adds	r2, r7, r2
 80078c0:	7812      	ldrb	r2, [r2, #0]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d301      	bcc.n	80078ca <C_W_LEDChangeBrightness+0x32>
		return ANY_ERROR;
 80078c6:	23ff      	movs	r3, #255	; 0xff
 80078c8:	e011      	b.n	80078ee <C_W_LEDChangeBrightness+0x56>

	if (LEDDriverChangeBrightness(&LEDDrivers[ledDriverId],
 80078ca:	230f      	movs	r3, #15
 80078cc:	18fb      	adds	r3, r7, r3
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009a      	lsls	r2, r3, #2
 80078d2:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <C_W_LEDChangeBrightness+0x64>)
 80078d4:	18d2      	adds	r2, r2, r3
			&(msg->Data[sizeof(uint8_t)])))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689b      	ldr	r3, [r3, #8]
	if (LEDDriverChangeBrightness(&LEDDrivers[ledDriverId],
 80078da:	3301      	adds	r3, #1
 80078dc:	0019      	movs	r1, r3
 80078de:	0010      	movs	r0, r2
 80078e0:	f001 fa62 	bl	8008da8 <LEDDriverChangeBrightness>
 80078e4:	1e03      	subs	r3, r0, #0
 80078e6:	d001      	beq.n	80078ec <C_W_LEDChangeBrightness+0x54>
		return ANY_ERROR;
 80078e8:	23ff      	movs	r3, #255	; 0xff
 80078ea:	e000      	b.n	80078ee <C_W_LEDChangeBrightness+0x56>

	return ALL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	0018      	movs	r0, r3
 80078f0:	46bd      	mov	sp, r7
 80078f2:	b004      	add	sp, #16
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	20000392 	.word	0x20000392
 80078fc:	200007d8 	.word	0x200007d8

08007900 <C_W_BCS_ChangeSpeed>:
//

//
uint8_t C_W_BCS_ChangeSpeed(struct ModbusRecvMessage *msg) {
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != sizeof(uint8_t) + sizeof(double))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	791b      	ldrb	r3, [r3, #4]
 800790c:	2b09      	cmp	r3, #9
 800790e:	d001      	beq.n	8007914 <C_W_BCS_ChangeSpeed+0x14>
		return ANY_ERROR;
 8007910:	23ff      	movs	r3, #255	; 0xff
 8007912:	e020      	b.n	8007956 <C_W_BCS_ChangeSpeed+0x56>

	uint8_t bcsDriverId = msg->Data[0];
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	230f      	movs	r3, #15
 800791a:	18fb      	adds	r3, r7, r3
 800791c:	7812      	ldrb	r2, [r2, #0]
 800791e:	701a      	strb	r2, [r3, #0]

	if (bcsDriverId >= BCSDriversCounter)
 8007920:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <C_W_BCS_ChangeSpeed+0x60>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	220f      	movs	r2, #15
 8007926:	18ba      	adds	r2, r7, r2
 8007928:	7812      	ldrb	r2, [r2, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d301      	bcc.n	8007932 <C_W_BCS_ChangeSpeed+0x32>
		return ANY_ERROR;
 800792e:	23ff      	movs	r3, #255	; 0xff
 8007930:	e011      	b.n	8007956 <C_W_BCS_ChangeSpeed+0x56>

	if (BCSDriverChangeSpeed(&BCSDrivers[bcsDriverId],
 8007932:	230f      	movs	r3, #15
 8007934:	18fb      	adds	r3, r7, r3
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	011a      	lsls	r2, r3, #4
 800793a:	4b0a      	ldr	r3, [pc, #40]	; (8007964 <C_W_BCS_ChangeSpeed+0x64>)
 800793c:	18d2      	adds	r2, r2, r3
			&(msg->Data[sizeof(uint8_t)])))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	689b      	ldr	r3, [r3, #8]
	if (BCSDriverChangeSpeed(&BCSDrivers[bcsDriverId],
 8007942:	3301      	adds	r3, #1
 8007944:	0019      	movs	r1, r3
 8007946:	0010      	movs	r0, r2
 8007948:	f001 fa8a 	bl	8008e60 <BCSDriverChangeSpeed>
 800794c:	1e03      	subs	r3, r0, #0
 800794e:	d001      	beq.n	8007954 <C_W_BCS_ChangeSpeed+0x54>
		return ANY_ERROR;
 8007950:	23ff      	movs	r3, #255	; 0xff
 8007952:	e000      	b.n	8007956 <C_W_BCS_ChangeSpeed+0x56>

	return ALL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	0018      	movs	r0, r3
 8007958:	46bd      	mov	sp, r7
 800795a:	b004      	add	sp, #16
 800795c:	bd80      	pop	{r7, pc}
 800795e:	46c0      	nop			; (mov r8, r8)
 8007960:	20000391 	.word	0x20000391
 8007964:	200007fc 	.word	0x200007fc

08007968 <C_W_BCS_Move>:
//

//
uint8_t C_W_BCS_Move(struct ModbusRecvMessage *msg) {
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != 2 * sizeof(uint8_t) + sizeof(uint16_t))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	791b      	ldrb	r3, [r3, #4]
 8007974:	2b04      	cmp	r3, #4
 8007976:	d001      	beq.n	800797c <C_W_BCS_Move+0x14>
		return ANY_ERROR;
 8007978:	23ff      	movs	r3, #255	; 0xff
 800797a:	e020      	b.n	80079be <C_W_BCS_Move+0x56>

	uint8_t bcsDriverId = msg->Data[0];
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	230f      	movs	r3, #15
 8007982:	18fb      	adds	r3, r7, r3
 8007984:	7812      	ldrb	r2, [r2, #0]
 8007986:	701a      	strb	r2, [r3, #0]

	if (bcsDriverId >= BCSDriversCounter)
 8007988:	4b0f      	ldr	r3, [pc, #60]	; (80079c8 <C_W_BCS_Move+0x60>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	220f      	movs	r2, #15
 800798e:	18ba      	adds	r2, r7, r2
 8007990:	7812      	ldrb	r2, [r2, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d301      	bcc.n	800799a <C_W_BCS_Move+0x32>
		return ANY_ERROR;
 8007996:	23ff      	movs	r3, #255	; 0xff
 8007998:	e011      	b.n	80079be <C_W_BCS_Move+0x56>

	if (BCSDriverMove(&BCSDrivers[bcsDriverId], &(msg->Data[sizeof(uint8_t)])))
 800799a:	230f      	movs	r3, #15
 800799c:	18fb      	adds	r3, r7, r3
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	011a      	lsls	r2, r3, #4
 80079a2:	4b0a      	ldr	r3, [pc, #40]	; (80079cc <C_W_BCS_Move+0x64>)
 80079a4:	18d2      	adds	r2, r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	3301      	adds	r3, #1
 80079ac:	0019      	movs	r1, r3
 80079ae:	0010      	movs	r0, r2
 80079b0:	f001 fac4 	bl	8008f3c <BCSDriverMove>
 80079b4:	1e03      	subs	r3, r0, #0
 80079b6:	d001      	beq.n	80079bc <C_W_BCS_Move+0x54>
		return ANY_ERROR;
 80079b8:	23ff      	movs	r3, #255	; 0xff
 80079ba:	e000      	b.n	80079be <C_W_BCS_Move+0x56>

	return ALL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	0018      	movs	r0, r3
 80079c0:	46bd      	mov	sp, r7
 80079c2:	b004      	add	sp, #16
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	20000391 	.word	0x20000391
 80079cc:	200007fc 	.word	0x200007fc

080079d0 <C_W_BCS_MoveToEnd>:
//

//
uint8_t C_W_BCS_MoveToEnd(struct ModbusRecvMessage *msg) {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != 2 * sizeof(uint8_t))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	791b      	ldrb	r3, [r3, #4]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d001      	beq.n	80079e4 <C_W_BCS_MoveToEnd+0x14>
		return ANY_ERROR;
 80079e0:	23ff      	movs	r3, #255	; 0xff
 80079e2:	e020      	b.n	8007a26 <C_W_BCS_MoveToEnd+0x56>

	uint8_t bcsDriverId = msg->Data[0];
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	230f      	movs	r3, #15
 80079ea:	18fb      	adds	r3, r7, r3
 80079ec:	7812      	ldrb	r2, [r2, #0]
 80079ee:	701a      	strb	r2, [r3, #0]

	if (bcsDriverId >= BCSDriversCounter)
 80079f0:	4b0f      	ldr	r3, [pc, #60]	; (8007a30 <C_W_BCS_MoveToEnd+0x60>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	220f      	movs	r2, #15
 80079f6:	18ba      	adds	r2, r7, r2
 80079f8:	7812      	ldrb	r2, [r2, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d301      	bcc.n	8007a02 <C_W_BCS_MoveToEnd+0x32>
		return ANY_ERROR;
 80079fe:	23ff      	movs	r3, #255	; 0xff
 8007a00:	e011      	b.n	8007a26 <C_W_BCS_MoveToEnd+0x56>

	if (BCSDriverMoveToEnd(&BCSDrivers[bcsDriverId],
 8007a02:	230f      	movs	r3, #15
 8007a04:	18fb      	adds	r3, r7, r3
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	011a      	lsls	r2, r3, #4
 8007a0a:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <C_W_BCS_MoveToEnd+0x64>)
 8007a0c:	18d2      	adds	r2, r2, r3
			&(msg->Data[sizeof(uint8_t)])))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	689b      	ldr	r3, [r3, #8]
	if (BCSDriverMoveToEnd(&BCSDrivers[bcsDriverId],
 8007a12:	3301      	adds	r3, #1
 8007a14:	0019      	movs	r1, r3
 8007a16:	0010      	movs	r0, r2
 8007a18:	f001 faec 	bl	8008ff4 <BCSDriverMoveToEnd>
 8007a1c:	1e03      	subs	r3, r0, #0
 8007a1e:	d001      	beq.n	8007a24 <C_W_BCS_MoveToEnd+0x54>
		return ANY_ERROR;
 8007a20:	23ff      	movs	r3, #255	; 0xff
 8007a22:	e000      	b.n	8007a26 <C_W_BCS_MoveToEnd+0x56>

	return ALL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	0018      	movs	r0, r3
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	b004      	add	sp, #16
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	20000391 	.word	0x20000391
 8007a34:	200007fc 	.word	0x200007fc

08007a38 <C_R_MS5837_CheckConnection>:
//

//
uint8_t C_R_MS5837_CheckConnection(struct ModbusRecvMessage *msg,
		uint8_t *result, uint8_t *resultLength) {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
	*resultLength = 1;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	701a      	strb	r2, [r3, #0]
	*result = MS5837IsConnected();
 8007a4a:	f7fe ff9d 	bl	8006988 <MS5837IsConnected>
 8007a4e:	0003      	movs	r3, r0
 8007a50:	001a      	movs	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	701a      	strb	r2, [r3, #0]

	return ALL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	0018      	movs	r0, r3
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	b004      	add	sp, #16
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <C_R_MS5837_ReadTemp>:

uint8_t C_R_MS5837_ReadTemp(struct ModbusRecvMessage *msg, uint8_t *result,
		uint8_t *resultLength) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
	if (msg->DataLength != sizeof(enum MS5837D2OSRCommand))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	791b      	ldrb	r3, [r3, #4]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d001      	beq.n	8007a78 <C_R_MS5837_ReadTemp+0x18>
		return ANY_ERROR;
 8007a74:	23ff      	movs	r3, #255	; 0xff
 8007a76:	e01d      	b.n	8007ab4 <C_R_MS5837_ReadTemp+0x54>

	enum MS5837D2OSRCommand d2osr = msg->Data[0];
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	2317      	movs	r3, #23
 8007a7e:	18fb      	adds	r3, r7, r3
 8007a80:	7812      	ldrb	r2, [r2, #0]
 8007a82:	701a      	strb	r2, [r3, #0]
	float temp;

	if (MS5837ReadTemperature(d2osr, &temp))
 8007a84:	2310      	movs	r3, #16
 8007a86:	18fa      	adds	r2, r7, r3
 8007a88:	2317      	movs	r3, #23
 8007a8a:	18fb      	adds	r3, r7, r3
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	0011      	movs	r1, r2
 8007a90:	0018      	movs	r0, r3
 8007a92:	f7fe ff9d 	bl	80069d0 <MS5837ReadTemperature>
 8007a96:	1e03      	subs	r3, r0, #0
 8007a98:	d001      	beq.n	8007a9e <C_R_MS5837_ReadTemp+0x3e>
		return ANY_ERROR;
 8007a9a:	23ff      	movs	r3, #255	; 0xff
 8007a9c:	e00a      	b.n	8007ab4 <C_R_MS5837_ReadTemp+0x54>

	*resultLength = sizeof(float);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2204      	movs	r2, #4
 8007aa2:	701a      	strb	r2, [r3, #0]
	memcpy(result, &temp, sizeof(float));
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	18f9      	adds	r1, r7, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2204      	movs	r2, #4
 8007aac:	0018      	movs	r0, r3
 8007aae:	f002 f961 	bl	8009d74 <memcpy>

	return ALL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	b006      	add	sp, #24
 8007aba:	bd80      	pop	{r7, pc}

08007abc <C_R_MS5837_ReadTempAndPress>:

uint8_t C_R_MS5837_ReadTempAndPress(struct ModbusRecvMessage *msg,
		uint8_t *result, uint8_t *resultLength) {
 8007abc:	b590      	push	{r4, r7, lr}
 8007abe:	b089      	sub	sp, #36	; 0x24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
	if (msg->DataLength
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	791b      	ldrb	r3, [r3, #4]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d001      	beq.n	8007ad4 <C_R_MS5837_ReadTempAndPress+0x18>
			!= sizeof(enum MS5837D2OSRCommand)
					+ sizeof(enum MS5837D1OSRCommand))
		return ANY_ERROR;
 8007ad0:	23ff      	movs	r3, #255	; 0xff
 8007ad2:	e02f      	b.n	8007b34 <C_R_MS5837_ReadTempAndPress+0x78>

	enum MS5837D1OSRCommand d1osr = msg->Data[0];
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	231f      	movs	r3, #31
 8007ada:	18fb      	adds	r3, r7, r3
 8007adc:	7812      	ldrb	r2, [r2, #0]
 8007ade:	701a      	strb	r2, [r3, #0]
	enum MS5837D2OSRCommand d2osr = msg->Data[1];
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	231e      	movs	r3, #30
 8007ae6:	18fb      	adds	r3, r7, r3
 8007ae8:	7852      	ldrb	r2, [r2, #1]
 8007aea:	701a      	strb	r2, [r3, #0]
	float temp;
	float press;

	if (MS5837ReadTemperatureAndPressure(d1osr, d2osr, &temp, &press))
 8007aec:	2314      	movs	r3, #20
 8007aee:	18fc      	adds	r4, r7, r3
 8007af0:	2318      	movs	r3, #24
 8007af2:	18fa      	adds	r2, r7, r3
 8007af4:	231e      	movs	r3, #30
 8007af6:	18fb      	adds	r3, r7, r3
 8007af8:	7819      	ldrb	r1, [r3, #0]
 8007afa:	231f      	movs	r3, #31
 8007afc:	18fb      	adds	r3, r7, r3
 8007afe:	7818      	ldrb	r0, [r3, #0]
 8007b00:	0023      	movs	r3, r4
 8007b02:	f7ff f857 	bl	8006bb4 <MS5837ReadTemperatureAndPressure>
 8007b06:	1e03      	subs	r3, r0, #0
 8007b08:	d001      	beq.n	8007b0e <C_R_MS5837_ReadTempAndPress+0x52>
		return ANY_ERROR;
 8007b0a:	23ff      	movs	r3, #255	; 0xff
 8007b0c:	e012      	b.n	8007b34 <C_R_MS5837_ReadTempAndPress+0x78>

	*resultLength = 2*sizeof(float);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2208      	movs	r2, #8
 8007b12:	701a      	strb	r2, [r3, #0]
	memcpy(result, &temp, sizeof(float));
 8007b14:	2318      	movs	r3, #24
 8007b16:	18f9      	adds	r1, r7, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2204      	movs	r2, #4
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	f002 f929 	bl	8009d74 <memcpy>
	memcpy(result + sizeof(float), &press, sizeof(float));
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	3304      	adds	r3, #4
 8007b26:	2214      	movs	r2, #20
 8007b28:	18b9      	adds	r1, r7, r2
 8007b2a:	2204      	movs	r2, #4
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	f002 f921 	bl	8009d74 <memcpy>

	return ALL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	0018      	movs	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	b009      	add	sp, #36	; 0x24
 8007b3a:	bd90      	pop	{r4, r7, pc}

08007b3c <InitializeCommands>:
//

void InitializeCommands() {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
	InitializeModbus();
 8007b40:	f000 feda 	bl	80088f8 <InitializeModbus>
	InitializeDriversWorker();
 8007b44:	f000 fef4 	bl	8008930 <InitializeDriversWorker>
	MS5837Init();
 8007b48:	f7fe ff0c 	bl	8006964 <MS5837Init>

	AddCommand(0x00, &C_R_Ping, NULL);
 8007b4c:	4b28      	ldr	r3, [pc, #160]	; (8007bf0 <InitializeCommands+0xb4>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	0019      	movs	r1, r3
 8007b52:	2000      	movs	r0, #0
 8007b54:	f7ff fd12 	bl	800757c <AddCommand>
	AddCommand(0x01, NULL, &C_W_ChangeSlaveId);
 8007b58:	4b26      	ldr	r3, [pc, #152]	; (8007bf4 <InitializeCommands+0xb8>)
 8007b5a:	001a      	movs	r2, r3
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	2001      	movs	r0, #1
 8007b60:	f7ff fd0c 	bl	800757c <AddCommand>

	AddCommand(0x10, &C_R_InitializeBESCDevice, NULL);
 8007b64:	4b24      	ldr	r3, [pc, #144]	; (8007bf8 <InitializeCommands+0xbc>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	0019      	movs	r1, r3
 8007b6a:	2010      	movs	r0, #16
 8007b6c:	f7ff fd06 	bl	800757c <AddCommand>
	AddCommand(0x11, NULL, &C_W_BESCChangeSpeed);
 8007b70:	4b22      	ldr	r3, [pc, #136]	; (8007bfc <InitializeCommands+0xc0>)
 8007b72:	001a      	movs	r2, r3
 8007b74:	2100      	movs	r1, #0
 8007b76:	2011      	movs	r0, #17
 8007b78:	f7ff fd00 	bl	800757c <AddCommand>

	AddCommand(0x20, &C_R_InitializeLEDDevice, NULL);
 8007b7c:	4b20      	ldr	r3, [pc, #128]	; (8007c00 <InitializeCommands+0xc4>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	0019      	movs	r1, r3
 8007b82:	2020      	movs	r0, #32
 8007b84:	f7ff fcfa 	bl	800757c <AddCommand>
	AddCommand(0x21, NULL, &C_W_LEDChangeBrightness);
 8007b88:	4b1e      	ldr	r3, [pc, #120]	; (8007c04 <InitializeCommands+0xc8>)
 8007b8a:	001a      	movs	r2, r3
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	2021      	movs	r0, #33	; 0x21
 8007b90:	f7ff fcf4 	bl	800757c <AddCommand>

	AddCommand(0x30, &C_R_InitializeBCSDevice, NULL);
 8007b94:	4b1c      	ldr	r3, [pc, #112]	; (8007c08 <InitializeCommands+0xcc>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	0019      	movs	r1, r3
 8007b9a:	2030      	movs	r0, #48	; 0x30
 8007b9c:	f7ff fcee 	bl	800757c <AddCommand>
	AddCommand(0x31, NULL, &C_W_BCS_ChangeSpeed);
 8007ba0:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <InitializeCommands+0xd0>)
 8007ba2:	001a      	movs	r2, r3
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	2031      	movs	r0, #49	; 0x31
 8007ba8:	f7ff fce8 	bl	800757c <AddCommand>
	AddCommand(0x32, NULL, &C_W_BCS_Move);
 8007bac:	4b18      	ldr	r3, [pc, #96]	; (8007c10 <InitializeCommands+0xd4>)
 8007bae:	001a      	movs	r2, r3
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	2032      	movs	r0, #50	; 0x32
 8007bb4:	f7ff fce2 	bl	800757c <AddCommand>
	AddCommand(0x33, NULL, &C_W_BCS_MoveToEnd);
 8007bb8:	4b16      	ldr	r3, [pc, #88]	; (8007c14 <InitializeCommands+0xd8>)
 8007bba:	001a      	movs	r2, r3
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	2033      	movs	r0, #51	; 0x33
 8007bc0:	f7ff fcdc 	bl	800757c <AddCommand>

	AddCommand(0x40, &C_R_MS5837_CheckConnection, NULL);
 8007bc4:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <InitializeCommands+0xdc>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	0019      	movs	r1, r3
 8007bca:	2040      	movs	r0, #64	; 0x40
 8007bcc:	f7ff fcd6 	bl	800757c <AddCommand>
	AddCommand(0x41, &C_R_MS5837_ReadTemp, NULL);
 8007bd0:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <InitializeCommands+0xe0>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	0019      	movs	r1, r3
 8007bd6:	2041      	movs	r0, #65	; 0x41
 8007bd8:	f7ff fcd0 	bl	800757c <AddCommand>
	AddCommand(0x42, &C_R_MS5837_ReadTempAndPress, NULL);
 8007bdc:	4b10      	ldr	r3, [pc, #64]	; (8007c20 <InitializeCommands+0xe4>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	0019      	movs	r1, r3
 8007be2:	2042      	movs	r0, #66	; 0x42
 8007be4:	f7ff fcca 	bl	800757c <AddCommand>
}
 8007be8:	46c0      	nop			; (mov r8, r8)
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	080075f5 	.word	0x080075f5
 8007bf4:	08007611 	.word	0x08007611
 8007bf8:	08007685 	.word	0x08007685
 8007bfc:	08007831 	.word	0x08007831
 8007c00:	080076e5 	.word	0x080076e5
 8007c04:	08007899 	.word	0x08007899
 8007c08:	08007745 	.word	0x08007745
 8007c0c:	08007901 	.word	0x08007901
 8007c10:	08007969 	.word	0x08007969
 8007c14:	080079d1 	.word	0x080079d1
 8007c18:	08007a39 	.word	0x08007a39
 8007c1c:	08007a61 	.word	0x08007a61
 8007c20:	08007abd 	.word	0x08007abd

08007c24 <CRC16>:
		0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
		0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F,
		0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86,
		0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40 };

uint16_t CRC16(uint8_t *puchMsg, uint16_t usDataLen) {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	000a      	movs	r2, r1
 8007c2e:	1cbb      	adds	r3, r7, #2
 8007c30:	801a      	strh	r2, [r3, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8007c32:	230f      	movs	r3, #15
 8007c34:	18fb      	adds	r3, r7, r3
 8007c36:	22ff      	movs	r2, #255	; 0xff
 8007c38:	701a      	strb	r2, [r3, #0]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8007c3a:	230e      	movs	r3, #14
 8007c3c:	18fb      	adds	r3, r7, r3
 8007c3e:	22ff      	movs	r2, #255	; 0xff
 8007c40:	701a      	strb	r2, [r3, #0]
	unsigned uIndex; /* will index into CRC lookup table */

	while (usDataLen--) /* pass through message buffer */
 8007c42:	e01b      	b.n	8007c7c <CRC16+0x58>
	{
		uIndex = uchCRCHi ^ *puchMsg++; /* calculate the CRC */
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	607a      	str	r2, [r7, #4]
 8007c4a:	781a      	ldrb	r2, [r3, #0]
 8007c4c:	230f      	movs	r3, #15
 8007c4e:	18fb      	adds	r3, r7, r3
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	4053      	eors	r3, r2
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	60bb      	str	r3, [r7, #8]
		uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex];
 8007c58:	4a14      	ldr	r2, [pc, #80]	; (8007cac <CRC16+0x88>)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	18d3      	adds	r3, r2, r3
 8007c5e:	7819      	ldrb	r1, [r3, #0]
 8007c60:	230f      	movs	r3, #15
 8007c62:	18fb      	adds	r3, r7, r3
 8007c64:	220e      	movs	r2, #14
 8007c66:	18ba      	adds	r2, r7, r2
 8007c68:	7812      	ldrb	r2, [r2, #0]
 8007c6a:	404a      	eors	r2, r1
 8007c6c:	701a      	strb	r2, [r3, #0]
		uchCRCLo = auchCRCLo[uIndex];
 8007c6e:	230e      	movs	r3, #14
 8007c70:	18fb      	adds	r3, r7, r3
 8007c72:	490f      	ldr	r1, [pc, #60]	; (8007cb0 <CRC16+0x8c>)
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	188a      	adds	r2, r1, r2
 8007c78:	7812      	ldrb	r2, [r2, #0]
 8007c7a:	701a      	strb	r2, [r3, #0]
	while (usDataLen--) /* pass through message buffer */
 8007c7c:	1cbb      	adds	r3, r7, #2
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	1cba      	adds	r2, r7, #2
 8007c82:	1e59      	subs	r1, r3, #1
 8007c84:	8011      	strh	r1, [r2, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1dc      	bne.n	8007c44 <CRC16+0x20>
	}

	return (uchCRCLo << 8 | uchCRCHi);
 8007c8a:	230e      	movs	r3, #14
 8007c8c:	18fb      	adds	r3, r7, r3
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	021b      	lsls	r3, r3, #8
 8007c92:	b21a      	sxth	r2, r3
 8007c94:	230f      	movs	r3, #15
 8007c96:	18fb      	adds	r3, r7, r3
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	b21b      	sxth	r3, r3
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	b21b      	sxth	r3, r3
 8007ca0:	b29b      	uxth	r3, r3
}
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	b004      	add	sp, #16
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	46c0      	nop			; (mov r8, r8)
 8007cac:	2000001c 	.word	0x2000001c
 8007cb0:	2000011c 	.word	0x2000011c

08007cb4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007cba:	4b08      	ldr	r3, [pc, #32]	; (8007cdc <MX_DMA_Init+0x28>)
 8007cbc:	4a07      	ldr	r2, [pc, #28]	; (8007cdc <MX_DMA_Init+0x28>)
 8007cbe:	6952      	ldr	r2, [r2, #20]
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	615a      	str	r2, [r3, #20]
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <MX_DMA_Init+0x28>)
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	4013      	ands	r3, r2
 8007cce:	607b      	str	r3, [r7, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]

}
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	b002      	add	sp, #8
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	40021000 	.word	0x40021000

08007ce0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	; 0x28
 8007ce4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ce6:	4b83      	ldr	r3, [pc, #524]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007ce8:	4a82      	ldr	r2, [pc, #520]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007cea:	6952      	ldr	r2, [r2, #20]
 8007cec:	2180      	movs	r1, #128	; 0x80
 8007cee:	0309      	lsls	r1, r1, #12
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	615a      	str	r2, [r3, #20]
 8007cf4:	4b7f      	ldr	r3, [pc, #508]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007cf6:	695a      	ldr	r2, [r3, #20]
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	031b      	lsls	r3, r3, #12
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]
 8007d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007d02:	4b7c      	ldr	r3, [pc, #496]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007d04:	4a7b      	ldr	r2, [pc, #492]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007d06:	6952      	ldr	r2, [r2, #20]
 8007d08:	2180      	movs	r1, #128	; 0x80
 8007d0a:	03c9      	lsls	r1, r1, #15
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	615a      	str	r2, [r3, #20]
 8007d10:	4b78      	ldr	r3, [pc, #480]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007d12:	695a      	ldr	r2, [r3, #20]
 8007d14:	2380      	movs	r3, #128	; 0x80
 8007d16:	03db      	lsls	r3, r3, #15
 8007d18:	4013      	ands	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d1e:	4b75      	ldr	r3, [pc, #468]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007d20:	4a74      	ldr	r2, [pc, #464]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007d22:	6952      	ldr	r2, [r2, #20]
 8007d24:	2180      	movs	r1, #128	; 0x80
 8007d26:	0289      	lsls	r1, r1, #10
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	615a      	str	r2, [r3, #20]
 8007d2c:	4b71      	ldr	r3, [pc, #452]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007d2e:	695a      	ldr	r2, [r3, #20]
 8007d30:	2380      	movs	r3, #128	; 0x80
 8007d32:	029b      	lsls	r3, r3, #10
 8007d34:	4013      	ands	r3, r2
 8007d36:	60bb      	str	r3, [r7, #8]
 8007d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d3a:	4b6e      	ldr	r3, [pc, #440]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007d3c:	4a6d      	ldr	r2, [pc, #436]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007d3e:	6952      	ldr	r2, [r2, #20]
 8007d40:	2180      	movs	r1, #128	; 0x80
 8007d42:	02c9      	lsls	r1, r1, #11
 8007d44:	430a      	orrs	r2, r1
 8007d46:	615a      	str	r2, [r3, #20]
 8007d48:	4b6a      	ldr	r3, [pc, #424]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007d4a:	695a      	ldr	r2, [r3, #20]
 8007d4c:	2380      	movs	r3, #128	; 0x80
 8007d4e:	02db      	lsls	r3, r3, #11
 8007d50:	4013      	ands	r3, r2
 8007d52:	607b      	str	r3, [r7, #4]
 8007d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d56:	4b67      	ldr	r3, [pc, #412]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007d58:	4a66      	ldr	r2, [pc, #408]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007d5a:	6952      	ldr	r2, [r2, #20]
 8007d5c:	2180      	movs	r1, #128	; 0x80
 8007d5e:	0349      	lsls	r1, r1, #13
 8007d60:	430a      	orrs	r2, r1
 8007d62:	615a      	str	r2, [r3, #20]
 8007d64:	4b63      	ldr	r3, [pc, #396]	; (8007ef4 <MX_GPIO_Init+0x214>)
 8007d66:	695a      	ldr	r2, [r3, #20]
 8007d68:	2380      	movs	r3, #128	; 0x80
 8007d6a:	035b      	lsls	r3, r3, #13
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8007d72:	4b61      	ldr	r3, [pc, #388]	; (8007ef8 <MX_GPIO_Init+0x218>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	2103      	movs	r1, #3
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f7fb fb0f 	bl	800339c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_8, GPIO_PIN_RESET);
 8007d7e:	2382      	movs	r3, #130	; 0x82
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	485e      	ldr	r0, [pc, #376]	; (8007efc <MX_GPIO_Init+0x21c>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	0019      	movs	r1, r3
 8007d88:	f7fb fb08 	bl	800339c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8007d8c:	2390      	movs	r3, #144	; 0x90
 8007d8e:	0119      	lsls	r1, r3, #4
 8007d90:	2390      	movs	r3, #144	; 0x90
 8007d92:	05db      	lsls	r3, r3, #23
 8007d94:	2200      	movs	r2, #0
 8007d96:	0018      	movs	r0, r3
 8007d98:	f7fb fb00 	bl	800339c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC4 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8007d9c:	2314      	movs	r3, #20
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	4a57      	ldr	r2, [pc, #348]	; (8007f00 <MX_GPIO_Init+0x220>)
 8007da2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007da4:	2314      	movs	r3, #20
 8007da6:	18fb      	adds	r3, r7, r3
 8007da8:	2203      	movs	r2, #3
 8007daa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dac:	2314      	movs	r3, #20
 8007dae:	18fb      	adds	r3, r7, r3
 8007db0:	2200      	movs	r2, #0
 8007db2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007db4:	2314      	movs	r3, #20
 8007db6:	18fb      	adds	r3, r7, r3
 8007db8:	4a52      	ldr	r2, [pc, #328]	; (8007f04 <MX_GPIO_Init+0x224>)
 8007dba:	0019      	movs	r1, r3
 8007dbc:	0010      	movs	r0, r2
 8007dbe:	f7fb f979 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007dc2:	2314      	movs	r3, #20
 8007dc4:	18fb      	adds	r3, r7, r3
 8007dc6:	2203      	movs	r2, #3
 8007dc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007dca:	2314      	movs	r3, #20
 8007dcc:	18fb      	adds	r3, r7, r3
 8007dce:	2201      	movs	r2, #1
 8007dd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd2:	2314      	movs	r3, #20
 8007dd4:	18fb      	adds	r3, r7, r3
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dda:	2314      	movs	r3, #20
 8007ddc:	18fb      	adds	r3, r7, r3
 8007dde:	2200      	movs	r2, #0
 8007de0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007de2:	2314      	movs	r3, #20
 8007de4:	18fb      	adds	r3, r7, r3
 8007de6:	4a44      	ldr	r2, [pc, #272]	; (8007ef8 <MX_GPIO_Init+0x218>)
 8007de8:	0019      	movs	r1, r3
 8007dea:	0010      	movs	r0, r2
 8007dec:	f7fb f962 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6 
                           PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8007df0:	2314      	movs	r3, #20
 8007df2:	18fb      	adds	r3, r7, r3
 8007df4:	4a44      	ldr	r2, [pc, #272]	; (8007f08 <MX_GPIO_Init+0x228>)
 8007df6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007df8:	2314      	movs	r3, #20
 8007dfa:	18fb      	adds	r3, r7, r3
 8007dfc:	2203      	movs	r2, #3
 8007dfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e00:	2314      	movs	r3, #20
 8007e02:	18fb      	adds	r3, r7, r3
 8007e04:	2200      	movs	r2, #0
 8007e06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e08:	2314      	movs	r3, #20
 8007e0a:	18fa      	adds	r2, r7, r3
 8007e0c:	2390      	movs	r3, #144	; 0x90
 8007e0e:	05db      	lsls	r3, r3, #23
 8007e10:	0011      	movs	r1, r2
 8007e12:	0018      	movs	r0, r3
 8007e14:	f7fb f94e 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007e18:	2314      	movs	r3, #20
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	22f0      	movs	r2, #240	; 0xf0
 8007e1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e20:	2314      	movs	r3, #20
 8007e22:	18fb      	adds	r3, r7, r3
 8007e24:	2203      	movs	r2, #3
 8007e26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e28:	2314      	movs	r3, #20
 8007e2a:	18fb      	adds	r3, r7, r3
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007e30:	2314      	movs	r3, #20
 8007e32:	18fb      	adds	r3, r7, r3
 8007e34:	4a30      	ldr	r2, [pc, #192]	; (8007ef8 <MX_GPIO_Init+0x218>)
 8007e36:	0019      	movs	r1, r3
 8007e38:	0010      	movs	r0, r2
 8007e3a:	f7fb f93b 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 
                           PB12 PB13 PB14 PB15 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8007e3e:	2314      	movs	r3, #20
 8007e40:	18fb      	adds	r3, r7, r3
 8007e42:	4a32      	ldr	r2, [pc, #200]	; (8007f0c <MX_GPIO_Init+0x22c>)
 8007e44:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e46:	2314      	movs	r3, #20
 8007e48:	18fb      	adds	r3, r7, r3
 8007e4a:	2203      	movs	r2, #3
 8007e4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e4e:	2314      	movs	r3, #20
 8007e50:	18fb      	adds	r3, r7, r3
 8007e52:	2200      	movs	r2, #0
 8007e54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e56:	2314      	movs	r3, #20
 8007e58:	18fb      	adds	r3, r7, r3
 8007e5a:	4a28      	ldr	r2, [pc, #160]	; (8007efc <MX_GPIO_Init+0x21c>)
 8007e5c:	0019      	movs	r1, r3
 8007e5e:	0010      	movs	r0, r2
 8007e60:	f7fb f928 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8;
 8007e64:	2314      	movs	r3, #20
 8007e66:	18fb      	adds	r3, r7, r3
 8007e68:	2282      	movs	r2, #130	; 0x82
 8007e6a:	0052      	lsls	r2, r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e6e:	2314      	movs	r3, #20
 8007e70:	18fb      	adds	r3, r7, r3
 8007e72:	2201      	movs	r2, #1
 8007e74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e76:	2314      	movs	r3, #20
 8007e78:	18fb      	adds	r3, r7, r3
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e7e:	2314      	movs	r3, #20
 8007e80:	18fb      	adds	r3, r7, r3
 8007e82:	2200      	movs	r2, #0
 8007e84:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e86:	2314      	movs	r3, #20
 8007e88:	18fb      	adds	r3, r7, r3
 8007e8a:	4a1c      	ldr	r2, [pc, #112]	; (8007efc <MX_GPIO_Init+0x21c>)
 8007e8c:	0019      	movs	r1, r3
 8007e8e:	0010      	movs	r0, r2
 8007e90:	f7fb f910 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8007e94:	2314      	movs	r3, #20
 8007e96:	18fb      	adds	r3, r7, r3
 8007e98:	2290      	movs	r2, #144	; 0x90
 8007e9a:	0112      	lsls	r2, r2, #4
 8007e9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e9e:	2314      	movs	r3, #20
 8007ea0:	18fb      	adds	r3, r7, r3
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ea6:	2314      	movs	r3, #20
 8007ea8:	18fb      	adds	r3, r7, r3
 8007eaa:	2200      	movs	r2, #0
 8007eac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eae:	2314      	movs	r3, #20
 8007eb0:	18fb      	adds	r3, r7, r3
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eb6:	2314      	movs	r3, #20
 8007eb8:	18fa      	adds	r2, r7, r3
 8007eba:	2390      	movs	r3, #144	; 0x90
 8007ebc:	05db      	lsls	r3, r3, #23
 8007ebe:	0011      	movs	r1, r2
 8007ec0:	0018      	movs	r0, r3
 8007ec2:	f7fb f8f7 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007ec6:	2314      	movs	r3, #20
 8007ec8:	18fb      	adds	r3, r7, r3
 8007eca:	2204      	movs	r2, #4
 8007ecc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ece:	2314      	movs	r3, #20
 8007ed0:	18fb      	adds	r3, r7, r3
 8007ed2:	2203      	movs	r2, #3
 8007ed4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ed6:	2314      	movs	r3, #20
 8007ed8:	18fb      	adds	r3, r7, r3
 8007eda:	2200      	movs	r2, #0
 8007edc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ede:	2314      	movs	r3, #20
 8007ee0:	18fb      	adds	r3, r7, r3
 8007ee2:	4a0b      	ldr	r2, [pc, #44]	; (8007f10 <MX_GPIO_Init+0x230>)
 8007ee4:	0019      	movs	r1, r3
 8007ee6:	0010      	movs	r0, r2
 8007ee8:	f7fb f8e4 	bl	80030b4 <HAL_GPIO_Init>

}
 8007eec:	46c0      	nop			; (mov r8, r8)
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	b00a      	add	sp, #40	; 0x28
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	40021000 	.word	0x40021000
 8007ef8:	48001400 	.word	0x48001400
 8007efc:	48000400 	.word	0x48000400
 8007f00:	0000ffff 	.word	0x0000ffff
 8007f04:	48000800 	.word	0x48000800
 8007f08:	000010f1 	.word	0x000010f1
 8007f0c:	0000fe03 	.word	0x0000fe03
 8007f10:	48000c00 	.word	0x48000c00

08007f14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8007f18:	4b20      	ldr	r3, [pc, #128]	; (8007f9c <MX_I2C1_Init+0x88>)
 8007f1a:	4a21      	ldr	r2, [pc, #132]	; (8007fa0 <MX_I2C1_Init+0x8c>)
 8007f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8007f1e:	4b1f      	ldr	r3, [pc, #124]	; (8007f9c <MX_I2C1_Init+0x88>)
 8007f20:	4a20      	ldr	r2, [pc, #128]	; (8007fa4 <MX_I2C1_Init+0x90>)
 8007f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007f24:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <MX_I2C1_Init+0x88>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f2a:	4b1c      	ldr	r3, [pc, #112]	; (8007f9c <MX_I2C1_Init+0x88>)
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f30:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <MX_I2C1_Init+0x88>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007f36:	4b19      	ldr	r3, [pc, #100]	; (8007f9c <MX_I2C1_Init+0x88>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007f3c:	4b17      	ldr	r3, [pc, #92]	; (8007f9c <MX_I2C1_Init+0x88>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f42:	4b16      	ldr	r3, [pc, #88]	; (8007f9c <MX_I2C1_Init+0x88>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f48:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <MX_I2C1_Init+0x88>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007f4e:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <MX_I2C1_Init+0x88>)
 8007f50:	0018      	movs	r0, r3
 8007f52:	f7fb fa5d 	bl	8003410 <HAL_I2C_Init>
 8007f56:	1e03      	subs	r3, r0, #0
 8007f58:	d004      	beq.n	8007f64 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007f5a:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <MX_I2C1_Init+0x94>)
 8007f5c:	2142      	movs	r1, #66	; 0x42
 8007f5e:	0018      	movs	r0, r3
 8007f60:	f000 fb6b 	bl	800863a <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007f64:	4b0d      	ldr	r3, [pc, #52]	; (8007f9c <MX_I2C1_Init+0x88>)
 8007f66:	2100      	movs	r1, #0
 8007f68:	0018      	movs	r0, r3
 8007f6a:	f7fb ff15 	bl	8003d98 <HAL_I2CEx_ConfigAnalogFilter>
 8007f6e:	1e03      	subs	r3, r0, #0
 8007f70:	d004      	beq.n	8007f7c <MX_I2C1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007f72:	4b0d      	ldr	r3, [pc, #52]	; (8007fa8 <MX_I2C1_Init+0x94>)
 8007f74:	2149      	movs	r1, #73	; 0x49
 8007f76:	0018      	movs	r0, r3
 8007f78:	f000 fb5f 	bl	800863a <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007f7c:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <MX_I2C1_Init+0x88>)
 8007f7e:	2100      	movs	r1, #0
 8007f80:	0018      	movs	r0, r3
 8007f82:	f7fb ff55 	bl	8003e30 <HAL_I2CEx_ConfigDigitalFilter>
 8007f86:	1e03      	subs	r3, r0, #0
 8007f88:	d004      	beq.n	8007f94 <MX_I2C1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007f8a:	4b07      	ldr	r3, [pc, #28]	; (8007fa8 <MX_I2C1_Init+0x94>)
 8007f8c:	2150      	movs	r1, #80	; 0x50
 8007f8e:	0018      	movs	r0, r3
 8007f90:	f000 fb53 	bl	800863a <_Error_Handler>
  }

}
 8007f94:	46c0      	nop			; (mov r8, r8)
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	2000080c 	.word	0x2000080c
 8007fa0:	40005400 	.word	0x40005400
 8007fa4:	2000090e 	.word	0x2000090e
 8007fa8:	08009e5c 	.word	0x08009e5c

08007fac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a17      	ldr	r2, [pc, #92]	; (8008018 <HAL_I2C_MspInit+0x6c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d128      	bne.n	8008010 <HAL_I2C_MspInit+0x64>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	18fb      	adds	r3, r7, r3
 8007fc2:	22c0      	movs	r2, #192	; 0xc0
 8007fc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007fc6:	230c      	movs	r3, #12
 8007fc8:	18fb      	adds	r3, r7, r3
 8007fca:	2212      	movs	r2, #18
 8007fcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007fce:	230c      	movs	r3, #12
 8007fd0:	18fb      	adds	r3, r7, r3
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007fd6:	230c      	movs	r3, #12
 8007fd8:	18fb      	adds	r3, r7, r3
 8007fda:	2203      	movs	r2, #3
 8007fdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8007fde:	230c      	movs	r3, #12
 8007fe0:	18fb      	adds	r3, r7, r3
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	18fb      	adds	r3, r7, r3
 8007fea:	4a0c      	ldr	r2, [pc, #48]	; (800801c <HAL_I2C_MspInit+0x70>)
 8007fec:	0019      	movs	r1, r3
 8007fee:	0010      	movs	r0, r2
 8007ff0:	f7fb f860 	bl	80030b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007ff4:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <HAL_I2C_MspInit+0x74>)
 8007ff6:	4a0a      	ldr	r2, [pc, #40]	; (8008020 <HAL_I2C_MspInit+0x74>)
 8007ff8:	69d2      	ldr	r2, [r2, #28]
 8007ffa:	2180      	movs	r1, #128	; 0x80
 8007ffc:	0389      	lsls	r1, r1, #14
 8007ffe:	430a      	orrs	r2, r1
 8008000:	61da      	str	r2, [r3, #28]
 8008002:	4b07      	ldr	r3, [pc, #28]	; (8008020 <HAL_I2C_MspInit+0x74>)
 8008004:	69da      	ldr	r2, [r3, #28]
 8008006:	2380      	movs	r3, #128	; 0x80
 8008008:	039b      	lsls	r3, r3, #14
 800800a:	4013      	ands	r3, r2
 800800c:	60bb      	str	r3, [r7, #8]
 800800e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008010:	46c0      	nop			; (mov r8, r8)
 8008012:	46bd      	mov	sp, r7
 8008014:	b008      	add	sp, #32
 8008016:	bd80      	pop	{r7, pc}
 8008018:	40005400 	.word	0x40005400
 800801c:	48000400 	.word	0x48000400
 8008020:	40021000 	.word	0x40021000

08008024 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8008028:	4b0d      	ldr	r3, [pc, #52]	; (8008060 <MX_IWDG_Init+0x3c>)
 800802a:	4a0e      	ldr	r2, [pc, #56]	; (8008064 <MX_IWDG_Init+0x40>)
 800802c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800802e:	4b0c      	ldr	r3, [pc, #48]	; (8008060 <MX_IWDG_Init+0x3c>)
 8008030:	2205      	movs	r2, #5
 8008032:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 313;
 8008034:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <MX_IWDG_Init+0x3c>)
 8008036:	223a      	movs	r2, #58	; 0x3a
 8008038:	32ff      	adds	r2, #255	; 0xff
 800803a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 313;
 800803c:	4b08      	ldr	r3, [pc, #32]	; (8008060 <MX_IWDG_Init+0x3c>)
 800803e:	223a      	movs	r2, #58	; 0x3a
 8008040:	32ff      	adds	r2, #255	; 0xff
 8008042:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8008044:	4b06      	ldr	r3, [pc, #24]	; (8008060 <MX_IWDG_Init+0x3c>)
 8008046:	0018      	movs	r0, r3
 8008048:	f7fb ff40 	bl	8003ecc <HAL_IWDG_Init>
 800804c:	1e03      	subs	r3, r0, #0
 800804e:	d004      	beq.n	800805a <MX_IWDG_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008050:	4b05      	ldr	r3, [pc, #20]	; (8008068 <MX_IWDG_Init+0x44>)
 8008052:	213b      	movs	r1, #59	; 0x3b
 8008054:	0018      	movs	r0, r3
 8008056:	f000 faf0 	bl	800863a <_Error_Handler>
  }

}
 800805a:	46c0      	nop			; (mov r8, r8)
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	20000858 	.word	0x20000858
 8008064:	40003000 	.word	0x40003000
 8008068:	08009e6c 	.word	0x08009e6c

0800806c <HAL_UART_RxHalfCpltCallback>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a20      	ldr	r2, [pc, #128]	; (80080fc <HAL_UART_RxHalfCpltCallback+0x90>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d11a      	bne.n	80080b4 <HAL_UART_RxHalfCpltCallback+0x48>
		if (!m_USART1RxBufferLength)
 800807e:	4b20      	ldr	r3, [pc, #128]	; (8008100 <HAL_UART_RxHalfCpltCallback+0x94>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d107      	bne.n	8008096 <HAL_UART_RxHalfCpltCallback+0x2a>
			__HAL_TIM_ENABLE(&htim6);
 8008086:	4b1f      	ldr	r3, [pc, #124]	; (8008104 <HAL_UART_RxHalfCpltCallback+0x98>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a1e      	ldr	r2, [pc, #120]	; (8008104 <HAL_UART_RxHalfCpltCallback+0x98>)
 800808c:	6812      	ldr	r2, [r2, #0]
 800808e:	6812      	ldr	r2, [r2, #0]
 8008090:	2101      	movs	r1, #1
 8008092:	430a      	orrs	r2, r1
 8008094:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8008096:	4b1b      	ldr	r3, [pc, #108]	; (8008104 <HAL_UART_RxHalfCpltCallback+0x98>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2200      	movs	r2, #0
 800809c:	625a      	str	r2, [r3, #36]	; 0x24
		m_USART1RxBuffer[m_USART1RxBufferLength++] = m_USART1dmaRxBuffer[0];
 800809e:	4b18      	ldr	r3, [pc, #96]	; (8008100 <HAL_UART_RxHalfCpltCallback+0x94>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	1c5a      	adds	r2, r3, #1
 80080a4:	b2d1      	uxtb	r1, r2
 80080a6:	4a16      	ldr	r2, [pc, #88]	; (8008100 <HAL_UART_RxHalfCpltCallback+0x94>)
 80080a8:	7011      	strb	r1, [r2, #0]
 80080aa:	001a      	movs	r2, r3
 80080ac:	4b16      	ldr	r3, [pc, #88]	; (8008108 <HAL_UART_RxHalfCpltCallback+0x9c>)
 80080ae:	7819      	ldrb	r1, [r3, #0]
 80080b0:	4b16      	ldr	r3, [pc, #88]	; (800810c <HAL_UART_RxHalfCpltCallback+0xa0>)
 80080b2:	5499      	strb	r1, [r3, r2]
	}

	if (huart->Instance == USART2) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a15      	ldr	r2, [pc, #84]	; (8008110 <HAL_UART_RxHalfCpltCallback+0xa4>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d11a      	bne.n	80080f4 <HAL_UART_RxHalfCpltCallback+0x88>
		if (!m_USART2RxBufferLength)
 80080be:	4b15      	ldr	r3, [pc, #84]	; (8008114 <HAL_UART_RxHalfCpltCallback+0xa8>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d107      	bne.n	80080d6 <HAL_UART_RxHalfCpltCallback+0x6a>
			__HAL_TIM_ENABLE(&htim16);
 80080c6:	4b14      	ldr	r3, [pc, #80]	; (8008118 <HAL_UART_RxHalfCpltCallback+0xac>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a13      	ldr	r2, [pc, #76]	; (8008118 <HAL_UART_RxHalfCpltCallback+0xac>)
 80080cc:	6812      	ldr	r2, [r2, #0]
 80080ce:	6812      	ldr	r2, [r2, #0]
 80080d0:	2101      	movs	r1, #1
 80080d2:	430a      	orrs	r2, r1
 80080d4:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim16, 0);
 80080d6:	4b10      	ldr	r3, [pc, #64]	; (8008118 <HAL_UART_RxHalfCpltCallback+0xac>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2200      	movs	r2, #0
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24
		m_USART2RxBuffer[m_USART2RxBufferLength++] = m_USART2dmaRxBuffer[0];
 80080de:	4b0d      	ldr	r3, [pc, #52]	; (8008114 <HAL_UART_RxHalfCpltCallback+0xa8>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	b2d1      	uxtb	r1, r2
 80080e6:	4a0b      	ldr	r2, [pc, #44]	; (8008114 <HAL_UART_RxHalfCpltCallback+0xa8>)
 80080e8:	7011      	strb	r1, [r2, #0]
 80080ea:	001a      	movs	r2, r3
 80080ec:	4b0b      	ldr	r3, [pc, #44]	; (800811c <HAL_UART_RxHalfCpltCallback+0xb0>)
 80080ee:	7819      	ldrb	r1, [r3, #0]
 80080f0:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <HAL_UART_RxHalfCpltCallback+0xb4>)
 80080f2:	5499      	strb	r1, [r3, r2]
	}
}
 80080f4:	46c0      	nop			; (mov r8, r8)
 80080f6:	46bd      	mov	sp, r7
 80080f8:	b002      	add	sp, #8
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	40013800 	.word	0x40013800
 8008100:	20000597 	.word	0x20000597
 8008104:	200008bc 	.word	0x200008bc
 8008108:	20000394 	.word	0x20000394
 800810c:	20000398 	.word	0x20000398
 8008110:	40004400 	.word	0x40004400
 8008114:	2000079b 	.word	0x2000079b
 8008118:	200009bc 	.word	0x200009bc
 800811c:	20000598 	.word	0x20000598
 8008120:	2000059c 	.word	0x2000059c

08008124 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a20      	ldr	r2, [pc, #128]	; (80081b4 <HAL_UART_RxCpltCallback+0x90>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d11a      	bne.n	800816c <HAL_UART_RxCpltCallback+0x48>
		if (!m_USART1RxBufferLength)
 8008136:	4b20      	ldr	r3, [pc, #128]	; (80081b8 <HAL_UART_RxCpltCallback+0x94>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d107      	bne.n	800814e <HAL_UART_RxCpltCallback+0x2a>
			__HAL_TIM_ENABLE(&htim6);
 800813e:	4b1f      	ldr	r3, [pc, #124]	; (80081bc <HAL_UART_RxCpltCallback+0x98>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a1e      	ldr	r2, [pc, #120]	; (80081bc <HAL_UART_RxCpltCallback+0x98>)
 8008144:	6812      	ldr	r2, [r2, #0]
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	2101      	movs	r1, #1
 800814a:	430a      	orrs	r2, r1
 800814c:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim6, 0);
 800814e:	4b1b      	ldr	r3, [pc, #108]	; (80081bc <HAL_UART_RxCpltCallback+0x98>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2200      	movs	r2, #0
 8008154:	625a      	str	r2, [r3, #36]	; 0x24
		m_USART1RxBuffer[m_USART1RxBufferLength++] = m_USART1dmaRxBuffer[1];
 8008156:	4b18      	ldr	r3, [pc, #96]	; (80081b8 <HAL_UART_RxCpltCallback+0x94>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	b2d1      	uxtb	r1, r2
 800815e:	4a16      	ldr	r2, [pc, #88]	; (80081b8 <HAL_UART_RxCpltCallback+0x94>)
 8008160:	7011      	strb	r1, [r2, #0]
 8008162:	001a      	movs	r2, r3
 8008164:	4b16      	ldr	r3, [pc, #88]	; (80081c0 <HAL_UART_RxCpltCallback+0x9c>)
 8008166:	7859      	ldrb	r1, [r3, #1]
 8008168:	4b16      	ldr	r3, [pc, #88]	; (80081c4 <HAL_UART_RxCpltCallback+0xa0>)
 800816a:	5499      	strb	r1, [r3, r2]
	}

	if (huart->Instance == USART2) {
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <HAL_UART_RxCpltCallback+0xa4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d11a      	bne.n	80081ac <HAL_UART_RxCpltCallback+0x88>
		if (!m_USART2RxBufferLength)
 8008176:	4b15      	ldr	r3, [pc, #84]	; (80081cc <HAL_UART_RxCpltCallback+0xa8>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d107      	bne.n	800818e <HAL_UART_RxCpltCallback+0x6a>
			__HAL_TIM_ENABLE(&htim16);
 800817e:	4b14      	ldr	r3, [pc, #80]	; (80081d0 <HAL_UART_RxCpltCallback+0xac>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a13      	ldr	r2, [pc, #76]	; (80081d0 <HAL_UART_RxCpltCallback+0xac>)
 8008184:	6812      	ldr	r2, [r2, #0]
 8008186:	6812      	ldr	r2, [r2, #0]
 8008188:	2101      	movs	r1, #1
 800818a:	430a      	orrs	r2, r1
 800818c:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim16, 0);
 800818e:	4b10      	ldr	r3, [pc, #64]	; (80081d0 <HAL_UART_RxCpltCallback+0xac>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2200      	movs	r2, #0
 8008194:	625a      	str	r2, [r3, #36]	; 0x24
		m_USART2RxBuffer[m_USART2RxBufferLength++] = m_USART2dmaRxBuffer[1];
 8008196:	4b0d      	ldr	r3, [pc, #52]	; (80081cc <HAL_UART_RxCpltCallback+0xa8>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	b2d1      	uxtb	r1, r2
 800819e:	4a0b      	ldr	r2, [pc, #44]	; (80081cc <HAL_UART_RxCpltCallback+0xa8>)
 80081a0:	7011      	strb	r1, [r2, #0]
 80081a2:	001a      	movs	r2, r3
 80081a4:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <HAL_UART_RxCpltCallback+0xb0>)
 80081a6:	7859      	ldrb	r1, [r3, #1]
 80081a8:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <HAL_UART_RxCpltCallback+0xb4>)
 80081aa:	5499      	strb	r1, [r3, r2]
	}
}
 80081ac:	46c0      	nop			; (mov r8, r8)
 80081ae:	46bd      	mov	sp, r7
 80081b0:	b002      	add	sp, #8
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	40013800 	.word	0x40013800
 80081b8:	20000597 	.word	0x20000597
 80081bc:	200008bc 	.word	0x200008bc
 80081c0:	20000394 	.word	0x20000394
 80081c4:	20000398 	.word	0x20000398
 80081c8:	40004400 	.word	0x40004400
 80081cc:	2000079b 	.word	0x2000079b
 80081d0:	200009bc 	.word	0x200009bc
 80081d4:	20000598 	.word	0x20000598
 80081d8:	2000059c 	.word	0x2000059c

080081dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	0002      	movs	r2, r0
 80081e4:	1dbb      	adds	r3, r7, #6
 80081e6:	801a      	strh	r2, [r3, #0]
	if (pin == TIM1BCS->TerminalGPIO->Pin) {
 80081e8:	4b23      	ldr	r3, [pc, #140]	; (8008278 <HAL_GPIO_EXTI_Callback+0x9c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	889b      	ldrh	r3, [r3, #4]
 80081f0:	1dba      	adds	r2, r7, #6
 80081f2:	8812      	ldrh	r2, [r2, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d13a      	bne.n	800826e <HAL_GPIO_EXTI_Callback+0x92>
		__HAL_TIM_DISABLE(TIM1BCS->PWMTIM->ComplementTIM);
 80081f8:	4b1f      	ldr	r3, [pc, #124]	; (8008278 <HAL_GPIO_EXTI_Callback+0x9c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	4a1d      	ldr	r2, [pc, #116]	; (800827c <HAL_GPIO_EXTI_Callback+0xa0>)
 8008206:	4013      	ands	r3, r2
 8008208:	d116      	bne.n	8008238 <HAL_GPIO_EXTI_Callback+0x5c>
 800820a:	4b1b      	ldr	r3, [pc, #108]	; (8008278 <HAL_GPIO_EXTI_Callback+0x9c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	4a1a      	ldr	r2, [pc, #104]	; (8008280 <HAL_GPIO_EXTI_Callback+0xa4>)
 8008218:	4013      	ands	r3, r2
 800821a:	d10d      	bne.n	8008238 <HAL_GPIO_EXTI_Callback+0x5c>
 800821c:	4b16      	ldr	r3, [pc, #88]	; (8008278 <HAL_GPIO_EXTI_Callback+0x9c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a14      	ldr	r2, [pc, #80]	; (8008278 <HAL_GPIO_EXTI_Callback+0x9c>)
 8008228:	6812      	ldr	r2, [r2, #0]
 800822a:	6812      	ldr	r2, [r2, #0]
 800822c:	6892      	ldr	r2, [r2, #8]
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	6812      	ldr	r2, [r2, #0]
 8008232:	2101      	movs	r1, #1
 8008234:	438a      	bics	r2, r1
 8008236:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(TIM1BCS->DisableGPIO->GPIO, TIM1BCS->DisableGPIO->Pin,
 8008238:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <HAL_GPIO_EXTI_Callback+0x9c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	6818      	ldr	r0, [r3, #0]
 8008240:	4b0d      	ldr	r3, [pc, #52]	; (8008278 <HAL_GPIO_EXTI_Callback+0x9c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	889b      	ldrh	r3, [r3, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	0019      	movs	r1, r3
 800824c:	f7fb f8a6 	bl	800339c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		__HAL_TIM_SET_COUNTER(TIM1BCS->PWMTIM->ComplementTIM, 0);
 8008250:	4b09      	ldr	r3, [pc, #36]	; (8008278 <HAL_GPIO_EXTI_Callback+0x9c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2200      	movs	r2, #0
 800825c:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_NVIC_DisableIRQ(TIM1BCS->TerminalGPIO->EXTIId);
 800825e:	4b06      	ldr	r3, [pc, #24]	; (8008278 <HAL_GPIO_EXTI_Callback+0x9c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	799b      	ldrb	r3, [r3, #6]
 8008266:	b25b      	sxtb	r3, r3
 8008268:	0018      	movs	r0, r3
 800826a:	f7fa fafb 	bl	8002864 <HAL_NVIC_DisableIRQ>
	}
}
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	46bd      	mov	sp, r7
 8008272:	b002      	add	sp, #8
 8008274:	bd80      	pop	{r7, pc}
 8008276:	46c0      	nop			; (mov r8, r8)
 8008278:	200007f8 	.word	0x200007f8
 800827c:	00001111 	.word	0x00001111
 8008280:	00000444 	.word	0x00000444

08008284 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14) {
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a2f      	ldr	r2, [pc, #188]	; (8008350 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d104      	bne.n	80082a0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8008296:	4b2f      	ldr	r3, [pc, #188]	; (8008354 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a2f      	ldr	r2, [pc, #188]	; (8008358 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800829c:	601a      	str	r2, [r3, #0]
		return;
 800829e:	e053      	b.n	8008348 <HAL_TIM_PeriodElapsedCallback+0xc4>
	}

	if (htim->Instance == TIM6) {
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a2d      	ldr	r2, [pc, #180]	; (800835c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d11b      	bne.n	80082e2 <HAL_TIM_PeriodElapsedCallback+0x5e>
		uint8_t resultLength;

		if (ProcessCommand(m_USART1RxBuffer, m_USART1RxBufferLength, m_USART1TxBuffer,
 80082aa:	4b2d      	ldr	r3, [pc, #180]	; (8008360 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80082ac:	7819      	ldrb	r1, [r3, #0]
 80082ae:	230f      	movs	r3, #15
 80082b0:	18fb      	adds	r3, r7, r3
 80082b2:	4a2c      	ldr	r2, [pc, #176]	; (8008364 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80082b4:	482c      	ldr	r0, [pc, #176]	; (8008368 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80082b6:	f7ff f8ef 	bl	8007498 <ProcessCommand>
 80082ba:	1e03      	subs	r3, r0, #0
 80082bc:	d003      	beq.n	80082c6 <HAL_TIM_PeriodElapsedCallback+0x42>
				&resultLength)) {
			m_USART1RxBufferLength = 0;
 80082be:	4b28      	ldr	r3, [pc, #160]	; (8008360 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	701a      	strb	r2, [r3, #0]
			return;
 80082c4:	e040      	b.n	8008348 <HAL_TIM_PeriodElapsedCallback+0xc4>
		}

		HAL_UART_Transmit_DMA(&huart1, m_USART1TxBuffer, resultLength);
 80082c6:	230f      	movs	r3, #15
 80082c8:	18fb      	adds	r3, r7, r3
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	4925      	ldr	r1, [pc, #148]	; (8008364 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80082d0:	4b26      	ldr	r3, [pc, #152]	; (800836c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80082d2:	0018      	movs	r0, r3
 80082d4:	f7fd fafc 	bl	80058d0 <HAL_UART_Transmit_DMA>
		m_USART1RxBufferLength = 0;
 80082d8:	4b21      	ldr	r3, [pc, #132]	; (8008360 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80082da:	2200      	movs	r2, #0
 80082dc:	701a      	strb	r2, [r3, #0]
		return;
 80082de:	46c0      	nop			; (mov r8, r8)
 80082e0:	e032      	b.n	8008348 <HAL_TIM_PeriodElapsedCallback+0xc4>
	}

	if (htim->Instance == TIM16) {
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a22      	ldr	r2, [pc, #136]	; (8008370 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d11b      	bne.n	8008324 <HAL_TIM_PeriodElapsedCallback+0xa0>
		uint8_t resultLength;

		if (ProcessCommand(m_USART2RxBuffer, m_USART2RxBufferLength, m_USART2TxBuffer,
 80082ec:	4b21      	ldr	r3, [pc, #132]	; (8008374 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80082ee:	7819      	ldrb	r1, [r3, #0]
 80082f0:	230e      	movs	r3, #14
 80082f2:	18fb      	adds	r3, r7, r3
 80082f4:	4a20      	ldr	r2, [pc, #128]	; (8008378 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80082f6:	4821      	ldr	r0, [pc, #132]	; (800837c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80082f8:	f7ff f8ce 	bl	8007498 <ProcessCommand>
 80082fc:	1e03      	subs	r3, r0, #0
 80082fe:	d003      	beq.n	8008308 <HAL_TIM_PeriodElapsedCallback+0x84>
				&resultLength)) {
			m_USART2RxBufferLength = 0;
 8008300:	4b1c      	ldr	r3, [pc, #112]	; (8008374 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8008302:	2200      	movs	r2, #0
 8008304:	701a      	strb	r2, [r3, #0]
			return;
 8008306:	e01f      	b.n	8008348 <HAL_TIM_PeriodElapsedCallback+0xc4>
		}

		HAL_UART_Transmit_DMA(&huart2, m_USART2TxBuffer, resultLength);
 8008308:	230e      	movs	r3, #14
 800830a:	18fb      	adds	r3, r7, r3
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b29a      	uxth	r2, r3
 8008310:	4919      	ldr	r1, [pc, #100]	; (8008378 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8008312:	4b1b      	ldr	r3, [pc, #108]	; (8008380 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8008314:	0018      	movs	r0, r3
 8008316:	f7fd fadb 	bl	80058d0 <HAL_UART_Transmit_DMA>
		m_USART2RxBufferLength = 0;
 800831a:	4b16      	ldr	r3, [pc, #88]	; (8008374 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800831c:	2200      	movs	r2, #0
 800831e:	701a      	strb	r2, [r3, #0]
		return;
 8008320:	46c0      	nop			; (mov r8, r8)
 8008322:	e011      	b.n	8008348 <HAL_TIM_PeriodElapsedCallback+0xc4>
	}

	if (htim->Instance == TIM1) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a16      	ldr	r2, [pc, #88]	; (8008384 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d10c      	bne.n	8008348 <HAL_TIM_PeriodElapsedCallback+0xc4>
		HAL_GPIO_WritePin(TIM1BCS->DisableGPIO->GPIO, TIM1BCS->DisableGPIO->Pin,
 800832e:	4b16      	ldr	r3, [pc, #88]	; (8008388 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	6818      	ldr	r0, [r3, #0]
 8008336:	4b14      	ldr	r3, [pc, #80]	; (8008388 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	889b      	ldrh	r3, [r3, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	0019      	movs	r1, r3
 8008342:	f7fb f82b 	bl	800339c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		return;
 8008346:	46c0      	nop			; (mov r8, r8)
	}
}
 8008348:	46bd      	mov	sp, r7
 800834a:	b004      	add	sp, #16
 800834c:	bd80      	pop	{r7, pc}
 800834e:	46c0      	nop			; (mov r8, r8)
 8008350:	40002000 	.word	0x40002000
 8008354:	20000858 	.word	0x20000858
 8008358:	0000aaaa 	.word	0x0000aaaa
 800835c:	40001000 	.word	0x40001000
 8008360:	20000597 	.word	0x20000597
 8008364:	20000498 	.word	0x20000498
 8008368:	20000398 	.word	0x20000398
 800836c:	20000b0c 	.word	0x20000b0c
 8008370:	40014400 	.word	0x40014400
 8008374:	2000079b 	.word	0x2000079b
 8008378:	2000069c 	.word	0x2000069c
 800837c:	2000059c 	.word	0x2000059c
 8008380:	20000b7c 	.word	0x20000b7c
 8008384:	40012c00 	.word	0x40012c00
 8008388:	200007f8 	.word	0x200007f8

0800838c <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008390:	f7fa f91e 	bl	80025d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008394:	f000 f88e 	bl	80084b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008398:	f7ff fca2 	bl	8007ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 800839c:	f7ff fc8a 	bl	8007cb4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80083a0:	f001 fb02 	bl	80099a8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80083a4:	f001 f94e 	bl	8009644 <MX_TIM6_Init>
  MX_TIM3_Init();
 80083a8:	f001 f8e2 	bl	8009570 <MX_TIM3_Init>
  MX_TIM2_Init();
 80083ac:	f001 f876 	bl	800949c <MX_TIM2_Init>
  MX_I2C1_Init();
 80083b0:	f7ff fdb0 	bl	8007f14 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80083b4:	f001 fb2e 	bl	8009a14 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80083b8:	f001 f80e 	bl	80093d8 <MX_TIM1_Init>
  MX_TIM14_Init();
 80083bc:	f001 f98a 	bl	80096d4 <MX_TIM14_Init>
  MX_IWDG_Init();
 80083c0:	f7ff fe30 	bl	8008024 <MX_IWDG_Init>
  MX_TIM16_Init();
 80083c4:	f001 f9b2 	bl	800972c <MX_TIM16_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80083c8:	f000 f8fa 	bl	80085c0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  InitializeCommands();
 80083cc:	f7ff fbb6 	bl	8007b3c <InitializeCommands>

  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 80083d0:	4b2e      	ldr	r3, [pc, #184]	; (800848c <main+0x100>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2202      	movs	r2, #2
 80083d6:	4252      	negs	r2, r2
 80083d8:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 80083da:	4b2c      	ldr	r3, [pc, #176]	; (800848c <main+0x100>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a2b      	ldr	r2, [pc, #172]	; (800848c <main+0x100>)
 80083e0:	6812      	ldr	r2, [r2, #0]
 80083e2:	68d2      	ldr	r2, [r2, #12]
 80083e4:	2101      	movs	r1, #1
 80083e6:	430a      	orrs	r2, r1
 80083e8:	60da      	str	r2, [r3, #12]

  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 80083ea:	4b29      	ldr	r3, [pc, #164]	; (8008490 <main+0x104>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2202      	movs	r2, #2
 80083f0:	4252      	negs	r2, r2
 80083f2:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
 80083f4:	4b26      	ldr	r3, [pc, #152]	; (8008490 <main+0x104>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a25      	ldr	r2, [pc, #148]	; (8008490 <main+0x104>)
 80083fa:	6812      	ldr	r2, [r2, #0]
 80083fc:	68d2      	ldr	r2, [r2, #12]
 80083fe:	2101      	movs	r1, #1
 8008400:	430a      	orrs	r2, r1
 8008402:	60da      	str	r2, [r3, #12]

  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 8008404:	4b23      	ldr	r3, [pc, #140]	; (8008494 <main+0x108>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2202      	movs	r2, #2
 800840a:	4252      	negs	r2, r2
 800840c:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 800840e:	4b21      	ldr	r3, [pc, #132]	; (8008494 <main+0x108>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a20      	ldr	r2, [pc, #128]	; (8008494 <main+0x108>)
 8008414:	6812      	ldr	r2, [r2, #0]
 8008416:	68d2      	ldr	r2, [r2, #12]
 8008418:	2101      	movs	r1, #1
 800841a:	430a      	orrs	r2, r1
 800841c:	60da      	str	r2, [r3, #12]

  __HAL_TIM_CLEAR_FLAG(&htim14, TIM_FLAG_UPDATE);
 800841e:	4b1e      	ldr	r3, [pc, #120]	; (8008498 <main+0x10c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2202      	movs	r2, #2
 8008424:	4252      	negs	r2, r2
 8008426:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim14, TIM_IT_UPDATE);
 8008428:	4b1b      	ldr	r3, [pc, #108]	; (8008498 <main+0x10c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a1a      	ldr	r2, [pc, #104]	; (8008498 <main+0x10c>)
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	68d2      	ldr	r2, [r2, #12]
 8008432:	2101      	movs	r1, #1
 8008434:	430a      	orrs	r2, r1
 8008436:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim14);
 8008438:	4b17      	ldr	r3, [pc, #92]	; (8008498 <main+0x10c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a16      	ldr	r2, [pc, #88]	; (8008498 <main+0x10c>)
 800843e:	6812      	ldr	r2, [r2, #0]
 8008440:	6812      	ldr	r2, [r2, #0]
 8008442:	2101      	movs	r1, #1
 8008444:	430a      	orrs	r2, r1
 8008446:	601a      	str	r2, [r3, #0]


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8008448:	4b14      	ldr	r3, [pc, #80]	; (800849c <main+0x110>)
 800844a:	2100      	movs	r1, #0
 800844c:	0018      	movs	r0, r3
 800844e:	f7fc fb17 	bl	8004a80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8008452:	4b12      	ldr	r3, [pc, #72]	; (800849c <main+0x110>)
 8008454:	2104      	movs	r1, #4
 8008456:	0018      	movs	r0, r3
 8008458:	f7fc fb12 	bl	8004a80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800845c:	4b10      	ldr	r3, [pc, #64]	; (80084a0 <main+0x114>)
 800845e:	2100      	movs	r1, #0
 8008460:	0018      	movs	r0, r3
 8008462:	f7fc fb0d 	bl	8004a80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8008466:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <main+0x114>)
 8008468:	2104      	movs	r1, #4
 800846a:	0018      	movs	r0, r3
 800846c:	f7fc fb08 	bl	8004a80 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart1, (uint8_t *) m_USART1dmaRxBuffer, 2);
 8008470:	490c      	ldr	r1, [pc, #48]	; (80084a4 <main+0x118>)
 8008472:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <main+0x11c>)
 8008474:	2202      	movs	r2, #2
 8008476:	0018      	movs	r0, r3
 8008478:	f7fd faaa 	bl	80059d0 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, (uint8_t *) m_USART2dmaRxBuffer, 2);
 800847c:	490b      	ldr	r1, [pc, #44]	; (80084ac <main+0x120>)
 800847e:	4b0c      	ldr	r3, [pc, #48]	; (80084b0 <main+0x124>)
 8008480:	2202      	movs	r2, #2
 8008482:	0018      	movs	r0, r3
 8008484:	f7fd faa4 	bl	80059d0 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8008488:	e7fe      	b.n	8008488 <main+0xfc>
 800848a:	46c0      	nop			; (mov r8, r8)
 800848c:	200008bc 	.word	0x200008bc
 8008490:	200009bc 	.word	0x200009bc
 8008494:	200008fc 	.word	0x200008fc
 8008498:	2000097c 	.word	0x2000097c
 800849c:	2000093c 	.word	0x2000093c
 80084a0:	2000087c 	.word	0x2000087c
 80084a4:	20000394 	.word	0x20000394
 80084a8:	20000b0c 	.word	0x20000b0c
 80084ac:	20000598 	.word	0x20000598
 80084b0:	20000b7c 	.word	0x20000b7c

080084b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b096      	sub	sp, #88	; 0x58
 80084b8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80084ba:	2328      	movs	r3, #40	; 0x28
 80084bc:	18fb      	adds	r3, r7, r3
 80084be:	220a      	movs	r2, #10
 80084c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80084c2:	2328      	movs	r3, #40	; 0x28
 80084c4:	18fb      	adds	r3, r7, r3
 80084c6:	2201      	movs	r2, #1
 80084c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80084ca:	2328      	movs	r3, #40	; 0x28
 80084cc:	18fb      	adds	r3, r7, r3
 80084ce:	2210      	movs	r2, #16
 80084d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80084d2:	2328      	movs	r3, #40	; 0x28
 80084d4:	18fb      	adds	r3, r7, r3
 80084d6:	2201      	movs	r2, #1
 80084d8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80084da:	2328      	movs	r3, #40	; 0x28
 80084dc:	18fb      	adds	r3, r7, r3
 80084de:	2202      	movs	r2, #2
 80084e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80084e2:	2328      	movs	r3, #40	; 0x28
 80084e4:	18fb      	adds	r3, r7, r3
 80084e6:	2200      	movs	r2, #0
 80084e8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80084ea:	2328      	movs	r3, #40	; 0x28
 80084ec:	18fb      	adds	r3, r7, r3
 80084ee:	22a0      	movs	r2, #160	; 0xa0
 80084f0:	0392      	lsls	r2, r2, #14
 80084f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80084f4:	2328      	movs	r3, #40	; 0x28
 80084f6:	18fb      	adds	r3, r7, r3
 80084f8:	2200      	movs	r2, #0
 80084fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80084fc:	2328      	movs	r3, #40	; 0x28
 80084fe:	18fb      	adds	r3, r7, r3
 8008500:	0018      	movs	r0, r3
 8008502:	f7fb fd2d 	bl	8003f60 <HAL_RCC_OscConfig>
 8008506:	1e03      	subs	r3, r0, #0
 8008508:	d006      	beq.n	8008518 <SystemClock_Config+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 800850a:	238f      	movs	r3, #143	; 0x8f
 800850c:	005a      	lsls	r2, r3, #1
 800850e:	4b2b      	ldr	r3, [pc, #172]	; (80085bc <SystemClock_Config+0x108>)
 8008510:	0011      	movs	r1, r2
 8008512:	0018      	movs	r0, r3
 8008514:	f000 f891 	bl	800863a <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008518:	2318      	movs	r3, #24
 800851a:	18fb      	adds	r3, r7, r3
 800851c:	2207      	movs	r2, #7
 800851e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008520:	2318      	movs	r3, #24
 8008522:	18fb      	adds	r3, r7, r3
 8008524:	2202      	movs	r2, #2
 8008526:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008528:	2318      	movs	r3, #24
 800852a:	18fb      	adds	r3, r7, r3
 800852c:	2200      	movs	r2, #0
 800852e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008530:	2318      	movs	r3, #24
 8008532:	18fb      	adds	r3, r7, r3
 8008534:	2200      	movs	r2, #0
 8008536:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008538:	2318      	movs	r3, #24
 800853a:	18fb      	adds	r3, r7, r3
 800853c:	2101      	movs	r1, #1
 800853e:	0018      	movs	r0, r3
 8008540:	f7fc f802 	bl	8004548 <HAL_RCC_ClockConfig>
 8008544:	1e03      	subs	r3, r0, #0
 8008546:	d007      	beq.n	8008558 <SystemClock_Config+0xa4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008548:	232c      	movs	r3, #44	; 0x2c
 800854a:	33ff      	adds	r3, #255	; 0xff
 800854c:	001a      	movs	r2, r3
 800854e:	4b1b      	ldr	r3, [pc, #108]	; (80085bc <SystemClock_Config+0x108>)
 8008550:	0011      	movs	r1, r2
 8008552:	0018      	movs	r0, r3
 8008554:	f000 f871 	bl	800863a <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8008558:	1d3b      	adds	r3, r7, #4
 800855a:	2221      	movs	r2, #33	; 0x21
 800855c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800855e:	1d3b      	adds	r3, r7, #4
 8008560:	2200      	movs	r2, #0
 8008562:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8008564:	1d3b      	adds	r3, r7, #4
 8008566:	2200      	movs	r2, #0
 8008568:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800856a:	1d3b      	adds	r3, r7, #4
 800856c:	0018      	movs	r0, r3
 800856e:	f7fc f951 	bl	8004814 <HAL_RCCEx_PeriphCLKConfig>
 8008572:	1e03      	subs	r3, r0, #0
 8008574:	d007      	beq.n	8008586 <SystemClock_Config+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8008576:	2334      	movs	r3, #52	; 0x34
 8008578:	33ff      	adds	r3, #255	; 0xff
 800857a:	001a      	movs	r2, r3
 800857c:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <SystemClock_Config+0x108>)
 800857e:	0011      	movs	r1, r2
 8008580:	0018      	movs	r0, r3
 8008582:	f000 f85a 	bl	800863a <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008586:	f7fc f925 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 800858a:	0002      	movs	r2, r0
 800858c:	23fa      	movs	r3, #250	; 0xfa
 800858e:	0099      	lsls	r1, r3, #2
 8008590:	0010      	movs	r0, r2
 8008592:	f7f7 fdb9 	bl	8000108 <__udivsi3>
 8008596:	0003      	movs	r3, r0
 8008598:	0018      	movs	r0, r3
 800859a:	f7fa f973 	bl	8002884 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800859e:	2004      	movs	r0, #4
 80085a0:	f7fa f97e 	bl	80028a0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80085a4:	2301      	movs	r3, #1
 80085a6:	425b      	negs	r3, r3
 80085a8:	2200      	movs	r2, #0
 80085aa:	2100      	movs	r1, #0
 80085ac:	0018      	movs	r0, r3
 80085ae:	f7fa f933 	bl	8002818 <HAL_NVIC_SetPriority>
}
 80085b2:	46c0      	nop			; (mov r8, r8)
 80085b4:	46bd      	mov	sp, r7
 80085b6:	b016      	add	sp, #88	; 0x58
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	46c0      	nop			; (mov r8, r8)
 80085bc:	08009e7c 	.word	0x08009e7c

080085c0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 80085c4:	2200      	movs	r2, #0
 80085c6:	2101      	movs	r1, #1
 80085c8:	200a      	movs	r0, #10
 80085ca:	f7fa f925 	bl	8002818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80085ce:	200a      	movs	r0, #10
 80085d0:	f7fa f938 	bl	8002844 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80085d4:	2200      	movs	r2, #0
 80085d6:	2102      	movs	r1, #2
 80085d8:	2011      	movs	r0, #17
 80085da:	f7fa f91d 	bl	8002818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80085de:	2011      	movs	r0, #17
 80085e0:	f7fa f930 	bl	8002844 <HAL_NVIC_EnableIRQ>
  /* TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80085e4:	2200      	movs	r2, #0
 80085e6:	2100      	movs	r1, #0
 80085e8:	2013      	movs	r0, #19
 80085ea:	f7fa f915 	bl	8002818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80085ee:	2013      	movs	r0, #19
 80085f0:	f7fa f928 	bl	8002844 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80085f4:	2200      	movs	r2, #0
 80085f6:	2103      	movs	r1, #3
 80085f8:	201b      	movs	r0, #27
 80085fa:	f7fa f90d 	bl	8002818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80085fe:	201b      	movs	r0, #27
 8008600:	f7fa f920 	bl	8002844 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8008604:	2200      	movs	r2, #0
 8008606:	2103      	movs	r1, #3
 8008608:	201c      	movs	r0, #28
 800860a:	f7fa f905 	bl	8002818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800860e:	201c      	movs	r0, #28
 8008610:	f7fa f918 	bl	8002844 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 1, 0);
 8008614:	2200      	movs	r2, #0
 8008616:	2101      	movs	r1, #1
 8008618:	200b      	movs	r0, #11
 800861a:	f7fa f8fd 	bl	8002818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800861e:	200b      	movs	r0, #11
 8008620:	f7fa f910 	bl	8002844 <HAL_NVIC_EnableIRQ>
  /* TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM16_IRQn, 2, 0);
 8008624:	2200      	movs	r2, #0
 8008626:	2102      	movs	r1, #2
 8008628:	2015      	movs	r0, #21
 800862a:	f7fa f8f5 	bl	8002818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800862e:	2015      	movs	r0, #21
 8008630:	f7fa f908 	bl	8002844 <HAL_NVIC_EnableIRQ>
}
 8008634:	46c0      	nop			; (mov r8, r8)
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b082      	sub	sp, #8
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8008644:	e7fe      	b.n	8008644 <_Error_Handler+0xa>
	...

08008648 <IsFunctionCode>:

static const uint8_t m_funcEnumValues[] = { 0x03, 0x06 };

static uint8_t IsFunctionCode(uint8_t value);

static uint8_t IsFunctionCode(uint8_t value) {
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	0002      	movs	r2, r0
 8008650:	1dfb      	adds	r3, r7, #7
 8008652:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < FUNCTIONS_NUMBER; i++)
 8008654:	230f      	movs	r3, #15
 8008656:	18fb      	adds	r3, r7, r3
 8008658:	2200      	movs	r2, #0
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	e011      	b.n	8008682 <IsFunctionCode+0x3a>
		if (m_funcEnumValues[i] == value)
 800865e:	230f      	movs	r3, #15
 8008660:	18fb      	adds	r3, r7, r3
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	4a0c      	ldr	r2, [pc, #48]	; (8008698 <IsFunctionCode+0x50>)
 8008666:	5cd3      	ldrb	r3, [r2, r3]
 8008668:	1dfa      	adds	r2, r7, #7
 800866a:	7812      	ldrb	r2, [r2, #0]
 800866c:	429a      	cmp	r2, r3
 800866e:	d101      	bne.n	8008674 <IsFunctionCode+0x2c>
			return ALL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	e00c      	b.n	800868e <IsFunctionCode+0x46>
	for (uint8_t i = 0; i < FUNCTIONS_NUMBER; i++)
 8008674:	230f      	movs	r3, #15
 8008676:	18fb      	adds	r3, r7, r3
 8008678:	781a      	ldrb	r2, [r3, #0]
 800867a:	230f      	movs	r3, #15
 800867c:	18fb      	adds	r3, r7, r3
 800867e:	3201      	adds	r2, #1
 8008680:	701a      	strb	r2, [r3, #0]
 8008682:	230f      	movs	r3, #15
 8008684:	18fb      	adds	r3, r7, r3
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d9e8      	bls.n	800865e <IsFunctionCode+0x16>

	return ANY_ERROR;
 800868c:	23ff      	movs	r3, #255	; 0xff
}
 800868e:	0018      	movs	r0, r3
 8008690:	46bd      	mov	sp, r7
 8008692:	b004      	add	sp, #16
 8008694:	bd80      	pop	{r7, pc}
 8008696:	46c0      	nop			; (mov r8, r8)
 8008698:	08009fac 	.word	0x08009fac

0800869c <EncodeReplyWrite>:

void EncodeReplyWrite(struct ModbusRecvMessage *mbusMessage, uint8_t *rawReply,
		uint8_t *rawReplyLength) {
 800869c:	b590      	push	{r4, r7, lr}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
	rawReply[RP_SLAVE_ID_INDEX] = mbusMessage->Slave;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	781a      	ldrb	r2, [r3, #0]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	701a      	strb	r2, [r3, #0]
	rawReply[RP_FUNCTION_INDEX] = mbusMessage->Function;
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	3301      	adds	r3, #1
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	7852      	ldrb	r2, [r2, #1]
 80086b8:	701a      	strb	r2, [r3, #0]
	rawReply[RP_W_COMMAND_INDEX] = mbusMessage->Command.Bytes[0];
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	3302      	adds	r3, #2
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	7892      	ldrb	r2, [r2, #2]
 80086c2:	701a      	strb	r2, [r3, #0]
	rawReply[RP_W_COMMAND_INDEX + 1] = mbusMessage->Command.Bytes[1];
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	3303      	adds	r3, #3
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	78d2      	ldrb	r2, [r2, #3]
 80086cc:	701a      	strb	r2, [r3, #0]

	for (uint16_t i = 0; i < mbusMessage->DataLength; i++)
 80086ce:	2316      	movs	r3, #22
 80086d0:	18fb      	adds	r3, r7, r3
 80086d2:	2200      	movs	r2, #0
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	e015      	b.n	8008704 <EncodeReplyWrite+0x68>
		rawReply[RP_W_DATA_INDEX + i] = mbusMessage->Data[i];
 80086d8:	2316      	movs	r3, #22
 80086da:	18fb      	adds	r3, r7, r3
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	3304      	adds	r3, #4
 80086e0:	001a      	movs	r2, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	189a      	adds	r2, r3, r2
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6899      	ldr	r1, [r3, #8]
 80086ea:	2316      	movs	r3, #22
 80086ec:	18fb      	adds	r3, r7, r3
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	18cb      	adds	r3, r1, r3
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	7013      	strb	r3, [r2, #0]
	for (uint16_t i = 0; i < mbusMessage->DataLength; i++)
 80086f6:	2316      	movs	r3, #22
 80086f8:	18fb      	adds	r3, r7, r3
 80086fa:	881a      	ldrh	r2, [r3, #0]
 80086fc:	2316      	movs	r3, #22
 80086fe:	18fb      	adds	r3, r7, r3
 8008700:	3201      	adds	r2, #1
 8008702:	801a      	strh	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	791b      	ldrb	r3, [r3, #4]
 8008708:	b29b      	uxth	r3, r3
 800870a:	2216      	movs	r2, #22
 800870c:	18ba      	adds	r2, r7, r2
 800870e:	8812      	ldrh	r2, [r2, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d3e1      	bcc.n	80086d8 <EncodeReplyWrite+0x3c>
	*rawReplyLength = RP_W_NO_CRC_NO_DATA_LENGTH + mbusMessage->DataLength;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	791b      	ldrb	r3, [r3, #4]
 8008718:	3304      	adds	r3, #4
 800871a:	b2da      	uxtb	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	701a      	strb	r2, [r3, #0]

	uint16_t crc16 = CRC16(rawReply, *rawReplyLength);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	b29a      	uxth	r2, r3
 8008726:	2314      	movs	r3, #20
 8008728:	18fc      	adds	r4, r7, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	0011      	movs	r1, r2
 800872e:	0018      	movs	r0, r3
 8008730:	f7ff fa78 	bl	8007c24 <CRC16>
 8008734:	0003      	movs	r3, r0
 8008736:	8023      	strh	r3, [r4, #0]

	rawReply[*rawReplyLength] = (uint8_t) crc16;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	001a      	movs	r2, r3
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	189b      	adds	r3, r3, r2
 8008742:	2214      	movs	r2, #20
 8008744:	18ba      	adds	r2, r7, r2
 8008746:	8812      	ldrh	r2, [r2, #0]
 8008748:	b2d2      	uxtb	r2, r2
 800874a:	701a      	strb	r2, [r3, #0]
	rawReply[*rawReplyLength + 1] = (uint8_t) (crc16 >> 8);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	3301      	adds	r3, #1
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	18d3      	adds	r3, r2, r3
 8008756:	2214      	movs	r2, #20
 8008758:	18ba      	adds	r2, r7, r2
 800875a:	8812      	ldrh	r2, [r2, #0]
 800875c:	0a12      	lsrs	r2, r2, #8
 800875e:	b292      	uxth	r2, r2
 8008760:	b2d2      	uxtb	r2, r2
 8008762:	701a      	strb	r2, [r3, #0]

	*rawReplyLength += CRC_LENGTH;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	3302      	adds	r3, #2
 800876a:	b2da      	uxtb	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	701a      	strb	r2, [r3, #0]
}
 8008770:	46c0      	nop			; (mov r8, r8)
 8008772:	46bd      	mov	sp, r7
 8008774:	b007      	add	sp, #28
 8008776:	bd90      	pop	{r4, r7, pc}

08008778 <EncodeReplyRead>:

void EncodeReplyRead(struct ModbusRecvMessage *mbusMessage, uint8_t *resultData,
		uint8_t commandResultLength, uint8_t *resultDataLength) {
 8008778:	b590      	push	{r4, r7, lr}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	1dfb      	adds	r3, r7, #7
 8008786:	701a      	strb	r2, [r3, #0]
	resultData[RP_SLAVE_ID_INDEX] = mbusMessage->Slave;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	781a      	ldrb	r2, [r3, #0]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	701a      	strb	r2, [r3, #0]
	resultData[RP_FUNCTION_INDEX] = mbusMessage->Function;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	3301      	adds	r3, #1
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	7852      	ldrb	r2, [r2, #1]
 8008798:	701a      	strb	r2, [r3, #0]
	resultData[RP_R_DATA_COUNT_INDEX] = commandResultLength;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	3302      	adds	r3, #2
 800879e:	1dfa      	adds	r2, r7, #7
 80087a0:	7812      	ldrb	r2, [r2, #0]
 80087a2:	701a      	strb	r2, [r3, #0]
	*resultDataLength = RP_R_NO_CRC_NO_DATA_LENGTH + commandResultLength;
 80087a4:	1dfb      	adds	r3, r7, #7
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	3303      	adds	r3, #3
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	701a      	strb	r2, [r3, #0]

	uint16_t crc16 = CRC16(resultData, *resultDataLength);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	2316      	movs	r3, #22
 80087b8:	18fc      	adds	r4, r7, r3
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	0011      	movs	r1, r2
 80087be:	0018      	movs	r0, r3
 80087c0:	f7ff fa30 	bl	8007c24 <CRC16>
 80087c4:	0003      	movs	r3, r0
 80087c6:	8023      	strh	r3, [r4, #0]

	resultData[*resultDataLength] = (uint8_t) crc16;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	001a      	movs	r2, r3
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	189b      	adds	r3, r3, r2
 80087d2:	2216      	movs	r2, #22
 80087d4:	18ba      	adds	r2, r7, r2
 80087d6:	8812      	ldrh	r2, [r2, #0]
 80087d8:	b2d2      	uxtb	r2, r2
 80087da:	701a      	strb	r2, [r3, #0]
	resultData[*resultDataLength + 1] = (uint8_t) (crc16 >> 8);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	3301      	adds	r3, #1
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	18d3      	adds	r3, r2, r3
 80087e6:	2216      	movs	r2, #22
 80087e8:	18ba      	adds	r2, r7, r2
 80087ea:	8812      	ldrh	r2, [r2, #0]
 80087ec:	0a12      	lsrs	r2, r2, #8
 80087ee:	b292      	uxth	r2, r2
 80087f0:	b2d2      	uxtb	r2, r2
 80087f2:	701a      	strb	r2, [r3, #0]

	*resultDataLength += CRC_LENGTH;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	3302      	adds	r3, #2
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	701a      	strb	r2, [r3, #0]
}
 8008800:	46c0      	nop			; (mov r8, r8)
 8008802:	46bd      	mov	sp, r7
 8008804:	b007      	add	sp, #28
 8008806:	bd90      	pop	{r4, r7, pc}

08008808 <DecodeRequest>:

enum ModbusErrorCode DecodeRequest(uint8_t *rawRequest, uint8_t requestLength,
		struct ModbusRecvMessage *mbusMessage) {
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	607a      	str	r2, [r7, #4]
 8008812:	230b      	movs	r3, #11
 8008814:	18fb      	adds	r3, r7, r3
 8008816:	1c0a      	adds	r2, r1, #0
 8008818:	701a      	strb	r2, [r3, #0]
	mbusMessage->Slave = rawRequest[RQ_SLAVE_ID_INDEX];
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	781a      	ldrb	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	701a      	strb	r2, [r3, #0]
	if (mbusMessage->Slave != SlaveId)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	b29a      	uxth	r2, r3
 8008828:	4b2a      	ldr	r3, [pc, #168]	; (80088d4 <DecodeRequest+0xcc>)
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	429a      	cmp	r2, r3
 800882e:	d001      	beq.n	8008834 <DecodeRequest+0x2c>
		return MBS_ILLEGAL_SLAVE;
 8008830:	2306      	movs	r3, #6
 8008832:	e04a      	b.n	80088ca <DecodeRequest+0xc2>

	if (requestLength < MIN_MESSAGE_SIZE || requestLength > MAX_MESSAGE_SIZE)
 8008834:	230b      	movs	r3, #11
 8008836:	18fb      	adds	r3, r7, r3
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	2b03      	cmp	r3, #3
 800883c:	d801      	bhi.n	8008842 <DecodeRequest+0x3a>
		return MBS_ILLEGAl_DATA;
 800883e:	2303      	movs	r3, #3
 8008840:	e043      	b.n	80088ca <DecodeRequest+0xc2>

	if (CRC16(rawRequest, requestLength - CRC_LENGTH) !=
 8008842:	230b      	movs	r3, #11
 8008844:	18fb      	adds	r3, r7, r3
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	b29b      	uxth	r3, r3
 800884a:	3b02      	subs	r3, #2
 800884c:	b29a      	uxth	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	0011      	movs	r1, r2
 8008852:	0018      	movs	r0, r3
 8008854:	f7ff f9e6 	bl	8007c24 <CRC16>
 8008858:	0003      	movs	r3, r0
 800885a:	0019      	movs	r1, r3
	BYTES_2_SHORT(rawRequest[requestLength + RQ_CRC_INDEX],
 800885c:	230b      	movs	r3, #11
 800885e:	18fb      	adds	r3, r7, r3
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	3b02      	subs	r3, #2
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	18d3      	adds	r3, r2, r3
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	0018      	movs	r0, r3
 800886c:	230b      	movs	r3, #11
 800886e:	18fb      	adds	r3, r7, r3
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	3b01      	subs	r3, #1
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	18d3      	adds	r3, r2, r3
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	021b      	lsls	r3, r3, #8
 800887c:	4303      	orrs	r3, r0
	if (CRC16(rawRequest, requestLength - CRC_LENGTH) !=
 800887e:	4299      	cmp	r1, r3
 8008880:	d001      	beq.n	8008886 <DecodeRequest+0x7e>
			rawRequest[requestLength + RQ_CRC_INDEX + 1]))
		return MBS_ILLEGAL_CRC;
 8008882:	2305      	movs	r3, #5
 8008884:	e021      	b.n	80088ca <DecodeRequest+0xc2>

	mbusMessage->Function = rawRequest[RQ_FUNCTION_INDEX];
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3301      	adds	r3, #1
 800888a:	781a      	ldrb	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	705a      	strb	r2, [r3, #1]
	if (IsFunctionCode(mbusMessage->Function))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	785b      	ldrb	r3, [r3, #1]
 8008894:	0018      	movs	r0, r3
 8008896:	f7ff fed7 	bl	8008648 <IsFunctionCode>
 800889a:	1e03      	subs	r3, r0, #0
 800889c:	d001      	beq.n	80088a2 <DecodeRequest+0x9a>
		return MBS_ILLEGAL_FUNCTION;
 800889e:	2301      	movs	r3, #1
 80088a0:	e013      	b.n	80088ca <DecodeRequest+0xc2>

	mbusMessage->Data = rawRequest + RQ_DATA_INDEX;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	1d1a      	adds	r2, r3, #4
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	609a      	str	r2, [r3, #8]
	mbusMessage->DataLength = requestLength - CRC_LENGTH - SLAVE_ID_LENGTH
			- FUNCTION_LENGTH - ADDRESS_LENGTH;
 80088aa:	230b      	movs	r3, #11
 80088ac:	18fb      	adds	r3, r7, r3
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	3b06      	subs	r3, #6
 80088b2:	b2da      	uxtb	r2, r3
	mbusMessage->DataLength = requestLength - CRC_LENGTH - SLAVE_ID_LENGTH
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	711a      	strb	r2, [r3, #4]
	mbusMessage->Command.Bytes[0] = rawRequest[RQ_COMMAND_INDEX];
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	789a      	ldrb	r2, [r3, #2]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	709a      	strb	r2, [r3, #2]
	mbusMessage->Command.Bytes[1] = rawRequest[RQ_COMMAND_INDEX + 1];
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	78da      	ldrb	r2, [r3, #3]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	70da      	strb	r2, [r3, #3]

	return MBS_ALL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	0018      	movs	r0, r3
 80088cc:	46bd      	mov	sp, r7
 80088ce:	b004      	add	sp, #16
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	46c0      	nop			; (mov r8, r8)
 80088d4:	20000868 	.word	0x20000868

080088d8 <ProcessError>:

//no error handling
enum ModbusErrorCode ProcessError(enum ModbusErrorCode error,
		uint8_t *sendBuffer, uint8_t *resultLength) {
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	607a      	str	r2, [r7, #4]
 80088e2:	230f      	movs	r3, #15
 80088e4:	18fb      	adds	r3, r7, r3
 80088e6:	1c02      	adds	r2, r0, #0
 80088e8:	701a      	strb	r2, [r3, #0]
	return error;
 80088ea:	230f      	movs	r3, #15
 80088ec:	18fb      	adds	r3, r7, r3
 80088ee:	781b      	ldrb	r3, [r3, #0]
}
 80088f0:	0018      	movs	r0, r3
 80088f2:	46bd      	mov	sp, r7
 80088f4:	b004      	add	sp, #16
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <InitializeModbus>:

void InitializeModbus(void) {
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
	uint16_t flashSlaveId = ParamsUnion.Params.F_SlaveId;
 80088fe:	1dbb      	adds	r3, r7, #6
 8008900:	4a09      	ldr	r2, [pc, #36]	; (8008928 <InitializeModbus+0x30>)
 8008902:	8912      	ldrh	r2, [r2, #8]
 8008904:	801a      	strh	r2, [r3, #0]

	if (flashSlaveId == 0) {
 8008906:	1dbb      	adds	r3, r7, #6
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d103      	bne.n	8008916 <InitializeModbus+0x1e>
		SlaveId = m_defaultSlaveId;
 800890e:	2201      	movs	r2, #1
 8008910:	4b06      	ldr	r3, [pc, #24]	; (800892c <InitializeModbus+0x34>)
 8008912:	801a      	strh	r2, [r3, #0]
		return;
 8008914:	e005      	b.n	8008922 <InitializeModbus+0x2a>
	}

	SlaveId = (uint8_t) flashSlaveId;
 8008916:	1dbb      	adds	r3, r7, #6
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	b29a      	uxth	r2, r3
 800891e:	4b03      	ldr	r3, [pc, #12]	; (800892c <InitializeModbus+0x34>)
 8008920:	801a      	strh	r2, [r3, #0]
}
 8008922:	46bd      	mov	sp, r7
 8008924:	b002      	add	sp, #8
 8008926:	bd80      	pop	{r7, pc}
 8008928:	0800f800 	.word	0x0800f800
 800892c:	20000868 	.word	0x20000868

08008930 <InitializeDriversWorker>:
		{ GPIOF, GPIO_PIN_1, EXTI0_1_IRQn, FREE } };

static uint32_t m_BESCDriverARR, m_LEDDriverARR, m_BCSDriverMaxARR,
		m_BCSDriverMinARR;

void InitializeDriversWorker() {
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
	m_BESCDriverARR = SystemCoreClock / ((TIM_PWM_PSC + 1) * BESC_PWM_FREQUENCY)
 8008934:	4b15      	ldr	r3, [pc, #84]	; (800898c <InitializeDriversWorker+0x5c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4915      	ldr	r1, [pc, #84]	; (8008990 <InitializeDriversWorker+0x60>)
 800893a:	0018      	movs	r0, r3
 800893c:	f7f7 fbe4 	bl	8000108 <__udivsi3>
 8008940:	0003      	movs	r3, r0
			- 1;
 8008942:	1e5a      	subs	r2, r3, #1
	m_BESCDriverARR = SystemCoreClock / ((TIM_PWM_PSC + 1) * BESC_PWM_FREQUENCY)
 8008944:	4b13      	ldr	r3, [pc, #76]	; (8008994 <InitializeDriversWorker+0x64>)
 8008946:	601a      	str	r2, [r3, #0]
	m_LEDDriverARR = SystemCoreClock / ((TIM_PWM_PSC + 1) * LED_PWM_FREQUENCY)
 8008948:	4b10      	ldr	r3, [pc, #64]	; (800898c <InitializeDriversWorker+0x5c>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	23fa      	movs	r3, #250	; 0xfa
 800894e:	0159      	lsls	r1, r3, #5
 8008950:	0010      	movs	r0, r2
 8008952:	f7f7 fbd9 	bl	8000108 <__udivsi3>
 8008956:	0003      	movs	r3, r0
			- 1;
 8008958:	1e5a      	subs	r2, r3, #1
	m_LEDDriverARR = SystemCoreClock / ((TIM_PWM_PSC + 1) * LED_PWM_FREQUENCY)
 800895a:	4b0f      	ldr	r3, [pc, #60]	; (8008998 <InitializeDriversWorker+0x68>)
 800895c:	601a      	str	r2, [r3, #0]
	m_BCSDriverMinARR = SystemCoreClock
			/ ((TIM_PWM_PSC + 1) * BCS_MAX_FREQUENCY) - 1;
 800895e:	4b0b      	ldr	r3, [pc, #44]	; (800898c <InitializeDriversWorker+0x5c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	490e      	ldr	r1, [pc, #56]	; (800899c <InitializeDriversWorker+0x6c>)
 8008964:	0018      	movs	r0, r3
 8008966:	f7f7 fbcf 	bl	8000108 <__udivsi3>
 800896a:	0003      	movs	r3, r0
 800896c:	1e5a      	subs	r2, r3, #1
	m_BCSDriverMinARR = SystemCoreClock
 800896e:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <InitializeDriversWorker+0x70>)
 8008970:	601a      	str	r2, [r3, #0]
	m_BCSDriverMaxARR = SystemCoreClock
			/ ((TIM_PWM_PSC + 1) * BCS_MIN_FREQUECNY) - 1;
 8008972:	4b06      	ldr	r3, [pc, #24]	; (800898c <InitializeDriversWorker+0x5c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	490b      	ldr	r1, [pc, #44]	; (80089a4 <InitializeDriversWorker+0x74>)
 8008978:	0018      	movs	r0, r3
 800897a:	f7f7 fbc5 	bl	8000108 <__udivsi3>
 800897e:	0003      	movs	r3, r0
 8008980:	1e5a      	subs	r2, r3, #1
	m_BCSDriverMaxARR = SystemCoreClock
 8008982:	4b09      	ldr	r3, [pc, #36]	; (80089a8 <InitializeDriversWorker+0x78>)
 8008984:	601a      	str	r2, [r3, #0]
}
 8008986:	46c0      	nop			; (mov r8, r8)
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20000298 	.word	0x20000298
 8008990:	00000bb8 	.word	0x00000bb8
 8008994:	2000079c 	.word	0x2000079c
 8008998:	200007a0 	.word	0x200007a0
 800899c:	0001d394 	.word	0x0001d394
 80089a0:	200007a8 	.word	0x200007a8
 80089a4:	00002710 	.word	0x00002710
 80089a8:	200007a4 	.word	0x200007a4

080089ac <InitializeBESCDriver>:

uint8_t InitializeBESCDriver(enum TIMChannel pwmTIMCh,
		struct BESCDriverHandle *handle) {
 80089ac:	b590      	push	{r4, r7, lr}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	0002      	movs	r2, r0
 80089b4:	6039      	str	r1, [r7, #0]
 80089b6:	1dfb      	adds	r3, r7, #7
 80089b8:	701a      	strb	r2, [r3, #0]
	struct TIMChannelHandle *tim = &m_TIMChannels[pwmTIMCh];
 80089ba:	1dfb      	adds	r3, r7, #7
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	011a      	lsls	r2, r3, #4
 80089c0:	4b1f      	ldr	r3, [pc, #124]	; (8008a40 <InitializeBESCDriver+0x94>)
 80089c2:	18d3      	adds	r3, r2, r3
 80089c4:	60fb      	str	r3, [r7, #12]

	if (tim->State == OCCUPIED)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	7b1b      	ldrb	r3, [r3, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <InitializeBESCDriver+0x26>
		return ANY_ERROR;
 80089ce:	23ff      	movs	r3, #255	; 0xff
 80089d0:	e031      	b.n	8008a36 <InitializeBESCDriver+0x8a>

	__HAL_TIM_SET_COMPARE(tim->Tim, tim->Channel,
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3334      	adds	r3, #52	; 0x34
 80089da:	001a      	movs	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	089b      	lsrs	r3, r3, #2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	18d4      	adds	r4, r2, r3
 80089e6:	4b17      	ldr	r3, [pc, #92]	; (8008a44 <InitializeBESCDriver+0x98>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	0018      	movs	r0, r3
 80089ec:	f7f9 fbdc 	bl	80021a8 <__aeabi_ui2d>
 80089f0:	4a15      	ldr	r2, [pc, #84]	; (8008a48 <InitializeBESCDriver+0x9c>)
 80089f2:	4b16      	ldr	r3, [pc, #88]	; (8008a4c <InitializeBESCDriver+0xa0>)
 80089f4:	f7f8 fdcc 	bl	8001590 <__aeabi_dmul>
 80089f8:	0002      	movs	r2, r0
 80089fa:	000b      	movs	r3, r1
 80089fc:	0010      	movs	r0, r2
 80089fe:	0019      	movs	r1, r3
 8008a00:	f7f7 fc76 	bl	80002f0 <__aeabi_d2uiz>
 8008a04:	0003      	movs	r3, r0
 8008a06:	6023      	str	r3, [r4, #0]
			m_BESCDriverARR * (1 - STOPPED_DC));
	__HAL_TIM_SET_PRESCALER(tim->Tim, TIM_PWM_PSC);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2209      	movs	r2, #9
 8008a10:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(tim->Tim, m_BESCDriverARR);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a0a      	ldr	r2, [pc, #40]	; (8008a44 <InitializeBESCDriver+0x98>)
 8008a1a:	6812      	ldr	r2, [r2, #0]
 8008a1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a08      	ldr	r2, [pc, #32]	; (8008a44 <InitializeBESCDriver+0x98>)
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	60da      	str	r2, [r3, #12]

	tim->State = OCCUPIED;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	731a      	strb	r2, [r3, #12]

	handle->PWMTIM = tim;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]

	return ALL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	0018      	movs	r0, r3
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	b005      	add	sp, #20
 8008a3c:	bd90      	pop	{r4, r7, pc}
 8008a3e:	46c0      	nop			; (mov r8, r8)
 8008a40:	2000021c 	.word	0x2000021c
 8008a44:	2000079c 	.word	0x2000079c
 8008a48:	9999999a 	.word	0x9999999a
 8008a4c:	3fe19999 	.word	0x3fe19999

08008a50 <InitializeLEDDriver>:

uint8_t InitializeLEDDriver(enum TIMChannel pwmTIMCh,
		struct LEDDriverHandle *handle) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	0002      	movs	r2, r0
 8008a58:	6039      	str	r1, [r7, #0]
 8008a5a:	1dfb      	adds	r3, r7, #7
 8008a5c:	701a      	strb	r2, [r3, #0]
	struct TIMChannelHandle *tim = &m_TIMChannels[pwmTIMCh];
 8008a5e:	1dfb      	adds	r3, r7, #7
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	011a      	lsls	r2, r3, #4
 8008a64:	4b18      	ldr	r3, [pc, #96]	; (8008ac8 <InitializeLEDDriver+0x78>)
 8008a66:	18d3      	adds	r3, r2, r3
 8008a68:	60fb      	str	r3, [r7, #12]

	if (tim->State == OCCUPIED)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	7b1b      	ldrb	r3, [r3, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <InitializeLEDDriver+0x26>
		return ANY_ERROR;
 8008a72:	23ff      	movs	r3, #255	; 0xff
 8008a74:	e023      	b.n	8008abe <InitializeLEDDriver+0x6e>

	__HAL_TIM_SET_COMPARE(tim->Tim, tim->Channel, m_LEDDriverARR);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3334      	adds	r3, #52	; 0x34
 8008a7e:	001a      	movs	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	089b      	lsrs	r3, r3, #2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	18d3      	adds	r3, r2, r3
 8008a8a:	4a10      	ldr	r2, [pc, #64]	; (8008acc <InitializeLEDDriver+0x7c>)
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_PRESCALER(tim->Tim, TIM_PWM_PSC);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2209      	movs	r2, #9
 8008a98:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(tim->Tim, m_LEDDriverARR);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a0a      	ldr	r2, [pc, #40]	; (8008acc <InitializeLEDDriver+0x7c>)
 8008aa2:	6812      	ldr	r2, [r2, #0]
 8008aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a08      	ldr	r2, [pc, #32]	; (8008acc <InitializeLEDDriver+0x7c>)
 8008aac:	6812      	ldr	r2, [r2, #0]
 8008aae:	60da      	str	r2, [r3, #12]

	tim->State = OCCUPIED;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	731a      	strb	r2, [r3, #12]

	handle->PWMTIM = tim;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	601a      	str	r2, [r3, #0]

	return ALL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	0018      	movs	r0, r3
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	b004      	add	sp, #16
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	46c0      	nop			; (mov r8, r8)
 8008ac8:	2000021c 	.word	0x2000021c
 8008acc:	200007a0 	.word	0x200007a0

08008ad0 <InitializeBCSDriver>:

uint8_t InitializeBCSDriver(enum TIMChannel pwmTIMCh,
		enum GPIOChannel directionGPIOCh, enum GPIOChannel disableGPIOCh,
		enum GPIOChannel terminalGPIOCh, struct BCSDriverHandle *handle) {
 8008ad0:	b5b0      	push	{r4, r5, r7, lr}
 8008ad2:	b092      	sub	sp, #72	; 0x48
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	0005      	movs	r5, r0
 8008ad8:	000c      	movs	r4, r1
 8008ada:	0010      	movs	r0, r2
 8008adc:	0019      	movs	r1, r3
 8008ade:	1dfb      	adds	r3, r7, #7
 8008ae0:	1c2a      	adds	r2, r5, #0
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	1dbb      	adds	r3, r7, #6
 8008ae6:	1c22      	adds	r2, r4, #0
 8008ae8:	701a      	strb	r2, [r3, #0]
 8008aea:	1d7b      	adds	r3, r7, #5
 8008aec:	1c02      	adds	r2, r0, #0
 8008aee:	701a      	strb	r2, [r3, #0]
 8008af0:	1d3b      	adds	r3, r7, #4
 8008af2:	1c0a      	adds	r2, r1, #0
 8008af4:	701a      	strb	r2, [r3, #0]
	struct TIMChannelHandle *timCh = &m_TIMChannels[pwmTIMCh];
 8008af6:	1dfb      	adds	r3, r7, #7
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	011a      	lsls	r2, r3, #4
 8008afc:	4b6e      	ldr	r3, [pc, #440]	; (8008cb8 <InitializeBCSDriver+0x1e8>)
 8008afe:	18d3      	adds	r3, r2, r3
 8008b00:	643b      	str	r3, [r7, #64]	; 0x40
	struct GPIOChannelHandle *direction = &m_GPIOChannels[directionGPIOCh];
 8008b02:	1dbb      	adds	r3, r7, #6
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	00da      	lsls	r2, r3, #3
 8008b08:	4b6c      	ldr	r3, [pc, #432]	; (8008cbc <InitializeBCSDriver+0x1ec>)
 8008b0a:	18d3      	adds	r3, r2, r3
 8008b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	struct GPIOChannelHandle *disable = &m_GPIOChannels[disableGPIOCh];
 8008b0e:	1d7b      	adds	r3, r7, #5
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	00da      	lsls	r2, r3, #3
 8008b14:	4b69      	ldr	r3, [pc, #420]	; (8008cbc <InitializeBCSDriver+0x1ec>)
 8008b16:	18d3      	adds	r3, r2, r3
 8008b18:	63bb      	str	r3, [r7, #56]	; 0x38
	struct GPIOChannelHandle *terminal = &m_GPIOChannels[terminalGPIOCh];
 8008b1a:	1d3b      	adds	r3, r7, #4
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	00da      	lsls	r2, r3, #3
 8008b20:	4b66      	ldr	r3, [pc, #408]	; (8008cbc <InitializeBCSDriver+0x1ec>)
 8008b22:	18d3      	adds	r3, r2, r3
 8008b24:	637b      	str	r3, [r7, #52]	; 0x34

	if (timCh->State == OCCUPIED || direction->State == OCCUPIED
 8008b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b28:	7b1b      	ldrb	r3, [r3, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00b      	beq.n	8008b46 <InitializeBCSDriver+0x76>
 8008b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b30:	79db      	ldrb	r3, [r3, #7]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d007      	beq.n	8008b46 <InitializeBCSDriver+0x76>
			|| disable->State == OCCUPIED || terminal->State == OCCUPIED)
 8008b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b38:	79db      	ldrb	r3, [r3, #7]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <InitializeBCSDriver+0x76>
 8008b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b40:	79db      	ldrb	r3, [r3, #7]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <InitializeBCSDriver+0x7a>
		return ANY_ERROR;
 8008b46:	23ff      	movs	r3, #255	; 0xff
 8008b48:	e0b2      	b.n	8008cb0 <InitializeBCSDriver+0x1e0>

	__HAL_TIM_SET_COMPARE(timCh->Tim, timCh->Channel, m_BCSDriverMaxARR / 2);
 8008b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3334      	adds	r3, #52	; 0x34
 8008b52:	001a      	movs	r2, r3
 8008b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	089b      	lsrs	r3, r3, #2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	18d3      	adds	r3, r2, r3
 8008b5e:	4a58      	ldr	r2, [pc, #352]	; (8008cc0 <InitializeBCSDriver+0x1f0>)
 8008b60:	6812      	ldr	r2, [r2, #0]
 8008b62:	0852      	lsrs	r2, r2, #1
 8008b64:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(timCh->Tim, m_BCSDriverMaxARR);
 8008b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a54      	ldr	r2, [pc, #336]	; (8008cc0 <InitializeBCSDriver+0x1f0>)
 8008b6e:	6812      	ldr	r2, [r2, #0]
 8008b70:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a52      	ldr	r2, [pc, #328]	; (8008cc0 <InitializeBCSDriver+0x1f0>)
 8008b78:	6812      	ldr	r2, [r2, #0]
 8008b7a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(timCh->Tim, TIM_PWM_PSC);
 8008b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2209      	movs	r2, #9
 8008b84:	629a      	str	r2, [r3, #40]	; 0x28

	GPIO_InitTypeDef GPIOInitStruct = { .Pin = direction->Pin, .Mode =
 8008b86:	2320      	movs	r3, #32
 8008b88:	18fb      	adds	r3, r7, r3
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	2314      	movs	r3, #20
 8008b8e:	001a      	movs	r2, r3
 8008b90:	2100      	movs	r1, #0
 8008b92:	f001 f8f8 	bl	8009d86 <memset>
 8008b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b98:	889b      	ldrh	r3, [r3, #4]
 8008b9a:	001a      	movs	r2, r3
 8008b9c:	2320      	movs	r3, #32
 8008b9e:	18fb      	adds	r3, r7, r3
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	2320      	movs	r3, #32
 8008ba4:	18fb      	adds	r3, r7, r3
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	605a      	str	r2, [r3, #4]
	GPIO_MODE_OUTPUT_PP, .Pull = GPIO_NOPULL, .Speed =
	GPIO_SPEED_FREQ_LOW };
	HAL_GPIO_Init(direction->GPIO, &GPIOInitStruct);
 8008baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	18ba      	adds	r2, r7, r2
 8008bb2:	0011      	movs	r1, r2
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f7fa fa7d 	bl	80030b4 <HAL_GPIO_Init>

	GPIOInitStruct.Pin = disable->Pin;
 8008bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbc:	889b      	ldrh	r3, [r3, #4]
 8008bbe:	001a      	movs	r2, r3
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	18fb      	adds	r3, r7, r3
 8008bc4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(disable->GPIO, &GPIOInitStruct);
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	18ba      	adds	r2, r7, r2
 8008bce:	0011      	movs	r1, r2
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	f7fa fa6f 	bl	80030b4 <HAL_GPIO_Init>

	GPIOInitStruct.Pin = terminal->Pin;
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd8:	889b      	ldrh	r3, [r3, #4]
 8008bda:	001a      	movs	r2, r3
 8008bdc:	2320      	movs	r3, #32
 8008bde:	18fb      	adds	r3, r7, r3
 8008be0:	601a      	str	r2, [r3, #0]
	GPIOInitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008be2:	2320      	movs	r3, #32
 8008be4:	18fb      	adds	r3, r7, r3
 8008be6:	4a37      	ldr	r2, [pc, #220]	; (8008cc4 <InitializeBCSDriver+0x1f4>)
 8008be8:	605a      	str	r2, [r3, #4]
	GPIOInitStruct.Pull = GPIO_PULLUP;
 8008bea:	2320      	movs	r3, #32
 8008bec:	18fb      	adds	r3, r7, r3
 8008bee:	2201      	movs	r2, #1
 8008bf0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(terminal->GPIO, &GPIOInitStruct);
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	18ba      	adds	r2, r7, r2
 8008bfa:	0011      	movs	r1, r2
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	f7fa fa59 	bl	80030b4 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(terminal->EXTIId, 0, 0);
 8008c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c04:	799b      	ldrb	r3, [r3, #6]
 8008c06:	b25b      	sxtb	r3, r3
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	f7f9 fe03 	bl	8002818 <HAL_NVIC_SetPriority>

	TIM_SlaveConfigTypeDef sSlaveConfig;
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8008c12:	230c      	movs	r3, #12
 8008c14:	18fb      	adds	r3, r7, r3
 8008c16:	2205      	movs	r2, #5
 8008c18:	601a      	str	r2, [r3, #0]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	18fb      	adds	r3, r7, r3
 8008c1e:	2200      	movs	r2, #0
 8008c20:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_SlaveConfigSynchronization(timCh->Tim, &sSlaveConfig) != HAL_OK)
 8008c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	220c      	movs	r2, #12
 8008c28:	18ba      	adds	r2, r7, r2
 8008c2a:	0011      	movs	r1, r2
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f7fc f97f 	bl	8004f30 <HAL_TIM_SlaveConfigSynchronization>
 8008c32:	1e03      	subs	r3, r0, #0
 8008c34:	d001      	beq.n	8008c3a <InitializeBCSDriver+0x16a>
		return ANY_ERROR;
 8008c36:	23ff      	movs	r3, #255	; 0xff
 8008c38:	e03a      	b.n	8008cb0 <InitializeBCSDriver+0x1e0>

	for (uint8_t i = 0; i < TIMChannelHandlesNumber; i++)
 8008c3a:	2347      	movs	r3, #71	; 0x47
 8008c3c:	18fb      	adds	r3, r7, r3
 8008c3e:	2200      	movs	r2, #0
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	e019      	b.n	8008c78 <InitializeBCSDriver+0x1a8>
		if (timCh->Tim == m_TIMChannels[i].Tim)
 8008c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	2347      	movs	r3, #71	; 0x47
 8008c4a:	18fb      	adds	r3, r7, r3
 8008c4c:	7819      	ldrb	r1, [r3, #0]
 8008c4e:	4b1a      	ldr	r3, [pc, #104]	; (8008cb8 <InitializeBCSDriver+0x1e8>)
 8008c50:	0109      	lsls	r1, r1, #4
 8008c52:	58cb      	ldr	r3, [r1, r3]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d108      	bne.n	8008c6a <InitializeBCSDriver+0x19a>
			m_TIMChannels[i].State = OCCUPIED;
 8008c58:	2347      	movs	r3, #71	; 0x47
 8008c5a:	18fb      	adds	r3, r7, r3
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	4a16      	ldr	r2, [pc, #88]	; (8008cb8 <InitializeBCSDriver+0x1e8>)
 8008c60:	011b      	lsls	r3, r3, #4
 8008c62:	18d3      	adds	r3, r2, r3
 8008c64:	330c      	adds	r3, #12
 8008c66:	2200      	movs	r2, #0
 8008c68:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < TIMChannelHandlesNumber; i++)
 8008c6a:	2347      	movs	r3, #71	; 0x47
 8008c6c:	18fb      	adds	r3, r7, r3
 8008c6e:	781a      	ldrb	r2, [r3, #0]
 8008c70:	2347      	movs	r3, #71	; 0x47
 8008c72:	18fb      	adds	r3, r7, r3
 8008c74:	3201      	adds	r2, #1
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	2204      	movs	r2, #4
 8008c7a:	2347      	movs	r3, #71	; 0x47
 8008c7c:	18fb      	adds	r3, r7, r3
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d3df      	bcc.n	8008c44 <InitializeBCSDriver+0x174>
	disable->State = OCCUPIED;
 8008c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c86:	2200      	movs	r2, #0
 8008c88:	71da      	strb	r2, [r3, #7]
	direction->State = OCCUPIED;
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	71da      	strb	r2, [r3, #7]
	terminal->State = OCCUPIED;
 8008c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c92:	2200      	movs	r2, #0
 8008c94:	71da      	strb	r2, [r3, #7]

	handle->PWMTIM = timCh;
 8008c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c9a:	601a      	str	r2, [r3, #0]
	handle->DisableGPIO = disable;
 8008c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ca0:	609a      	str	r2, [r3, #8]
	handle->DirectionGPIO = direction;
 8008ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ca6:	605a      	str	r2, [r3, #4]
	handle->TerminalGPIO = terminal;
 8008ca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cac:	60da      	str	r2, [r3, #12]

	return ALL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	b012      	add	sp, #72	; 0x48
 8008cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8008cb8:	2000021c 	.word	0x2000021c
 8008cbc:	2000025c 	.word	0x2000025c
 8008cc0:	200007a4 	.word	0x200007a4
 8008cc4:	10210000 	.word	0x10210000

08008cc8 <BESCDriverChangeSpeed>:

uint8_t BESCDriverChangeSpeed(struct BESCDriverHandle *handle, uint8_t *data) {
 8008cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
	double newSpeed;
	memcpy(&newSpeed, data, sizeof(double));
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	18fb      	adds	r3, r7, r3
 8008cd8:	2208      	movs	r2, #8
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f001 f84a 	bl	8009d74 <memcpy>

	if (newSpeed > 1.0 || newSpeed < -1.0)
 8008ce0:	68b8      	ldr	r0, [r7, #8]
 8008ce2:	68f9      	ldr	r1, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4b29      	ldr	r3, [pc, #164]	; (8008d8c <BESCDriverChangeSpeed+0xc4>)
 8008ce8:	f7f7 fac4 	bl	8000274 <__aeabi_dcmpgt>
 8008cec:	1e03      	subs	r3, r0, #0
 8008cee:	d107      	bne.n	8008d00 <BESCDriverChangeSpeed+0x38>
 8008cf0:	68b8      	ldr	r0, [r7, #8]
 8008cf2:	68f9      	ldr	r1, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	4b26      	ldr	r3, [pc, #152]	; (8008d90 <BESCDriverChangeSpeed+0xc8>)
 8008cf8:	f7f7 faa8 	bl	800024c <__aeabi_dcmplt>
 8008cfc:	1e03      	subs	r3, r0, #0
 8008cfe:	d001      	beq.n	8008d04 <BESCDriverChangeSpeed+0x3c>
		return ANY_ERROR;
 8008d00:	23ff      	movs	r3, #255	; 0xff
 8008d02:	e03f      	b.n	8008d84 <BESCDriverChangeSpeed+0xbc>

	double newDutyCycle = STOPPED_DC + MAX_VAR_DC * newSpeed;
 8008d04:	68b8      	ldr	r0, [r7, #8]
 8008d06:	68f9      	ldr	r1, [r7, #12]
 8008d08:	4a22      	ldr	r2, [pc, #136]	; (8008d94 <BESCDriverChangeSpeed+0xcc>)
 8008d0a:	4b23      	ldr	r3, [pc, #140]	; (8008d98 <BESCDriverChangeSpeed+0xd0>)
 8008d0c:	f7f8 fc40 	bl	8001590 <__aeabi_dmul>
 8008d10:	0003      	movs	r3, r0
 8008d12:	000c      	movs	r4, r1
 8008d14:	0018      	movs	r0, r3
 8008d16:	0021      	movs	r1, r4
 8008d18:	4a20      	ldr	r2, [pc, #128]	; (8008d9c <BESCDriverChangeSpeed+0xd4>)
 8008d1a:	4b21      	ldr	r3, [pc, #132]	; (8008da0 <BESCDriverChangeSpeed+0xd8>)
 8008d1c:	f7f8 f828 	bl	8000d70 <__aeabi_dadd>
 8008d20:	0003      	movs	r3, r0
 8008d22:	000c      	movs	r4, r1
 8008d24:	613b      	str	r3, [r7, #16]
 8008d26:	617c      	str	r4, [r7, #20]

	__HAL_TIM_SET_COMPARE(handle->PWMTIM->Tim, handle->PWMTIM->Channel,
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3334      	adds	r3, #52	; 0x34
 8008d32:	001a      	movs	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	089b      	lsrs	r3, r3, #2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	18d4      	adds	r4, r2, r3
 8008d40:	4b18      	ldr	r3, [pc, #96]	; (8008da4 <BESCDriverChangeSpeed+0xdc>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	0018      	movs	r0, r3
 8008d46:	f7f9 fa2f 	bl	80021a8 <__aeabi_ui2d>
 8008d4a:	0005      	movs	r5, r0
 8008d4c:	000e      	movs	r6, r1
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	2000      	movs	r0, #0
 8008d54:	490d      	ldr	r1, [pc, #52]	; (8008d8c <BESCDriverChangeSpeed+0xc4>)
 8008d56:	f7f8 fe9b 	bl	8001a90 <__aeabi_dsub>
 8008d5a:	0002      	movs	r2, r0
 8008d5c:	000b      	movs	r3, r1
 8008d5e:	0028      	movs	r0, r5
 8008d60:	0031      	movs	r1, r6
 8008d62:	f7f8 fc15 	bl	8001590 <__aeabi_dmul>
 8008d66:	0002      	movs	r2, r0
 8008d68:	000b      	movs	r3, r1
 8008d6a:	0010      	movs	r0, r2
 8008d6c:	0019      	movs	r1, r3
 8008d6e:	f001 f813 	bl	8009d98 <round>
 8008d72:	0002      	movs	r2, r0
 8008d74:	000b      	movs	r3, r1
 8008d76:	0010      	movs	r0, r2
 8008d78:	0019      	movs	r1, r3
 8008d7a:	f7f7 fab9 	bl	80002f0 <__aeabi_d2uiz>
 8008d7e:	0003      	movs	r3, r0
 8008d80:	6023      	str	r3, [r4, #0]
			round(m_BESCDriverARR * (1 - newDutyCycle)));

	return ALL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	0018      	movs	r0, r3
 8008d86:	46bd      	mov	sp, r7
 8008d88:	b007      	add	sp, #28
 8008d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d8c:	3ff00000 	.word	0x3ff00000
 8008d90:	bff00000 	.word	0xbff00000
 8008d94:	eb851eb8 	.word	0xeb851eb8
 8008d98:	3fbeb851 	.word	0x3fbeb851
 8008d9c:	cccccccc 	.word	0xcccccccc
 8008da0:	3fdccccc 	.word	0x3fdccccc
 8008da4:	2000079c 	.word	0x2000079c

08008da8 <LEDDriverChangeBrightness>:

uint8_t LEDDriverChangeBrightness(struct LEDDriverHandle *handle, uint8_t *data) {
 8008da8:	b5b0      	push	{r4, r5, r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
	double newBrightness;
	memcpy(&newBrightness, data, sizeof(double));
 8008db2:	68b9      	ldr	r1, [r7, #8]
 8008db4:	2308      	movs	r3, #8
 8008db6:	2208      	movs	r2, #8
 8008db8:	4694      	mov	ip, r2
 8008dba:	44bc      	add	ip, r7
 8008dbc:	4463      	add	r3, ip
 8008dbe:	2208      	movs	r2, #8
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	f000 ffd7 	bl	8009d74 <memcpy>

	if (newBrightness > 1.0 || newBrightness < 0)
 8008dc6:	6938      	ldr	r0, [r7, #16]
 8008dc8:	6979      	ldr	r1, [r7, #20]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	4b22      	ldr	r3, [pc, #136]	; (8008e58 <LEDDriverChangeBrightness+0xb0>)
 8008dce:	f7f7 fa51 	bl	8000274 <__aeabi_dcmpgt>
 8008dd2:	1e03      	subs	r3, r0, #0
 8008dd4:	d107      	bne.n	8008de6 <LEDDriverChangeBrightness+0x3e>
 8008dd6:	6938      	ldr	r0, [r7, #16]
 8008dd8:	6979      	ldr	r1, [r7, #20]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f7f7 fa35 	bl	800024c <__aeabi_dcmplt>
 8008de2:	1e03      	subs	r3, r0, #0
 8008de4:	d001      	beq.n	8008dea <LEDDriverChangeBrightness+0x42>
		return ANY_ERROR;
 8008de6:	23ff      	movs	r3, #255	; 0xff
 8008de8:	e031      	b.n	8008e4e <LEDDriverChangeBrightness+0xa6>

	__HAL_TIM_SET_COMPARE(handle->PWMTIM->Tim, handle->PWMTIM->Channel,
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3334      	adds	r3, #52	; 0x34
 8008df4:	001a      	movs	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	089b      	lsrs	r3, r3, #2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	18d5      	adds	r5, r2, r3
 8008e02:	4b16      	ldr	r3, [pc, #88]	; (8008e5c <LEDDriverChangeBrightness+0xb4>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	0018      	movs	r0, r3
 8008e08:	f7f9 f9ce 	bl	80021a8 <__aeabi_ui2d>
 8008e0c:	6038      	str	r0, [r7, #0]
 8008e0e:	6079      	str	r1, [r7, #4]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	697c      	ldr	r4, [r7, #20]
 8008e14:	001a      	movs	r2, r3
 8008e16:	0023      	movs	r3, r4
 8008e18:	2000      	movs	r0, #0
 8008e1a:	490f      	ldr	r1, [pc, #60]	; (8008e58 <LEDDriverChangeBrightness+0xb0>)
 8008e1c:	f7f8 fe38 	bl	8001a90 <__aeabi_dsub>
 8008e20:	0003      	movs	r3, r0
 8008e22:	000c      	movs	r4, r1
 8008e24:	001a      	movs	r2, r3
 8008e26:	0023      	movs	r3, r4
 8008e28:	6838      	ldr	r0, [r7, #0]
 8008e2a:	6879      	ldr	r1, [r7, #4]
 8008e2c:	f7f8 fbb0 	bl	8001590 <__aeabi_dmul>
 8008e30:	0003      	movs	r3, r0
 8008e32:	000c      	movs	r4, r1
 8008e34:	0018      	movs	r0, r3
 8008e36:	0021      	movs	r1, r4
 8008e38:	f000 ffae 	bl	8009d98 <round>
 8008e3c:	0003      	movs	r3, r0
 8008e3e:	000c      	movs	r4, r1
 8008e40:	0018      	movs	r0, r3
 8008e42:	0021      	movs	r1, r4
 8008e44:	f7f7 fa54 	bl	80002f0 <__aeabi_d2uiz>
 8008e48:	0003      	movs	r3, r0
 8008e4a:	602b      	str	r3, [r5, #0]
			round(m_LEDDriverARR * (1 - newBrightness)));

	return ALL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	0018      	movs	r0, r3
 8008e50:	46bd      	mov	sp, r7
 8008e52:	b006      	add	sp, #24
 8008e54:	bdb0      	pop	{r4, r5, r7, pc}
 8008e56:	46c0      	nop			; (mov r8, r8)
 8008e58:	3ff00000 	.word	0x3ff00000
 8008e5c:	200007a0 	.word	0x200007a0

08008e60 <BCSDriverChangeSpeed>:

uint8_t BCSDriverChangeSpeed(struct BCSDriverHandle *handle, uint8_t *data) {
 8008e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
	double newSpeed;
	memcpy(&newSpeed, data, sizeof(double));
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	2308      	movs	r3, #8
 8008e6e:	18fb      	adds	r3, r7, r3
 8008e70:	2208      	movs	r2, #8
 8008e72:	0018      	movs	r0, r3
 8008e74:	f000 ff7e 	bl	8009d74 <memcpy>

	if (newSpeed > 1.0 || newSpeed < 0)
 8008e78:	68b8      	ldr	r0, [r7, #8]
 8008e7a:	68f9      	ldr	r1, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4b2c      	ldr	r3, [pc, #176]	; (8008f30 <BCSDriverChangeSpeed+0xd0>)
 8008e80:	f7f7 f9f8 	bl	8000274 <__aeabi_dcmpgt>
 8008e84:	1e03      	subs	r3, r0, #0
 8008e86:	d107      	bne.n	8008e98 <BCSDriverChangeSpeed+0x38>
 8008e88:	68b8      	ldr	r0, [r7, #8]
 8008e8a:	68f9      	ldr	r1, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f7f7 f9dc 	bl	800024c <__aeabi_dcmplt>
 8008e94:	1e03      	subs	r3, r0, #0
 8008e96:	d001      	beq.n	8008e9c <BCSDriverChangeSpeed+0x3c>
		return ANY_ERROR;
 8008e98:	23ff      	movs	r3, #255	; 0xff
 8008e9a:	e045      	b.n	8008f28 <BCSDriverChangeSpeed+0xc8>

	uint32_t newARR = m_BCSDriverMaxARR
			- round(newSpeed * (m_BCSDriverMaxARR - m_BCSDriverMinARR));
 8008e9c:	4b25      	ldr	r3, [pc, #148]	; (8008f34 <BCSDriverChangeSpeed+0xd4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7f9 f981 	bl	80021a8 <__aeabi_ui2d>
 8008ea6:	0005      	movs	r5, r0
 8008ea8:	000e      	movs	r6, r1
 8008eaa:	4b22      	ldr	r3, [pc, #136]	; (8008f34 <BCSDriverChangeSpeed+0xd4>)
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	4b22      	ldr	r3, [pc, #136]	; (8008f38 <BCSDriverChangeSpeed+0xd8>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f7f9 f977 	bl	80021a8 <__aeabi_ui2d>
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	68fc      	ldr	r4, [r7, #12]
 8008ebe:	001a      	movs	r2, r3
 8008ec0:	0023      	movs	r3, r4
 8008ec2:	f7f8 fb65 	bl	8001590 <__aeabi_dmul>
 8008ec6:	0003      	movs	r3, r0
 8008ec8:	000c      	movs	r4, r1
 8008eca:	0018      	movs	r0, r3
 8008ecc:	0021      	movs	r1, r4
 8008ece:	f000 ff63 	bl	8009d98 <round>
 8008ed2:	0003      	movs	r3, r0
 8008ed4:	000c      	movs	r4, r1
 8008ed6:	001a      	movs	r2, r3
 8008ed8:	0023      	movs	r3, r4
 8008eda:	0028      	movs	r0, r5
 8008edc:	0031      	movs	r1, r6
 8008ede:	f7f8 fdd7 	bl	8001a90 <__aeabi_dsub>
 8008ee2:	0003      	movs	r3, r0
 8008ee4:	000c      	movs	r4, r1
	uint32_t newARR = m_BCSDriverMaxARR
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	0021      	movs	r1, r4
 8008eea:	f7f7 fa01 	bl	80002f0 <__aeabi_d2uiz>
 8008eee:	0003      	movs	r3, r0
 8008ef0:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_AUTORELOAD(handle->PWMTIM->Tim, newARR);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	62da      	str	r2, [r3, #44]	; 0x2c
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(handle->PWMTIM->Tim, handle->PWMTIM->Channel,
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3334      	adds	r3, #52	; 0x34
 8008f12:	001a      	movs	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	089b      	lsrs	r3, r3, #2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	18d3      	adds	r3, r2, r3
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	0852      	lsrs	r2, r2, #1
 8008f24:	601a      	str	r2, [r3, #0]
			newARR / 2);

	return ALL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	0018      	movs	r0, r3
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	b007      	add	sp, #28
 8008f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f30:	3ff00000 	.word	0x3ff00000
 8008f34:	200007a4 	.word	0x200007a4
 8008f38:	200007a8 	.word	0x200007a8

08008f3c <BCSDriverMove>:

uint8_t BCSDriverMove(struct BCSDriverHandle *handle, uint8_t *data) {
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
	enum Direction direction = (enum Direction) data[0];
 8008f46:	230f      	movs	r3, #15
 8008f48:	18fb      	adds	r3, r7, r3
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	7812      	ldrb	r2, [r2, #0]
 8008f4e:	701a      	strb	r2, [r3, #0]
	uint16_t steps;
	memcpy(&steps, data + 1, sizeof(int16_t));
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	1c59      	adds	r1, r3, #1
 8008f54:	230c      	movs	r3, #12
 8008f56:	18fb      	adds	r3, r7, r3
 8008f58:	2202      	movs	r2, #2
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	f000 ff0a 	bl	8009d74 <memcpy>

	if (direction != 0 && direction != 1)
 8008f60:	230f      	movs	r3, #15
 8008f62:	18fb      	adds	r3, r7, r3
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d006      	beq.n	8008f78 <BCSDriverMove+0x3c>
 8008f6a:	230f      	movs	r3, #15
 8008f6c:	18fb      	adds	r3, r7, r3
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d001      	beq.n	8008f78 <BCSDriverMove+0x3c>
		return ANY_ERROR;
 8008f74:	23ff      	movs	r3, #255	; 0xff
 8008f76:	e038      	b.n	8008fea <BCSDriverMove+0xae>

	HAL_GPIO_WritePin(handle->DirectionGPIO->GPIO, handle->DirectionGPIO->Pin,
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	8899      	ldrh	r1, [r3, #4]
 8008f84:	230f      	movs	r3, #15
 8008f86:	18fb      	adds	r3, r7, r3
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	1e5a      	subs	r2, r3, #1
 8008f8c:	4193      	sbcs	r3, r2
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	001a      	movs	r2, r3
 8008f92:	f7fa fa03 	bl	800339c <HAL_GPIO_WritePin>
			(direction) ? GPIO_PIN_SET : GPIO_PIN_RESET);

	__HAL_TIM_SET_AUTORELOAD(handle->PWMTIM->ComplementTIM, steps * 2 - 1);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	220c      	movs	r2, #12
 8008fa0:	18ba      	adds	r2, r7, r2
 8008fa2:	8812      	ldrh	r2, [r2, #0]
 8008fa4:	0052      	lsls	r2, r2, #1
 8008fa6:	3a01      	subs	r2, #1
 8008fa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	220c      	movs	r2, #12
 8008fb2:	18ba      	adds	r2, r7, r2
 8008fb4:	8812      	ldrh	r2, [r2, #0]
 8008fb6:	0052      	lsls	r2, r2, #1
 8008fb8:	3a01      	subs	r2, #1
 8008fba:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(handle->DisableGPIO->GPIO, handle->DisableGPIO->Pin,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	6818      	ldr	r0, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	889b      	ldrh	r3, [r3, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	0019      	movs	r1, r3
 8008fcc:	f7fa f9e6 	bl	800339c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	__HAL_TIM_ENABLE(handle->PWMTIM->ComplementTIM);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	6812      	ldr	r2, [r2, #0]
 8008fdc:	6892      	ldr	r2, [r2, #8]
 8008fde:	6812      	ldr	r2, [r2, #0]
 8008fe0:	6812      	ldr	r2, [r2, #0]
 8008fe2:	2101      	movs	r1, #1
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	601a      	str	r2, [r3, #0]

	return ALL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	0018      	movs	r0, r3
 8008fec:	46bd      	mov	sp, r7
 8008fee:	b004      	add	sp, #16
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <BCSDriverMoveToEnd>:

uint8_t BCSDriverMoveToEnd(struct BCSDriverHandle *handle, uint8_t *data) {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
	enum Direction direction = (enum Direction) data[0];
 8008ffe:	230f      	movs	r3, #15
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	7812      	ldrb	r2, [r2, #0]
 8009006:	701a      	strb	r2, [r3, #0]

	if (direction != 0 && direction != 1)
 8009008:	230f      	movs	r3, #15
 800900a:	18fb      	adds	r3, r7, r3
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d006      	beq.n	8009020 <BCSDriverMoveToEnd+0x2c>
 8009012:	230f      	movs	r3, #15
 8009014:	18fb      	adds	r3, r7, r3
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d001      	beq.n	8009020 <BCSDriverMoveToEnd+0x2c>
		return ANY_ERROR;
 800901c:	23ff      	movs	r3, #255	; 0xff
 800901e:	e03c      	b.n	800909a <BCSDriverMoveToEnd+0xa6>

	__HAL_GPIO_EXTI_CLEAR_IT(handle->TerminalGPIO->Pin);
 8009020:	4a20      	ldr	r2, [pc, #128]	; (80090a4 <BCSDriverMoveToEnd+0xb0>)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	889b      	ldrh	r3, [r3, #4]
 8009028:	6153      	str	r3, [r2, #20]
	HAL_NVIC_EnableIRQ(handle->TerminalGPIO->EXTIId);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	799b      	ldrb	r3, [r3, #6]
 8009030:	b25b      	sxtb	r3, r3
 8009032:	0018      	movs	r0, r3
 8009034:	f7f9 fc06 	bl	8002844 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(handle->DirectionGPIO->GPIO, handle->DirectionGPIO->Pin,
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	8899      	ldrh	r1, [r3, #4]
 8009044:	230f      	movs	r3, #15
 8009046:	18fb      	adds	r3, r7, r3
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	1e5a      	subs	r2, r3, #1
 800904c:	4193      	sbcs	r3, r2
 800904e:	b2db      	uxtb	r3, r3
 8009050:	001a      	movs	r2, r3
 8009052:	f7fa f9a3 	bl	800339c <HAL_GPIO_WritePin>
			(direction) ? GPIO_PIN_SET : GPIO_PIN_RESET);

	__HAL_TIM_SET_AUTORELOAD(handle->PWMTIM->ComplementTIM, 0xFFFF);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a12      	ldr	r2, [pc, #72]	; (80090a8 <BCSDriverMoveToEnd+0xb4>)
 8009060:	62da      	str	r2, [r3, #44]	; 0x2c
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	4a0f      	ldr	r2, [pc, #60]	; (80090a8 <BCSDriverMoveToEnd+0xb4>)
 800906a:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(handle->DisableGPIO->GPIO, handle->DisableGPIO->Pin,
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	6818      	ldr	r0, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	889b      	ldrh	r3, [r3, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	0019      	movs	r1, r3
 800907c:	f7fa f98e 	bl	800339c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	__HAL_TIM_ENABLE(handle->PWMTIM->ComplementTIM);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	6812      	ldr	r2, [r2, #0]
 800908c:	6892      	ldr	r2, [r2, #8]
 800908e:	6812      	ldr	r2, [r2, #0]
 8009090:	6812      	ldr	r2, [r2, #0]
 8009092:	2101      	movs	r1, #1
 8009094:	430a      	orrs	r2, r1
 8009096:	601a      	str	r2, [r3, #0]

	return ALL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	0018      	movs	r0, r3
 800909c:	46bd      	mov	sp, r7
 800909e:	b004      	add	sp, #16
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	46c0      	nop			; (mov r8, r8)
 80090a4:	40010400 	.word	0x40010400
 80090a8:	0000ffff 	.word	0x0000ffff

080090ac <BufferParams>:
											.NbPages = 1};

void BufferParams();
void UnbufferParams(uint32_t changedAddress, uint32_t changedSize);

void BufferParams() {
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
	memcpy(m_paramsBuffer, ParamsUnion.Bytes, sizeof(struct ParamsStruct));
 80090b0:	4a05      	ldr	r2, [pc, #20]	; (80090c8 <BufferParams+0x1c>)
 80090b2:	4b06      	ldr	r3, [pc, #24]	; (80090cc <BufferParams+0x20>)
 80090b4:	0010      	movs	r0, r2
 80090b6:	0019      	movs	r1, r3
 80090b8:	2310      	movs	r3, #16
 80090ba:	001a      	movs	r2, r3
 80090bc:	f000 fe5a 	bl	8009d74 <memcpy>
}
 80090c0:	46c0      	nop			; (mov r8, r8)
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	2000086c 	.word	0x2000086c
 80090cc:	0800f800 	.word	0x0800f800

080090d0 <UnbufferParams>:

void UnbufferParams(uint32_t changedAddress, uint32_t changedSize) {
 80090d0:	b5b0      	push	{r4, r5, r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
	uint32_t currentAddress = USER_DATA_FIRST_PAGE;
 80090da:	4b24      	ldr	r3, [pc, #144]	; (800916c <UnbufferParams+0x9c>)
 80090dc:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(struct ParamsStruct) / sizeof(uint16_t); i++, currentAddress += sizeof(uint16_t)) {
 80090de:	230b      	movs	r3, #11
 80090e0:	18fb      	adds	r3, r7, r3
 80090e2:	2200      	movs	r2, #0
 80090e4:	701a      	strb	r2, [r3, #0]
 80090e6:	e036      	b.n	8009156 <UnbufferParams+0x86>
		if(currentAddress == (uint32_t)changedAddress) {
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d110      	bne.n	8009112 <UnbufferParams+0x42>
			currentAddress += changedSize;
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	18d3      	adds	r3, r2, r3
 80090f6:	60fb      	str	r3, [r7, #12]
			i += changedSize / sizeof(uint16_t) - 1;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	085b      	lsrs	r3, r3, #1
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	230b      	movs	r3, #11
 8009100:	18fb      	adds	r3, r7, r3
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	18d3      	adds	r3, r2, r3
 8009106:	b2da      	uxtb	r2, r3
 8009108:	230b      	movs	r3, #11
 800910a:	18fb      	adds	r3, r7, r3
 800910c:	3a01      	subs	r2, #1
 800910e:	701a      	strb	r2, [r3, #0]
			continue;
 8009110:	e017      	b.n	8009142 <UnbufferParams+0x72>
		}

		if(m_paramsBuffer[i] == MAX16BIT)
 8009112:	230b      	movs	r3, #11
 8009114:	18fb      	adds	r3, r7, r3
 8009116:	781a      	ldrb	r2, [r3, #0]
 8009118:	4b15      	ldr	r3, [pc, #84]	; (8009170 <UnbufferParams+0xa0>)
 800911a:	0052      	lsls	r2, r2, #1
 800911c:	5ad3      	ldrh	r3, [r2, r3]
 800911e:	4a15      	ldr	r2, [pc, #84]	; (8009174 <UnbufferParams+0xa4>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d01e      	beq.n	8009162 <UnbufferParams+0x92>
			return;

		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAddress, m_paramsBuffer[i]);
 8009124:	230b      	movs	r3, #11
 8009126:	18fb      	adds	r3, r7, r3
 8009128:	781a      	ldrb	r2, [r3, #0]
 800912a:	4b11      	ldr	r3, [pc, #68]	; (8009170 <UnbufferParams+0xa0>)
 800912c:	0052      	lsls	r2, r2, #1
 800912e:	5ad3      	ldrh	r3, [r2, r3]
 8009130:	001c      	movs	r4, r3
 8009132:	2300      	movs	r3, #0
 8009134:	001d      	movs	r5, r3
 8009136:	68f9      	ldr	r1, [r7, #12]
 8009138:	0022      	movs	r2, r4
 800913a:	002b      	movs	r3, r5
 800913c:	2001      	movs	r0, #1
 800913e:	f7f9 fdbf 	bl	8002cc0 <HAL_FLASH_Program>
	for(uint8_t i = 0; i < sizeof(struct ParamsStruct) / sizeof(uint16_t); i++, currentAddress += sizeof(uint16_t)) {
 8009142:	230b      	movs	r3, #11
 8009144:	18fb      	adds	r3, r7, r3
 8009146:	781a      	ldrb	r2, [r3, #0]
 8009148:	230b      	movs	r3, #11
 800914a:	18fb      	adds	r3, r7, r3
 800914c:	3201      	adds	r2, #1
 800914e:	701a      	strb	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	3302      	adds	r3, #2
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	230b      	movs	r3, #11
 8009158:	18fb      	adds	r3, r7, r3
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b07      	cmp	r3, #7
 800915e:	d9c3      	bls.n	80090e8 <UnbufferParams+0x18>
 8009160:	e000      	b.n	8009164 <UnbufferParams+0x94>
			return;
 8009162:	46c0      	nop			; (mov r8, r8)
	}
}
 8009164:	46bd      	mov	sp, r7
 8009166:	b004      	add	sp, #16
 8009168:	bdb0      	pop	{r4, r5, r7, pc}
 800916a:	46c0      	nop			; (mov r8, r8)
 800916c:	0800f800 	.word	0x0800f800
 8009170:	2000086c 	.word	0x2000086c
 8009174:	0000ffff 	.word	0x0000ffff

08009178 <StartChangeFlashParam>:

void StartChangeFlashParam() {
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
	BufferParams();
 800917c:	f7ff ff96 	bl	80090ac <BufferParams>
	HAL_FLASH_Unlock();
 8009180:	f7f9 fe36 	bl	8002df0 <HAL_FLASH_Unlock>

	HAL_FLASHEx_Erase(&m_eraseInitStruct, &m_pageError);
 8009184:	4a04      	ldr	r2, [pc, #16]	; (8009198 <StartChangeFlashParam+0x20>)
 8009186:	4b05      	ldr	r3, [pc, #20]	; (800919c <StartChangeFlashParam+0x24>)
 8009188:	0011      	movs	r1, r2
 800918a:	0018      	movs	r0, r3
 800918c:	f7f9 fee4 	bl	8002f58 <HAL_FLASHEx_Erase>
}
 8009190:	46c0      	nop			; (mov r8, r8)
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	46c0      	nop			; (mov r8, r8)
 8009198:	200007ac 	.word	0x200007ac
 800919c:	2000028c 	.word	0x2000028c

080091a0 <EndChangeFlashParam>:

void EndChangeFlashParam(void *changedParamAddress, uint32_t changedSize) {
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
	UnbufferParams((uint32_t)changedParamAddress, changedSize);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	0011      	movs	r1, r2
 80091b0:	0018      	movs	r0, r3
 80091b2:	f7ff ff8d 	bl	80090d0 <UnbufferParams>
	HAL_FLASH_Lock();
 80091b6:	f7f9 fe35 	bl	8002e24 <HAL_FLASH_Lock>
}
 80091ba:	46c0      	nop			; (mov r8, r8)
 80091bc:	46bd      	mov	sp, r7
 80091be:	b002      	add	sp, #8
 80091c0:	bd80      	pop	{r7, pc}
	...

080091c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091ca:	4b12      	ldr	r3, [pc, #72]	; (8009214 <HAL_MspInit+0x50>)
 80091cc:	4a11      	ldr	r2, [pc, #68]	; (8009214 <HAL_MspInit+0x50>)
 80091ce:	6992      	ldr	r2, [r2, #24]
 80091d0:	2101      	movs	r1, #1
 80091d2:	430a      	orrs	r2, r1
 80091d4:	619a      	str	r2, [r3, #24]
 80091d6:	4b0f      	ldr	r3, [pc, #60]	; (8009214 <HAL_MspInit+0x50>)
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	2201      	movs	r2, #1
 80091dc:	4013      	ands	r3, r2
 80091de:	607b      	str	r3, [r7, #4]
 80091e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80091e2:	2305      	movs	r3, #5
 80091e4:	425b      	negs	r3, r3
 80091e6:	2200      	movs	r2, #0
 80091e8:	2100      	movs	r1, #0
 80091ea:	0018      	movs	r0, r3
 80091ec:	f7f9 fb14 	bl	8002818 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80091f0:	2302      	movs	r3, #2
 80091f2:	425b      	negs	r3, r3
 80091f4:	2200      	movs	r2, #0
 80091f6:	2100      	movs	r1, #0
 80091f8:	0018      	movs	r0, r3
 80091fa:	f7f9 fb0d 	bl	8002818 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80091fe:	2301      	movs	r3, #1
 8009200:	425b      	negs	r3, r3
 8009202:	2200      	movs	r2, #0
 8009204:	2100      	movs	r1, #0
 8009206:	0018      	movs	r0, r3
 8009208:	f7f9 fb06 	bl	8002818 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800920c:	46c0      	nop			; (mov r8, r8)
 800920e:	46bd      	mov	sp, r7
 8009210:	b002      	add	sp, #8
 8009212:	bd80      	pop	{r7, pc}
 8009214:	40021000 	.word	0x40021000

08009218 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800921c:	f7f9 fa08 	bl	8002630 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8009220:	f7f9 fb58 	bl	80028d4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009224:	46c0      	nop			; (mov r8, r8)
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009230:	4b05      	ldr	r3, [pc, #20]	; (8009248 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8009232:	0018      	movs	r0, r3
 8009234:	f7f9 fc5a 	bl	8002aec <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009238:	4b04      	ldr	r3, [pc, #16]	; (800924c <DMA1_Channel2_3_IRQHandler+0x20>)
 800923a:	0018      	movs	r0, r3
 800923c:	f7f9 fc56 	bl	8002aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8009240:	46c0      	nop			; (mov r8, r8)
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	46c0      	nop			; (mov r8, r8)
 8009248:	20000a40 	.word	0x20000a40
 800924c:	20000a84 	.word	0x20000a84

08009250 <DMA1_Channel4_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 and 5 interrupts.
*/
void DMA1_Channel4_5_IRQHandler(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <DMA1_Channel4_5_IRQHandler+0x1c>)
 8009256:	0018      	movs	r0, r3
 8009258:	f7f9 fc48 	bl	8002aec <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800925c:	4b04      	ldr	r3, [pc, #16]	; (8009270 <DMA1_Channel4_5_IRQHandler+0x20>)
 800925e:	0018      	movs	r0, r3
 8009260:	f7f9 fc44 	bl	8002aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8009264:	46c0      	nop			; (mov r8, r8)
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	46c0      	nop			; (mov r8, r8)
 800926c:	20000ac8 	.word	0x20000ac8
 8009270:	200009fc 	.word	0x200009fc

08009274 <TIM1_CC_IRQHandler>:

/**
* @brief This function handles TIM1 capture compare interrupt.
*/
void TIM1_CC_IRQHandler(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009278:	4b03      	ldr	r3, [pc, #12]	; (8009288 <TIM1_CC_IRQHandler+0x14>)
 800927a:	0018      	movs	r0, r3
 800927c:	f7fb fc89 	bl	8004b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8009280:	46c0      	nop			; (mov r8, r8)
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	46c0      	nop			; (mov r8, r8)
 8009288:	200008fc 	.word	0x200008fc

0800928c <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global and DAC underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009290:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <TIM6_DAC_IRQHandler+0x14>)
 8009292:	0018      	movs	r0, r3
 8009294:	f7fb fc7d 	bl	8004b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009298:	46c0      	nop			; (mov r8, r8)
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	46c0      	nop			; (mov r8, r8)
 80092a0:	200008bc 	.word	0x200008bc

080092a4 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80092a8:	4b03      	ldr	r3, [pc, #12]	; (80092b8 <TIM14_IRQHandler+0x14>)
 80092aa:	0018      	movs	r0, r3
 80092ac:	f7fb fc71 	bl	8004b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80092b0:	46c0      	nop			; (mov r8, r8)
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	2000097c 	.word	0x2000097c

080092bc <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80092c0:	4b03      	ldr	r3, [pc, #12]	; (80092d0 <TIM16_IRQHandler+0x14>)
 80092c2:	0018      	movs	r0, r3
 80092c4:	f7fb fc65 	bl	8004b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80092c8:	46c0      	nop			; (mov r8, r8)
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	46c0      	nop			; (mov r8, r8)
 80092d0:	200009bc 	.word	0x200009bc

080092d4 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80092d8:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <USART1_IRQHandler+0x14>)
 80092da:	0018      	movs	r0, r3
 80092dc:	f7fc fc00 	bl	8005ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80092e0:	46c0      	nop			; (mov r8, r8)
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	46c0      	nop			; (mov r8, r8)
 80092e8:	20000b0c 	.word	0x20000b0c

080092ec <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80092f0:	4b03      	ldr	r3, [pc, #12]	; (8009300 <USART2_IRQHandler+0x14>)
 80092f2:	0018      	movs	r0, r3
 80092f4:	f7fc fbf4 	bl	8005ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80092f8:	46c0      	nop			; (mov r8, r8)
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	46c0      	nop			; (mov r8, r8)
 8009300:	20000b7c 	.word	0x20000b7c

08009304 <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_1_IRQHandler(void) {
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8009308:	2001      	movs	r0, #1
 800930a:	f7fa f865 	bl	80033d8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800930e:	2002      	movs	r0, #2
 8009310:	f7fa f862 	bl	80033d8 <HAL_GPIO_EXTI_IRQHandler>
}
 8009314:	46c0      	nop			; (mov r8, r8)
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void) {
 800931a:	b580      	push	{r7, lr}
 800931c:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800931e:	2004      	movs	r0, #4
 8009320:	f7fa f85a 	bl	80033d8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8009324:	2008      	movs	r0, #8
 8009326:	f7fa f857 	bl	80033d8 <HAL_GPIO_EXTI_IRQHandler>
}
 800932a:	46c0      	nop			; (mov r8, r8)
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void) {
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8009334:	2380      	movs	r3, #128	; 0x80
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	0018      	movs	r0, r3
 800933a:	f7fa f84d 	bl	80033d8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800933e:	2380      	movs	r3, #128	; 0x80
 8009340:	011b      	lsls	r3, r3, #4
 8009342:	0018      	movs	r0, r3
 8009344:	f7fa f848 	bl	80033d8 <HAL_GPIO_EXTI_IRQHandler>
}
 8009348:	46c0      	nop			; (mov r8, r8)
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8009354:	4b1a      	ldr	r3, [pc, #104]	; (80093c0 <SystemInit+0x70>)
 8009356:	4a1a      	ldr	r2, [pc, #104]	; (80093c0 <SystemInit+0x70>)
 8009358:	6812      	ldr	r2, [r2, #0]
 800935a:	2101      	movs	r1, #1
 800935c:	430a      	orrs	r2, r1
 800935e:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8009360:	4b17      	ldr	r3, [pc, #92]	; (80093c0 <SystemInit+0x70>)
 8009362:	4a17      	ldr	r2, [pc, #92]	; (80093c0 <SystemInit+0x70>)
 8009364:	6852      	ldr	r2, [r2, #4]
 8009366:	4917      	ldr	r1, [pc, #92]	; (80093c4 <SystemInit+0x74>)
 8009368:	400a      	ands	r2, r1
 800936a:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800936c:	4b14      	ldr	r3, [pc, #80]	; (80093c0 <SystemInit+0x70>)
 800936e:	4a14      	ldr	r2, [pc, #80]	; (80093c0 <SystemInit+0x70>)
 8009370:	6812      	ldr	r2, [r2, #0]
 8009372:	4915      	ldr	r1, [pc, #84]	; (80093c8 <SystemInit+0x78>)
 8009374:	400a      	ands	r2, r1
 8009376:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8009378:	4b11      	ldr	r3, [pc, #68]	; (80093c0 <SystemInit+0x70>)
 800937a:	4a11      	ldr	r2, [pc, #68]	; (80093c0 <SystemInit+0x70>)
 800937c:	6812      	ldr	r2, [r2, #0]
 800937e:	4913      	ldr	r1, [pc, #76]	; (80093cc <SystemInit+0x7c>)
 8009380:	400a      	ands	r2, r1
 8009382:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8009384:	4b0e      	ldr	r3, [pc, #56]	; (80093c0 <SystemInit+0x70>)
 8009386:	4a0e      	ldr	r2, [pc, #56]	; (80093c0 <SystemInit+0x70>)
 8009388:	6852      	ldr	r2, [r2, #4]
 800938a:	4911      	ldr	r1, [pc, #68]	; (80093d0 <SystemInit+0x80>)
 800938c:	400a      	ands	r2, r1
 800938e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8009390:	4b0b      	ldr	r3, [pc, #44]	; (80093c0 <SystemInit+0x70>)
 8009392:	4a0b      	ldr	r2, [pc, #44]	; (80093c0 <SystemInit+0x70>)
 8009394:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009396:	210f      	movs	r1, #15
 8009398:	438a      	bics	r2, r1
 800939a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 800939c:	4b08      	ldr	r3, [pc, #32]	; (80093c0 <SystemInit+0x70>)
 800939e:	4a08      	ldr	r2, [pc, #32]	; (80093c0 <SystemInit+0x70>)
 80093a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80093a2:	490c      	ldr	r1, [pc, #48]	; (80093d4 <SystemInit+0x84>)
 80093a4:	400a      	ands	r2, r1
 80093a6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80093a8:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <SystemInit+0x70>)
 80093aa:	4a05      	ldr	r2, [pc, #20]	; (80093c0 <SystemInit+0x70>)
 80093ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80093ae:	2101      	movs	r1, #1
 80093b0:	438a      	bics	r2, r1
 80093b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80093b4:	4b02      	ldr	r3, [pc, #8]	; (80093c0 <SystemInit+0x70>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	609a      	str	r2, [r3, #8]

}
 80093ba:	46c0      	nop			; (mov r8, r8)
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	40021000 	.word	0x40021000
 80093c4:	f8ffb80c 	.word	0xf8ffb80c
 80093c8:	fef6ffff 	.word	0xfef6ffff
 80093cc:	fffbffff 	.word	0xfffbffff
 80093d0:	ffc0ffff 	.word	0xffc0ffff
 80093d4:	fffffeac 	.word	0xfffffeac

080093d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b088      	sub	sp, #32
 80093dc:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 80093de:	4b2c      	ldr	r3, [pc, #176]	; (8009490 <MX_TIM1_Init+0xb8>)
 80093e0:	4a2c      	ldr	r2, [pc, #176]	; (8009494 <MX_TIM1_Init+0xbc>)
 80093e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80093e4:	4b2a      	ldr	r3, [pc, #168]	; (8009490 <MX_TIM1_Init+0xb8>)
 80093e6:	2204      	movs	r2, #4
 80093e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093ea:	4b29      	ldr	r3, [pc, #164]	; (8009490 <MX_TIM1_Init+0xb8>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80093f0:	4b27      	ldr	r3, [pc, #156]	; (8009490 <MX_TIM1_Init+0xb8>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80093f6:	4b26      	ldr	r3, [pc, #152]	; (8009490 <MX_TIM1_Init+0xb8>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80093fc:	4b24      	ldr	r3, [pc, #144]	; (8009490 <MX_TIM1_Init+0xb8>)
 80093fe:	2200      	movs	r2, #0
 8009400:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009402:	4b23      	ldr	r3, [pc, #140]	; (8009490 <MX_TIM1_Init+0xb8>)
 8009404:	2200      	movs	r2, #0
 8009406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009408:	4b21      	ldr	r3, [pc, #132]	; (8009490 <MX_TIM1_Init+0xb8>)
 800940a:	0018      	movs	r0, r3
 800940c:	f7fb fae0 	bl	80049d0 <HAL_TIM_Base_Init>
 8009410:	1e03      	subs	r3, r0, #0
 8009412:	d004      	beq.n	800941e <MX_TIM1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009414:	4b20      	ldr	r3, [pc, #128]	; (8009498 <MX_TIM1_Init+0xc0>)
 8009416:	2145      	movs	r1, #69	; 0x45
 8009418:	0018      	movs	r0, r3
 800941a:	f7ff f90e 	bl	800863a <_Error_Handler>
  }

  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800941e:	4b1c      	ldr	r3, [pc, #112]	; (8009490 <MX_TIM1_Init+0xb8>)
 8009420:	2108      	movs	r1, #8
 8009422:	0018      	movs	r0, r3
 8009424:	f7fb fb70 	bl	8004b08 <HAL_TIM_OnePulse_Init>
 8009428:	1e03      	subs	r3, r0, #0
 800942a:	d004      	beq.n	8009436 <MX_TIM1_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800942c:	4b1a      	ldr	r3, [pc, #104]	; (8009498 <MX_TIM1_Init+0xc0>)
 800942e:	214a      	movs	r1, #74	; 0x4a
 8009430:	0018      	movs	r0, r3
 8009432:	f7ff f902 	bl	800863a <_Error_Handler>
  }

  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8009436:	230c      	movs	r3, #12
 8009438:	18fb      	adds	r3, r7, r3
 800943a:	2207      	movs	r2, #7
 800943c:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800943e:	230c      	movs	r3, #12
 8009440:	18fb      	adds	r3, r7, r3
 8009442:	2210      	movs	r2, #16
 8009444:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 8009446:	230c      	movs	r3, #12
 8009448:	18fa      	adds	r2, r7, r3
 800944a:	4b11      	ldr	r3, [pc, #68]	; (8009490 <MX_TIM1_Init+0xb8>)
 800944c:	0011      	movs	r1, r2
 800944e:	0018      	movs	r0, r3
 8009450:	f7fb fd6e 	bl	8004f30 <HAL_TIM_SlaveConfigSynchronization>
 8009454:	1e03      	subs	r3, r0, #0
 8009456:	d004      	beq.n	8009462 <MX_TIM1_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009458:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <MX_TIM1_Init+0xc0>)
 800945a:	2151      	movs	r1, #81	; 0x51
 800945c:	0018      	movs	r0, r3
 800945e:	f7ff f8ec 	bl	800863a <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8009462:	1d3b      	adds	r3, r7, #4
 8009464:	2210      	movs	r2, #16
 8009466:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8009468:	1d3b      	adds	r3, r7, #4
 800946a:	2280      	movs	r2, #128	; 0x80
 800946c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800946e:	1d3a      	adds	r2, r7, #4
 8009470:	4b07      	ldr	r3, [pc, #28]	; (8009490 <MX_TIM1_Init+0xb8>)
 8009472:	0011      	movs	r1, r2
 8009474:	0018      	movs	r0, r3
 8009476:	f7fc f980 	bl	800577a <HAL_TIMEx_MasterConfigSynchronization>
 800947a:	1e03      	subs	r3, r0, #0
 800947c:	d004      	beq.n	8009488 <MX_TIM1_Init+0xb0>
  {
    _Error_Handler(__FILE__, __LINE__);
 800947e:	4b06      	ldr	r3, [pc, #24]	; (8009498 <MX_TIM1_Init+0xc0>)
 8009480:	2158      	movs	r1, #88	; 0x58
 8009482:	0018      	movs	r0, r3
 8009484:	f7ff f8d9 	bl	800863a <_Error_Handler>
  }

}
 8009488:	46c0      	nop			; (mov r8, r8)
 800948a:	46bd      	mov	sp, r7
 800948c:	b008      	add	sp, #32
 800948e:	bd80      	pop	{r7, pc}
 8009490:	200008fc 	.word	0x200008fc
 8009494:	40012c00 	.word	0x40012c00
 8009498:	08009e8c 	.word	0x08009e8c

0800949c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08a      	sub	sp, #40	; 0x28
 80094a0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 80094a2:	4b31      	ldr	r3, [pc, #196]	; (8009568 <MX_TIM2_Init+0xcc>)
 80094a4:	2280      	movs	r2, #128	; 0x80
 80094a6:	05d2      	lsls	r2, r2, #23
 80094a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80094aa:	4b2f      	ldr	r3, [pc, #188]	; (8009568 <MX_TIM2_Init+0xcc>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094b0:	4b2d      	ldr	r3, [pc, #180]	; (8009568 <MX_TIM2_Init+0xcc>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80094b6:	4b2c      	ldr	r3, [pc, #176]	; (8009568 <MX_TIM2_Init+0xcc>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094bc:	4b2a      	ldr	r3, [pc, #168]	; (8009568 <MX_TIM2_Init+0xcc>)
 80094be:	2200      	movs	r2, #0
 80094c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094c2:	4b29      	ldr	r3, [pc, #164]	; (8009568 <MX_TIM2_Init+0xcc>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80094c8:	4b27      	ldr	r3, [pc, #156]	; (8009568 <MX_TIM2_Init+0xcc>)
 80094ca:	0018      	movs	r0, r3
 80094cc:	f7fb faac 	bl	8004a28 <HAL_TIM_PWM_Init>
 80094d0:	1e03      	subs	r3, r0, #0
 80094d2:	d004      	beq.n	80094de <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80094d4:	4b25      	ldr	r3, [pc, #148]	; (800956c <MX_TIM2_Init+0xd0>)
 80094d6:	216a      	movs	r1, #106	; 0x6a
 80094d8:	0018      	movs	r0, r3
 80094da:	f7ff f8ae 	bl	800863a <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80094de:	2320      	movs	r3, #32
 80094e0:	18fb      	adds	r3, r7, r3
 80094e2:	2220      	movs	r2, #32
 80094e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80094e6:	2320      	movs	r3, #32
 80094e8:	18fb      	adds	r3, r7, r3
 80094ea:	2280      	movs	r2, #128	; 0x80
 80094ec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80094ee:	2320      	movs	r3, #32
 80094f0:	18fa      	adds	r2, r7, r3
 80094f2:	4b1d      	ldr	r3, [pc, #116]	; (8009568 <MX_TIM2_Init+0xcc>)
 80094f4:	0011      	movs	r1, r2
 80094f6:	0018      	movs	r0, r3
 80094f8:	f7fc f93f 	bl	800577a <HAL_TIMEx_MasterConfigSynchronization>
 80094fc:	1e03      	subs	r3, r0, #0
 80094fe:	d004      	beq.n	800950a <MX_TIM2_Init+0x6e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009500:	4b1a      	ldr	r3, [pc, #104]	; (800956c <MX_TIM2_Init+0xd0>)
 8009502:	2171      	movs	r1, #113	; 0x71
 8009504:	0018      	movs	r0, r3
 8009506:	f7ff f898 	bl	800863a <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800950a:	1d3b      	adds	r3, r7, #4
 800950c:	2260      	movs	r2, #96	; 0x60
 800950e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8009510:	1d3b      	adds	r3, r7, #4
 8009512:	2200      	movs	r2, #0
 8009514:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8009516:	1d3b      	adds	r3, r7, #4
 8009518:	2202      	movs	r2, #2
 800951a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800951c:	1d3b      	adds	r3, r7, #4
 800951e:	2200      	movs	r2, #0
 8009520:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009522:	1d39      	adds	r1, r7, #4
 8009524:	4b10      	ldr	r3, [pc, #64]	; (8009568 <MX_TIM2_Init+0xcc>)
 8009526:	2200      	movs	r2, #0
 8009528:	0018      	movs	r0, r3
 800952a:	f7fb fc49 	bl	8004dc0 <HAL_TIM_PWM_ConfigChannel>
 800952e:	1e03      	subs	r3, r0, #0
 8009530:	d004      	beq.n	800953c <MX_TIM2_Init+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009532:	4b0e      	ldr	r3, [pc, #56]	; (800956c <MX_TIM2_Init+0xd0>)
 8009534:	217a      	movs	r1, #122	; 0x7a
 8009536:	0018      	movs	r0, r3
 8009538:	f7ff f87f 	bl	800863a <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800953c:	1d39      	adds	r1, r7, #4
 800953e:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <MX_TIM2_Init+0xcc>)
 8009540:	2204      	movs	r2, #4
 8009542:	0018      	movs	r0, r3
 8009544:	f7fb fc3c 	bl	8004dc0 <HAL_TIM_PWM_ConfigChannel>
 8009548:	1e03      	subs	r3, r0, #0
 800954a:	d004      	beq.n	8009556 <MX_TIM2_Init+0xba>
  {
    _Error_Handler(__FILE__, __LINE__);
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <MX_TIM2_Init+0xd0>)
 800954e:	217f      	movs	r1, #127	; 0x7f
 8009550:	0018      	movs	r0, r3
 8009552:	f7ff f872 	bl	800863a <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8009556:	4b04      	ldr	r3, [pc, #16]	; (8009568 <MX_TIM2_Init+0xcc>)
 8009558:	0018      	movs	r0, r3
 800955a:	f000 f9b9 	bl	80098d0 <HAL_TIM_MspPostInit>

}
 800955e:	46c0      	nop			; (mov r8, r8)
 8009560:	46bd      	mov	sp, r7
 8009562:	b00a      	add	sp, #40	; 0x28
 8009564:	bd80      	pop	{r7, pc}
 8009566:	46c0      	nop			; (mov r8, r8)
 8009568:	2000093c 	.word	0x2000093c
 800956c:	08009e8c 	.word	0x08009e8c

08009570 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08a      	sub	sp, #40	; 0x28
 8009574:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 8009576:	4b30      	ldr	r3, [pc, #192]	; (8009638 <MX_TIM3_Init+0xc8>)
 8009578:	4a30      	ldr	r2, [pc, #192]	; (800963c <MX_TIM3_Init+0xcc>)
 800957a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800957c:	4b2e      	ldr	r3, [pc, #184]	; (8009638 <MX_TIM3_Init+0xc8>)
 800957e:	2200      	movs	r2, #0
 8009580:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009582:	4b2d      	ldr	r3, [pc, #180]	; (8009638 <MX_TIM3_Init+0xc8>)
 8009584:	2200      	movs	r2, #0
 8009586:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8009588:	4b2b      	ldr	r3, [pc, #172]	; (8009638 <MX_TIM3_Init+0xc8>)
 800958a:	2200      	movs	r2, #0
 800958c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800958e:	4b2a      	ldr	r3, [pc, #168]	; (8009638 <MX_TIM3_Init+0xc8>)
 8009590:	2200      	movs	r2, #0
 8009592:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009594:	4b28      	ldr	r3, [pc, #160]	; (8009638 <MX_TIM3_Init+0xc8>)
 8009596:	2200      	movs	r2, #0
 8009598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800959a:	4b27      	ldr	r3, [pc, #156]	; (8009638 <MX_TIM3_Init+0xc8>)
 800959c:	0018      	movs	r0, r3
 800959e:	f7fb fa43 	bl	8004a28 <HAL_TIM_PWM_Init>
 80095a2:	1e03      	subs	r3, r0, #0
 80095a4:	d004      	beq.n	80095b0 <MX_TIM3_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 80095a6:	4b26      	ldr	r3, [pc, #152]	; (8009640 <MX_TIM3_Init+0xd0>)
 80095a8:	2193      	movs	r1, #147	; 0x93
 80095aa:	0018      	movs	r0, r3
 80095ac:	f7ff f845 	bl	800863a <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80095b0:	2320      	movs	r3, #32
 80095b2:	18fb      	adds	r3, r7, r3
 80095b4:	2220      	movs	r2, #32
 80095b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80095b8:	2320      	movs	r3, #32
 80095ba:	18fb      	adds	r3, r7, r3
 80095bc:	2280      	movs	r2, #128	; 0x80
 80095be:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80095c0:	2320      	movs	r3, #32
 80095c2:	18fa      	adds	r2, r7, r3
 80095c4:	4b1c      	ldr	r3, [pc, #112]	; (8009638 <MX_TIM3_Init+0xc8>)
 80095c6:	0011      	movs	r1, r2
 80095c8:	0018      	movs	r0, r3
 80095ca:	f7fc f8d6 	bl	800577a <HAL_TIMEx_MasterConfigSynchronization>
 80095ce:	1e03      	subs	r3, r0, #0
 80095d0:	d004      	beq.n	80095dc <MX_TIM3_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80095d2:	4b1b      	ldr	r3, [pc, #108]	; (8009640 <MX_TIM3_Init+0xd0>)
 80095d4:	219a      	movs	r1, #154	; 0x9a
 80095d6:	0018      	movs	r0, r3
 80095d8:	f7ff f82f 	bl	800863a <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095dc:	1d3b      	adds	r3, r7, #4
 80095de:	2260      	movs	r2, #96	; 0x60
 80095e0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80095e2:	1d3b      	adds	r3, r7, #4
 80095e4:	2200      	movs	r2, #0
 80095e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80095e8:	1d3b      	adds	r3, r7, #4
 80095ea:	2202      	movs	r2, #2
 80095ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095ee:	1d3b      	adds	r3, r7, #4
 80095f0:	2200      	movs	r2, #0
 80095f2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095f4:	1d39      	adds	r1, r7, #4
 80095f6:	4b10      	ldr	r3, [pc, #64]	; (8009638 <MX_TIM3_Init+0xc8>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	0018      	movs	r0, r3
 80095fc:	f7fb fbe0 	bl	8004dc0 <HAL_TIM_PWM_ConfigChannel>
 8009600:	1e03      	subs	r3, r0, #0
 8009602:	d004      	beq.n	800960e <MX_TIM3_Init+0x9e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009604:	4b0e      	ldr	r3, [pc, #56]	; (8009640 <MX_TIM3_Init+0xd0>)
 8009606:	21a3      	movs	r1, #163	; 0xa3
 8009608:	0018      	movs	r0, r3
 800960a:	f7ff f816 	bl	800863a <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800960e:	1d39      	adds	r1, r7, #4
 8009610:	4b09      	ldr	r3, [pc, #36]	; (8009638 <MX_TIM3_Init+0xc8>)
 8009612:	2204      	movs	r2, #4
 8009614:	0018      	movs	r0, r3
 8009616:	f7fb fbd3 	bl	8004dc0 <HAL_TIM_PWM_ConfigChannel>
 800961a:	1e03      	subs	r3, r0, #0
 800961c:	d004      	beq.n	8009628 <MX_TIM3_Init+0xb8>
  {
    _Error_Handler(__FILE__, __LINE__);
 800961e:	4b08      	ldr	r3, [pc, #32]	; (8009640 <MX_TIM3_Init+0xd0>)
 8009620:	21a8      	movs	r1, #168	; 0xa8
 8009622:	0018      	movs	r0, r3
 8009624:	f7ff f809 	bl	800863a <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 8009628:	4b03      	ldr	r3, [pc, #12]	; (8009638 <MX_TIM3_Init+0xc8>)
 800962a:	0018      	movs	r0, r3
 800962c:	f000 f950 	bl	80098d0 <HAL_TIM_MspPostInit>

}
 8009630:	46c0      	nop			; (mov r8, r8)
 8009632:	46bd      	mov	sp, r7
 8009634:	b00a      	add	sp, #40	; 0x28
 8009636:	bd80      	pop	{r7, pc}
 8009638:	2000087c 	.word	0x2000087c
 800963c:	40000400 	.word	0x40000400
 8009640:	08009e8c 	.word	0x08009e8c

08009644 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 800964a:	4b1e      	ldr	r3, [pc, #120]	; (80096c4 <MX_TIM6_Init+0x80>)
 800964c:	4a1e      	ldr	r2, [pc, #120]	; (80096c8 <MX_TIM6_Init+0x84>)
 800964e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42001;
 8009650:	4b1c      	ldr	r3, [pc, #112]	; (80096c4 <MX_TIM6_Init+0x80>)
 8009652:	4a1e      	ldr	r2, [pc, #120]	; (80096cc <MX_TIM6_Init+0x88>)
 8009654:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009656:	4b1b      	ldr	r3, [pc, #108]	; (80096c4 <MX_TIM6_Init+0x80>)
 8009658:	2200      	movs	r2, #0
 800965a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 800965c:	4b19      	ldr	r3, [pc, #100]	; (80096c4 <MX_TIM6_Init+0x80>)
 800965e:	2201      	movs	r2, #1
 8009660:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009662:	4b18      	ldr	r3, [pc, #96]	; (80096c4 <MX_TIM6_Init+0x80>)
 8009664:	2200      	movs	r2, #0
 8009666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009668:	4b16      	ldr	r3, [pc, #88]	; (80096c4 <MX_TIM6_Init+0x80>)
 800966a:	0018      	movs	r0, r3
 800966c:	f7fb f9b0 	bl	80049d0 <HAL_TIM_Base_Init>
 8009670:	1e03      	subs	r3, r0, #0
 8009672:	d004      	beq.n	800967e <MX_TIM6_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009674:	4b16      	ldr	r3, [pc, #88]	; (80096d0 <MX_TIM6_Init+0x8c>)
 8009676:	21ba      	movs	r1, #186	; 0xba
 8009678:	0018      	movs	r0, r3
 800967a:	f7fe ffde 	bl	800863a <_Error_Handler>
  }

  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 800967e:	4b11      	ldr	r3, [pc, #68]	; (80096c4 <MX_TIM6_Init+0x80>)
 8009680:	2108      	movs	r1, #8
 8009682:	0018      	movs	r0, r3
 8009684:	f7fb fa40 	bl	8004b08 <HAL_TIM_OnePulse_Init>
 8009688:	1e03      	subs	r3, r0, #0
 800968a:	d004      	beq.n	8009696 <MX_TIM6_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 800968c:	4b10      	ldr	r3, [pc, #64]	; (80096d0 <MX_TIM6_Init+0x8c>)
 800968e:	21bf      	movs	r1, #191	; 0xbf
 8009690:	0018      	movs	r0, r3
 8009692:	f7fe ffd2 	bl	800863a <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009696:	003b      	movs	r3, r7
 8009698:	2220      	movs	r2, #32
 800969a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800969c:	003b      	movs	r3, r7
 800969e:	2200      	movs	r2, #0
 80096a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80096a2:	003a      	movs	r2, r7
 80096a4:	4b07      	ldr	r3, [pc, #28]	; (80096c4 <MX_TIM6_Init+0x80>)
 80096a6:	0011      	movs	r1, r2
 80096a8:	0018      	movs	r0, r3
 80096aa:	f7fc f866 	bl	800577a <HAL_TIMEx_MasterConfigSynchronization>
 80096ae:	1e03      	subs	r3, r0, #0
 80096b0:	d004      	beq.n	80096bc <MX_TIM6_Init+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 80096b2:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <MX_TIM6_Init+0x8c>)
 80096b4:	21c6      	movs	r1, #198	; 0xc6
 80096b6:	0018      	movs	r0, r3
 80096b8:	f7fe ffbf 	bl	800863a <_Error_Handler>
  }

}
 80096bc:	46c0      	nop			; (mov r8, r8)
 80096be:	46bd      	mov	sp, r7
 80096c0:	b002      	add	sp, #8
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	200008bc 	.word	0x200008bc
 80096c8:	40001000 	.word	0x40001000
 80096cc:	0000a411 	.word	0x0000a411
 80096d0:	08009e8c 	.word	0x08009e8c

080096d4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 80096d8:	4b0f      	ldr	r3, [pc, #60]	; (8009718 <MX_TIM14_Init+0x44>)
 80096da:	4a10      	ldr	r2, [pc, #64]	; (800971c <MX_TIM14_Init+0x48>)
 80096dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 19999;
 80096de:	4b0e      	ldr	r3, [pc, #56]	; (8009718 <MX_TIM14_Init+0x44>)
 80096e0:	4a0f      	ldr	r2, [pc, #60]	; (8009720 <MX_TIM14_Init+0x4c>)
 80096e2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096e4:	4b0c      	ldr	r3, [pc, #48]	; (8009718 <MX_TIM14_Init+0x44>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1199;
 80096ea:	4b0b      	ldr	r3, [pc, #44]	; (8009718 <MX_TIM14_Init+0x44>)
 80096ec:	4a0d      	ldr	r2, [pc, #52]	; (8009724 <MX_TIM14_Init+0x50>)
 80096ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80096f0:	4b09      	ldr	r3, [pc, #36]	; (8009718 <MX_TIM14_Init+0x44>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80096f6:	4b08      	ldr	r3, [pc, #32]	; (8009718 <MX_TIM14_Init+0x44>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80096fc:	4b06      	ldr	r3, [pc, #24]	; (8009718 <MX_TIM14_Init+0x44>)
 80096fe:	0018      	movs	r0, r3
 8009700:	f7fb f966 	bl	80049d0 <HAL_TIM_Base_Init>
 8009704:	1e03      	subs	r3, r0, #0
 8009706:	d004      	beq.n	8009712 <MX_TIM14_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009708:	4b07      	ldr	r3, [pc, #28]	; (8009728 <MX_TIM14_Init+0x54>)
 800970a:	21d6      	movs	r1, #214	; 0xd6
 800970c:	0018      	movs	r0, r3
 800970e:	f7fe ff94 	bl	800863a <_Error_Handler>
  }

}
 8009712:	46c0      	nop			; (mov r8, r8)
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	2000097c 	.word	0x2000097c
 800971c:	40002000 	.word	0x40002000
 8009720:	00004e1f 	.word	0x00004e1f
 8009724:	000004af 	.word	0x000004af
 8009728:	08009e8c 	.word	0x08009e8c

0800972c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8009730:	4b17      	ldr	r3, [pc, #92]	; (8009790 <MX_TIM16_Init+0x64>)
 8009732:	4a18      	ldr	r2, [pc, #96]	; (8009794 <MX_TIM16_Init+0x68>)
 8009734:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 42001;
 8009736:	4b16      	ldr	r3, [pc, #88]	; (8009790 <MX_TIM16_Init+0x64>)
 8009738:	4a17      	ldr	r2, [pc, #92]	; (8009798 <MX_TIM16_Init+0x6c>)
 800973a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800973c:	4b14      	ldr	r3, [pc, #80]	; (8009790 <MX_TIM16_Init+0x64>)
 800973e:	2200      	movs	r2, #0
 8009740:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 8009742:	4b13      	ldr	r3, [pc, #76]	; (8009790 <MX_TIM16_Init+0x64>)
 8009744:	2201      	movs	r2, #1
 8009746:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009748:	4b11      	ldr	r3, [pc, #68]	; (8009790 <MX_TIM16_Init+0x64>)
 800974a:	2200      	movs	r2, #0
 800974c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800974e:	4b10      	ldr	r3, [pc, #64]	; (8009790 <MX_TIM16_Init+0x64>)
 8009750:	2200      	movs	r2, #0
 8009752:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009754:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <MX_TIM16_Init+0x64>)
 8009756:	2200      	movs	r2, #0
 8009758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800975a:	4b0d      	ldr	r3, [pc, #52]	; (8009790 <MX_TIM16_Init+0x64>)
 800975c:	0018      	movs	r0, r3
 800975e:	f7fb f937 	bl	80049d0 <HAL_TIM_Base_Init>
 8009762:	1e03      	subs	r3, r0, #0
 8009764:	d004      	beq.n	8009770 <MX_TIM16_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009766:	4b0d      	ldr	r3, [pc, #52]	; (800979c <MX_TIM16_Init+0x70>)
 8009768:	21e7      	movs	r1, #231	; 0xe7
 800976a:	0018      	movs	r0, r3
 800976c:	f7fe ff65 	bl	800863a <_Error_Handler>
  }

  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8009770:	4b07      	ldr	r3, [pc, #28]	; (8009790 <MX_TIM16_Init+0x64>)
 8009772:	2108      	movs	r1, #8
 8009774:	0018      	movs	r0, r3
 8009776:	f7fb f9c7 	bl	8004b08 <HAL_TIM_OnePulse_Init>
 800977a:	1e03      	subs	r3, r0, #0
 800977c:	d004      	beq.n	8009788 <MX_TIM16_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800977e:	4b07      	ldr	r3, [pc, #28]	; (800979c <MX_TIM16_Init+0x70>)
 8009780:	21ec      	movs	r1, #236	; 0xec
 8009782:	0018      	movs	r0, r3
 8009784:	f7fe ff59 	bl	800863a <_Error_Handler>
  }

}
 8009788:	46c0      	nop			; (mov r8, r8)
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	200009bc 	.word	0x200009bc
 8009794:	40014400 	.word	0x40014400
 8009798:	0000a411 	.word	0x0000a411
 800979c:	08009e8c 	.word	0x08009e8c

080097a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a2b      	ldr	r2, [pc, #172]	; (800985c <HAL_TIM_Base_MspInit+0xbc>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d116      	bne.n	80097e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80097b2:	4b2b      	ldr	r3, [pc, #172]	; (8009860 <HAL_TIM_Base_MspInit+0xc0>)
 80097b4:	4a2a      	ldr	r2, [pc, #168]	; (8009860 <HAL_TIM_Base_MspInit+0xc0>)
 80097b6:	6992      	ldr	r2, [r2, #24]
 80097b8:	2180      	movs	r1, #128	; 0x80
 80097ba:	0109      	lsls	r1, r1, #4
 80097bc:	430a      	orrs	r2, r1
 80097be:	619a      	str	r2, [r3, #24]
 80097c0:	4b27      	ldr	r3, [pc, #156]	; (8009860 <HAL_TIM_Base_MspInit+0xc0>)
 80097c2:	699a      	ldr	r2, [r3, #24]
 80097c4:	2380      	movs	r3, #128	; 0x80
 80097c6:	011b      	lsls	r3, r3, #4
 80097c8:	4013      	ands	r3, r2
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80097ce:	2200      	movs	r2, #0
 80097d0:	2101      	movs	r1, #1
 80097d2:	200e      	movs	r0, #14
 80097d4:	f7f9 f820 	bl	8002818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80097d8:	200e      	movs	r0, #14
 80097da:	f7f9 f833 	bl	8002844 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80097de:	e038      	b.n	8009852 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM6)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a1f      	ldr	r2, [pc, #124]	; (8009864 <HAL_TIM_Base_MspInit+0xc4>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d10c      	bne.n	8009804 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80097ea:	4b1d      	ldr	r3, [pc, #116]	; (8009860 <HAL_TIM_Base_MspInit+0xc0>)
 80097ec:	4a1c      	ldr	r2, [pc, #112]	; (8009860 <HAL_TIM_Base_MspInit+0xc0>)
 80097ee:	69d2      	ldr	r2, [r2, #28]
 80097f0:	2110      	movs	r1, #16
 80097f2:	430a      	orrs	r2, r1
 80097f4:	61da      	str	r2, [r3, #28]
 80097f6:	4b1a      	ldr	r3, [pc, #104]	; (8009860 <HAL_TIM_Base_MspInit+0xc0>)
 80097f8:	69db      	ldr	r3, [r3, #28]
 80097fa:	2210      	movs	r2, #16
 80097fc:	4013      	ands	r3, r2
 80097fe:	613b      	str	r3, [r7, #16]
 8009800:	693b      	ldr	r3, [r7, #16]
}
 8009802:	e026      	b.n	8009852 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM14)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a17      	ldr	r2, [pc, #92]	; (8009868 <HAL_TIM_Base_MspInit+0xc8>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d10e      	bne.n	800982c <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800980e:	4b14      	ldr	r3, [pc, #80]	; (8009860 <HAL_TIM_Base_MspInit+0xc0>)
 8009810:	4a13      	ldr	r2, [pc, #76]	; (8009860 <HAL_TIM_Base_MspInit+0xc0>)
 8009812:	69d2      	ldr	r2, [r2, #28]
 8009814:	2180      	movs	r1, #128	; 0x80
 8009816:	0049      	lsls	r1, r1, #1
 8009818:	430a      	orrs	r2, r1
 800981a:	61da      	str	r2, [r3, #28]
 800981c:	4b10      	ldr	r3, [pc, #64]	; (8009860 <HAL_TIM_Base_MspInit+0xc0>)
 800981e:	69da      	ldr	r2, [r3, #28]
 8009820:	2380      	movs	r3, #128	; 0x80
 8009822:	005b      	lsls	r3, r3, #1
 8009824:	4013      	ands	r3, r2
 8009826:	60fb      	str	r3, [r7, #12]
 8009828:	68fb      	ldr	r3, [r7, #12]
}
 800982a:	e012      	b.n	8009852 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM16)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a0e      	ldr	r2, [pc, #56]	; (800986c <HAL_TIM_Base_MspInit+0xcc>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d10d      	bne.n	8009852 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009836:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <HAL_TIM_Base_MspInit+0xc0>)
 8009838:	4a09      	ldr	r2, [pc, #36]	; (8009860 <HAL_TIM_Base_MspInit+0xc0>)
 800983a:	6992      	ldr	r2, [r2, #24]
 800983c:	2180      	movs	r1, #128	; 0x80
 800983e:	0289      	lsls	r1, r1, #10
 8009840:	430a      	orrs	r2, r1
 8009842:	619a      	str	r2, [r3, #24]
 8009844:	4b06      	ldr	r3, [pc, #24]	; (8009860 <HAL_TIM_Base_MspInit+0xc0>)
 8009846:	699a      	ldr	r2, [r3, #24]
 8009848:	2380      	movs	r3, #128	; 0x80
 800984a:	029b      	lsls	r3, r3, #10
 800984c:	4013      	ands	r3, r2
 800984e:	60bb      	str	r3, [r7, #8]
 8009850:	68bb      	ldr	r3, [r7, #8]
}
 8009852:	46c0      	nop			; (mov r8, r8)
 8009854:	46bd      	mov	sp, r7
 8009856:	b006      	add	sp, #24
 8009858:	bd80      	pop	{r7, pc}
 800985a:	46c0      	nop			; (mov r8, r8)
 800985c:	40012c00 	.word	0x40012c00
 8009860:	40021000 	.word	0x40021000
 8009864:	40001000 	.word	0x40001000
 8009868:	40002000 	.word	0x40002000
 800986c:	40014400 	.word	0x40014400

08009870 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	2380      	movs	r3, #128	; 0x80
 800987e:	05db      	lsls	r3, r3, #23
 8009880:	429a      	cmp	r2, r3
 8009882:	d10c      	bne.n	800989e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009884:	4b10      	ldr	r3, [pc, #64]	; (80098c8 <HAL_TIM_PWM_MspInit+0x58>)
 8009886:	4a10      	ldr	r2, [pc, #64]	; (80098c8 <HAL_TIM_PWM_MspInit+0x58>)
 8009888:	69d2      	ldr	r2, [r2, #28]
 800988a:	2101      	movs	r1, #1
 800988c:	430a      	orrs	r2, r1
 800988e:	61da      	str	r2, [r3, #28]
 8009890:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <HAL_TIM_PWM_MspInit+0x58>)
 8009892:	69db      	ldr	r3, [r3, #28]
 8009894:	2201      	movs	r2, #1
 8009896:	4013      	ands	r3, r2
 8009898:	60fb      	str	r3, [r7, #12]
 800989a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800989c:	e010      	b.n	80098c0 <HAL_TIM_PWM_MspInit+0x50>
  else if(tim_pwmHandle->Instance==TIM3)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a0a      	ldr	r2, [pc, #40]	; (80098cc <HAL_TIM_PWM_MspInit+0x5c>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d10b      	bne.n	80098c0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80098a8:	4b07      	ldr	r3, [pc, #28]	; (80098c8 <HAL_TIM_PWM_MspInit+0x58>)
 80098aa:	4a07      	ldr	r2, [pc, #28]	; (80098c8 <HAL_TIM_PWM_MspInit+0x58>)
 80098ac:	69d2      	ldr	r2, [r2, #28]
 80098ae:	2102      	movs	r1, #2
 80098b0:	430a      	orrs	r2, r1
 80098b2:	61da      	str	r2, [r3, #28]
 80098b4:	4b04      	ldr	r3, [pc, #16]	; (80098c8 <HAL_TIM_PWM_MspInit+0x58>)
 80098b6:	69db      	ldr	r3, [r3, #28]
 80098b8:	2202      	movs	r2, #2
 80098ba:	4013      	ands	r3, r2
 80098bc:	60bb      	str	r3, [r7, #8]
 80098be:	68bb      	ldr	r3, [r7, #8]
}
 80098c0:	46c0      	nop			; (mov r8, r8)
 80098c2:	46bd      	mov	sp, r7
 80098c4:	b004      	add	sp, #16
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	40021000 	.word	0x40021000
 80098cc:	40000400 	.word	0x40000400

080098d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b088      	sub	sp, #32
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	2380      	movs	r3, #128	; 0x80
 80098de:	05db      	lsls	r3, r3, #23
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d138      	bne.n	8009956 <HAL_TIM_MspPostInit+0x86>
  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80098e4:	230c      	movs	r3, #12
 80098e6:	18fb      	adds	r3, r7, r3
 80098e8:	2280      	movs	r2, #128	; 0x80
 80098ea:	0212      	lsls	r2, r2, #8
 80098ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098ee:	230c      	movs	r3, #12
 80098f0:	18fb      	adds	r3, r7, r3
 80098f2:	2202      	movs	r2, #2
 80098f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098f6:	230c      	movs	r3, #12
 80098f8:	18fb      	adds	r3, r7, r3
 80098fa:	2200      	movs	r2, #0
 80098fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098fe:	230c      	movs	r3, #12
 8009900:	18fb      	adds	r3, r7, r3
 8009902:	2200      	movs	r2, #0
 8009904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8009906:	230c      	movs	r3, #12
 8009908:	18fb      	adds	r3, r7, r3
 800990a:	2202      	movs	r2, #2
 800990c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800990e:	230c      	movs	r3, #12
 8009910:	18fa      	adds	r2, r7, r3
 8009912:	2390      	movs	r3, #144	; 0x90
 8009914:	05db      	lsls	r3, r3, #23
 8009916:	0011      	movs	r1, r2
 8009918:	0018      	movs	r0, r3
 800991a:	f7f9 fbcb 	bl	80030b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800991e:	230c      	movs	r3, #12
 8009920:	18fb      	adds	r3, r7, r3
 8009922:	2208      	movs	r2, #8
 8009924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009926:	230c      	movs	r3, #12
 8009928:	18fb      	adds	r3, r7, r3
 800992a:	2202      	movs	r2, #2
 800992c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800992e:	230c      	movs	r3, #12
 8009930:	18fb      	adds	r3, r7, r3
 8009932:	2200      	movs	r2, #0
 8009934:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009936:	230c      	movs	r3, #12
 8009938:	18fb      	adds	r3, r7, r3
 800993a:	2200      	movs	r2, #0
 800993c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800993e:	230c      	movs	r3, #12
 8009940:	18fb      	adds	r3, r7, r3
 8009942:	2202      	movs	r2, #2
 8009944:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009946:	230c      	movs	r3, #12
 8009948:	18fb      	adds	r3, r7, r3
 800994a:	4a15      	ldr	r2, [pc, #84]	; (80099a0 <HAL_TIM_MspPostInit+0xd0>)
 800994c:	0019      	movs	r1, r3
 800994e:	0010      	movs	r0, r2
 8009950:	f7f9 fbb0 	bl	80030b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009954:	e01f      	b.n	8009996 <HAL_TIM_MspPostInit+0xc6>
  else if(timHandle->Instance==TIM3)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a12      	ldr	r2, [pc, #72]	; (80099a4 <HAL_TIM_MspPostInit+0xd4>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d11a      	bne.n	8009996 <HAL_TIM_MspPostInit+0xc6>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8009960:	230c      	movs	r3, #12
 8009962:	18fb      	adds	r3, r7, r3
 8009964:	2230      	movs	r2, #48	; 0x30
 8009966:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009968:	230c      	movs	r3, #12
 800996a:	18fb      	adds	r3, r7, r3
 800996c:	2202      	movs	r2, #2
 800996e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009970:	230c      	movs	r3, #12
 8009972:	18fb      	adds	r3, r7, r3
 8009974:	2200      	movs	r2, #0
 8009976:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009978:	230c      	movs	r3, #12
 800997a:	18fb      	adds	r3, r7, r3
 800997c:	2200      	movs	r2, #0
 800997e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8009980:	230c      	movs	r3, #12
 8009982:	18fb      	adds	r3, r7, r3
 8009984:	2201      	movs	r2, #1
 8009986:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009988:	230c      	movs	r3, #12
 800998a:	18fb      	adds	r3, r7, r3
 800998c:	4a04      	ldr	r2, [pc, #16]	; (80099a0 <HAL_TIM_MspPostInit+0xd0>)
 800998e:	0019      	movs	r1, r3
 8009990:	0010      	movs	r0, r2
 8009992:	f7f9 fb8f 	bl	80030b4 <HAL_GPIO_Init>
}
 8009996:	46c0      	nop			; (mov r8, r8)
 8009998:	46bd      	mov	sp, r7
 800999a:	b008      	add	sp, #32
 800999c:	bd80      	pop	{r7, pc}
 800999e:	46c0      	nop			; (mov r8, r8)
 80099a0:	48000400 	.word	0x48000400
 80099a4:	40000400 	.word	0x40000400

080099a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80099ac:	4b16      	ldr	r3, [pc, #88]	; (8009a08 <MX_USART1_UART_Init+0x60>)
 80099ae:	4a17      	ldr	r2, [pc, #92]	; (8009a0c <MX_USART1_UART_Init+0x64>)
 80099b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80099b2:	4b15      	ldr	r3, [pc, #84]	; (8009a08 <MX_USART1_UART_Init+0x60>)
 80099b4:	22e1      	movs	r2, #225	; 0xe1
 80099b6:	0252      	lsls	r2, r2, #9
 80099b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80099ba:	4b13      	ldr	r3, [pc, #76]	; (8009a08 <MX_USART1_UART_Init+0x60>)
 80099bc:	2200      	movs	r2, #0
 80099be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80099c0:	4b11      	ldr	r3, [pc, #68]	; (8009a08 <MX_USART1_UART_Init+0x60>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80099c6:	4b10      	ldr	r3, [pc, #64]	; (8009a08 <MX_USART1_UART_Init+0x60>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80099cc:	4b0e      	ldr	r3, [pc, #56]	; (8009a08 <MX_USART1_UART_Init+0x60>)
 80099ce:	220c      	movs	r2, #12
 80099d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80099d2:	4b0d      	ldr	r3, [pc, #52]	; (8009a08 <MX_USART1_UART_Init+0x60>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80099d8:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <MX_USART1_UART_Init+0x60>)
 80099da:	2200      	movs	r2, #0
 80099dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80099de:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <MX_USART1_UART_Init+0x60>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80099e4:	4b08      	ldr	r3, [pc, #32]	; (8009a08 <MX_USART1_UART_Init+0x60>)
 80099e6:	2200      	movs	r2, #0
 80099e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80099ea:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <MX_USART1_UART_Init+0x60>)
 80099ec:	0018      	movs	r0, r3
 80099ee:	f7fb ff17 	bl	8005820 <HAL_UART_Init>
 80099f2:	1e03      	subs	r3, r0, #0
 80099f4:	d004      	beq.n	8009a00 <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 80099f6:	4b06      	ldr	r3, [pc, #24]	; (8009a10 <MX_USART1_UART_Init+0x68>)
 80099f8:	214a      	movs	r1, #74	; 0x4a
 80099fa:	0018      	movs	r0, r3
 80099fc:	f7fe fe1d 	bl	800863a <_Error_Handler>
  }

}
 8009a00:	46c0      	nop			; (mov r8, r8)
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	46c0      	nop			; (mov r8, r8)
 8009a08:	20000b0c 	.word	0x20000b0c
 8009a0c:	40013800 	.word	0x40013800
 8009a10:	08009e9c 	.word	0x08009e9c

08009a14 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8009a18:	4b17      	ldr	r3, [pc, #92]	; (8009a78 <MX_USART2_UART_Init+0x64>)
 8009a1a:	4a18      	ldr	r2, [pc, #96]	; (8009a7c <MX_USART2_UART_Init+0x68>)
 8009a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009a1e:	4b16      	ldr	r3, [pc, #88]	; (8009a78 <MX_USART2_UART_Init+0x64>)
 8009a20:	22e1      	movs	r2, #225	; 0xe1
 8009a22:	0252      	lsls	r2, r2, #9
 8009a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009a26:	4b14      	ldr	r3, [pc, #80]	; (8009a78 <MX_USART2_UART_Init+0x64>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009a2c:	4b12      	ldr	r3, [pc, #72]	; (8009a78 <MX_USART2_UART_Init+0x64>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009a32:	4b11      	ldr	r3, [pc, #68]	; (8009a78 <MX_USART2_UART_Init+0x64>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009a38:	4b0f      	ldr	r3, [pc, #60]	; (8009a78 <MX_USART2_UART_Init+0x64>)
 8009a3a:	220c      	movs	r2, #12
 8009a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a3e:	4b0e      	ldr	r3, [pc, #56]	; (8009a78 <MX_USART2_UART_Init+0x64>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a44:	4b0c      	ldr	r3, [pc, #48]	; (8009a78 <MX_USART2_UART_Init+0x64>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009a4a:	4b0b      	ldr	r3, [pc, #44]	; (8009a78 <MX_USART2_UART_Init+0x64>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009a50:	4b09      	ldr	r3, [pc, #36]	; (8009a78 <MX_USART2_UART_Init+0x64>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8009a56:	4808      	ldr	r0, [pc, #32]	; (8009a78 <MX_USART2_UART_Init+0x64>)
 8009a58:	2300      	movs	r3, #0
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	f7fc fe1f 	bl	80066a0 <HAL_RS485Ex_Init>
 8009a62:	1e03      	subs	r3, r0, #0
 8009a64:	d004      	beq.n	8009a70 <MX_USART2_UART_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009a66:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <MX_USART2_UART_Init+0x6c>)
 8009a68:	215f      	movs	r1, #95	; 0x5f
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	f7fe fde5 	bl	800863a <_Error_Handler>
  }

}
 8009a70:	46c0      	nop			; (mov r8, r8)
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	46c0      	nop			; (mov r8, r8)
 8009a78:	20000b7c 	.word	0x20000b7c
 8009a7c:	40004400 	.word	0x40004400
 8009a80:	08009e9c 	.word	0x08009e9c

08009a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08a      	sub	sp, #40	; 0x28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a85      	ldr	r2, [pc, #532]	; (8009ca8 <HAL_UART_MspInit+0x224>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d000      	beq.n	8009a98 <HAL_UART_MspInit+0x14>
 8009a96:	e07f      	b.n	8009b98 <HAL_UART_MspInit+0x114>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009a98:	4b84      	ldr	r3, [pc, #528]	; (8009cac <HAL_UART_MspInit+0x228>)
 8009a9a:	4a84      	ldr	r2, [pc, #528]	; (8009cac <HAL_UART_MspInit+0x228>)
 8009a9c:	6992      	ldr	r2, [r2, #24]
 8009a9e:	2180      	movs	r1, #128	; 0x80
 8009aa0:	01c9      	lsls	r1, r1, #7
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	619a      	str	r2, [r3, #24]
 8009aa6:	4b81      	ldr	r3, [pc, #516]	; (8009cac <HAL_UART_MspInit+0x228>)
 8009aa8:	699a      	ldr	r2, [r3, #24]
 8009aaa:	2380      	movs	r3, #128	; 0x80
 8009aac:	01db      	lsls	r3, r3, #7
 8009aae:	4013      	ands	r3, r2
 8009ab0:	613b      	str	r3, [r7, #16]
 8009ab2:	693b      	ldr	r3, [r7, #16]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009ab4:	2314      	movs	r3, #20
 8009ab6:	18fb      	adds	r3, r7, r3
 8009ab8:	22c0      	movs	r2, #192	; 0xc0
 8009aba:	00d2      	lsls	r2, r2, #3
 8009abc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009abe:	2314      	movs	r3, #20
 8009ac0:	18fb      	adds	r3, r7, r3
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ac6:	2314      	movs	r3, #20
 8009ac8:	18fb      	adds	r3, r7, r3
 8009aca:	2200      	movs	r2, #0
 8009acc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009ace:	2314      	movs	r3, #20
 8009ad0:	18fb      	adds	r3, r7, r3
 8009ad2:	2203      	movs	r2, #3
 8009ad4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8009ad6:	2314      	movs	r3, #20
 8009ad8:	18fb      	adds	r3, r7, r3
 8009ada:	2201      	movs	r2, #1
 8009adc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ade:	2314      	movs	r3, #20
 8009ae0:	18fa      	adds	r2, r7, r3
 8009ae2:	2390      	movs	r3, #144	; 0x90
 8009ae4:	05db      	lsls	r3, r3, #23
 8009ae6:	0011      	movs	r1, r2
 8009ae8:	0018      	movs	r0, r3
 8009aea:	f7f9 fae3 	bl	80030b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8009aee:	4b70      	ldr	r3, [pc, #448]	; (8009cb0 <HAL_UART_MspInit+0x22c>)
 8009af0:	4a70      	ldr	r2, [pc, #448]	; (8009cb4 <HAL_UART_MspInit+0x230>)
 8009af2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009af4:	4b6e      	ldr	r3, [pc, #440]	; (8009cb0 <HAL_UART_MspInit+0x22c>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009afa:	4b6d      	ldr	r3, [pc, #436]	; (8009cb0 <HAL_UART_MspInit+0x22c>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009b00:	4b6b      	ldr	r3, [pc, #428]	; (8009cb0 <HAL_UART_MspInit+0x22c>)
 8009b02:	2280      	movs	r2, #128	; 0x80
 8009b04:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009b06:	4b6a      	ldr	r3, [pc, #424]	; (8009cb0 <HAL_UART_MspInit+0x22c>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009b0c:	4b68      	ldr	r3, [pc, #416]	; (8009cb0 <HAL_UART_MspInit+0x22c>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8009b12:	4b67      	ldr	r3, [pc, #412]	; (8009cb0 <HAL_UART_MspInit+0x22c>)
 8009b14:	2220      	movs	r2, #32
 8009b16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009b18:	4b65      	ldr	r3, [pc, #404]	; (8009cb0 <HAL_UART_MspInit+0x22c>)
 8009b1a:	2280      	movs	r2, #128	; 0x80
 8009b1c:	0152      	lsls	r2, r2, #5
 8009b1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009b20:	4b63      	ldr	r3, [pc, #396]	; (8009cb0 <HAL_UART_MspInit+0x22c>)
 8009b22:	0018      	movs	r0, r3
 8009b24:	f7f8 fee2 	bl	80028ec <HAL_DMA_Init>
 8009b28:	1e03      	subs	r3, r0, #0
 8009b2a:	d004      	beq.n	8009b36 <HAL_UART_MspInit+0xb2>
    {
      _Error_Handler(__FILE__, __LINE__);
 8009b2c:	4b62      	ldr	r3, [pc, #392]	; (8009cb8 <HAL_UART_MspInit+0x234>)
 8009b2e:	2187      	movs	r1, #135	; 0x87
 8009b30:	0018      	movs	r0, r3
 8009b32:	f7fe fd82 	bl	800863a <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a5d      	ldr	r2, [pc, #372]	; (8009cb0 <HAL_UART_MspInit+0x22c>)
 8009b3a:	665a      	str	r2, [r3, #100]	; 0x64
 8009b3c:	4b5c      	ldr	r3, [pc, #368]	; (8009cb0 <HAL_UART_MspInit+0x22c>)
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8009b42:	4b5e      	ldr	r3, [pc, #376]	; (8009cbc <HAL_UART_MspInit+0x238>)
 8009b44:	4a5e      	ldr	r2, [pc, #376]	; (8009cc0 <HAL_UART_MspInit+0x23c>)
 8009b46:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009b48:	4b5c      	ldr	r3, [pc, #368]	; (8009cbc <HAL_UART_MspInit+0x238>)
 8009b4a:	2210      	movs	r2, #16
 8009b4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009b4e:	4b5b      	ldr	r3, [pc, #364]	; (8009cbc <HAL_UART_MspInit+0x238>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009b54:	4b59      	ldr	r3, [pc, #356]	; (8009cbc <HAL_UART_MspInit+0x238>)
 8009b56:	2280      	movs	r2, #128	; 0x80
 8009b58:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009b5a:	4b58      	ldr	r3, [pc, #352]	; (8009cbc <HAL_UART_MspInit+0x238>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009b60:	4b56      	ldr	r3, [pc, #344]	; (8009cbc <HAL_UART_MspInit+0x238>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009b66:	4b55      	ldr	r3, [pc, #340]	; (8009cbc <HAL_UART_MspInit+0x238>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009b6c:	4b53      	ldr	r3, [pc, #332]	; (8009cbc <HAL_UART_MspInit+0x238>)
 8009b6e:	2280      	movs	r2, #128	; 0x80
 8009b70:	0152      	lsls	r2, r2, #5
 8009b72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009b74:	4b51      	ldr	r3, [pc, #324]	; (8009cbc <HAL_UART_MspInit+0x238>)
 8009b76:	0018      	movs	r0, r3
 8009b78:	f7f8 feb8 	bl	80028ec <HAL_DMA_Init>
 8009b7c:	1e03      	subs	r3, r0, #0
 8009b7e:	d004      	beq.n	8009b8a <HAL_UART_MspInit+0x106>
    {
      _Error_Handler(__FILE__, __LINE__);
 8009b80:	4b4d      	ldr	r3, [pc, #308]	; (8009cb8 <HAL_UART_MspInit+0x234>)
 8009b82:	2197      	movs	r1, #151	; 0x97
 8009b84:	0018      	movs	r0, r3
 8009b86:	f7fe fd58 	bl	800863a <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a4b      	ldr	r2, [pc, #300]	; (8009cbc <HAL_UART_MspInit+0x238>)
 8009b8e:	661a      	str	r2, [r3, #96]	; 0x60
 8009b90:	4b4a      	ldr	r3, [pc, #296]	; (8009cbc <HAL_UART_MspInit+0x238>)
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009b96:	e083      	b.n	8009ca0 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART2)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a49      	ldr	r2, [pc, #292]	; (8009cc4 <HAL_UART_MspInit+0x240>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d000      	beq.n	8009ba4 <HAL_UART_MspInit+0x120>
 8009ba2:	e07d      	b.n	8009ca0 <HAL_UART_MspInit+0x21c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009ba4:	4b41      	ldr	r3, [pc, #260]	; (8009cac <HAL_UART_MspInit+0x228>)
 8009ba6:	4a41      	ldr	r2, [pc, #260]	; (8009cac <HAL_UART_MspInit+0x228>)
 8009ba8:	69d2      	ldr	r2, [r2, #28]
 8009baa:	2180      	movs	r1, #128	; 0x80
 8009bac:	0289      	lsls	r1, r1, #10
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	61da      	str	r2, [r3, #28]
 8009bb2:	4b3e      	ldr	r3, [pc, #248]	; (8009cac <HAL_UART_MspInit+0x228>)
 8009bb4:	69da      	ldr	r2, [r3, #28]
 8009bb6:	2380      	movs	r3, #128	; 0x80
 8009bb8:	029b      	lsls	r3, r3, #10
 8009bba:	4013      	ands	r3, r2
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8009bc0:	2314      	movs	r3, #20
 8009bc2:	18fb      	adds	r3, r7, r3
 8009bc4:	220e      	movs	r2, #14
 8009bc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bc8:	2314      	movs	r3, #20
 8009bca:	18fb      	adds	r3, r7, r3
 8009bcc:	2202      	movs	r2, #2
 8009bce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bd0:	2314      	movs	r3, #20
 8009bd2:	18fb      	adds	r3, r7, r3
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009bd8:	2314      	movs	r3, #20
 8009bda:	18fb      	adds	r3, r7, r3
 8009bdc:	2203      	movs	r2, #3
 8009bde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8009be0:	2314      	movs	r3, #20
 8009be2:	18fb      	adds	r3, r7, r3
 8009be4:	2201      	movs	r2, #1
 8009be6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009be8:	2314      	movs	r3, #20
 8009bea:	18fa      	adds	r2, r7, r3
 8009bec:	2390      	movs	r3, #144	; 0x90
 8009bee:	05db      	lsls	r3, r3, #23
 8009bf0:	0011      	movs	r1, r2
 8009bf2:	0018      	movs	r0, r3
 8009bf4:	f7f9 fa5e 	bl	80030b4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8009bf8:	4b33      	ldr	r3, [pc, #204]	; (8009cc8 <HAL_UART_MspInit+0x244>)
 8009bfa:	4a34      	ldr	r2, [pc, #208]	; (8009ccc <HAL_UART_MspInit+0x248>)
 8009bfc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009bfe:	4b32      	ldr	r3, [pc, #200]	; (8009cc8 <HAL_UART_MspInit+0x244>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c04:	4b30      	ldr	r3, [pc, #192]	; (8009cc8 <HAL_UART_MspInit+0x244>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009c0a:	4b2f      	ldr	r3, [pc, #188]	; (8009cc8 <HAL_UART_MspInit+0x244>)
 8009c0c:	2280      	movs	r2, #128	; 0x80
 8009c0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c10:	4b2d      	ldr	r3, [pc, #180]	; (8009cc8 <HAL_UART_MspInit+0x244>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c16:	4b2c      	ldr	r3, [pc, #176]	; (8009cc8 <HAL_UART_MspInit+0x244>)
 8009c18:	2200      	movs	r2, #0
 8009c1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8009c1c:	4b2a      	ldr	r3, [pc, #168]	; (8009cc8 <HAL_UART_MspInit+0x244>)
 8009c1e:	2220      	movs	r2, #32
 8009c20:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009c22:	4b29      	ldr	r3, [pc, #164]	; (8009cc8 <HAL_UART_MspInit+0x244>)
 8009c24:	2280      	movs	r2, #128	; 0x80
 8009c26:	0152      	lsls	r2, r2, #5
 8009c28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009c2a:	4b27      	ldr	r3, [pc, #156]	; (8009cc8 <HAL_UART_MspInit+0x244>)
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	f7f8 fe5d 	bl	80028ec <HAL_DMA_Init>
 8009c32:	1e03      	subs	r3, r0, #0
 8009c34:	d004      	beq.n	8009c40 <HAL_UART_MspInit+0x1bc>
      _Error_Handler(__FILE__, __LINE__);
 8009c36:	4b20      	ldr	r3, [pc, #128]	; (8009cb8 <HAL_UART_MspInit+0x234>)
 8009c38:	21c0      	movs	r1, #192	; 0xc0
 8009c3a:	0018      	movs	r0, r3
 8009c3c:	f7fe fcfd 	bl	800863a <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a21      	ldr	r2, [pc, #132]	; (8009cc8 <HAL_UART_MspInit+0x244>)
 8009c44:	665a      	str	r2, [r3, #100]	; 0x64
 8009c46:	4b20      	ldr	r3, [pc, #128]	; (8009cc8 <HAL_UART_MspInit+0x244>)
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8009c4c:	4b20      	ldr	r3, [pc, #128]	; (8009cd0 <HAL_UART_MspInit+0x24c>)
 8009c4e:	4a21      	ldr	r2, [pc, #132]	; (8009cd4 <HAL_UART_MspInit+0x250>)
 8009c50:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009c52:	4b1f      	ldr	r3, [pc, #124]	; (8009cd0 <HAL_UART_MspInit+0x24c>)
 8009c54:	2210      	movs	r2, #16
 8009c56:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c58:	4b1d      	ldr	r3, [pc, #116]	; (8009cd0 <HAL_UART_MspInit+0x24c>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009c5e:	4b1c      	ldr	r3, [pc, #112]	; (8009cd0 <HAL_UART_MspInit+0x24c>)
 8009c60:	2280      	movs	r2, #128	; 0x80
 8009c62:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c64:	4b1a      	ldr	r3, [pc, #104]	; (8009cd0 <HAL_UART_MspInit+0x24c>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c6a:	4b19      	ldr	r3, [pc, #100]	; (8009cd0 <HAL_UART_MspInit+0x24c>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009c70:	4b17      	ldr	r3, [pc, #92]	; (8009cd0 <HAL_UART_MspInit+0x24c>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009c76:	4b16      	ldr	r3, [pc, #88]	; (8009cd0 <HAL_UART_MspInit+0x24c>)
 8009c78:	2280      	movs	r2, #128	; 0x80
 8009c7a:	0152      	lsls	r2, r2, #5
 8009c7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009c7e:	4b14      	ldr	r3, [pc, #80]	; (8009cd0 <HAL_UART_MspInit+0x24c>)
 8009c80:	0018      	movs	r0, r3
 8009c82:	f7f8 fe33 	bl	80028ec <HAL_DMA_Init>
 8009c86:	1e03      	subs	r3, r0, #0
 8009c88:	d004      	beq.n	8009c94 <HAL_UART_MspInit+0x210>
      _Error_Handler(__FILE__, __LINE__);
 8009c8a:	4b0b      	ldr	r3, [pc, #44]	; (8009cb8 <HAL_UART_MspInit+0x234>)
 8009c8c:	21d0      	movs	r1, #208	; 0xd0
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f7fe fcd3 	bl	800863a <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a0e      	ldr	r2, [pc, #56]	; (8009cd0 <HAL_UART_MspInit+0x24c>)
 8009c98:	661a      	str	r2, [r3, #96]	; 0x60
 8009c9a:	4b0d      	ldr	r3, [pc, #52]	; (8009cd0 <HAL_UART_MspInit+0x24c>)
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009ca0:	46c0      	nop			; (mov r8, r8)
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	b00a      	add	sp, #40	; 0x28
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	40013800 	.word	0x40013800
 8009cac:	40021000 	.word	0x40021000
 8009cb0:	20000a84 	.word	0x20000a84
 8009cb4:	40020030 	.word	0x40020030
 8009cb8:	08009e9c 	.word	0x08009e9c
 8009cbc:	20000a40 	.word	0x20000a40
 8009cc0:	4002001c 	.word	0x4002001c
 8009cc4:	40004400 	.word	0x40004400
 8009cc8:	200009fc 	.word	0x200009fc
 8009ccc:	40020058 	.word	0x40020058
 8009cd0:	20000ac8 	.word	0x20000ac8
 8009cd4:	40020044 	.word	0x40020044

08009cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009cd8:	480d      	ldr	r0, [pc, #52]	; (8009d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009cda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009cdc:	480d      	ldr	r0, [pc, #52]	; (8009d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8009cde:	490e      	ldr	r1, [pc, #56]	; (8009d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009ce0:	4a0e      	ldr	r2, [pc, #56]	; (8009d1c <LoopForever+0xe>)
  movs r3, #0
 8009ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009ce4:	e002      	b.n	8009cec <LoopCopyDataInit>

08009ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009cea:	3304      	adds	r3, #4

08009cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009cf0:	d3f9      	bcc.n	8009ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009cf2:	4a0b      	ldr	r2, [pc, #44]	; (8009d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009cf4:	4c0b      	ldr	r4, [pc, #44]	; (8009d24 <LoopForever+0x16>)
  movs r3, #0
 8009cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009cf8:	e001      	b.n	8009cfe <LoopFillZerobss>

08009cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009cfc:	3204      	adds	r2, #4

08009cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009d00:	d3fb      	bcc.n	8009cfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8009d02:	f7ff fb25 	bl	8009350 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8009d06:	f000 f811 	bl	8009d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009d0a:	f7fe fb3f 	bl	800838c <main>

08009d0e <LoopForever>:

LoopForever:
    b LoopForever
 8009d0e:	e7fe      	b.n	8009d0e <LoopForever>
  ldr   r0, =_estack
 8009d10:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8009d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009d18:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 8009d1c:	08009fd0 	.word	0x08009fd0
  ldr r2, =_sbss
 8009d20:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8009d24:	20000bec 	.word	0x20000bec

08009d28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009d28:	e7fe      	b.n	8009d28 <ADC1_COMP_IRQHandler>
	...

08009d2c <__libc_init_array>:
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	2600      	movs	r6, #0
 8009d30:	4d0c      	ldr	r5, [pc, #48]	; (8009d64 <__libc_init_array+0x38>)
 8009d32:	4c0d      	ldr	r4, [pc, #52]	; (8009d68 <__libc_init_array+0x3c>)
 8009d34:	1b64      	subs	r4, r4, r5
 8009d36:	10a4      	asrs	r4, r4, #2
 8009d38:	42a6      	cmp	r6, r4
 8009d3a:	d109      	bne.n	8009d50 <__libc_init_array+0x24>
 8009d3c:	2600      	movs	r6, #0
 8009d3e:	f000 f871 	bl	8009e24 <_init>
 8009d42:	4d0a      	ldr	r5, [pc, #40]	; (8009d6c <__libc_init_array+0x40>)
 8009d44:	4c0a      	ldr	r4, [pc, #40]	; (8009d70 <__libc_init_array+0x44>)
 8009d46:	1b64      	subs	r4, r4, r5
 8009d48:	10a4      	asrs	r4, r4, #2
 8009d4a:	42a6      	cmp	r6, r4
 8009d4c:	d105      	bne.n	8009d5a <__libc_init_array+0x2e>
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}
 8009d50:	00b3      	lsls	r3, r6, #2
 8009d52:	58eb      	ldr	r3, [r5, r3]
 8009d54:	4798      	blx	r3
 8009d56:	3601      	adds	r6, #1
 8009d58:	e7ee      	b.n	8009d38 <__libc_init_array+0xc>
 8009d5a:	00b3      	lsls	r3, r6, #2
 8009d5c:	58eb      	ldr	r3, [r5, r3]
 8009d5e:	4798      	blx	r3
 8009d60:	3601      	adds	r6, #1
 8009d62:	e7f2      	b.n	8009d4a <__libc_init_array+0x1e>
 8009d64:	08009fc8 	.word	0x08009fc8
 8009d68:	08009fc8 	.word	0x08009fc8
 8009d6c:	08009fc8 	.word	0x08009fc8
 8009d70:	08009fcc 	.word	0x08009fcc

08009d74 <memcpy>:
 8009d74:	2300      	movs	r3, #0
 8009d76:	b510      	push	{r4, lr}
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d100      	bne.n	8009d7e <memcpy+0xa>
 8009d7c:	bd10      	pop	{r4, pc}
 8009d7e:	5ccc      	ldrb	r4, [r1, r3]
 8009d80:	54c4      	strb	r4, [r0, r3]
 8009d82:	3301      	adds	r3, #1
 8009d84:	e7f8      	b.n	8009d78 <memcpy+0x4>

08009d86 <memset>:
 8009d86:	0003      	movs	r3, r0
 8009d88:	1882      	adds	r2, r0, r2
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d100      	bne.n	8009d90 <memset+0xa>
 8009d8e:	4770      	bx	lr
 8009d90:	7019      	strb	r1, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	e7f9      	b.n	8009d8a <memset+0x4>
	...

08009d98 <round>:
 8009d98:	b570      	push	{r4, r5, r6, lr}
 8009d9a:	004a      	lsls	r2, r1, #1
 8009d9c:	4d1d      	ldr	r5, [pc, #116]	; (8009e14 <round+0x7c>)
 8009d9e:	0d52      	lsrs	r2, r2, #21
 8009da0:	1955      	adds	r5, r2, r5
 8009da2:	000e      	movs	r6, r1
 8009da4:	2d13      	cmp	r5, #19
 8009da6:	dc18      	bgt.n	8009dda <round+0x42>
 8009da8:	2d00      	cmp	r5, #0
 8009daa:	da09      	bge.n	8009dc0 <round+0x28>
 8009dac:	0fcb      	lsrs	r3, r1, #31
 8009dae:	07db      	lsls	r3, r3, #31
 8009db0:	2200      	movs	r2, #0
 8009db2:	1c69      	adds	r1, r5, #1
 8009db4:	d101      	bne.n	8009dba <round+0x22>
 8009db6:	4918      	ldr	r1, [pc, #96]	; (8009e18 <round+0x80>)
 8009db8:	430b      	orrs	r3, r1
 8009dba:	0019      	movs	r1, r3
 8009dbc:	0010      	movs	r0, r2
 8009dbe:	e016      	b.n	8009dee <round+0x56>
 8009dc0:	4a16      	ldr	r2, [pc, #88]	; (8009e1c <round+0x84>)
 8009dc2:	412a      	asrs	r2, r5
 8009dc4:	420a      	tst	r2, r1
 8009dc6:	d101      	bne.n	8009dcc <round+0x34>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d010      	beq.n	8009dee <round+0x56>
 8009dcc:	2380      	movs	r3, #128	; 0x80
 8009dce:	031b      	lsls	r3, r3, #12
 8009dd0:	412b      	asrs	r3, r5
 8009dd2:	199b      	adds	r3, r3, r6
 8009dd4:	4393      	bics	r3, r2
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	e7ef      	b.n	8009dba <round+0x22>
 8009dda:	2d33      	cmp	r5, #51	; 0x33
 8009ddc:	dd08      	ble.n	8009df0 <round+0x58>
 8009dde:	2380      	movs	r3, #128	; 0x80
 8009de0:	00db      	lsls	r3, r3, #3
 8009de2:	429d      	cmp	r5, r3
 8009de4:	d103      	bne.n	8009dee <round+0x56>
 8009de6:	0002      	movs	r2, r0
 8009de8:	000b      	movs	r3, r1
 8009dea:	f7f6 ffc1 	bl	8000d70 <__aeabi_dadd>
 8009dee:	bd70      	pop	{r4, r5, r6, pc}
 8009df0:	4e0b      	ldr	r6, [pc, #44]	; (8009e20 <round+0x88>)
 8009df2:	1992      	adds	r2, r2, r6
 8009df4:	2601      	movs	r6, #1
 8009df6:	4276      	negs	r6, r6
 8009df8:	40d6      	lsrs	r6, r2
 8009dfa:	4206      	tst	r6, r0
 8009dfc:	d0f7      	beq.n	8009dee <round+0x56>
 8009dfe:	2233      	movs	r2, #51	; 0x33
 8009e00:	1b55      	subs	r5, r2, r5
 8009e02:	3a32      	subs	r2, #50	; 0x32
 8009e04:	40aa      	lsls	r2, r5
 8009e06:	1812      	adds	r2, r2, r0
 8009e08:	4282      	cmp	r2, r0
 8009e0a:	41a4      	sbcs	r4, r4
 8009e0c:	4264      	negs	r4, r4
 8009e0e:	190b      	adds	r3, r1, r4
 8009e10:	43b2      	bics	r2, r6
 8009e12:	e7d2      	b.n	8009dba <round+0x22>
 8009e14:	fffffc01 	.word	0xfffffc01
 8009e18:	3ff00000 	.word	0x3ff00000
 8009e1c:	000fffff 	.word	0x000fffff
 8009e20:	fffffbed 	.word	0xfffffbed

08009e24 <_init>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	46c0      	nop			; (mov r8, r8)
 8009e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2a:	bc08      	pop	{r3}
 8009e2c:	469e      	mov	lr, r3
 8009e2e:	4770      	bx	lr

08009e30 <_fini>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	46c0      	nop			; (mov r8, r8)
 8009e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e36:	bc08      	pop	{r3}
 8009e38:	469e      	mov	lr, r3
 8009e3a:	4770      	bx	lr
