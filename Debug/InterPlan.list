
InterPlan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000050  0800f800  0800f800  0002f800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a294  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000018c  0800a354  0800a354  0001a354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a4e0  0800a4e0  0001a4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a4e4  0800a4e4  0001a4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000029c  20000000  0800a4e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009cc  200002a0  0800a784  000202a0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000c6c  0800a784  00020c6c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002f850  2**0
                  CONTENTS, READONLY
 10 .debug_info   000228ff  00000000  00000000  0002f878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000046c6  00000000  00000000  00052177  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000012b8  00000000  00000000  00056840  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010b0  00000000  00000000  00057af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000998c  00000000  00000000  00058ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000564e  00000000  00000000  00062534  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00067b82  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000044ec  00000000  00000000  00067c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002a0 	.word	0x200002a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a33c 	.word	0x0800a33c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002a4 	.word	0x200002a4
 8000104:	0800a33c 	.word	0x0800a33c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 f94b 	bl	80014cc <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f8a5 	bl	8001390 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 f93d 	bl	80014cc <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 f933 	bl	80014cc <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 f8c5 	bl	8001404 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f8bb 	bl	8001404 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_lmul>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46ce      	mov	lr, r9
 80002a0:	4647      	mov	r7, r8
 80002a2:	0415      	lsls	r5, r2, #16
 80002a4:	0c2d      	lsrs	r5, r5, #16
 80002a6:	002e      	movs	r6, r5
 80002a8:	b580      	push	{r7, lr}
 80002aa:	0407      	lsls	r7, r0, #16
 80002ac:	0c14      	lsrs	r4, r2, #16
 80002ae:	0c3f      	lsrs	r7, r7, #16
 80002b0:	4699      	mov	r9, r3
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	437e      	muls	r6, r7
 80002b6:	435d      	muls	r5, r3
 80002b8:	4367      	muls	r7, r4
 80002ba:	4363      	muls	r3, r4
 80002bc:	197f      	adds	r7, r7, r5
 80002be:	0c34      	lsrs	r4, r6, #16
 80002c0:	19e4      	adds	r4, r4, r7
 80002c2:	469c      	mov	ip, r3
 80002c4:	42a5      	cmp	r5, r4
 80002c6:	d903      	bls.n	80002d0 <__aeabi_lmul+0x34>
 80002c8:	2380      	movs	r3, #128	; 0x80
 80002ca:	025b      	lsls	r3, r3, #9
 80002cc:	4698      	mov	r8, r3
 80002ce:	44c4      	add	ip, r8
 80002d0:	464b      	mov	r3, r9
 80002d2:	4351      	muls	r1, r2
 80002d4:	4343      	muls	r3, r0
 80002d6:	0436      	lsls	r6, r6, #16
 80002d8:	0c36      	lsrs	r6, r6, #16
 80002da:	0c25      	lsrs	r5, r4, #16
 80002dc:	0424      	lsls	r4, r4, #16
 80002de:	4465      	add	r5, ip
 80002e0:	19a4      	adds	r4, r4, r6
 80002e2:	1859      	adds	r1, r3, r1
 80002e4:	1949      	adds	r1, r1, r5
 80002e6:	0020      	movs	r0, r4
 80002e8:	bc0c      	pop	{r2, r3}
 80002ea:	4690      	mov	r8, r2
 80002ec:	4699      	mov	r9, r3
 80002ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002f0 <__aeabi_d2uiz>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	2200      	movs	r2, #0
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <__aeabi_d2uiz+0x38>)
 80002f6:	0004      	movs	r4, r0
 80002f8:	000d      	movs	r5, r1
 80002fa:	f7ff ffc5 	bl	8000288 <__aeabi_dcmpge>
 80002fe:	2800      	cmp	r0, #0
 8000300:	d104      	bne.n	800030c <__aeabi_d2uiz+0x1c>
 8000302:	0020      	movs	r0, r4
 8000304:	0029      	movs	r1, r5
 8000306:	f001 fed9 	bl	80020bc <__aeabi_d2iz>
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <__aeabi_d2uiz+0x38>)
 800030e:	2200      	movs	r2, #0
 8000310:	0020      	movs	r0, r4
 8000312:	0029      	movs	r1, r5
 8000314:	f001 fbbc 	bl	8001a90 <__aeabi_dsub>
 8000318:	f001 fed0 	bl	80020bc <__aeabi_d2iz>
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	061b      	lsls	r3, r3, #24
 8000320:	469c      	mov	ip, r3
 8000322:	4460      	add	r0, ip
 8000324:	e7f1      	b.n	800030a <__aeabi_d2uiz+0x1a>
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	41e00000 	.word	0x41e00000

0800032c <__aeabi_f2lz>:
 800032c:	b510      	push	{r4, lr}
 800032e:	2100      	movs	r1, #0
 8000330:	1c04      	adds	r4, r0, #0
 8000332:	f002 f85f 	bl	80023f4 <__aeabi_fcmplt>
 8000336:	2800      	cmp	r0, #0
 8000338:	d103      	bne.n	8000342 <__aeabi_f2lz+0x16>
 800033a:	1c20      	adds	r0, r4, #0
 800033c:	f000 f80c 	bl	8000358 <__aeabi_f2ulz>
 8000340:	bd10      	pop	{r4, pc}
 8000342:	2380      	movs	r3, #128	; 0x80
 8000344:	061b      	lsls	r3, r3, #24
 8000346:	18e0      	adds	r0, r4, r3
 8000348:	f000 f806 	bl	8000358 <__aeabi_f2ulz>
 800034c:	0002      	movs	r2, r0
 800034e:	000b      	movs	r3, r1
 8000350:	2100      	movs	r1, #0
 8000352:	4250      	negs	r0, r2
 8000354:	4199      	sbcs	r1, r3
 8000356:	e7f3      	b.n	8000340 <__aeabi_f2lz+0x14>

08000358 <__aeabi_f2ulz>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	f001 ff5d 	bl	8002218 <__aeabi_f2d>
 800035e:	2200      	movs	r2, #0
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <__aeabi_f2ulz+0x38>)
 8000362:	000d      	movs	r5, r1
 8000364:	0004      	movs	r4, r0
 8000366:	f001 f913 	bl	8001590 <__aeabi_dmul>
 800036a:	f7ff ffc1 	bl	80002f0 <__aeabi_d2uiz>
 800036e:	0006      	movs	r6, r0
 8000370:	f001 ff1a 	bl	80021a8 <__aeabi_ui2d>
 8000374:	2200      	movs	r2, #0
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <__aeabi_f2ulz+0x3c>)
 8000378:	f001 f90a 	bl	8001590 <__aeabi_dmul>
 800037c:	0002      	movs	r2, r0
 800037e:	000b      	movs	r3, r1
 8000380:	0020      	movs	r0, r4
 8000382:	0029      	movs	r1, r5
 8000384:	f001 fb84 	bl	8001a90 <__aeabi_dsub>
 8000388:	f7ff ffb2 	bl	80002f0 <__aeabi_d2uiz>
 800038c:	0031      	movs	r1, r6
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	3df00000 	.word	0x3df00000
 8000394:	41f00000 	.word	0x41f00000

08000398 <__aeabi_l2f>:
 8000398:	b5d0      	push	{r4, r6, r7, lr}
 800039a:	2601      	movs	r6, #1
 800039c:	0002      	movs	r2, r0
 800039e:	000b      	movs	r3, r1
 80003a0:	4f13      	ldr	r7, [pc, #76]	; (80003f0 <__aeabi_l2f+0x58>)
 80003a2:	4276      	negs	r6, r6
 80003a4:	18b6      	adds	r6, r6, r2
 80003a6:	415f      	adcs	r7, r3
 80003a8:	0004      	movs	r4, r0
 80003aa:	4812      	ldr	r0, [pc, #72]	; (80003f4 <__aeabi_l2f+0x5c>)
 80003ac:	4287      	cmp	r7, r0
 80003ae:	d919      	bls.n	80003e4 <__aeabi_l2f+0x4c>
 80003b0:	0552      	lsls	r2, r2, #21
 80003b2:	d004      	beq.n	80003be <__aeabi_l2f+0x26>
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	0ae4      	lsrs	r4, r4, #11
 80003b8:	02e4      	lsls	r4, r4, #11
 80003ba:	011b      	lsls	r3, r3, #4
 80003bc:	431c      	orrs	r4, r3
 80003be:	0008      	movs	r0, r1
 80003c0:	f001 feb0 	bl	8002124 <__aeabi_i2d>
 80003c4:	2200      	movs	r2, #0
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <__aeabi_l2f+0x60>)
 80003c8:	f001 f8e2 	bl	8001590 <__aeabi_dmul>
 80003cc:	0006      	movs	r6, r0
 80003ce:	000f      	movs	r7, r1
 80003d0:	0020      	movs	r0, r4
 80003d2:	f001 fee9 	bl	80021a8 <__aeabi_ui2d>
 80003d6:	0032      	movs	r2, r6
 80003d8:	003b      	movs	r3, r7
 80003da:	f000 fcc9 	bl	8000d70 <__aeabi_dadd>
 80003de:	f001 ff6d 	bl	80022bc <__aeabi_d2f>
 80003e2:	bdd0      	pop	{r4, r6, r7, pc}
 80003e4:	4287      	cmp	r7, r0
 80003e6:	d1ea      	bne.n	80003be <__aeabi_l2f+0x26>
 80003e8:	1cb0      	adds	r0, r6, #2
 80003ea:	d8e1      	bhi.n	80003b0 <__aeabi_l2f+0x18>
 80003ec:	e7e7      	b.n	80003be <__aeabi_l2f+0x26>
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	001fffff 	.word	0x001fffff
 80003f4:	003fffff 	.word	0x003fffff
 80003f8:	41f00000 	.word	0x41f00000

080003fc <__aeabi_fdiv>:
 80003fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003fe:	4657      	mov	r7, sl
 8000400:	464e      	mov	r6, r9
 8000402:	46de      	mov	lr, fp
 8000404:	4645      	mov	r5, r8
 8000406:	b5e0      	push	{r5, r6, r7, lr}
 8000408:	0244      	lsls	r4, r0, #9
 800040a:	0043      	lsls	r3, r0, #1
 800040c:	0fc6      	lsrs	r6, r0, #31
 800040e:	b083      	sub	sp, #12
 8000410:	1c0f      	adds	r7, r1, #0
 8000412:	0a64      	lsrs	r4, r4, #9
 8000414:	0e1b      	lsrs	r3, r3, #24
 8000416:	46b2      	mov	sl, r6
 8000418:	d053      	beq.n	80004c2 <__aeabi_fdiv+0xc6>
 800041a:	2bff      	cmp	r3, #255	; 0xff
 800041c:	d027      	beq.n	800046e <__aeabi_fdiv+0x72>
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	00e4      	lsls	r4, r4, #3
 8000422:	04d2      	lsls	r2, r2, #19
 8000424:	4314      	orrs	r4, r2
 8000426:	227f      	movs	r2, #127	; 0x7f
 8000428:	4252      	negs	r2, r2
 800042a:	4690      	mov	r8, r2
 800042c:	4498      	add	r8, r3
 800042e:	2300      	movs	r3, #0
 8000430:	4699      	mov	r9, r3
 8000432:	469b      	mov	fp, r3
 8000434:	027d      	lsls	r5, r7, #9
 8000436:	0078      	lsls	r0, r7, #1
 8000438:	0ffb      	lsrs	r3, r7, #31
 800043a:	0a6d      	lsrs	r5, r5, #9
 800043c:	0e00      	lsrs	r0, r0, #24
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	d024      	beq.n	800048c <__aeabi_fdiv+0x90>
 8000442:	28ff      	cmp	r0, #255	; 0xff
 8000444:	d046      	beq.n	80004d4 <__aeabi_fdiv+0xd8>
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	2100      	movs	r1, #0
 800044a:	00ed      	lsls	r5, r5, #3
 800044c:	04db      	lsls	r3, r3, #19
 800044e:	431d      	orrs	r5, r3
 8000450:	387f      	subs	r0, #127	; 0x7f
 8000452:	4647      	mov	r7, r8
 8000454:	1a38      	subs	r0, r7, r0
 8000456:	464f      	mov	r7, r9
 8000458:	430f      	orrs	r7, r1
 800045a:	00bf      	lsls	r7, r7, #2
 800045c:	46b9      	mov	r9, r7
 800045e:	0033      	movs	r3, r6
 8000460:	9a00      	ldr	r2, [sp, #0]
 8000462:	4f87      	ldr	r7, [pc, #540]	; (8000680 <__aeabi_fdiv+0x284>)
 8000464:	4053      	eors	r3, r2
 8000466:	464a      	mov	r2, r9
 8000468:	58ba      	ldr	r2, [r7, r2]
 800046a:	9301      	str	r3, [sp, #4]
 800046c:	4697      	mov	pc, r2
 800046e:	2c00      	cmp	r4, #0
 8000470:	d14e      	bne.n	8000510 <__aeabi_fdiv+0x114>
 8000472:	2308      	movs	r3, #8
 8000474:	4699      	mov	r9, r3
 8000476:	33f7      	adds	r3, #247	; 0xf7
 8000478:	4698      	mov	r8, r3
 800047a:	3bfd      	subs	r3, #253	; 0xfd
 800047c:	469b      	mov	fp, r3
 800047e:	027d      	lsls	r5, r7, #9
 8000480:	0078      	lsls	r0, r7, #1
 8000482:	0ffb      	lsrs	r3, r7, #31
 8000484:	0a6d      	lsrs	r5, r5, #9
 8000486:	0e00      	lsrs	r0, r0, #24
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	d1da      	bne.n	8000442 <__aeabi_fdiv+0x46>
 800048c:	2d00      	cmp	r5, #0
 800048e:	d126      	bne.n	80004de <__aeabi_fdiv+0xe2>
 8000490:	2000      	movs	r0, #0
 8000492:	2101      	movs	r1, #1
 8000494:	0033      	movs	r3, r6
 8000496:	9a00      	ldr	r2, [sp, #0]
 8000498:	4f7a      	ldr	r7, [pc, #488]	; (8000684 <__aeabi_fdiv+0x288>)
 800049a:	4053      	eors	r3, r2
 800049c:	4642      	mov	r2, r8
 800049e:	1a10      	subs	r0, r2, r0
 80004a0:	464a      	mov	r2, r9
 80004a2:	430a      	orrs	r2, r1
 80004a4:	0092      	lsls	r2, r2, #2
 80004a6:	58ba      	ldr	r2, [r7, r2]
 80004a8:	001d      	movs	r5, r3
 80004aa:	4697      	mov	pc, r2
 80004ac:	9b00      	ldr	r3, [sp, #0]
 80004ae:	002c      	movs	r4, r5
 80004b0:	469a      	mov	sl, r3
 80004b2:	468b      	mov	fp, r1
 80004b4:	465b      	mov	r3, fp
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d131      	bne.n	800051e <__aeabi_fdiv+0x122>
 80004ba:	4653      	mov	r3, sl
 80004bc:	21ff      	movs	r1, #255	; 0xff
 80004be:	2400      	movs	r4, #0
 80004c0:	e038      	b.n	8000534 <__aeabi_fdiv+0x138>
 80004c2:	2c00      	cmp	r4, #0
 80004c4:	d117      	bne.n	80004f6 <__aeabi_fdiv+0xfa>
 80004c6:	2304      	movs	r3, #4
 80004c8:	4699      	mov	r9, r3
 80004ca:	2300      	movs	r3, #0
 80004cc:	4698      	mov	r8, r3
 80004ce:	3301      	adds	r3, #1
 80004d0:	469b      	mov	fp, r3
 80004d2:	e7af      	b.n	8000434 <__aeabi_fdiv+0x38>
 80004d4:	20ff      	movs	r0, #255	; 0xff
 80004d6:	2d00      	cmp	r5, #0
 80004d8:	d10b      	bne.n	80004f2 <__aeabi_fdiv+0xf6>
 80004da:	2102      	movs	r1, #2
 80004dc:	e7da      	b.n	8000494 <__aeabi_fdiv+0x98>
 80004de:	0028      	movs	r0, r5
 80004e0:	f001 ffb0 	bl	8002444 <__clzsi2>
 80004e4:	1f43      	subs	r3, r0, #5
 80004e6:	409d      	lsls	r5, r3
 80004e8:	2376      	movs	r3, #118	; 0x76
 80004ea:	425b      	negs	r3, r3
 80004ec:	1a18      	subs	r0, r3, r0
 80004ee:	2100      	movs	r1, #0
 80004f0:	e7af      	b.n	8000452 <__aeabi_fdiv+0x56>
 80004f2:	2103      	movs	r1, #3
 80004f4:	e7ad      	b.n	8000452 <__aeabi_fdiv+0x56>
 80004f6:	0020      	movs	r0, r4
 80004f8:	f001 ffa4 	bl	8002444 <__clzsi2>
 80004fc:	1f43      	subs	r3, r0, #5
 80004fe:	409c      	lsls	r4, r3
 8000500:	2376      	movs	r3, #118	; 0x76
 8000502:	425b      	negs	r3, r3
 8000504:	1a1b      	subs	r3, r3, r0
 8000506:	4698      	mov	r8, r3
 8000508:	2300      	movs	r3, #0
 800050a:	4699      	mov	r9, r3
 800050c:	469b      	mov	fp, r3
 800050e:	e791      	b.n	8000434 <__aeabi_fdiv+0x38>
 8000510:	230c      	movs	r3, #12
 8000512:	4699      	mov	r9, r3
 8000514:	33f3      	adds	r3, #243	; 0xf3
 8000516:	4698      	mov	r8, r3
 8000518:	3bfc      	subs	r3, #252	; 0xfc
 800051a:	469b      	mov	fp, r3
 800051c:	e78a      	b.n	8000434 <__aeabi_fdiv+0x38>
 800051e:	2b03      	cmp	r3, #3
 8000520:	d100      	bne.n	8000524 <__aeabi_fdiv+0x128>
 8000522:	e0a5      	b.n	8000670 <__aeabi_fdiv+0x274>
 8000524:	4655      	mov	r5, sl
 8000526:	2b01      	cmp	r3, #1
 8000528:	d000      	beq.n	800052c <__aeabi_fdiv+0x130>
 800052a:	e081      	b.n	8000630 <__aeabi_fdiv+0x234>
 800052c:	2301      	movs	r3, #1
 800052e:	2100      	movs	r1, #0
 8000530:	2400      	movs	r4, #0
 8000532:	402b      	ands	r3, r5
 8000534:	0264      	lsls	r4, r4, #9
 8000536:	05c9      	lsls	r1, r1, #23
 8000538:	0a60      	lsrs	r0, r4, #9
 800053a:	07db      	lsls	r3, r3, #31
 800053c:	4308      	orrs	r0, r1
 800053e:	4318      	orrs	r0, r3
 8000540:	b003      	add	sp, #12
 8000542:	bc3c      	pop	{r2, r3, r4, r5}
 8000544:	4690      	mov	r8, r2
 8000546:	4699      	mov	r9, r3
 8000548:	46a2      	mov	sl, r4
 800054a:	46ab      	mov	fp, r5
 800054c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054e:	2480      	movs	r4, #128	; 0x80
 8000550:	2300      	movs	r3, #0
 8000552:	03e4      	lsls	r4, r4, #15
 8000554:	21ff      	movs	r1, #255	; 0xff
 8000556:	e7ed      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000558:	21ff      	movs	r1, #255	; 0xff
 800055a:	2400      	movs	r4, #0
 800055c:	e7ea      	b.n	8000534 <__aeabi_fdiv+0x138>
 800055e:	2301      	movs	r3, #1
 8000560:	1a59      	subs	r1, r3, r1
 8000562:	291b      	cmp	r1, #27
 8000564:	dd66      	ble.n	8000634 <__aeabi_fdiv+0x238>
 8000566:	9a01      	ldr	r2, [sp, #4]
 8000568:	4013      	ands	r3, r2
 800056a:	2100      	movs	r1, #0
 800056c:	2400      	movs	r4, #0
 800056e:	e7e1      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	03db      	lsls	r3, r3, #15
 8000574:	421c      	tst	r4, r3
 8000576:	d038      	beq.n	80005ea <__aeabi_fdiv+0x1ee>
 8000578:	421d      	tst	r5, r3
 800057a:	d051      	beq.n	8000620 <__aeabi_fdiv+0x224>
 800057c:	431c      	orrs	r4, r3
 800057e:	0264      	lsls	r4, r4, #9
 8000580:	0a64      	lsrs	r4, r4, #9
 8000582:	0033      	movs	r3, r6
 8000584:	21ff      	movs	r1, #255	; 0xff
 8000586:	e7d5      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000588:	0163      	lsls	r3, r4, #5
 800058a:	016c      	lsls	r4, r5, #5
 800058c:	42a3      	cmp	r3, r4
 800058e:	d23b      	bcs.n	8000608 <__aeabi_fdiv+0x20c>
 8000590:	261b      	movs	r6, #27
 8000592:	2100      	movs	r1, #0
 8000594:	3801      	subs	r0, #1
 8000596:	2501      	movs	r5, #1
 8000598:	001f      	movs	r7, r3
 800059a:	0049      	lsls	r1, r1, #1
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	2f00      	cmp	r7, #0
 80005a0:	db01      	blt.n	80005a6 <__aeabi_fdiv+0x1aa>
 80005a2:	429c      	cmp	r4, r3
 80005a4:	d801      	bhi.n	80005aa <__aeabi_fdiv+0x1ae>
 80005a6:	1b1b      	subs	r3, r3, r4
 80005a8:	4329      	orrs	r1, r5
 80005aa:	3e01      	subs	r6, #1
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f3      	bne.n	8000598 <__aeabi_fdiv+0x19c>
 80005b0:	001c      	movs	r4, r3
 80005b2:	1e63      	subs	r3, r4, #1
 80005b4:	419c      	sbcs	r4, r3
 80005b6:	430c      	orrs	r4, r1
 80005b8:	0001      	movs	r1, r0
 80005ba:	317f      	adds	r1, #127	; 0x7f
 80005bc:	2900      	cmp	r1, #0
 80005be:	ddce      	ble.n	800055e <__aeabi_fdiv+0x162>
 80005c0:	0763      	lsls	r3, r4, #29
 80005c2:	d004      	beq.n	80005ce <__aeabi_fdiv+0x1d2>
 80005c4:	230f      	movs	r3, #15
 80005c6:	4023      	ands	r3, r4
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d000      	beq.n	80005ce <__aeabi_fdiv+0x1d2>
 80005cc:	3404      	adds	r4, #4
 80005ce:	0123      	lsls	r3, r4, #4
 80005d0:	d503      	bpl.n	80005da <__aeabi_fdiv+0x1de>
 80005d2:	0001      	movs	r1, r0
 80005d4:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <__aeabi_fdiv+0x28c>)
 80005d6:	3180      	adds	r1, #128	; 0x80
 80005d8:	401c      	ands	r4, r3
 80005da:	29fe      	cmp	r1, #254	; 0xfe
 80005dc:	dd0d      	ble.n	80005fa <__aeabi_fdiv+0x1fe>
 80005de:	2301      	movs	r3, #1
 80005e0:	9a01      	ldr	r2, [sp, #4]
 80005e2:	21ff      	movs	r1, #255	; 0xff
 80005e4:	4013      	ands	r3, r2
 80005e6:	2400      	movs	r4, #0
 80005e8:	e7a4      	b.n	8000534 <__aeabi_fdiv+0x138>
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	03db      	lsls	r3, r3, #15
 80005ee:	431c      	orrs	r4, r3
 80005f0:	0264      	lsls	r4, r4, #9
 80005f2:	0a64      	lsrs	r4, r4, #9
 80005f4:	0033      	movs	r3, r6
 80005f6:	21ff      	movs	r1, #255	; 0xff
 80005f8:	e79c      	b.n	8000534 <__aeabi_fdiv+0x138>
 80005fa:	2301      	movs	r3, #1
 80005fc:	9a01      	ldr	r2, [sp, #4]
 80005fe:	01a4      	lsls	r4, r4, #6
 8000600:	0a64      	lsrs	r4, r4, #9
 8000602:	b2c9      	uxtb	r1, r1
 8000604:	4013      	ands	r3, r2
 8000606:	e795      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000608:	1b1b      	subs	r3, r3, r4
 800060a:	261a      	movs	r6, #26
 800060c:	2101      	movs	r1, #1
 800060e:	e7c2      	b.n	8000596 <__aeabi_fdiv+0x19a>
 8000610:	9b00      	ldr	r3, [sp, #0]
 8000612:	468b      	mov	fp, r1
 8000614:	469a      	mov	sl, r3
 8000616:	2400      	movs	r4, #0
 8000618:	e74c      	b.n	80004b4 <__aeabi_fdiv+0xb8>
 800061a:	0263      	lsls	r3, r4, #9
 800061c:	d5e5      	bpl.n	80005ea <__aeabi_fdiv+0x1ee>
 800061e:	2500      	movs	r5, #0
 8000620:	2480      	movs	r4, #128	; 0x80
 8000622:	03e4      	lsls	r4, r4, #15
 8000624:	432c      	orrs	r4, r5
 8000626:	0264      	lsls	r4, r4, #9
 8000628:	0a64      	lsrs	r4, r4, #9
 800062a:	9b00      	ldr	r3, [sp, #0]
 800062c:	21ff      	movs	r1, #255	; 0xff
 800062e:	e781      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000630:	9501      	str	r5, [sp, #4]
 8000632:	e7c1      	b.n	80005b8 <__aeabi_fdiv+0x1bc>
 8000634:	0023      	movs	r3, r4
 8000636:	2020      	movs	r0, #32
 8000638:	40cb      	lsrs	r3, r1
 800063a:	1a41      	subs	r1, r0, r1
 800063c:	408c      	lsls	r4, r1
 800063e:	1e61      	subs	r1, r4, #1
 8000640:	418c      	sbcs	r4, r1
 8000642:	431c      	orrs	r4, r3
 8000644:	0763      	lsls	r3, r4, #29
 8000646:	d004      	beq.n	8000652 <__aeabi_fdiv+0x256>
 8000648:	230f      	movs	r3, #15
 800064a:	4023      	ands	r3, r4
 800064c:	2b04      	cmp	r3, #4
 800064e:	d000      	beq.n	8000652 <__aeabi_fdiv+0x256>
 8000650:	3404      	adds	r4, #4
 8000652:	0163      	lsls	r3, r4, #5
 8000654:	d505      	bpl.n	8000662 <__aeabi_fdiv+0x266>
 8000656:	2301      	movs	r3, #1
 8000658:	9a01      	ldr	r2, [sp, #4]
 800065a:	2101      	movs	r1, #1
 800065c:	4013      	ands	r3, r2
 800065e:	2400      	movs	r4, #0
 8000660:	e768      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000662:	2301      	movs	r3, #1
 8000664:	9a01      	ldr	r2, [sp, #4]
 8000666:	01a4      	lsls	r4, r4, #6
 8000668:	0a64      	lsrs	r4, r4, #9
 800066a:	4013      	ands	r3, r2
 800066c:	2100      	movs	r1, #0
 800066e:	e761      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	03db      	lsls	r3, r3, #15
 8000674:	431c      	orrs	r4, r3
 8000676:	0264      	lsls	r4, r4, #9
 8000678:	0a64      	lsrs	r4, r4, #9
 800067a:	4653      	mov	r3, sl
 800067c:	21ff      	movs	r1, #255	; 0xff
 800067e:	e759      	b.n	8000534 <__aeabi_fdiv+0x138>
 8000680:	0800a3c4 	.word	0x0800a3c4
 8000684:	0800a404 	.word	0x0800a404
 8000688:	f7ffffff 	.word	0xf7ffffff

0800068c <__aeabi_fmul>:
 800068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068e:	4657      	mov	r7, sl
 8000690:	464e      	mov	r6, r9
 8000692:	4645      	mov	r5, r8
 8000694:	46de      	mov	lr, fp
 8000696:	b5e0      	push	{r5, r6, r7, lr}
 8000698:	0247      	lsls	r7, r0, #9
 800069a:	0046      	lsls	r6, r0, #1
 800069c:	4688      	mov	r8, r1
 800069e:	0a7f      	lsrs	r7, r7, #9
 80006a0:	0e36      	lsrs	r6, r6, #24
 80006a2:	0fc4      	lsrs	r4, r0, #31
 80006a4:	2e00      	cmp	r6, #0
 80006a6:	d047      	beq.n	8000738 <__aeabi_fmul+0xac>
 80006a8:	2eff      	cmp	r6, #255	; 0xff
 80006aa:	d024      	beq.n	80006f6 <__aeabi_fmul+0x6a>
 80006ac:	00fb      	lsls	r3, r7, #3
 80006ae:	2780      	movs	r7, #128	; 0x80
 80006b0:	04ff      	lsls	r7, r7, #19
 80006b2:	431f      	orrs	r7, r3
 80006b4:	2300      	movs	r3, #0
 80006b6:	4699      	mov	r9, r3
 80006b8:	469a      	mov	sl, r3
 80006ba:	3e7f      	subs	r6, #127	; 0x7f
 80006bc:	4643      	mov	r3, r8
 80006be:	025d      	lsls	r5, r3, #9
 80006c0:	0058      	lsls	r0, r3, #1
 80006c2:	0fdb      	lsrs	r3, r3, #31
 80006c4:	0a6d      	lsrs	r5, r5, #9
 80006c6:	0e00      	lsrs	r0, r0, #24
 80006c8:	4698      	mov	r8, r3
 80006ca:	d043      	beq.n	8000754 <__aeabi_fmul+0xc8>
 80006cc:	28ff      	cmp	r0, #255	; 0xff
 80006ce:	d03b      	beq.n	8000748 <__aeabi_fmul+0xbc>
 80006d0:	00eb      	lsls	r3, r5, #3
 80006d2:	2580      	movs	r5, #128	; 0x80
 80006d4:	2200      	movs	r2, #0
 80006d6:	04ed      	lsls	r5, r5, #19
 80006d8:	431d      	orrs	r5, r3
 80006da:	387f      	subs	r0, #127	; 0x7f
 80006dc:	1836      	adds	r6, r6, r0
 80006de:	1c73      	adds	r3, r6, #1
 80006e0:	4641      	mov	r1, r8
 80006e2:	469b      	mov	fp, r3
 80006e4:	464b      	mov	r3, r9
 80006e6:	4061      	eors	r1, r4
 80006e8:	4313      	orrs	r3, r2
 80006ea:	2b0f      	cmp	r3, #15
 80006ec:	d864      	bhi.n	80007b8 <__aeabi_fmul+0x12c>
 80006ee:	4875      	ldr	r0, [pc, #468]	; (80008c4 <__aeabi_fmul+0x238>)
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	58c3      	ldr	r3, [r0, r3]
 80006f4:	469f      	mov	pc, r3
 80006f6:	2f00      	cmp	r7, #0
 80006f8:	d142      	bne.n	8000780 <__aeabi_fmul+0xf4>
 80006fa:	2308      	movs	r3, #8
 80006fc:	4699      	mov	r9, r3
 80006fe:	3b06      	subs	r3, #6
 8000700:	26ff      	movs	r6, #255	; 0xff
 8000702:	469a      	mov	sl, r3
 8000704:	e7da      	b.n	80006bc <__aeabi_fmul+0x30>
 8000706:	4641      	mov	r1, r8
 8000708:	2a02      	cmp	r2, #2
 800070a:	d028      	beq.n	800075e <__aeabi_fmul+0xd2>
 800070c:	2a03      	cmp	r2, #3
 800070e:	d100      	bne.n	8000712 <__aeabi_fmul+0x86>
 8000710:	e0ce      	b.n	80008b0 <__aeabi_fmul+0x224>
 8000712:	2a01      	cmp	r2, #1
 8000714:	d000      	beq.n	8000718 <__aeabi_fmul+0x8c>
 8000716:	e0ac      	b.n	8000872 <__aeabi_fmul+0x1e6>
 8000718:	4011      	ands	r1, r2
 800071a:	2000      	movs	r0, #0
 800071c:	2200      	movs	r2, #0
 800071e:	b2cc      	uxtb	r4, r1
 8000720:	0240      	lsls	r0, r0, #9
 8000722:	05d2      	lsls	r2, r2, #23
 8000724:	0a40      	lsrs	r0, r0, #9
 8000726:	07e4      	lsls	r4, r4, #31
 8000728:	4310      	orrs	r0, r2
 800072a:	4320      	orrs	r0, r4
 800072c:	bc3c      	pop	{r2, r3, r4, r5}
 800072e:	4690      	mov	r8, r2
 8000730:	4699      	mov	r9, r3
 8000732:	46a2      	mov	sl, r4
 8000734:	46ab      	mov	fp, r5
 8000736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000738:	2f00      	cmp	r7, #0
 800073a:	d115      	bne.n	8000768 <__aeabi_fmul+0xdc>
 800073c:	2304      	movs	r3, #4
 800073e:	4699      	mov	r9, r3
 8000740:	3b03      	subs	r3, #3
 8000742:	2600      	movs	r6, #0
 8000744:	469a      	mov	sl, r3
 8000746:	e7b9      	b.n	80006bc <__aeabi_fmul+0x30>
 8000748:	20ff      	movs	r0, #255	; 0xff
 800074a:	2202      	movs	r2, #2
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0c5      	beq.n	80006dc <__aeabi_fmul+0x50>
 8000750:	2203      	movs	r2, #3
 8000752:	e7c3      	b.n	80006dc <__aeabi_fmul+0x50>
 8000754:	2d00      	cmp	r5, #0
 8000756:	d119      	bne.n	800078c <__aeabi_fmul+0x100>
 8000758:	2000      	movs	r0, #0
 800075a:	2201      	movs	r2, #1
 800075c:	e7be      	b.n	80006dc <__aeabi_fmul+0x50>
 800075e:	2401      	movs	r4, #1
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	400c      	ands	r4, r1
 8000764:	2000      	movs	r0, #0
 8000766:	e7db      	b.n	8000720 <__aeabi_fmul+0x94>
 8000768:	0038      	movs	r0, r7
 800076a:	f001 fe6b 	bl	8002444 <__clzsi2>
 800076e:	2676      	movs	r6, #118	; 0x76
 8000770:	1f43      	subs	r3, r0, #5
 8000772:	409f      	lsls	r7, r3
 8000774:	2300      	movs	r3, #0
 8000776:	4276      	negs	r6, r6
 8000778:	1a36      	subs	r6, r6, r0
 800077a:	4699      	mov	r9, r3
 800077c:	469a      	mov	sl, r3
 800077e:	e79d      	b.n	80006bc <__aeabi_fmul+0x30>
 8000780:	230c      	movs	r3, #12
 8000782:	4699      	mov	r9, r3
 8000784:	3b09      	subs	r3, #9
 8000786:	26ff      	movs	r6, #255	; 0xff
 8000788:	469a      	mov	sl, r3
 800078a:	e797      	b.n	80006bc <__aeabi_fmul+0x30>
 800078c:	0028      	movs	r0, r5
 800078e:	f001 fe59 	bl	8002444 <__clzsi2>
 8000792:	1f43      	subs	r3, r0, #5
 8000794:	409d      	lsls	r5, r3
 8000796:	2376      	movs	r3, #118	; 0x76
 8000798:	425b      	negs	r3, r3
 800079a:	1a18      	subs	r0, r3, r0
 800079c:	2200      	movs	r2, #0
 800079e:	e79d      	b.n	80006dc <__aeabi_fmul+0x50>
 80007a0:	2080      	movs	r0, #128	; 0x80
 80007a2:	2400      	movs	r4, #0
 80007a4:	03c0      	lsls	r0, r0, #15
 80007a6:	22ff      	movs	r2, #255	; 0xff
 80007a8:	e7ba      	b.n	8000720 <__aeabi_fmul+0x94>
 80007aa:	003d      	movs	r5, r7
 80007ac:	4652      	mov	r2, sl
 80007ae:	e7ab      	b.n	8000708 <__aeabi_fmul+0x7c>
 80007b0:	003d      	movs	r5, r7
 80007b2:	0021      	movs	r1, r4
 80007b4:	4652      	mov	r2, sl
 80007b6:	e7a7      	b.n	8000708 <__aeabi_fmul+0x7c>
 80007b8:	0c3b      	lsrs	r3, r7, #16
 80007ba:	469c      	mov	ip, r3
 80007bc:	042a      	lsls	r2, r5, #16
 80007be:	0c12      	lsrs	r2, r2, #16
 80007c0:	0c2b      	lsrs	r3, r5, #16
 80007c2:	0014      	movs	r4, r2
 80007c4:	4660      	mov	r0, ip
 80007c6:	4665      	mov	r5, ip
 80007c8:	043f      	lsls	r7, r7, #16
 80007ca:	0c3f      	lsrs	r7, r7, #16
 80007cc:	437c      	muls	r4, r7
 80007ce:	4342      	muls	r2, r0
 80007d0:	435d      	muls	r5, r3
 80007d2:	437b      	muls	r3, r7
 80007d4:	0c27      	lsrs	r7, r4, #16
 80007d6:	189b      	adds	r3, r3, r2
 80007d8:	18ff      	adds	r7, r7, r3
 80007da:	42ba      	cmp	r2, r7
 80007dc:	d903      	bls.n	80007e6 <__aeabi_fmul+0x15a>
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	025b      	lsls	r3, r3, #9
 80007e2:	469c      	mov	ip, r3
 80007e4:	4465      	add	r5, ip
 80007e6:	0424      	lsls	r4, r4, #16
 80007e8:	043a      	lsls	r2, r7, #16
 80007ea:	0c24      	lsrs	r4, r4, #16
 80007ec:	1912      	adds	r2, r2, r4
 80007ee:	0193      	lsls	r3, r2, #6
 80007f0:	1e5c      	subs	r4, r3, #1
 80007f2:	41a3      	sbcs	r3, r4
 80007f4:	0c3f      	lsrs	r7, r7, #16
 80007f6:	0e92      	lsrs	r2, r2, #26
 80007f8:	197d      	adds	r5, r7, r5
 80007fa:	431a      	orrs	r2, r3
 80007fc:	01ad      	lsls	r5, r5, #6
 80007fe:	4315      	orrs	r5, r2
 8000800:	012b      	lsls	r3, r5, #4
 8000802:	d504      	bpl.n	800080e <__aeabi_fmul+0x182>
 8000804:	2301      	movs	r3, #1
 8000806:	465e      	mov	r6, fp
 8000808:	086a      	lsrs	r2, r5, #1
 800080a:	401d      	ands	r5, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	0032      	movs	r2, r6
 8000810:	327f      	adds	r2, #127	; 0x7f
 8000812:	2a00      	cmp	r2, #0
 8000814:	dd25      	ble.n	8000862 <__aeabi_fmul+0x1d6>
 8000816:	076b      	lsls	r3, r5, #29
 8000818:	d004      	beq.n	8000824 <__aeabi_fmul+0x198>
 800081a:	230f      	movs	r3, #15
 800081c:	402b      	ands	r3, r5
 800081e:	2b04      	cmp	r3, #4
 8000820:	d000      	beq.n	8000824 <__aeabi_fmul+0x198>
 8000822:	3504      	adds	r5, #4
 8000824:	012b      	lsls	r3, r5, #4
 8000826:	d503      	bpl.n	8000830 <__aeabi_fmul+0x1a4>
 8000828:	0032      	movs	r2, r6
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <__aeabi_fmul+0x23c>)
 800082c:	3280      	adds	r2, #128	; 0x80
 800082e:	401d      	ands	r5, r3
 8000830:	2afe      	cmp	r2, #254	; 0xfe
 8000832:	dc94      	bgt.n	800075e <__aeabi_fmul+0xd2>
 8000834:	2401      	movs	r4, #1
 8000836:	01a8      	lsls	r0, r5, #6
 8000838:	0a40      	lsrs	r0, r0, #9
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	400c      	ands	r4, r1
 800083e:	e76f      	b.n	8000720 <__aeabi_fmul+0x94>
 8000840:	2080      	movs	r0, #128	; 0x80
 8000842:	03c0      	lsls	r0, r0, #15
 8000844:	4207      	tst	r7, r0
 8000846:	d007      	beq.n	8000858 <__aeabi_fmul+0x1cc>
 8000848:	4205      	tst	r5, r0
 800084a:	d105      	bne.n	8000858 <__aeabi_fmul+0x1cc>
 800084c:	4328      	orrs	r0, r5
 800084e:	0240      	lsls	r0, r0, #9
 8000850:	0a40      	lsrs	r0, r0, #9
 8000852:	4644      	mov	r4, r8
 8000854:	22ff      	movs	r2, #255	; 0xff
 8000856:	e763      	b.n	8000720 <__aeabi_fmul+0x94>
 8000858:	4338      	orrs	r0, r7
 800085a:	0240      	lsls	r0, r0, #9
 800085c:	0a40      	lsrs	r0, r0, #9
 800085e:	22ff      	movs	r2, #255	; 0xff
 8000860:	e75e      	b.n	8000720 <__aeabi_fmul+0x94>
 8000862:	2401      	movs	r4, #1
 8000864:	1aa3      	subs	r3, r4, r2
 8000866:	2b1b      	cmp	r3, #27
 8000868:	dd05      	ble.n	8000876 <__aeabi_fmul+0x1ea>
 800086a:	400c      	ands	r4, r1
 800086c:	2200      	movs	r2, #0
 800086e:	2000      	movs	r0, #0
 8000870:	e756      	b.n	8000720 <__aeabi_fmul+0x94>
 8000872:	465e      	mov	r6, fp
 8000874:	e7cb      	b.n	800080e <__aeabi_fmul+0x182>
 8000876:	002a      	movs	r2, r5
 8000878:	2020      	movs	r0, #32
 800087a:	40da      	lsrs	r2, r3
 800087c:	1ac3      	subs	r3, r0, r3
 800087e:	409d      	lsls	r5, r3
 8000880:	002b      	movs	r3, r5
 8000882:	1e5d      	subs	r5, r3, #1
 8000884:	41ab      	sbcs	r3, r5
 8000886:	4313      	orrs	r3, r2
 8000888:	075a      	lsls	r2, r3, #29
 800088a:	d004      	beq.n	8000896 <__aeabi_fmul+0x20a>
 800088c:	220f      	movs	r2, #15
 800088e:	401a      	ands	r2, r3
 8000890:	2a04      	cmp	r2, #4
 8000892:	d000      	beq.n	8000896 <__aeabi_fmul+0x20a>
 8000894:	3304      	adds	r3, #4
 8000896:	015a      	lsls	r2, r3, #5
 8000898:	d504      	bpl.n	80008a4 <__aeabi_fmul+0x218>
 800089a:	2401      	movs	r4, #1
 800089c:	2201      	movs	r2, #1
 800089e:	400c      	ands	r4, r1
 80008a0:	2000      	movs	r0, #0
 80008a2:	e73d      	b.n	8000720 <__aeabi_fmul+0x94>
 80008a4:	2401      	movs	r4, #1
 80008a6:	019b      	lsls	r3, r3, #6
 80008a8:	0a58      	lsrs	r0, r3, #9
 80008aa:	400c      	ands	r4, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	e737      	b.n	8000720 <__aeabi_fmul+0x94>
 80008b0:	2080      	movs	r0, #128	; 0x80
 80008b2:	2401      	movs	r4, #1
 80008b4:	03c0      	lsls	r0, r0, #15
 80008b6:	4328      	orrs	r0, r5
 80008b8:	0240      	lsls	r0, r0, #9
 80008ba:	0a40      	lsrs	r0, r0, #9
 80008bc:	400c      	ands	r4, r1
 80008be:	22ff      	movs	r2, #255	; 0xff
 80008c0:	e72e      	b.n	8000720 <__aeabi_fmul+0x94>
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	0800a444 	.word	0x0800a444
 80008c8:	f7ffffff 	.word	0xf7ffffff

080008cc <__aeabi_fsub>:
 80008cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ce:	464f      	mov	r7, r9
 80008d0:	46d6      	mov	lr, sl
 80008d2:	4646      	mov	r6, r8
 80008d4:	0044      	lsls	r4, r0, #1
 80008d6:	b5c0      	push	{r6, r7, lr}
 80008d8:	0fc2      	lsrs	r2, r0, #31
 80008da:	0247      	lsls	r7, r0, #9
 80008dc:	0248      	lsls	r0, r1, #9
 80008de:	0a40      	lsrs	r0, r0, #9
 80008e0:	4684      	mov	ip, r0
 80008e2:	4666      	mov	r6, ip
 80008e4:	0a7b      	lsrs	r3, r7, #9
 80008e6:	0048      	lsls	r0, r1, #1
 80008e8:	0fc9      	lsrs	r1, r1, #31
 80008ea:	469a      	mov	sl, r3
 80008ec:	0e24      	lsrs	r4, r4, #24
 80008ee:	0015      	movs	r5, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	0e00      	lsrs	r0, r0, #24
 80008f4:	4689      	mov	r9, r1
 80008f6:	00f6      	lsls	r6, r6, #3
 80008f8:	28ff      	cmp	r0, #255	; 0xff
 80008fa:	d100      	bne.n	80008fe <__aeabi_fsub+0x32>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fsub+0x152>
 80008fe:	2101      	movs	r1, #1
 8000900:	464f      	mov	r7, r9
 8000902:	404f      	eors	r7, r1
 8000904:	0039      	movs	r1, r7
 8000906:	4291      	cmp	r1, r2
 8000908:	d066      	beq.n	80009d8 <__aeabi_fsub+0x10c>
 800090a:	1a22      	subs	r2, r4, r0
 800090c:	2a00      	cmp	r2, #0
 800090e:	dc00      	bgt.n	8000912 <__aeabi_fsub+0x46>
 8000910:	e09d      	b.n	8000a4e <__aeabi_fsub+0x182>
 8000912:	2800      	cmp	r0, #0
 8000914:	d13d      	bne.n	8000992 <__aeabi_fsub+0xc6>
 8000916:	2e00      	cmp	r6, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fsub+0x50>
 800091a:	e08b      	b.n	8000a34 <__aeabi_fsub+0x168>
 800091c:	1e51      	subs	r1, r2, #1
 800091e:	2900      	cmp	r1, #0
 8000920:	d000      	beq.n	8000924 <__aeabi_fsub+0x58>
 8000922:	e0b5      	b.n	8000a90 <__aeabi_fsub+0x1c4>
 8000924:	2401      	movs	r4, #1
 8000926:	1b9b      	subs	r3, r3, r6
 8000928:	015a      	lsls	r2, r3, #5
 800092a:	d544      	bpl.n	80009b6 <__aeabi_fsub+0xea>
 800092c:	019b      	lsls	r3, r3, #6
 800092e:	099f      	lsrs	r7, r3, #6
 8000930:	0038      	movs	r0, r7
 8000932:	f001 fd87 	bl	8002444 <__clzsi2>
 8000936:	3805      	subs	r0, #5
 8000938:	4087      	lsls	r7, r0
 800093a:	4284      	cmp	r4, r0
 800093c:	dd00      	ble.n	8000940 <__aeabi_fsub+0x74>
 800093e:	e096      	b.n	8000a6e <__aeabi_fsub+0x1a2>
 8000940:	1b04      	subs	r4, r0, r4
 8000942:	003a      	movs	r2, r7
 8000944:	2020      	movs	r0, #32
 8000946:	3401      	adds	r4, #1
 8000948:	40e2      	lsrs	r2, r4
 800094a:	1b04      	subs	r4, r0, r4
 800094c:	40a7      	lsls	r7, r4
 800094e:	003b      	movs	r3, r7
 8000950:	1e5f      	subs	r7, r3, #1
 8000952:	41bb      	sbcs	r3, r7
 8000954:	2400      	movs	r4, #0
 8000956:	4313      	orrs	r3, r2
 8000958:	075a      	lsls	r2, r3, #29
 800095a:	d004      	beq.n	8000966 <__aeabi_fsub+0x9a>
 800095c:	220f      	movs	r2, #15
 800095e:	401a      	ands	r2, r3
 8000960:	2a04      	cmp	r2, #4
 8000962:	d000      	beq.n	8000966 <__aeabi_fsub+0x9a>
 8000964:	3304      	adds	r3, #4
 8000966:	015a      	lsls	r2, r3, #5
 8000968:	d527      	bpl.n	80009ba <__aeabi_fsub+0xee>
 800096a:	3401      	adds	r4, #1
 800096c:	2cff      	cmp	r4, #255	; 0xff
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0xa6>
 8000970:	e079      	b.n	8000a66 <__aeabi_fsub+0x19a>
 8000972:	2201      	movs	r2, #1
 8000974:	019b      	lsls	r3, r3, #6
 8000976:	0a5b      	lsrs	r3, r3, #9
 8000978:	b2e4      	uxtb	r4, r4
 800097a:	402a      	ands	r2, r5
 800097c:	025b      	lsls	r3, r3, #9
 800097e:	05e4      	lsls	r4, r4, #23
 8000980:	0a58      	lsrs	r0, r3, #9
 8000982:	07d2      	lsls	r2, r2, #31
 8000984:	4320      	orrs	r0, r4
 8000986:	4310      	orrs	r0, r2
 8000988:	bc1c      	pop	{r2, r3, r4}
 800098a:	4690      	mov	r8, r2
 800098c:	4699      	mov	r9, r3
 800098e:	46a2      	mov	sl, r4
 8000990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000992:	2cff      	cmp	r4, #255	; 0xff
 8000994:	d0e0      	beq.n	8000958 <__aeabi_fsub+0x8c>
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	04c9      	lsls	r1, r1, #19
 800099a:	430e      	orrs	r6, r1
 800099c:	2a1b      	cmp	r2, #27
 800099e:	dc7b      	bgt.n	8000a98 <__aeabi_fsub+0x1cc>
 80009a0:	0031      	movs	r1, r6
 80009a2:	2020      	movs	r0, #32
 80009a4:	40d1      	lsrs	r1, r2
 80009a6:	1a82      	subs	r2, r0, r2
 80009a8:	4096      	lsls	r6, r2
 80009aa:	1e72      	subs	r2, r6, #1
 80009ac:	4196      	sbcs	r6, r2
 80009ae:	430e      	orrs	r6, r1
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	015a      	lsls	r2, r3, #5
 80009b4:	d4ba      	bmi.n	800092c <__aeabi_fsub+0x60>
 80009b6:	075a      	lsls	r2, r3, #29
 80009b8:	d1d0      	bne.n	800095c <__aeabi_fsub+0x90>
 80009ba:	2201      	movs	r2, #1
 80009bc:	08df      	lsrs	r7, r3, #3
 80009be:	402a      	ands	r2, r5
 80009c0:	2cff      	cmp	r4, #255	; 0xff
 80009c2:	d133      	bne.n	8000a2c <__aeabi_fsub+0x160>
 80009c4:	2f00      	cmp	r7, #0
 80009c6:	d100      	bne.n	80009ca <__aeabi_fsub+0xfe>
 80009c8:	e0a8      	b.n	8000b1c <__aeabi_fsub+0x250>
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	03db      	lsls	r3, r3, #15
 80009ce:	433b      	orrs	r3, r7
 80009d0:	025b      	lsls	r3, r3, #9
 80009d2:	0a5b      	lsrs	r3, r3, #9
 80009d4:	24ff      	movs	r4, #255	; 0xff
 80009d6:	e7d1      	b.n	800097c <__aeabi_fsub+0xb0>
 80009d8:	1a21      	subs	r1, r4, r0
 80009da:	2900      	cmp	r1, #0
 80009dc:	dd4c      	ble.n	8000a78 <__aeabi_fsub+0x1ac>
 80009de:	2800      	cmp	r0, #0
 80009e0:	d02a      	beq.n	8000a38 <__aeabi_fsub+0x16c>
 80009e2:	2cff      	cmp	r4, #255	; 0xff
 80009e4:	d0b8      	beq.n	8000958 <__aeabi_fsub+0x8c>
 80009e6:	2080      	movs	r0, #128	; 0x80
 80009e8:	04c0      	lsls	r0, r0, #19
 80009ea:	4306      	orrs	r6, r0
 80009ec:	291b      	cmp	r1, #27
 80009ee:	dd00      	ble.n	80009f2 <__aeabi_fsub+0x126>
 80009f0:	e0af      	b.n	8000b52 <__aeabi_fsub+0x286>
 80009f2:	0030      	movs	r0, r6
 80009f4:	2720      	movs	r7, #32
 80009f6:	40c8      	lsrs	r0, r1
 80009f8:	1a79      	subs	r1, r7, r1
 80009fa:	408e      	lsls	r6, r1
 80009fc:	1e71      	subs	r1, r6, #1
 80009fe:	418e      	sbcs	r6, r1
 8000a00:	4306      	orrs	r6, r0
 8000a02:	199b      	adds	r3, r3, r6
 8000a04:	0159      	lsls	r1, r3, #5
 8000a06:	d5d6      	bpl.n	80009b6 <__aeabi_fsub+0xea>
 8000a08:	3401      	adds	r4, #1
 8000a0a:	2cff      	cmp	r4, #255	; 0xff
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fsub+0x144>
 8000a0e:	e085      	b.n	8000b1c <__aeabi_fsub+0x250>
 8000a10:	2201      	movs	r2, #1
 8000a12:	497a      	ldr	r1, [pc, #488]	; (8000bfc <__aeabi_fsub+0x330>)
 8000a14:	401a      	ands	r2, r3
 8000a16:	085b      	lsrs	r3, r3, #1
 8000a18:	400b      	ands	r3, r1
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	e79c      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fsub+0x158>
 8000a22:	e770      	b.n	8000906 <__aeabi_fsub+0x3a>
 8000a24:	e76b      	b.n	80008fe <__aeabi_fsub+0x32>
 8000a26:	1e3b      	subs	r3, r7, #0
 8000a28:	d1c5      	bne.n	80009b6 <__aeabi_fsub+0xea>
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	027b      	lsls	r3, r7, #9
 8000a2e:	0a5b      	lsrs	r3, r3, #9
 8000a30:	b2e4      	uxtb	r4, r4
 8000a32:	e7a3      	b.n	800097c <__aeabi_fsub+0xb0>
 8000a34:	0014      	movs	r4, r2
 8000a36:	e78f      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000a38:	2e00      	cmp	r6, #0
 8000a3a:	d04d      	beq.n	8000ad8 <__aeabi_fsub+0x20c>
 8000a3c:	1e48      	subs	r0, r1, #1
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d157      	bne.n	8000af2 <__aeabi_fsub+0x226>
 8000a42:	199b      	adds	r3, r3, r6
 8000a44:	2401      	movs	r4, #1
 8000a46:	015a      	lsls	r2, r3, #5
 8000a48:	d5b5      	bpl.n	80009b6 <__aeabi_fsub+0xea>
 8000a4a:	2402      	movs	r4, #2
 8000a4c:	e7e0      	b.n	8000a10 <__aeabi_fsub+0x144>
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d125      	bne.n	8000a9e <__aeabi_fsub+0x1d2>
 8000a52:	1c62      	adds	r2, r4, #1
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	2a01      	cmp	r2, #1
 8000a58:	dd72      	ble.n	8000b40 <__aeabi_fsub+0x274>
 8000a5a:	1b9f      	subs	r7, r3, r6
 8000a5c:	017a      	lsls	r2, r7, #5
 8000a5e:	d535      	bpl.n	8000acc <__aeabi_fsub+0x200>
 8000a60:	1af7      	subs	r7, r6, r3
 8000a62:	000d      	movs	r5, r1
 8000a64:	e764      	b.n	8000930 <__aeabi_fsub+0x64>
 8000a66:	2201      	movs	r2, #1
 8000a68:	2300      	movs	r3, #0
 8000a6a:	402a      	ands	r2, r5
 8000a6c:	e786      	b.n	800097c <__aeabi_fsub+0xb0>
 8000a6e:	003b      	movs	r3, r7
 8000a70:	4a63      	ldr	r2, [pc, #396]	; (8000c00 <__aeabi_fsub+0x334>)
 8000a72:	1a24      	subs	r4, r4, r0
 8000a74:	4013      	ands	r3, r2
 8000a76:	e76f      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	d16c      	bne.n	8000b56 <__aeabi_fsub+0x28a>
 8000a7c:	1c61      	adds	r1, r4, #1
 8000a7e:	b2c8      	uxtb	r0, r1
 8000a80:	2801      	cmp	r0, #1
 8000a82:	dd4e      	ble.n	8000b22 <__aeabi_fsub+0x256>
 8000a84:	29ff      	cmp	r1, #255	; 0xff
 8000a86:	d049      	beq.n	8000b1c <__aeabi_fsub+0x250>
 8000a88:	199b      	adds	r3, r3, r6
 8000a8a:	085b      	lsrs	r3, r3, #1
 8000a8c:	000c      	movs	r4, r1
 8000a8e:	e763      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000a90:	2aff      	cmp	r2, #255	; 0xff
 8000a92:	d041      	beq.n	8000b18 <__aeabi_fsub+0x24c>
 8000a94:	000a      	movs	r2, r1
 8000a96:	e781      	b.n	800099c <__aeabi_fsub+0xd0>
 8000a98:	2601      	movs	r6, #1
 8000a9a:	1b9b      	subs	r3, r3, r6
 8000a9c:	e789      	b.n	80009b2 <__aeabi_fsub+0xe6>
 8000a9e:	2c00      	cmp	r4, #0
 8000aa0:	d01c      	beq.n	8000adc <__aeabi_fsub+0x210>
 8000aa2:	28ff      	cmp	r0, #255	; 0xff
 8000aa4:	d021      	beq.n	8000aea <__aeabi_fsub+0x21e>
 8000aa6:	2480      	movs	r4, #128	; 0x80
 8000aa8:	04e4      	lsls	r4, r4, #19
 8000aaa:	4252      	negs	r2, r2
 8000aac:	4323      	orrs	r3, r4
 8000aae:	2a1b      	cmp	r2, #27
 8000ab0:	dd00      	ble.n	8000ab4 <__aeabi_fsub+0x1e8>
 8000ab2:	e096      	b.n	8000be2 <__aeabi_fsub+0x316>
 8000ab4:	001c      	movs	r4, r3
 8000ab6:	2520      	movs	r5, #32
 8000ab8:	40d4      	lsrs	r4, r2
 8000aba:	1aaa      	subs	r2, r5, r2
 8000abc:	4093      	lsls	r3, r2
 8000abe:	1e5a      	subs	r2, r3, #1
 8000ac0:	4193      	sbcs	r3, r2
 8000ac2:	4323      	orrs	r3, r4
 8000ac4:	1af3      	subs	r3, r6, r3
 8000ac6:	0004      	movs	r4, r0
 8000ac8:	000d      	movs	r5, r1
 8000aca:	e72d      	b.n	8000928 <__aeabi_fsub+0x5c>
 8000acc:	2f00      	cmp	r7, #0
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_fsub+0x206>
 8000ad0:	e72e      	b.n	8000930 <__aeabi_fsub+0x64>
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	e7a9      	b.n	8000a2c <__aeabi_fsub+0x160>
 8000ad8:	000c      	movs	r4, r1
 8000ada:	e73d      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d058      	beq.n	8000b92 <__aeabi_fsub+0x2c6>
 8000ae0:	43d2      	mvns	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d0ee      	beq.n	8000ac4 <__aeabi_fsub+0x1f8>
 8000ae6:	28ff      	cmp	r0, #255	; 0xff
 8000ae8:	d1e1      	bne.n	8000aae <__aeabi_fsub+0x1e2>
 8000aea:	0033      	movs	r3, r6
 8000aec:	24ff      	movs	r4, #255	; 0xff
 8000aee:	000d      	movs	r5, r1
 8000af0:	e732      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000af2:	29ff      	cmp	r1, #255	; 0xff
 8000af4:	d010      	beq.n	8000b18 <__aeabi_fsub+0x24c>
 8000af6:	0001      	movs	r1, r0
 8000af8:	e778      	b.n	80009ec <__aeabi_fsub+0x120>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d06e      	beq.n	8000bdc <__aeabi_fsub+0x310>
 8000afe:	24ff      	movs	r4, #255	; 0xff
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d100      	bne.n	8000b06 <__aeabi_fsub+0x23a>
 8000b04:	e728      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	4651      	mov	r1, sl
 8000b0a:	03d2      	lsls	r2, r2, #15
 8000b0c:	4211      	tst	r1, r2
 8000b0e:	d003      	beq.n	8000b18 <__aeabi_fsub+0x24c>
 8000b10:	4661      	mov	r1, ip
 8000b12:	4211      	tst	r1, r2
 8000b14:	d100      	bne.n	8000b18 <__aeabi_fsub+0x24c>
 8000b16:	0033      	movs	r3, r6
 8000b18:	24ff      	movs	r4, #255	; 0xff
 8000b1a:	e71d      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b1c:	24ff      	movs	r4, #255	; 0xff
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e72c      	b.n	800097c <__aeabi_fsub+0xb0>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d1e9      	bne.n	8000afa <__aeabi_fsub+0x22e>
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d063      	beq.n	8000bf2 <__aeabi_fsub+0x326>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_fsub+0x264>
 8000b2e:	e713      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b30:	199b      	adds	r3, r3, r6
 8000b32:	015a      	lsls	r2, r3, #5
 8000b34:	d400      	bmi.n	8000b38 <__aeabi_fsub+0x26c>
 8000b36:	e73e      	b.n	80009b6 <__aeabi_fsub+0xea>
 8000b38:	4a31      	ldr	r2, [pc, #196]	; (8000c00 <__aeabi_fsub+0x334>)
 8000b3a:	000c      	movs	r4, r1
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	e70b      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d11e      	bne.n	8000b82 <__aeabi_fsub+0x2b6>
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d12f      	bne.n	8000ba8 <__aeabi_fsub+0x2dc>
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d04f      	beq.n	8000bec <__aeabi_fsub+0x320>
 8000b4c:	0033      	movs	r3, r6
 8000b4e:	000d      	movs	r5, r1
 8000b50:	e702      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b52:	2601      	movs	r6, #1
 8000b54:	e755      	b.n	8000a02 <__aeabi_fsub+0x136>
 8000b56:	2c00      	cmp	r4, #0
 8000b58:	d11f      	bne.n	8000b9a <__aeabi_fsub+0x2ce>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d043      	beq.n	8000be6 <__aeabi_fsub+0x31a>
 8000b5e:	43c9      	mvns	r1, r1
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d00b      	beq.n	8000b7c <__aeabi_fsub+0x2b0>
 8000b64:	28ff      	cmp	r0, #255	; 0xff
 8000b66:	d039      	beq.n	8000bdc <__aeabi_fsub+0x310>
 8000b68:	291b      	cmp	r1, #27
 8000b6a:	dc44      	bgt.n	8000bf6 <__aeabi_fsub+0x32a>
 8000b6c:	001c      	movs	r4, r3
 8000b6e:	2720      	movs	r7, #32
 8000b70:	40cc      	lsrs	r4, r1
 8000b72:	1a79      	subs	r1, r7, r1
 8000b74:	408b      	lsls	r3, r1
 8000b76:	1e59      	subs	r1, r3, #1
 8000b78:	418b      	sbcs	r3, r1
 8000b7a:	4323      	orrs	r3, r4
 8000b7c:	199b      	adds	r3, r3, r6
 8000b7e:	0004      	movs	r4, r0
 8000b80:	e740      	b.n	8000a04 <__aeabi_fsub+0x138>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d11a      	bne.n	8000bbc <__aeabi_fsub+0x2f0>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d124      	bne.n	8000bd4 <__aeabi_fsub+0x308>
 8000b8a:	2780      	movs	r7, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	03ff      	lsls	r7, r7, #15
 8000b90:	e71b      	b.n	80009ca <__aeabi_fsub+0xfe>
 8000b92:	0033      	movs	r3, r6
 8000b94:	0004      	movs	r4, r0
 8000b96:	000d      	movs	r5, r1
 8000b98:	e6de      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000b9a:	28ff      	cmp	r0, #255	; 0xff
 8000b9c:	d01e      	beq.n	8000bdc <__aeabi_fsub+0x310>
 8000b9e:	2480      	movs	r4, #128	; 0x80
 8000ba0:	04e4      	lsls	r4, r4, #19
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	4323      	orrs	r3, r4
 8000ba6:	e7df      	b.n	8000b68 <__aeabi_fsub+0x29c>
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x2e2>
 8000bac:	e6d4      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bae:	1b9f      	subs	r7, r3, r6
 8000bb0:	017a      	lsls	r2, r7, #5
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_fsub+0x2ea>
 8000bb4:	e737      	b.n	8000a26 <__aeabi_fsub+0x15a>
 8000bb6:	1af3      	subs	r3, r6, r3
 8000bb8:	000d      	movs	r5, r1
 8000bba:	e6cd      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bbc:	24ff      	movs	r4, #255	; 0xff
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x2f8>
 8000bc2:	e6c9      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	4650      	mov	r0, sl
 8000bc8:	03d2      	lsls	r2, r2, #15
 8000bca:	4210      	tst	r0, r2
 8000bcc:	d0a4      	beq.n	8000b18 <__aeabi_fsub+0x24c>
 8000bce:	4660      	mov	r0, ip
 8000bd0:	4210      	tst	r0, r2
 8000bd2:	d1a1      	bne.n	8000b18 <__aeabi_fsub+0x24c>
 8000bd4:	0033      	movs	r3, r6
 8000bd6:	000d      	movs	r5, r1
 8000bd8:	24ff      	movs	r4, #255	; 0xff
 8000bda:	e6bd      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bdc:	0033      	movs	r3, r6
 8000bde:	24ff      	movs	r4, #255	; 0xff
 8000be0:	e6ba      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e76e      	b.n	8000ac4 <__aeabi_fsub+0x1f8>
 8000be6:	0033      	movs	r3, r6
 8000be8:	0004      	movs	r4, r0
 8000bea:	e6b5      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bec:	2700      	movs	r7, #0
 8000bee:	2200      	movs	r2, #0
 8000bf0:	e71c      	b.n	8000a2c <__aeabi_fsub+0x160>
 8000bf2:	0033      	movs	r3, r6
 8000bf4:	e6b0      	b.n	8000958 <__aeabi_fsub+0x8c>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e7c0      	b.n	8000b7c <__aeabi_fsub+0x2b0>
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	7dffffff 	.word	0x7dffffff
 8000c00:	fbffffff 	.word	0xfbffffff

08000c04 <__aeabi_f2iz>:
 8000c04:	0241      	lsls	r1, r0, #9
 8000c06:	0043      	lsls	r3, r0, #1
 8000c08:	0fc2      	lsrs	r2, r0, #31
 8000c0a:	0a49      	lsrs	r1, r1, #9
 8000c0c:	0e1b      	lsrs	r3, r3, #24
 8000c0e:	2000      	movs	r0, #0
 8000c10:	2b7e      	cmp	r3, #126	; 0x7e
 8000c12:	dd0d      	ble.n	8000c30 <__aeabi_f2iz+0x2c>
 8000c14:	2b9d      	cmp	r3, #157	; 0x9d
 8000c16:	dc0c      	bgt.n	8000c32 <__aeabi_f2iz+0x2e>
 8000c18:	2080      	movs	r0, #128	; 0x80
 8000c1a:	0400      	lsls	r0, r0, #16
 8000c1c:	4301      	orrs	r1, r0
 8000c1e:	2b95      	cmp	r3, #149	; 0x95
 8000c20:	dc0a      	bgt.n	8000c38 <__aeabi_f2iz+0x34>
 8000c22:	2096      	movs	r0, #150	; 0x96
 8000c24:	1ac3      	subs	r3, r0, r3
 8000c26:	40d9      	lsrs	r1, r3
 8000c28:	4248      	negs	r0, r1
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_f2iz+0x2c>
 8000c2e:	0008      	movs	r0, r1
 8000c30:	4770      	bx	lr
 8000c32:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <__aeabi_f2iz+0x3c>)
 8000c34:	18d0      	adds	r0, r2, r3
 8000c36:	e7fb      	b.n	8000c30 <__aeabi_f2iz+0x2c>
 8000c38:	3b96      	subs	r3, #150	; 0x96
 8000c3a:	4099      	lsls	r1, r3
 8000c3c:	e7f4      	b.n	8000c28 <__aeabi_f2iz+0x24>
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	7fffffff 	.word	0x7fffffff

08000c44 <__aeabi_i2f>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d030      	beq.n	8000cac <__aeabi_i2f+0x68>
 8000c4a:	17c3      	asrs	r3, r0, #31
 8000c4c:	18c4      	adds	r4, r0, r3
 8000c4e:	405c      	eors	r4, r3
 8000c50:	0fc5      	lsrs	r5, r0, #31
 8000c52:	0020      	movs	r0, r4
 8000c54:	f001 fbf6 	bl	8002444 <__clzsi2>
 8000c58:	239e      	movs	r3, #158	; 0x9e
 8000c5a:	1a1b      	subs	r3, r3, r0
 8000c5c:	2b96      	cmp	r3, #150	; 0x96
 8000c5e:	dc0d      	bgt.n	8000c7c <__aeabi_i2f+0x38>
 8000c60:	2296      	movs	r2, #150	; 0x96
 8000c62:	1ad2      	subs	r2, r2, r3
 8000c64:	4094      	lsls	r4, r2
 8000c66:	002a      	movs	r2, r5
 8000c68:	0264      	lsls	r4, r4, #9
 8000c6a:	0a64      	lsrs	r4, r4, #9
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	0264      	lsls	r4, r4, #9
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	0a60      	lsrs	r0, r4, #9
 8000c74:	07d2      	lsls	r2, r2, #31
 8000c76:	4318      	orrs	r0, r3
 8000c78:	4310      	orrs	r0, r2
 8000c7a:	bd70      	pop	{r4, r5, r6, pc}
 8000c7c:	2b99      	cmp	r3, #153	; 0x99
 8000c7e:	dc19      	bgt.n	8000cb4 <__aeabi_i2f+0x70>
 8000c80:	2299      	movs	r2, #153	; 0x99
 8000c82:	1ad2      	subs	r2, r2, r3
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	dd29      	ble.n	8000cdc <__aeabi_i2f+0x98>
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	0022      	movs	r2, r4
 8000c8c:	4c14      	ldr	r4, [pc, #80]	; (8000ce0 <__aeabi_i2f+0x9c>)
 8000c8e:	4014      	ands	r4, r2
 8000c90:	0751      	lsls	r1, r2, #29
 8000c92:	d004      	beq.n	8000c9e <__aeabi_i2f+0x5a>
 8000c94:	210f      	movs	r1, #15
 8000c96:	400a      	ands	r2, r1
 8000c98:	2a04      	cmp	r2, #4
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_i2f+0x5a>
 8000c9c:	3404      	adds	r4, #4
 8000c9e:	0162      	lsls	r2, r4, #5
 8000ca0:	d413      	bmi.n	8000cca <__aeabi_i2f+0x86>
 8000ca2:	01a4      	lsls	r4, r4, #6
 8000ca4:	0a64      	lsrs	r4, r4, #9
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	002a      	movs	r2, r5
 8000caa:	e7e0      	b.n	8000c6e <__aeabi_i2f+0x2a>
 8000cac:	2200      	movs	r2, #0
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2400      	movs	r4, #0
 8000cb2:	e7dc      	b.n	8000c6e <__aeabi_i2f+0x2a>
 8000cb4:	2205      	movs	r2, #5
 8000cb6:	0021      	movs	r1, r4
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	40d1      	lsrs	r1, r2
 8000cbc:	22b9      	movs	r2, #185	; 0xb9
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	1e62      	subs	r2, r4, #1
 8000cc4:	4194      	sbcs	r4, r2
 8000cc6:	430c      	orrs	r4, r1
 8000cc8:	e7da      	b.n	8000c80 <__aeabi_i2f+0x3c>
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <__aeabi_i2f+0x9c>)
 8000ccc:	002a      	movs	r2, r5
 8000cce:	401c      	ands	r4, r3
 8000cd0:	239f      	movs	r3, #159	; 0x9f
 8000cd2:	01a4      	lsls	r4, r4, #6
 8000cd4:	1a1b      	subs	r3, r3, r0
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	e7c8      	b.n	8000c6e <__aeabi_i2f+0x2a>
 8000cdc:	0022      	movs	r2, r4
 8000cde:	e7d5      	b.n	8000c8c <__aeabi_i2f+0x48>
 8000ce0:	fbffffff 	.word	0xfbffffff

08000ce4 <__aeabi_ui2f>:
 8000ce4:	b510      	push	{r4, lr}
 8000ce6:	1e04      	subs	r4, r0, #0
 8000ce8:	d027      	beq.n	8000d3a <__aeabi_ui2f+0x56>
 8000cea:	f001 fbab 	bl	8002444 <__clzsi2>
 8000cee:	239e      	movs	r3, #158	; 0x9e
 8000cf0:	1a1b      	subs	r3, r3, r0
 8000cf2:	2b96      	cmp	r3, #150	; 0x96
 8000cf4:	dc0a      	bgt.n	8000d0c <__aeabi_ui2f+0x28>
 8000cf6:	2296      	movs	r2, #150	; 0x96
 8000cf8:	1ad2      	subs	r2, r2, r3
 8000cfa:	4094      	lsls	r4, r2
 8000cfc:	0264      	lsls	r4, r4, #9
 8000cfe:	0a64      	lsrs	r4, r4, #9
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	0264      	lsls	r4, r4, #9
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	0a60      	lsrs	r0, r4, #9
 8000d08:	4318      	orrs	r0, r3
 8000d0a:	bd10      	pop	{r4, pc}
 8000d0c:	2b99      	cmp	r3, #153	; 0x99
 8000d0e:	dc17      	bgt.n	8000d40 <__aeabi_ui2f+0x5c>
 8000d10:	2299      	movs	r2, #153	; 0x99
 8000d12:	1ad2      	subs	r2, r2, r3
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	dd27      	ble.n	8000d68 <__aeabi_ui2f+0x84>
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	0022      	movs	r2, r4
 8000d1c:	4c13      	ldr	r4, [pc, #76]	; (8000d6c <__aeabi_ui2f+0x88>)
 8000d1e:	4014      	ands	r4, r2
 8000d20:	0751      	lsls	r1, r2, #29
 8000d22:	d004      	beq.n	8000d2e <__aeabi_ui2f+0x4a>
 8000d24:	210f      	movs	r1, #15
 8000d26:	400a      	ands	r2, r1
 8000d28:	2a04      	cmp	r2, #4
 8000d2a:	d000      	beq.n	8000d2e <__aeabi_ui2f+0x4a>
 8000d2c:	3404      	adds	r4, #4
 8000d2e:	0162      	lsls	r2, r4, #5
 8000d30:	d412      	bmi.n	8000d58 <__aeabi_ui2f+0x74>
 8000d32:	01a4      	lsls	r4, r4, #6
 8000d34:	0a64      	lsrs	r4, r4, #9
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	e7e3      	b.n	8000d02 <__aeabi_ui2f+0x1e>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	e7e0      	b.n	8000d02 <__aeabi_ui2f+0x1e>
 8000d40:	22b9      	movs	r2, #185	; 0xb9
 8000d42:	0021      	movs	r1, r4
 8000d44:	1ad2      	subs	r2, r2, r3
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	1e51      	subs	r1, r2, #1
 8000d4c:	418a      	sbcs	r2, r1
 8000d4e:	2105      	movs	r1, #5
 8000d50:	1a09      	subs	r1, r1, r0
 8000d52:	40cc      	lsrs	r4, r1
 8000d54:	4314      	orrs	r4, r2
 8000d56:	e7db      	b.n	8000d10 <__aeabi_ui2f+0x2c>
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__aeabi_ui2f+0x88>)
 8000d5a:	401c      	ands	r4, r3
 8000d5c:	239f      	movs	r3, #159	; 0x9f
 8000d5e:	01a4      	lsls	r4, r4, #6
 8000d60:	1a1b      	subs	r3, r3, r0
 8000d62:	0a64      	lsrs	r4, r4, #9
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	e7cc      	b.n	8000d02 <__aeabi_ui2f+0x1e>
 8000d68:	0022      	movs	r2, r4
 8000d6a:	e7d7      	b.n	8000d1c <__aeabi_ui2f+0x38>
 8000d6c:	fbffffff 	.word	0xfbffffff

08000d70 <__aeabi_dadd>:
 8000d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d72:	4645      	mov	r5, r8
 8000d74:	46de      	mov	lr, fp
 8000d76:	4657      	mov	r7, sl
 8000d78:	464e      	mov	r6, r9
 8000d7a:	030c      	lsls	r4, r1, #12
 8000d7c:	b5e0      	push	{r5, r6, r7, lr}
 8000d7e:	004e      	lsls	r6, r1, #1
 8000d80:	0fc9      	lsrs	r1, r1, #31
 8000d82:	4688      	mov	r8, r1
 8000d84:	000d      	movs	r5, r1
 8000d86:	0a61      	lsrs	r1, r4, #9
 8000d88:	0f44      	lsrs	r4, r0, #29
 8000d8a:	430c      	orrs	r4, r1
 8000d8c:	00c7      	lsls	r7, r0, #3
 8000d8e:	0319      	lsls	r1, r3, #12
 8000d90:	0058      	lsls	r0, r3, #1
 8000d92:	0fdb      	lsrs	r3, r3, #31
 8000d94:	469b      	mov	fp, r3
 8000d96:	0a4b      	lsrs	r3, r1, #9
 8000d98:	0f51      	lsrs	r1, r2, #29
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	0d76      	lsrs	r6, r6, #21
 8000d9e:	0d40      	lsrs	r0, r0, #21
 8000da0:	0019      	movs	r1, r3
 8000da2:	00d2      	lsls	r2, r2, #3
 8000da4:	45d8      	cmp	r8, fp
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0x3a>
 8000da8:	e0ae      	b.n	8000f08 <__aeabi_dadd+0x198>
 8000daa:	1a35      	subs	r5, r6, r0
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	dc00      	bgt.n	8000db2 <__aeabi_dadd+0x42>
 8000db0:	e0f6      	b.n	8000fa0 <__aeabi_dadd+0x230>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d10f      	bne.n	8000dd6 <__aeabi_dadd+0x66>
 8000db6:	4313      	orrs	r3, r2
 8000db8:	d100      	bne.n	8000dbc <__aeabi_dadd+0x4c>
 8000dba:	e0db      	b.n	8000f74 <__aeabi_dadd+0x204>
 8000dbc:	1e6b      	subs	r3, r5, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_dadd+0x54>
 8000dc2:	e137      	b.n	8001034 <__aeabi_dadd+0x2c4>
 8000dc4:	1aba      	subs	r2, r7, r2
 8000dc6:	4297      	cmp	r7, r2
 8000dc8:	41bf      	sbcs	r7, r7
 8000dca:	1a64      	subs	r4, r4, r1
 8000dcc:	427f      	negs	r7, r7
 8000dce:	1be4      	subs	r4, r4, r7
 8000dd0:	2601      	movs	r6, #1
 8000dd2:	0017      	movs	r7, r2
 8000dd4:	e024      	b.n	8000e20 <__aeabi_dadd+0xb0>
 8000dd6:	4bc6      	ldr	r3, [pc, #792]	; (80010f0 <__aeabi_dadd+0x380>)
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d04d      	beq.n	8000e78 <__aeabi_dadd+0x108>
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	041b      	lsls	r3, r3, #16
 8000de0:	4319      	orrs	r1, r3
 8000de2:	2d38      	cmp	r5, #56	; 0x38
 8000de4:	dd00      	ble.n	8000de8 <__aeabi_dadd+0x78>
 8000de6:	e107      	b.n	8000ff8 <__aeabi_dadd+0x288>
 8000de8:	2d1f      	cmp	r5, #31
 8000dea:	dd00      	ble.n	8000dee <__aeabi_dadd+0x7e>
 8000dec:	e138      	b.n	8001060 <__aeabi_dadd+0x2f0>
 8000dee:	2020      	movs	r0, #32
 8000df0:	1b43      	subs	r3, r0, r5
 8000df2:	469a      	mov	sl, r3
 8000df4:	000b      	movs	r3, r1
 8000df6:	4650      	mov	r0, sl
 8000df8:	4083      	lsls	r3, r0
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	4648      	mov	r0, r9
 8000e00:	40eb      	lsrs	r3, r5
 8000e02:	4318      	orrs	r0, r3
 8000e04:	0003      	movs	r3, r0
 8000e06:	4650      	mov	r0, sl
 8000e08:	4082      	lsls	r2, r0
 8000e0a:	1e50      	subs	r0, r2, #1
 8000e0c:	4182      	sbcs	r2, r0
 8000e0e:	40e9      	lsrs	r1, r5
 8000e10:	431a      	orrs	r2, r3
 8000e12:	1aba      	subs	r2, r7, r2
 8000e14:	1a61      	subs	r1, r4, r1
 8000e16:	4297      	cmp	r7, r2
 8000e18:	41a4      	sbcs	r4, r4
 8000e1a:	0017      	movs	r7, r2
 8000e1c:	4264      	negs	r4, r4
 8000e1e:	1b0c      	subs	r4, r1, r4
 8000e20:	0223      	lsls	r3, r4, #8
 8000e22:	d562      	bpl.n	8000eea <__aeabi_dadd+0x17a>
 8000e24:	0264      	lsls	r4, r4, #9
 8000e26:	0a65      	lsrs	r5, r4, #9
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_dadd+0xbe>
 8000e2c:	e0df      	b.n	8000fee <__aeabi_dadd+0x27e>
 8000e2e:	0028      	movs	r0, r5
 8000e30:	f001 fb08 	bl	8002444 <__clzsi2>
 8000e34:	0003      	movs	r3, r0
 8000e36:	3b08      	subs	r3, #8
 8000e38:	2b1f      	cmp	r3, #31
 8000e3a:	dd00      	ble.n	8000e3e <__aeabi_dadd+0xce>
 8000e3c:	e0d2      	b.n	8000fe4 <__aeabi_dadd+0x274>
 8000e3e:	2220      	movs	r2, #32
 8000e40:	003c      	movs	r4, r7
 8000e42:	1ad2      	subs	r2, r2, r3
 8000e44:	409d      	lsls	r5, r3
 8000e46:	40d4      	lsrs	r4, r2
 8000e48:	409f      	lsls	r7, r3
 8000e4a:	4325      	orrs	r5, r4
 8000e4c:	429e      	cmp	r6, r3
 8000e4e:	dd00      	ble.n	8000e52 <__aeabi_dadd+0xe2>
 8000e50:	e0c4      	b.n	8000fdc <__aeabi_dadd+0x26c>
 8000e52:	1b9e      	subs	r6, r3, r6
 8000e54:	1c73      	adds	r3, r6, #1
 8000e56:	2b1f      	cmp	r3, #31
 8000e58:	dd00      	ble.n	8000e5c <__aeabi_dadd+0xec>
 8000e5a:	e0f1      	b.n	8001040 <__aeabi_dadd+0x2d0>
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	0038      	movs	r0, r7
 8000e60:	0029      	movs	r1, r5
 8000e62:	1ad2      	subs	r2, r2, r3
 8000e64:	40d8      	lsrs	r0, r3
 8000e66:	4091      	lsls	r1, r2
 8000e68:	4097      	lsls	r7, r2
 8000e6a:	002c      	movs	r4, r5
 8000e6c:	4301      	orrs	r1, r0
 8000e6e:	1e78      	subs	r0, r7, #1
 8000e70:	4187      	sbcs	r7, r0
 8000e72:	40dc      	lsrs	r4, r3
 8000e74:	2600      	movs	r6, #0
 8000e76:	430f      	orrs	r7, r1
 8000e78:	077b      	lsls	r3, r7, #29
 8000e7a:	d009      	beq.n	8000e90 <__aeabi_dadd+0x120>
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	403b      	ands	r3, r7
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d005      	beq.n	8000e90 <__aeabi_dadd+0x120>
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	42bb      	cmp	r3, r7
 8000e88:	41bf      	sbcs	r7, r7
 8000e8a:	427f      	negs	r7, r7
 8000e8c:	19e4      	adds	r4, r4, r7
 8000e8e:	001f      	movs	r7, r3
 8000e90:	0223      	lsls	r3, r4, #8
 8000e92:	d52c      	bpl.n	8000eee <__aeabi_dadd+0x17e>
 8000e94:	4b96      	ldr	r3, [pc, #600]	; (80010f0 <__aeabi_dadd+0x380>)
 8000e96:	3601      	adds	r6, #1
 8000e98:	429e      	cmp	r6, r3
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_dadd+0x12e>
 8000e9c:	e09a      	b.n	8000fd4 <__aeabi_dadd+0x264>
 8000e9e:	4645      	mov	r5, r8
 8000ea0:	4b94      	ldr	r3, [pc, #592]	; (80010f4 <__aeabi_dadd+0x384>)
 8000ea2:	08ff      	lsrs	r7, r7, #3
 8000ea4:	401c      	ands	r4, r3
 8000ea6:	0760      	lsls	r0, r4, #29
 8000ea8:	0576      	lsls	r6, r6, #21
 8000eaa:	0264      	lsls	r4, r4, #9
 8000eac:	4307      	orrs	r7, r0
 8000eae:	0b24      	lsrs	r4, r4, #12
 8000eb0:	0d76      	lsrs	r6, r6, #21
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	0324      	lsls	r4, r4, #12
 8000eb6:	0b23      	lsrs	r3, r4, #12
 8000eb8:	0d0c      	lsrs	r4, r1, #20
 8000eba:	4a8f      	ldr	r2, [pc, #572]	; (80010f8 <__aeabi_dadd+0x388>)
 8000ebc:	0524      	lsls	r4, r4, #20
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	4014      	ands	r4, r2
 8000ec2:	0533      	lsls	r3, r6, #20
 8000ec4:	4323      	orrs	r3, r4
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	07ed      	lsls	r5, r5, #31
 8000eca:	085b      	lsrs	r3, r3, #1
 8000ecc:	432b      	orrs	r3, r5
 8000ece:	0038      	movs	r0, r7
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	bc3c      	pop	{r2, r3, r4, r5}
 8000ed4:	4690      	mov	r8, r2
 8000ed6:	4699      	mov	r9, r3
 8000ed8:	46a2      	mov	sl, r4
 8000eda:	46ab      	mov	fp, r5
 8000edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ede:	4664      	mov	r4, ip
 8000ee0:	4304      	orrs	r4, r0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dadd+0x176>
 8000ee4:	e211      	b.n	800130a <__aeabi_dadd+0x59a>
 8000ee6:	0004      	movs	r4, r0
 8000ee8:	4667      	mov	r7, ip
 8000eea:	077b      	lsls	r3, r7, #29
 8000eec:	d1c6      	bne.n	8000e7c <__aeabi_dadd+0x10c>
 8000eee:	4645      	mov	r5, r8
 8000ef0:	0760      	lsls	r0, r4, #29
 8000ef2:	08ff      	lsrs	r7, r7, #3
 8000ef4:	4307      	orrs	r7, r0
 8000ef6:	08e4      	lsrs	r4, r4, #3
 8000ef8:	4b7d      	ldr	r3, [pc, #500]	; (80010f0 <__aeabi_dadd+0x380>)
 8000efa:	429e      	cmp	r6, r3
 8000efc:	d030      	beq.n	8000f60 <__aeabi_dadd+0x1f0>
 8000efe:	0324      	lsls	r4, r4, #12
 8000f00:	0576      	lsls	r6, r6, #21
 8000f02:	0b24      	lsrs	r4, r4, #12
 8000f04:	0d76      	lsrs	r6, r6, #21
 8000f06:	e7d4      	b.n	8000eb2 <__aeabi_dadd+0x142>
 8000f08:	1a33      	subs	r3, r6, r0
 8000f0a:	469a      	mov	sl, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	dd78      	ble.n	8001002 <__aeabi_dadd+0x292>
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d031      	beq.n	8000f78 <__aeabi_dadd+0x208>
 8000f14:	4876      	ldr	r0, [pc, #472]	; (80010f0 <__aeabi_dadd+0x380>)
 8000f16:	4286      	cmp	r6, r0
 8000f18:	d0ae      	beq.n	8000e78 <__aeabi_dadd+0x108>
 8000f1a:	2080      	movs	r0, #128	; 0x80
 8000f1c:	0400      	lsls	r0, r0, #16
 8000f1e:	4301      	orrs	r1, r0
 8000f20:	4653      	mov	r3, sl
 8000f22:	2b38      	cmp	r3, #56	; 0x38
 8000f24:	dc00      	bgt.n	8000f28 <__aeabi_dadd+0x1b8>
 8000f26:	e0e9      	b.n	80010fc <__aeabi_dadd+0x38c>
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	1e51      	subs	r1, r2, #1
 8000f2c:	418a      	sbcs	r2, r1
 8000f2e:	2100      	movs	r1, #0
 8000f30:	19d2      	adds	r2, r2, r7
 8000f32:	42ba      	cmp	r2, r7
 8000f34:	41bf      	sbcs	r7, r7
 8000f36:	1909      	adds	r1, r1, r4
 8000f38:	427c      	negs	r4, r7
 8000f3a:	0017      	movs	r7, r2
 8000f3c:	190c      	adds	r4, r1, r4
 8000f3e:	0223      	lsls	r3, r4, #8
 8000f40:	d5d3      	bpl.n	8000eea <__aeabi_dadd+0x17a>
 8000f42:	4b6b      	ldr	r3, [pc, #428]	; (80010f0 <__aeabi_dadd+0x380>)
 8000f44:	3601      	adds	r6, #1
 8000f46:	429e      	cmp	r6, r3
 8000f48:	d100      	bne.n	8000f4c <__aeabi_dadd+0x1dc>
 8000f4a:	e13a      	b.n	80011c2 <__aeabi_dadd+0x452>
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	4b69      	ldr	r3, [pc, #420]	; (80010f4 <__aeabi_dadd+0x384>)
 8000f50:	401c      	ands	r4, r3
 8000f52:	087b      	lsrs	r3, r7, #1
 8000f54:	4007      	ands	r7, r0
 8000f56:	431f      	orrs	r7, r3
 8000f58:	07e0      	lsls	r0, r4, #31
 8000f5a:	4307      	orrs	r7, r0
 8000f5c:	0864      	lsrs	r4, r4, #1
 8000f5e:	e78b      	b.n	8000e78 <__aeabi_dadd+0x108>
 8000f60:	0023      	movs	r3, r4
 8000f62:	433b      	orrs	r3, r7
 8000f64:	d100      	bne.n	8000f68 <__aeabi_dadd+0x1f8>
 8000f66:	e1cb      	b.n	8001300 <__aeabi_dadd+0x590>
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	0312      	lsls	r2, r2, #12
 8000f6c:	4314      	orrs	r4, r2
 8000f6e:	0324      	lsls	r4, r4, #12
 8000f70:	0b24      	lsrs	r4, r4, #12
 8000f72:	e79e      	b.n	8000eb2 <__aeabi_dadd+0x142>
 8000f74:	002e      	movs	r6, r5
 8000f76:	e77f      	b.n	8000e78 <__aeabi_dadd+0x108>
 8000f78:	0008      	movs	r0, r1
 8000f7a:	4310      	orrs	r0, r2
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dadd+0x210>
 8000f7e:	e0b4      	b.n	80010ea <__aeabi_dadd+0x37a>
 8000f80:	1e58      	subs	r0, r3, #1
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d000      	beq.n	8000f88 <__aeabi_dadd+0x218>
 8000f86:	e0de      	b.n	8001146 <__aeabi_dadd+0x3d6>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	42ba      	cmp	r2, r7
 8000f8c:	419b      	sbcs	r3, r3
 8000f8e:	1864      	adds	r4, r4, r1
 8000f90:	425b      	negs	r3, r3
 8000f92:	18e4      	adds	r4, r4, r3
 8000f94:	0017      	movs	r7, r2
 8000f96:	2601      	movs	r6, #1
 8000f98:	0223      	lsls	r3, r4, #8
 8000f9a:	d5a6      	bpl.n	8000eea <__aeabi_dadd+0x17a>
 8000f9c:	2602      	movs	r6, #2
 8000f9e:	e7d5      	b.n	8000f4c <__aeabi_dadd+0x1dc>
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d16e      	bne.n	8001082 <__aeabi_dadd+0x312>
 8000fa4:	1c70      	adds	r0, r6, #1
 8000fa6:	0540      	lsls	r0, r0, #21
 8000fa8:	0d40      	lsrs	r0, r0, #21
 8000faa:	2801      	cmp	r0, #1
 8000fac:	dc00      	bgt.n	8000fb0 <__aeabi_dadd+0x240>
 8000fae:	e0f9      	b.n	80011a4 <__aeabi_dadd+0x434>
 8000fb0:	1ab8      	subs	r0, r7, r2
 8000fb2:	4684      	mov	ip, r0
 8000fb4:	4287      	cmp	r7, r0
 8000fb6:	4180      	sbcs	r0, r0
 8000fb8:	1ae5      	subs	r5, r4, r3
 8000fba:	4240      	negs	r0, r0
 8000fbc:	1a2d      	subs	r5, r5, r0
 8000fbe:	0228      	lsls	r0, r5, #8
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_dadd+0x254>
 8000fc2:	e089      	b.n	80010d8 <__aeabi_dadd+0x368>
 8000fc4:	1bd7      	subs	r7, r2, r7
 8000fc6:	42ba      	cmp	r2, r7
 8000fc8:	4192      	sbcs	r2, r2
 8000fca:	1b1c      	subs	r4, r3, r4
 8000fcc:	4252      	negs	r2, r2
 8000fce:	1aa5      	subs	r5, r4, r2
 8000fd0:	46d8      	mov	r8, fp
 8000fd2:	e729      	b.n	8000e28 <__aeabi_dadd+0xb8>
 8000fd4:	4645      	mov	r5, r8
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	2700      	movs	r7, #0
 8000fda:	e76a      	b.n	8000eb2 <__aeabi_dadd+0x142>
 8000fdc:	4c45      	ldr	r4, [pc, #276]	; (80010f4 <__aeabi_dadd+0x384>)
 8000fde:	1af6      	subs	r6, r6, r3
 8000fe0:	402c      	ands	r4, r5
 8000fe2:	e749      	b.n	8000e78 <__aeabi_dadd+0x108>
 8000fe4:	003d      	movs	r5, r7
 8000fe6:	3828      	subs	r0, #40	; 0x28
 8000fe8:	4085      	lsls	r5, r0
 8000fea:	2700      	movs	r7, #0
 8000fec:	e72e      	b.n	8000e4c <__aeabi_dadd+0xdc>
 8000fee:	0038      	movs	r0, r7
 8000ff0:	f001 fa28 	bl	8002444 <__clzsi2>
 8000ff4:	3020      	adds	r0, #32
 8000ff6:	e71d      	b.n	8000e34 <__aeabi_dadd+0xc4>
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	1e51      	subs	r1, r2, #1
 8000ffc:	418a      	sbcs	r2, r1
 8000ffe:	2100      	movs	r1, #0
 8001000:	e707      	b.n	8000e12 <__aeabi_dadd+0xa2>
 8001002:	2b00      	cmp	r3, #0
 8001004:	d000      	beq.n	8001008 <__aeabi_dadd+0x298>
 8001006:	e0f3      	b.n	80011f0 <__aeabi_dadd+0x480>
 8001008:	1c70      	adds	r0, r6, #1
 800100a:	0543      	lsls	r3, r0, #21
 800100c:	0d5b      	lsrs	r3, r3, #21
 800100e:	2b01      	cmp	r3, #1
 8001010:	dc00      	bgt.n	8001014 <__aeabi_dadd+0x2a4>
 8001012:	e0ad      	b.n	8001170 <__aeabi_dadd+0x400>
 8001014:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <__aeabi_dadd+0x380>)
 8001016:	4298      	cmp	r0, r3
 8001018:	d100      	bne.n	800101c <__aeabi_dadd+0x2ac>
 800101a:	e0d1      	b.n	80011c0 <__aeabi_dadd+0x450>
 800101c:	18ba      	adds	r2, r7, r2
 800101e:	42ba      	cmp	r2, r7
 8001020:	41bf      	sbcs	r7, r7
 8001022:	1864      	adds	r4, r4, r1
 8001024:	427f      	negs	r7, r7
 8001026:	19e4      	adds	r4, r4, r7
 8001028:	07e7      	lsls	r7, r4, #31
 800102a:	0852      	lsrs	r2, r2, #1
 800102c:	4317      	orrs	r7, r2
 800102e:	0864      	lsrs	r4, r4, #1
 8001030:	0006      	movs	r6, r0
 8001032:	e721      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001034:	482e      	ldr	r0, [pc, #184]	; (80010f0 <__aeabi_dadd+0x380>)
 8001036:	4285      	cmp	r5, r0
 8001038:	d100      	bne.n	800103c <__aeabi_dadd+0x2cc>
 800103a:	e093      	b.n	8001164 <__aeabi_dadd+0x3f4>
 800103c:	001d      	movs	r5, r3
 800103e:	e6d0      	b.n	8000de2 <__aeabi_dadd+0x72>
 8001040:	0029      	movs	r1, r5
 8001042:	3e1f      	subs	r6, #31
 8001044:	40f1      	lsrs	r1, r6
 8001046:	2b20      	cmp	r3, #32
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x2dc>
 800104a:	e08d      	b.n	8001168 <__aeabi_dadd+0x3f8>
 800104c:	2240      	movs	r2, #64	; 0x40
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	409d      	lsls	r5, r3
 8001052:	432f      	orrs	r7, r5
 8001054:	1e7d      	subs	r5, r7, #1
 8001056:	41af      	sbcs	r7, r5
 8001058:	2400      	movs	r4, #0
 800105a:	430f      	orrs	r7, r1
 800105c:	2600      	movs	r6, #0
 800105e:	e744      	b.n	8000eea <__aeabi_dadd+0x17a>
 8001060:	002b      	movs	r3, r5
 8001062:	0008      	movs	r0, r1
 8001064:	3b20      	subs	r3, #32
 8001066:	40d8      	lsrs	r0, r3
 8001068:	0003      	movs	r3, r0
 800106a:	2d20      	cmp	r5, #32
 800106c:	d100      	bne.n	8001070 <__aeabi_dadd+0x300>
 800106e:	e07d      	b.n	800116c <__aeabi_dadd+0x3fc>
 8001070:	2040      	movs	r0, #64	; 0x40
 8001072:	1b45      	subs	r5, r0, r5
 8001074:	40a9      	lsls	r1, r5
 8001076:	430a      	orrs	r2, r1
 8001078:	1e51      	subs	r1, r2, #1
 800107a:	418a      	sbcs	r2, r1
 800107c:	2100      	movs	r1, #0
 800107e:	431a      	orrs	r2, r3
 8001080:	e6c7      	b.n	8000e12 <__aeabi_dadd+0xa2>
 8001082:	2e00      	cmp	r6, #0
 8001084:	d050      	beq.n	8001128 <__aeabi_dadd+0x3b8>
 8001086:	4e1a      	ldr	r6, [pc, #104]	; (80010f0 <__aeabi_dadd+0x380>)
 8001088:	42b0      	cmp	r0, r6
 800108a:	d057      	beq.n	800113c <__aeabi_dadd+0x3cc>
 800108c:	2680      	movs	r6, #128	; 0x80
 800108e:	426b      	negs	r3, r5
 8001090:	4699      	mov	r9, r3
 8001092:	0436      	lsls	r6, r6, #16
 8001094:	4334      	orrs	r4, r6
 8001096:	464b      	mov	r3, r9
 8001098:	2b38      	cmp	r3, #56	; 0x38
 800109a:	dd00      	ble.n	800109e <__aeabi_dadd+0x32e>
 800109c:	e0d6      	b.n	800124c <__aeabi_dadd+0x4dc>
 800109e:	2b1f      	cmp	r3, #31
 80010a0:	dd00      	ble.n	80010a4 <__aeabi_dadd+0x334>
 80010a2:	e135      	b.n	8001310 <__aeabi_dadd+0x5a0>
 80010a4:	2620      	movs	r6, #32
 80010a6:	1af5      	subs	r5, r6, r3
 80010a8:	0026      	movs	r6, r4
 80010aa:	40ae      	lsls	r6, r5
 80010ac:	46b2      	mov	sl, r6
 80010ae:	003e      	movs	r6, r7
 80010b0:	40de      	lsrs	r6, r3
 80010b2:	46ac      	mov	ip, r5
 80010b4:	0035      	movs	r5, r6
 80010b6:	4656      	mov	r6, sl
 80010b8:	432e      	orrs	r6, r5
 80010ba:	4665      	mov	r5, ip
 80010bc:	40af      	lsls	r7, r5
 80010be:	1e7d      	subs	r5, r7, #1
 80010c0:	41af      	sbcs	r7, r5
 80010c2:	40dc      	lsrs	r4, r3
 80010c4:	4337      	orrs	r7, r6
 80010c6:	1bd7      	subs	r7, r2, r7
 80010c8:	42ba      	cmp	r2, r7
 80010ca:	4192      	sbcs	r2, r2
 80010cc:	1b0c      	subs	r4, r1, r4
 80010ce:	4252      	negs	r2, r2
 80010d0:	1aa4      	subs	r4, r4, r2
 80010d2:	0006      	movs	r6, r0
 80010d4:	46d8      	mov	r8, fp
 80010d6:	e6a3      	b.n	8000e20 <__aeabi_dadd+0xb0>
 80010d8:	4664      	mov	r4, ip
 80010da:	4667      	mov	r7, ip
 80010dc:	432c      	orrs	r4, r5
 80010de:	d000      	beq.n	80010e2 <__aeabi_dadd+0x372>
 80010e0:	e6a2      	b.n	8000e28 <__aeabi_dadd+0xb8>
 80010e2:	2500      	movs	r5, #0
 80010e4:	2600      	movs	r6, #0
 80010e6:	2700      	movs	r7, #0
 80010e8:	e706      	b.n	8000ef8 <__aeabi_dadd+0x188>
 80010ea:	001e      	movs	r6, r3
 80010ec:	e6c4      	b.n	8000e78 <__aeabi_dadd+0x108>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	000007ff 	.word	0x000007ff
 80010f4:	ff7fffff 	.word	0xff7fffff
 80010f8:	800fffff 	.word	0x800fffff
 80010fc:	2b1f      	cmp	r3, #31
 80010fe:	dc63      	bgt.n	80011c8 <__aeabi_dadd+0x458>
 8001100:	2020      	movs	r0, #32
 8001102:	1ac3      	subs	r3, r0, r3
 8001104:	0008      	movs	r0, r1
 8001106:	4098      	lsls	r0, r3
 8001108:	469c      	mov	ip, r3
 800110a:	4683      	mov	fp, r0
 800110c:	4653      	mov	r3, sl
 800110e:	0010      	movs	r0, r2
 8001110:	40d8      	lsrs	r0, r3
 8001112:	0003      	movs	r3, r0
 8001114:	4658      	mov	r0, fp
 8001116:	4318      	orrs	r0, r3
 8001118:	4663      	mov	r3, ip
 800111a:	409a      	lsls	r2, r3
 800111c:	1e53      	subs	r3, r2, #1
 800111e:	419a      	sbcs	r2, r3
 8001120:	4653      	mov	r3, sl
 8001122:	4302      	orrs	r2, r0
 8001124:	40d9      	lsrs	r1, r3
 8001126:	e703      	b.n	8000f30 <__aeabi_dadd+0x1c0>
 8001128:	0026      	movs	r6, r4
 800112a:	433e      	orrs	r6, r7
 800112c:	d006      	beq.n	800113c <__aeabi_dadd+0x3cc>
 800112e:	43eb      	mvns	r3, r5
 8001130:	4699      	mov	r9, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0c7      	beq.n	80010c6 <__aeabi_dadd+0x356>
 8001136:	4e94      	ldr	r6, [pc, #592]	; (8001388 <__aeabi_dadd+0x618>)
 8001138:	42b0      	cmp	r0, r6
 800113a:	d1ac      	bne.n	8001096 <__aeabi_dadd+0x326>
 800113c:	000c      	movs	r4, r1
 800113e:	0017      	movs	r7, r2
 8001140:	0006      	movs	r6, r0
 8001142:	46d8      	mov	r8, fp
 8001144:	e698      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001146:	4b90      	ldr	r3, [pc, #576]	; (8001388 <__aeabi_dadd+0x618>)
 8001148:	459a      	cmp	sl, r3
 800114a:	d00b      	beq.n	8001164 <__aeabi_dadd+0x3f4>
 800114c:	4682      	mov	sl, r0
 800114e:	e6e7      	b.n	8000f20 <__aeabi_dadd+0x1b0>
 8001150:	2800      	cmp	r0, #0
 8001152:	d000      	beq.n	8001156 <__aeabi_dadd+0x3e6>
 8001154:	e09e      	b.n	8001294 <__aeabi_dadd+0x524>
 8001156:	0018      	movs	r0, r3
 8001158:	4310      	orrs	r0, r2
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x3ee>
 800115c:	e0e9      	b.n	8001332 <__aeabi_dadd+0x5c2>
 800115e:	001c      	movs	r4, r3
 8001160:	0017      	movs	r7, r2
 8001162:	46d8      	mov	r8, fp
 8001164:	4e88      	ldr	r6, [pc, #544]	; (8001388 <__aeabi_dadd+0x618>)
 8001166:	e687      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001168:	2500      	movs	r5, #0
 800116a:	e772      	b.n	8001052 <__aeabi_dadd+0x2e2>
 800116c:	2100      	movs	r1, #0
 800116e:	e782      	b.n	8001076 <__aeabi_dadd+0x306>
 8001170:	0023      	movs	r3, r4
 8001172:	433b      	orrs	r3, r7
 8001174:	2e00      	cmp	r6, #0
 8001176:	d000      	beq.n	800117a <__aeabi_dadd+0x40a>
 8001178:	e0ab      	b.n	80012d2 <__aeabi_dadd+0x562>
 800117a:	2b00      	cmp	r3, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_dadd+0x410>
 800117e:	e0e7      	b.n	8001350 <__aeabi_dadd+0x5e0>
 8001180:	000b      	movs	r3, r1
 8001182:	4313      	orrs	r3, r2
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x418>
 8001186:	e677      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001188:	18ba      	adds	r2, r7, r2
 800118a:	42ba      	cmp	r2, r7
 800118c:	41bf      	sbcs	r7, r7
 800118e:	1864      	adds	r4, r4, r1
 8001190:	427f      	negs	r7, r7
 8001192:	19e4      	adds	r4, r4, r7
 8001194:	0223      	lsls	r3, r4, #8
 8001196:	d400      	bmi.n	800119a <__aeabi_dadd+0x42a>
 8001198:	e0f2      	b.n	8001380 <__aeabi_dadd+0x610>
 800119a:	4b7c      	ldr	r3, [pc, #496]	; (800138c <__aeabi_dadd+0x61c>)
 800119c:	0017      	movs	r7, r2
 800119e:	401c      	ands	r4, r3
 80011a0:	0006      	movs	r6, r0
 80011a2:	e669      	b.n	8000e78 <__aeabi_dadd+0x108>
 80011a4:	0020      	movs	r0, r4
 80011a6:	4338      	orrs	r0, r7
 80011a8:	2e00      	cmp	r6, #0
 80011aa:	d1d1      	bne.n	8001150 <__aeabi_dadd+0x3e0>
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d15b      	bne.n	8001268 <__aeabi_dadd+0x4f8>
 80011b0:	001c      	movs	r4, r3
 80011b2:	4314      	orrs	r4, r2
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x448>
 80011b6:	e0a8      	b.n	800130a <__aeabi_dadd+0x59a>
 80011b8:	001c      	movs	r4, r3
 80011ba:	0017      	movs	r7, r2
 80011bc:	46d8      	mov	r8, fp
 80011be:	e65b      	b.n	8000e78 <__aeabi_dadd+0x108>
 80011c0:	0006      	movs	r6, r0
 80011c2:	2400      	movs	r4, #0
 80011c4:	2700      	movs	r7, #0
 80011c6:	e697      	b.n	8000ef8 <__aeabi_dadd+0x188>
 80011c8:	4650      	mov	r0, sl
 80011ca:	000b      	movs	r3, r1
 80011cc:	3820      	subs	r0, #32
 80011ce:	40c3      	lsrs	r3, r0
 80011d0:	4699      	mov	r9, r3
 80011d2:	4653      	mov	r3, sl
 80011d4:	2b20      	cmp	r3, #32
 80011d6:	d100      	bne.n	80011da <__aeabi_dadd+0x46a>
 80011d8:	e095      	b.n	8001306 <__aeabi_dadd+0x596>
 80011da:	2340      	movs	r3, #64	; 0x40
 80011dc:	4650      	mov	r0, sl
 80011de:	1a1b      	subs	r3, r3, r0
 80011e0:	4099      	lsls	r1, r3
 80011e2:	430a      	orrs	r2, r1
 80011e4:	1e51      	subs	r1, r2, #1
 80011e6:	418a      	sbcs	r2, r1
 80011e8:	464b      	mov	r3, r9
 80011ea:	2100      	movs	r1, #0
 80011ec:	431a      	orrs	r2, r3
 80011ee:	e69f      	b.n	8000f30 <__aeabi_dadd+0x1c0>
 80011f0:	2e00      	cmp	r6, #0
 80011f2:	d130      	bne.n	8001256 <__aeabi_dadd+0x4e6>
 80011f4:	0026      	movs	r6, r4
 80011f6:	433e      	orrs	r6, r7
 80011f8:	d067      	beq.n	80012ca <__aeabi_dadd+0x55a>
 80011fa:	43db      	mvns	r3, r3
 80011fc:	469a      	mov	sl, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d01c      	beq.n	800123c <__aeabi_dadd+0x4cc>
 8001202:	4e61      	ldr	r6, [pc, #388]	; (8001388 <__aeabi_dadd+0x618>)
 8001204:	42b0      	cmp	r0, r6
 8001206:	d060      	beq.n	80012ca <__aeabi_dadd+0x55a>
 8001208:	4653      	mov	r3, sl
 800120a:	2b38      	cmp	r3, #56	; 0x38
 800120c:	dd00      	ble.n	8001210 <__aeabi_dadd+0x4a0>
 800120e:	e096      	b.n	800133e <__aeabi_dadd+0x5ce>
 8001210:	2b1f      	cmp	r3, #31
 8001212:	dd00      	ble.n	8001216 <__aeabi_dadd+0x4a6>
 8001214:	e09f      	b.n	8001356 <__aeabi_dadd+0x5e6>
 8001216:	2620      	movs	r6, #32
 8001218:	1af3      	subs	r3, r6, r3
 800121a:	0026      	movs	r6, r4
 800121c:	409e      	lsls	r6, r3
 800121e:	469c      	mov	ip, r3
 8001220:	46b3      	mov	fp, r6
 8001222:	4653      	mov	r3, sl
 8001224:	003e      	movs	r6, r7
 8001226:	40de      	lsrs	r6, r3
 8001228:	0033      	movs	r3, r6
 800122a:	465e      	mov	r6, fp
 800122c:	431e      	orrs	r6, r3
 800122e:	4663      	mov	r3, ip
 8001230:	409f      	lsls	r7, r3
 8001232:	1e7b      	subs	r3, r7, #1
 8001234:	419f      	sbcs	r7, r3
 8001236:	4653      	mov	r3, sl
 8001238:	40dc      	lsrs	r4, r3
 800123a:	4337      	orrs	r7, r6
 800123c:	18bf      	adds	r7, r7, r2
 800123e:	4297      	cmp	r7, r2
 8001240:	4192      	sbcs	r2, r2
 8001242:	1864      	adds	r4, r4, r1
 8001244:	4252      	negs	r2, r2
 8001246:	18a4      	adds	r4, r4, r2
 8001248:	0006      	movs	r6, r0
 800124a:	e678      	b.n	8000f3e <__aeabi_dadd+0x1ce>
 800124c:	4327      	orrs	r7, r4
 800124e:	1e7c      	subs	r4, r7, #1
 8001250:	41a7      	sbcs	r7, r4
 8001252:	2400      	movs	r4, #0
 8001254:	e737      	b.n	80010c6 <__aeabi_dadd+0x356>
 8001256:	4e4c      	ldr	r6, [pc, #304]	; (8001388 <__aeabi_dadd+0x618>)
 8001258:	42b0      	cmp	r0, r6
 800125a:	d036      	beq.n	80012ca <__aeabi_dadd+0x55a>
 800125c:	2680      	movs	r6, #128	; 0x80
 800125e:	425b      	negs	r3, r3
 8001260:	0436      	lsls	r6, r6, #16
 8001262:	469a      	mov	sl, r3
 8001264:	4334      	orrs	r4, r6
 8001266:	e7cf      	b.n	8001208 <__aeabi_dadd+0x498>
 8001268:	0018      	movs	r0, r3
 800126a:	4310      	orrs	r0, r2
 800126c:	d100      	bne.n	8001270 <__aeabi_dadd+0x500>
 800126e:	e603      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001270:	1ab8      	subs	r0, r7, r2
 8001272:	4684      	mov	ip, r0
 8001274:	4567      	cmp	r7, ip
 8001276:	41ad      	sbcs	r5, r5
 8001278:	1ae0      	subs	r0, r4, r3
 800127a:	426d      	negs	r5, r5
 800127c:	1b40      	subs	r0, r0, r5
 800127e:	0205      	lsls	r5, r0, #8
 8001280:	d400      	bmi.n	8001284 <__aeabi_dadd+0x514>
 8001282:	e62c      	b.n	8000ede <__aeabi_dadd+0x16e>
 8001284:	1bd7      	subs	r7, r2, r7
 8001286:	42ba      	cmp	r2, r7
 8001288:	4192      	sbcs	r2, r2
 800128a:	1b1c      	subs	r4, r3, r4
 800128c:	4252      	negs	r2, r2
 800128e:	1aa4      	subs	r4, r4, r2
 8001290:	46d8      	mov	r8, fp
 8001292:	e5f1      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001294:	0018      	movs	r0, r3
 8001296:	4310      	orrs	r0, r2
 8001298:	d100      	bne.n	800129c <__aeabi_dadd+0x52c>
 800129a:	e763      	b.n	8001164 <__aeabi_dadd+0x3f4>
 800129c:	08f8      	lsrs	r0, r7, #3
 800129e:	0767      	lsls	r7, r4, #29
 80012a0:	4307      	orrs	r7, r0
 80012a2:	2080      	movs	r0, #128	; 0x80
 80012a4:	08e4      	lsrs	r4, r4, #3
 80012a6:	0300      	lsls	r0, r0, #12
 80012a8:	4204      	tst	r4, r0
 80012aa:	d008      	beq.n	80012be <__aeabi_dadd+0x54e>
 80012ac:	08dd      	lsrs	r5, r3, #3
 80012ae:	4205      	tst	r5, r0
 80012b0:	d105      	bne.n	80012be <__aeabi_dadd+0x54e>
 80012b2:	08d2      	lsrs	r2, r2, #3
 80012b4:	0759      	lsls	r1, r3, #29
 80012b6:	4311      	orrs	r1, r2
 80012b8:	000f      	movs	r7, r1
 80012ba:	002c      	movs	r4, r5
 80012bc:	46d8      	mov	r8, fp
 80012be:	0f7b      	lsrs	r3, r7, #29
 80012c0:	00e4      	lsls	r4, r4, #3
 80012c2:	431c      	orrs	r4, r3
 80012c4:	00ff      	lsls	r7, r7, #3
 80012c6:	4e30      	ldr	r6, [pc, #192]	; (8001388 <__aeabi_dadd+0x618>)
 80012c8:	e5d6      	b.n	8000e78 <__aeabi_dadd+0x108>
 80012ca:	000c      	movs	r4, r1
 80012cc:	0017      	movs	r7, r2
 80012ce:	0006      	movs	r6, r0
 80012d0:	e5d2      	b.n	8000e78 <__aeabi_dadd+0x108>
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d038      	beq.n	8001348 <__aeabi_dadd+0x5d8>
 80012d6:	000b      	movs	r3, r1
 80012d8:	4313      	orrs	r3, r2
 80012da:	d100      	bne.n	80012de <__aeabi_dadd+0x56e>
 80012dc:	e742      	b.n	8001164 <__aeabi_dadd+0x3f4>
 80012de:	08f8      	lsrs	r0, r7, #3
 80012e0:	0767      	lsls	r7, r4, #29
 80012e2:	4307      	orrs	r7, r0
 80012e4:	2080      	movs	r0, #128	; 0x80
 80012e6:	08e4      	lsrs	r4, r4, #3
 80012e8:	0300      	lsls	r0, r0, #12
 80012ea:	4204      	tst	r4, r0
 80012ec:	d0e7      	beq.n	80012be <__aeabi_dadd+0x54e>
 80012ee:	08cb      	lsrs	r3, r1, #3
 80012f0:	4203      	tst	r3, r0
 80012f2:	d1e4      	bne.n	80012be <__aeabi_dadd+0x54e>
 80012f4:	08d2      	lsrs	r2, r2, #3
 80012f6:	0749      	lsls	r1, r1, #29
 80012f8:	4311      	orrs	r1, r2
 80012fa:	000f      	movs	r7, r1
 80012fc:	001c      	movs	r4, r3
 80012fe:	e7de      	b.n	80012be <__aeabi_dadd+0x54e>
 8001300:	2700      	movs	r7, #0
 8001302:	2400      	movs	r4, #0
 8001304:	e5d5      	b.n	8000eb2 <__aeabi_dadd+0x142>
 8001306:	2100      	movs	r1, #0
 8001308:	e76b      	b.n	80011e2 <__aeabi_dadd+0x472>
 800130a:	2500      	movs	r5, #0
 800130c:	2700      	movs	r7, #0
 800130e:	e5f3      	b.n	8000ef8 <__aeabi_dadd+0x188>
 8001310:	464e      	mov	r6, r9
 8001312:	0025      	movs	r5, r4
 8001314:	3e20      	subs	r6, #32
 8001316:	40f5      	lsrs	r5, r6
 8001318:	464b      	mov	r3, r9
 800131a:	002e      	movs	r6, r5
 800131c:	2b20      	cmp	r3, #32
 800131e:	d02d      	beq.n	800137c <__aeabi_dadd+0x60c>
 8001320:	2540      	movs	r5, #64	; 0x40
 8001322:	1aed      	subs	r5, r5, r3
 8001324:	40ac      	lsls	r4, r5
 8001326:	4327      	orrs	r7, r4
 8001328:	1e7c      	subs	r4, r7, #1
 800132a:	41a7      	sbcs	r7, r4
 800132c:	2400      	movs	r4, #0
 800132e:	4337      	orrs	r7, r6
 8001330:	e6c9      	b.n	80010c6 <__aeabi_dadd+0x356>
 8001332:	2480      	movs	r4, #128	; 0x80
 8001334:	2500      	movs	r5, #0
 8001336:	0324      	lsls	r4, r4, #12
 8001338:	4e13      	ldr	r6, [pc, #76]	; (8001388 <__aeabi_dadd+0x618>)
 800133a:	2700      	movs	r7, #0
 800133c:	e5dc      	b.n	8000ef8 <__aeabi_dadd+0x188>
 800133e:	4327      	orrs	r7, r4
 8001340:	1e7c      	subs	r4, r7, #1
 8001342:	41a7      	sbcs	r7, r4
 8001344:	2400      	movs	r4, #0
 8001346:	e779      	b.n	800123c <__aeabi_dadd+0x4cc>
 8001348:	000c      	movs	r4, r1
 800134a:	0017      	movs	r7, r2
 800134c:	4e0e      	ldr	r6, [pc, #56]	; (8001388 <__aeabi_dadd+0x618>)
 800134e:	e593      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001350:	000c      	movs	r4, r1
 8001352:	0017      	movs	r7, r2
 8001354:	e590      	b.n	8000e78 <__aeabi_dadd+0x108>
 8001356:	4656      	mov	r6, sl
 8001358:	0023      	movs	r3, r4
 800135a:	3e20      	subs	r6, #32
 800135c:	40f3      	lsrs	r3, r6
 800135e:	4699      	mov	r9, r3
 8001360:	4653      	mov	r3, sl
 8001362:	2b20      	cmp	r3, #32
 8001364:	d00e      	beq.n	8001384 <__aeabi_dadd+0x614>
 8001366:	2340      	movs	r3, #64	; 0x40
 8001368:	4656      	mov	r6, sl
 800136a:	1b9b      	subs	r3, r3, r6
 800136c:	409c      	lsls	r4, r3
 800136e:	4327      	orrs	r7, r4
 8001370:	1e7c      	subs	r4, r7, #1
 8001372:	41a7      	sbcs	r7, r4
 8001374:	464b      	mov	r3, r9
 8001376:	2400      	movs	r4, #0
 8001378:	431f      	orrs	r7, r3
 800137a:	e75f      	b.n	800123c <__aeabi_dadd+0x4cc>
 800137c:	2400      	movs	r4, #0
 800137e:	e7d2      	b.n	8001326 <__aeabi_dadd+0x5b6>
 8001380:	0017      	movs	r7, r2
 8001382:	e5b2      	b.n	8000eea <__aeabi_dadd+0x17a>
 8001384:	2400      	movs	r4, #0
 8001386:	e7f2      	b.n	800136e <__aeabi_dadd+0x5fe>
 8001388:	000007ff 	.word	0x000007ff
 800138c:	ff7fffff 	.word	0xff7fffff

08001390 <__eqdf2>:
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	464f      	mov	r7, r9
 8001394:	4646      	mov	r6, r8
 8001396:	46d6      	mov	lr, sl
 8001398:	005c      	lsls	r4, r3, #1
 800139a:	b5c0      	push	{r6, r7, lr}
 800139c:	031f      	lsls	r7, r3, #12
 800139e:	0fdb      	lsrs	r3, r3, #31
 80013a0:	469a      	mov	sl, r3
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <__eqdf2+0x70>)
 80013a4:	030e      	lsls	r6, r1, #12
 80013a6:	004d      	lsls	r5, r1, #1
 80013a8:	4684      	mov	ip, r0
 80013aa:	4680      	mov	r8, r0
 80013ac:	0b36      	lsrs	r6, r6, #12
 80013ae:	0d6d      	lsrs	r5, r5, #21
 80013b0:	0fc9      	lsrs	r1, r1, #31
 80013b2:	4691      	mov	r9, r2
 80013b4:	0b3f      	lsrs	r7, r7, #12
 80013b6:	0d64      	lsrs	r4, r4, #21
 80013b8:	2001      	movs	r0, #1
 80013ba:	429d      	cmp	r5, r3
 80013bc:	d008      	beq.n	80013d0 <__eqdf2+0x40>
 80013be:	429c      	cmp	r4, r3
 80013c0:	d001      	beq.n	80013c6 <__eqdf2+0x36>
 80013c2:	42a5      	cmp	r5, r4
 80013c4:	d00b      	beq.n	80013de <__eqdf2+0x4e>
 80013c6:	bc1c      	pop	{r2, r3, r4}
 80013c8:	4690      	mov	r8, r2
 80013ca:	4699      	mov	r9, r3
 80013cc:	46a2      	mov	sl, r4
 80013ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d0:	4663      	mov	r3, ip
 80013d2:	4333      	orrs	r3, r6
 80013d4:	d1f7      	bne.n	80013c6 <__eqdf2+0x36>
 80013d6:	42ac      	cmp	r4, r5
 80013d8:	d1f5      	bne.n	80013c6 <__eqdf2+0x36>
 80013da:	433a      	orrs	r2, r7
 80013dc:	d1f3      	bne.n	80013c6 <__eqdf2+0x36>
 80013de:	2001      	movs	r0, #1
 80013e0:	42be      	cmp	r6, r7
 80013e2:	d1f0      	bne.n	80013c6 <__eqdf2+0x36>
 80013e4:	45c8      	cmp	r8, r9
 80013e6:	d1ee      	bne.n	80013c6 <__eqdf2+0x36>
 80013e8:	4551      	cmp	r1, sl
 80013ea:	d007      	beq.n	80013fc <__eqdf2+0x6c>
 80013ec:	2d00      	cmp	r5, #0
 80013ee:	d1ea      	bne.n	80013c6 <__eqdf2+0x36>
 80013f0:	4663      	mov	r3, ip
 80013f2:	431e      	orrs	r6, r3
 80013f4:	0030      	movs	r0, r6
 80013f6:	1e46      	subs	r6, r0, #1
 80013f8:	41b0      	sbcs	r0, r6
 80013fa:	e7e4      	b.n	80013c6 <__eqdf2+0x36>
 80013fc:	2000      	movs	r0, #0
 80013fe:	e7e2      	b.n	80013c6 <__eqdf2+0x36>
 8001400:	000007ff 	.word	0x000007ff

08001404 <__gedf2>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4645      	mov	r5, r8
 8001408:	46de      	mov	lr, fp
 800140a:	4657      	mov	r7, sl
 800140c:	464e      	mov	r6, r9
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	031f      	lsls	r7, r3, #12
 8001412:	0b3d      	lsrs	r5, r7, #12
 8001414:	4f2c      	ldr	r7, [pc, #176]	; (80014c8 <__gedf2+0xc4>)
 8001416:	030e      	lsls	r6, r1, #12
 8001418:	004c      	lsls	r4, r1, #1
 800141a:	46ab      	mov	fp, r5
 800141c:	005d      	lsls	r5, r3, #1
 800141e:	4684      	mov	ip, r0
 8001420:	0b36      	lsrs	r6, r6, #12
 8001422:	0d64      	lsrs	r4, r4, #21
 8001424:	0fc9      	lsrs	r1, r1, #31
 8001426:	4690      	mov	r8, r2
 8001428:	0d6d      	lsrs	r5, r5, #21
 800142a:	0fdb      	lsrs	r3, r3, #31
 800142c:	42bc      	cmp	r4, r7
 800142e:	d02a      	beq.n	8001486 <__gedf2+0x82>
 8001430:	4f25      	ldr	r7, [pc, #148]	; (80014c8 <__gedf2+0xc4>)
 8001432:	42bd      	cmp	r5, r7
 8001434:	d02d      	beq.n	8001492 <__gedf2+0x8e>
 8001436:	2c00      	cmp	r4, #0
 8001438:	d10f      	bne.n	800145a <__gedf2+0x56>
 800143a:	4330      	orrs	r0, r6
 800143c:	0007      	movs	r7, r0
 800143e:	4681      	mov	r9, r0
 8001440:	4278      	negs	r0, r7
 8001442:	4178      	adcs	r0, r7
 8001444:	b2c0      	uxtb	r0, r0
 8001446:	2d00      	cmp	r5, #0
 8001448:	d117      	bne.n	800147a <__gedf2+0x76>
 800144a:	465f      	mov	r7, fp
 800144c:	433a      	orrs	r2, r7
 800144e:	d114      	bne.n	800147a <__gedf2+0x76>
 8001450:	464b      	mov	r3, r9
 8001452:	2000      	movs	r0, #0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00a      	beq.n	800146e <__gedf2+0x6a>
 8001458:	e006      	b.n	8001468 <__gedf2+0x64>
 800145a:	2d00      	cmp	r5, #0
 800145c:	d102      	bne.n	8001464 <__gedf2+0x60>
 800145e:	4658      	mov	r0, fp
 8001460:	4302      	orrs	r2, r0
 8001462:	d001      	beq.n	8001468 <__gedf2+0x64>
 8001464:	4299      	cmp	r1, r3
 8001466:	d018      	beq.n	800149a <__gedf2+0x96>
 8001468:	4248      	negs	r0, r1
 800146a:	2101      	movs	r1, #1
 800146c:	4308      	orrs	r0, r1
 800146e:	bc3c      	pop	{r2, r3, r4, r5}
 8001470:	4690      	mov	r8, r2
 8001472:	4699      	mov	r9, r3
 8001474:	46a2      	mov	sl, r4
 8001476:	46ab      	mov	fp, r5
 8001478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800147a:	2800      	cmp	r0, #0
 800147c:	d0f2      	beq.n	8001464 <__gedf2+0x60>
 800147e:	2001      	movs	r0, #1
 8001480:	3b01      	subs	r3, #1
 8001482:	4318      	orrs	r0, r3
 8001484:	e7f3      	b.n	800146e <__gedf2+0x6a>
 8001486:	0037      	movs	r7, r6
 8001488:	4307      	orrs	r7, r0
 800148a:	d0d1      	beq.n	8001430 <__gedf2+0x2c>
 800148c:	2002      	movs	r0, #2
 800148e:	4240      	negs	r0, r0
 8001490:	e7ed      	b.n	800146e <__gedf2+0x6a>
 8001492:	465f      	mov	r7, fp
 8001494:	4317      	orrs	r7, r2
 8001496:	d0ce      	beq.n	8001436 <__gedf2+0x32>
 8001498:	e7f8      	b.n	800148c <__gedf2+0x88>
 800149a:	42ac      	cmp	r4, r5
 800149c:	dce4      	bgt.n	8001468 <__gedf2+0x64>
 800149e:	da03      	bge.n	80014a8 <__gedf2+0xa4>
 80014a0:	1e48      	subs	r0, r1, #1
 80014a2:	2101      	movs	r1, #1
 80014a4:	4308      	orrs	r0, r1
 80014a6:	e7e2      	b.n	800146e <__gedf2+0x6a>
 80014a8:	455e      	cmp	r6, fp
 80014aa:	d8dd      	bhi.n	8001468 <__gedf2+0x64>
 80014ac:	d006      	beq.n	80014bc <__gedf2+0xb8>
 80014ae:	2000      	movs	r0, #0
 80014b0:	455e      	cmp	r6, fp
 80014b2:	d2dc      	bcs.n	800146e <__gedf2+0x6a>
 80014b4:	2301      	movs	r3, #1
 80014b6:	1e48      	subs	r0, r1, #1
 80014b8:	4318      	orrs	r0, r3
 80014ba:	e7d8      	b.n	800146e <__gedf2+0x6a>
 80014bc:	45c4      	cmp	ip, r8
 80014be:	d8d3      	bhi.n	8001468 <__gedf2+0x64>
 80014c0:	2000      	movs	r0, #0
 80014c2:	45c4      	cmp	ip, r8
 80014c4:	d3f6      	bcc.n	80014b4 <__gedf2+0xb0>
 80014c6:	e7d2      	b.n	800146e <__gedf2+0x6a>
 80014c8:	000007ff 	.word	0x000007ff

080014cc <__ledf2>:
 80014cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ce:	464e      	mov	r6, r9
 80014d0:	4645      	mov	r5, r8
 80014d2:	46de      	mov	lr, fp
 80014d4:	4657      	mov	r7, sl
 80014d6:	005c      	lsls	r4, r3, #1
 80014d8:	b5e0      	push	{r5, r6, r7, lr}
 80014da:	031f      	lsls	r7, r3, #12
 80014dc:	0fdb      	lsrs	r3, r3, #31
 80014de:	4699      	mov	r9, r3
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <__ledf2+0xc0>)
 80014e2:	030e      	lsls	r6, r1, #12
 80014e4:	004d      	lsls	r5, r1, #1
 80014e6:	0fc9      	lsrs	r1, r1, #31
 80014e8:	4684      	mov	ip, r0
 80014ea:	0b36      	lsrs	r6, r6, #12
 80014ec:	0d6d      	lsrs	r5, r5, #21
 80014ee:	468b      	mov	fp, r1
 80014f0:	4690      	mov	r8, r2
 80014f2:	0b3f      	lsrs	r7, r7, #12
 80014f4:	0d64      	lsrs	r4, r4, #21
 80014f6:	429d      	cmp	r5, r3
 80014f8:	d020      	beq.n	800153c <__ledf2+0x70>
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <__ledf2+0xc0>)
 80014fc:	429c      	cmp	r4, r3
 80014fe:	d022      	beq.n	8001546 <__ledf2+0x7a>
 8001500:	2d00      	cmp	r5, #0
 8001502:	d112      	bne.n	800152a <__ledf2+0x5e>
 8001504:	4330      	orrs	r0, r6
 8001506:	4243      	negs	r3, r0
 8001508:	4143      	adcs	r3, r0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2c00      	cmp	r4, #0
 800150e:	d01f      	beq.n	8001550 <__ledf2+0x84>
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00c      	beq.n	800152e <__ledf2+0x62>
 8001514:	464b      	mov	r3, r9
 8001516:	2001      	movs	r0, #1
 8001518:	3b01      	subs	r3, #1
 800151a:	4303      	orrs	r3, r0
 800151c:	0018      	movs	r0, r3
 800151e:	bc3c      	pop	{r2, r3, r4, r5}
 8001520:	4690      	mov	r8, r2
 8001522:	4699      	mov	r9, r3
 8001524:	46a2      	mov	sl, r4
 8001526:	46ab      	mov	fp, r5
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152a:	2c00      	cmp	r4, #0
 800152c:	d016      	beq.n	800155c <__ledf2+0x90>
 800152e:	45cb      	cmp	fp, r9
 8001530:	d017      	beq.n	8001562 <__ledf2+0x96>
 8001532:	465b      	mov	r3, fp
 8001534:	4259      	negs	r1, r3
 8001536:	2301      	movs	r3, #1
 8001538:	430b      	orrs	r3, r1
 800153a:	e7ef      	b.n	800151c <__ledf2+0x50>
 800153c:	0031      	movs	r1, r6
 800153e:	2302      	movs	r3, #2
 8001540:	4301      	orrs	r1, r0
 8001542:	d1eb      	bne.n	800151c <__ledf2+0x50>
 8001544:	e7d9      	b.n	80014fa <__ledf2+0x2e>
 8001546:	0039      	movs	r1, r7
 8001548:	2302      	movs	r3, #2
 800154a:	4311      	orrs	r1, r2
 800154c:	d1e6      	bne.n	800151c <__ledf2+0x50>
 800154e:	e7d7      	b.n	8001500 <__ledf2+0x34>
 8001550:	433a      	orrs	r2, r7
 8001552:	d1dd      	bne.n	8001510 <__ledf2+0x44>
 8001554:	2300      	movs	r3, #0
 8001556:	2800      	cmp	r0, #0
 8001558:	d0e0      	beq.n	800151c <__ledf2+0x50>
 800155a:	e7ea      	b.n	8001532 <__ledf2+0x66>
 800155c:	433a      	orrs	r2, r7
 800155e:	d1e6      	bne.n	800152e <__ledf2+0x62>
 8001560:	e7e7      	b.n	8001532 <__ledf2+0x66>
 8001562:	42a5      	cmp	r5, r4
 8001564:	dce5      	bgt.n	8001532 <__ledf2+0x66>
 8001566:	db05      	blt.n	8001574 <__ledf2+0xa8>
 8001568:	42be      	cmp	r6, r7
 800156a:	d8e2      	bhi.n	8001532 <__ledf2+0x66>
 800156c:	d007      	beq.n	800157e <__ledf2+0xb2>
 800156e:	2300      	movs	r3, #0
 8001570:	42be      	cmp	r6, r7
 8001572:	d2d3      	bcs.n	800151c <__ledf2+0x50>
 8001574:	4659      	mov	r1, fp
 8001576:	2301      	movs	r3, #1
 8001578:	3901      	subs	r1, #1
 800157a:	430b      	orrs	r3, r1
 800157c:	e7ce      	b.n	800151c <__ledf2+0x50>
 800157e:	45c4      	cmp	ip, r8
 8001580:	d8d7      	bhi.n	8001532 <__ledf2+0x66>
 8001582:	2300      	movs	r3, #0
 8001584:	45c4      	cmp	ip, r8
 8001586:	d3f5      	bcc.n	8001574 <__ledf2+0xa8>
 8001588:	e7c8      	b.n	800151c <__ledf2+0x50>
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	000007ff 	.word	0x000007ff

08001590 <__aeabi_dmul>:
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	4657      	mov	r7, sl
 8001594:	4645      	mov	r5, r8
 8001596:	46de      	mov	lr, fp
 8001598:	464e      	mov	r6, r9
 800159a:	b5e0      	push	{r5, r6, r7, lr}
 800159c:	030c      	lsls	r4, r1, #12
 800159e:	4698      	mov	r8, r3
 80015a0:	004e      	lsls	r6, r1, #1
 80015a2:	0b23      	lsrs	r3, r4, #12
 80015a4:	b087      	sub	sp, #28
 80015a6:	0007      	movs	r7, r0
 80015a8:	4692      	mov	sl, r2
 80015aa:	469b      	mov	fp, r3
 80015ac:	0d76      	lsrs	r6, r6, #21
 80015ae:	0fcd      	lsrs	r5, r1, #31
 80015b0:	2e00      	cmp	r6, #0
 80015b2:	d06b      	beq.n	800168c <__aeabi_dmul+0xfc>
 80015b4:	4b6d      	ldr	r3, [pc, #436]	; (800176c <__aeabi_dmul+0x1dc>)
 80015b6:	429e      	cmp	r6, r3
 80015b8:	d035      	beq.n	8001626 <__aeabi_dmul+0x96>
 80015ba:	2480      	movs	r4, #128	; 0x80
 80015bc:	465b      	mov	r3, fp
 80015be:	0f42      	lsrs	r2, r0, #29
 80015c0:	0424      	lsls	r4, r4, #16
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4314      	orrs	r4, r2
 80015c6:	431c      	orrs	r4, r3
 80015c8:	00c3      	lsls	r3, r0, #3
 80015ca:	4699      	mov	r9, r3
 80015cc:	4b68      	ldr	r3, [pc, #416]	; (8001770 <__aeabi_dmul+0x1e0>)
 80015ce:	46a3      	mov	fp, r4
 80015d0:	469c      	mov	ip, r3
 80015d2:	2300      	movs	r3, #0
 80015d4:	2700      	movs	r7, #0
 80015d6:	4466      	add	r6, ip
 80015d8:	9302      	str	r3, [sp, #8]
 80015da:	4643      	mov	r3, r8
 80015dc:	031c      	lsls	r4, r3, #12
 80015de:	005a      	lsls	r2, r3, #1
 80015e0:	0fdb      	lsrs	r3, r3, #31
 80015e2:	4650      	mov	r0, sl
 80015e4:	0b24      	lsrs	r4, r4, #12
 80015e6:	0d52      	lsrs	r2, r2, #21
 80015e8:	4698      	mov	r8, r3
 80015ea:	d100      	bne.n	80015ee <__aeabi_dmul+0x5e>
 80015ec:	e076      	b.n	80016dc <__aeabi_dmul+0x14c>
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <__aeabi_dmul+0x1dc>)
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d06d      	beq.n	80016d0 <__aeabi_dmul+0x140>
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	0f41      	lsrs	r1, r0, #29
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	430b      	orrs	r3, r1
 80015fc:	495c      	ldr	r1, [pc, #368]	; (8001770 <__aeabi_dmul+0x1e0>)
 80015fe:	00e4      	lsls	r4, r4, #3
 8001600:	468c      	mov	ip, r1
 8001602:	431c      	orrs	r4, r3
 8001604:	00c3      	lsls	r3, r0, #3
 8001606:	2000      	movs	r0, #0
 8001608:	4462      	add	r2, ip
 800160a:	4641      	mov	r1, r8
 800160c:	18b6      	adds	r6, r6, r2
 800160e:	4069      	eors	r1, r5
 8001610:	1c72      	adds	r2, r6, #1
 8001612:	9101      	str	r1, [sp, #4]
 8001614:	4694      	mov	ip, r2
 8001616:	4307      	orrs	r7, r0
 8001618:	2f0f      	cmp	r7, #15
 800161a:	d900      	bls.n	800161e <__aeabi_dmul+0x8e>
 800161c:	e0b0      	b.n	8001780 <__aeabi_dmul+0x1f0>
 800161e:	4a55      	ldr	r2, [pc, #340]	; (8001774 <__aeabi_dmul+0x1e4>)
 8001620:	00bf      	lsls	r7, r7, #2
 8001622:	59d2      	ldr	r2, [r2, r7]
 8001624:	4697      	mov	pc, r2
 8001626:	465b      	mov	r3, fp
 8001628:	4303      	orrs	r3, r0
 800162a:	4699      	mov	r9, r3
 800162c:	d000      	beq.n	8001630 <__aeabi_dmul+0xa0>
 800162e:	e087      	b.n	8001740 <__aeabi_dmul+0x1b0>
 8001630:	2300      	movs	r3, #0
 8001632:	469b      	mov	fp, r3
 8001634:	3302      	adds	r3, #2
 8001636:	2708      	movs	r7, #8
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	e7ce      	b.n	80015da <__aeabi_dmul+0x4a>
 800163c:	4642      	mov	r2, r8
 800163e:	9201      	str	r2, [sp, #4]
 8001640:	2802      	cmp	r0, #2
 8001642:	d067      	beq.n	8001714 <__aeabi_dmul+0x184>
 8001644:	2803      	cmp	r0, #3
 8001646:	d100      	bne.n	800164a <__aeabi_dmul+0xba>
 8001648:	e20e      	b.n	8001a68 <__aeabi_dmul+0x4d8>
 800164a:	2801      	cmp	r0, #1
 800164c:	d000      	beq.n	8001650 <__aeabi_dmul+0xc0>
 800164e:	e162      	b.n	8001916 <__aeabi_dmul+0x386>
 8001650:	2300      	movs	r3, #0
 8001652:	2400      	movs	r4, #0
 8001654:	2200      	movs	r2, #0
 8001656:	4699      	mov	r9, r3
 8001658:	9901      	ldr	r1, [sp, #4]
 800165a:	4001      	ands	r1, r0
 800165c:	b2cd      	uxtb	r5, r1
 800165e:	2100      	movs	r1, #0
 8001660:	0312      	lsls	r2, r2, #12
 8001662:	0d0b      	lsrs	r3, r1, #20
 8001664:	0b12      	lsrs	r2, r2, #12
 8001666:	051b      	lsls	r3, r3, #20
 8001668:	4313      	orrs	r3, r2
 800166a:	4a43      	ldr	r2, [pc, #268]	; (8001778 <__aeabi_dmul+0x1e8>)
 800166c:	0524      	lsls	r4, r4, #20
 800166e:	4013      	ands	r3, r2
 8001670:	431c      	orrs	r4, r3
 8001672:	0064      	lsls	r4, r4, #1
 8001674:	07ed      	lsls	r5, r5, #31
 8001676:	0864      	lsrs	r4, r4, #1
 8001678:	432c      	orrs	r4, r5
 800167a:	4648      	mov	r0, r9
 800167c:	0021      	movs	r1, r4
 800167e:	b007      	add	sp, #28
 8001680:	bc3c      	pop	{r2, r3, r4, r5}
 8001682:	4690      	mov	r8, r2
 8001684:	4699      	mov	r9, r3
 8001686:	46a2      	mov	sl, r4
 8001688:	46ab      	mov	fp, r5
 800168a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168c:	4303      	orrs	r3, r0
 800168e:	4699      	mov	r9, r3
 8001690:	d04f      	beq.n	8001732 <__aeabi_dmul+0x1a2>
 8001692:	465b      	mov	r3, fp
 8001694:	2b00      	cmp	r3, #0
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x10a>
 8001698:	e189      	b.n	80019ae <__aeabi_dmul+0x41e>
 800169a:	4658      	mov	r0, fp
 800169c:	f000 fed2 	bl	8002444 <__clzsi2>
 80016a0:	0003      	movs	r3, r0
 80016a2:	3b0b      	subs	r3, #11
 80016a4:	2b1c      	cmp	r3, #28
 80016a6:	dd00      	ble.n	80016aa <__aeabi_dmul+0x11a>
 80016a8:	e17a      	b.n	80019a0 <__aeabi_dmul+0x410>
 80016aa:	221d      	movs	r2, #29
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	003a      	movs	r2, r7
 80016b0:	0001      	movs	r1, r0
 80016b2:	465c      	mov	r4, fp
 80016b4:	40da      	lsrs	r2, r3
 80016b6:	3908      	subs	r1, #8
 80016b8:	408c      	lsls	r4, r1
 80016ba:	0013      	movs	r3, r2
 80016bc:	408f      	lsls	r7, r1
 80016be:	4323      	orrs	r3, r4
 80016c0:	469b      	mov	fp, r3
 80016c2:	46b9      	mov	r9, r7
 80016c4:	2300      	movs	r3, #0
 80016c6:	4e2d      	ldr	r6, [pc, #180]	; (800177c <__aeabi_dmul+0x1ec>)
 80016c8:	2700      	movs	r7, #0
 80016ca:	1a36      	subs	r6, r6, r0
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	e784      	b.n	80015da <__aeabi_dmul+0x4a>
 80016d0:	4653      	mov	r3, sl
 80016d2:	4323      	orrs	r3, r4
 80016d4:	d12a      	bne.n	800172c <__aeabi_dmul+0x19c>
 80016d6:	2400      	movs	r4, #0
 80016d8:	2002      	movs	r0, #2
 80016da:	e796      	b.n	800160a <__aeabi_dmul+0x7a>
 80016dc:	4653      	mov	r3, sl
 80016de:	4323      	orrs	r3, r4
 80016e0:	d020      	beq.n	8001724 <__aeabi_dmul+0x194>
 80016e2:	2c00      	cmp	r4, #0
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dmul+0x158>
 80016e6:	e157      	b.n	8001998 <__aeabi_dmul+0x408>
 80016e8:	0020      	movs	r0, r4
 80016ea:	f000 feab 	bl	8002444 <__clzsi2>
 80016ee:	0003      	movs	r3, r0
 80016f0:	3b0b      	subs	r3, #11
 80016f2:	2b1c      	cmp	r3, #28
 80016f4:	dd00      	ble.n	80016f8 <__aeabi_dmul+0x168>
 80016f6:	e149      	b.n	800198c <__aeabi_dmul+0x3fc>
 80016f8:	211d      	movs	r1, #29
 80016fa:	1acb      	subs	r3, r1, r3
 80016fc:	4651      	mov	r1, sl
 80016fe:	0002      	movs	r2, r0
 8001700:	40d9      	lsrs	r1, r3
 8001702:	4653      	mov	r3, sl
 8001704:	3a08      	subs	r2, #8
 8001706:	4094      	lsls	r4, r2
 8001708:	4093      	lsls	r3, r2
 800170a:	430c      	orrs	r4, r1
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <__aeabi_dmul+0x1ec>)
 800170e:	1a12      	subs	r2, r2, r0
 8001710:	2000      	movs	r0, #0
 8001712:	e77a      	b.n	800160a <__aeabi_dmul+0x7a>
 8001714:	2501      	movs	r5, #1
 8001716:	9b01      	ldr	r3, [sp, #4]
 8001718:	4c14      	ldr	r4, [pc, #80]	; (800176c <__aeabi_dmul+0x1dc>)
 800171a:	401d      	ands	r5, r3
 800171c:	2300      	movs	r3, #0
 800171e:	2200      	movs	r2, #0
 8001720:	4699      	mov	r9, r3
 8001722:	e79c      	b.n	800165e <__aeabi_dmul+0xce>
 8001724:	2400      	movs	r4, #0
 8001726:	2200      	movs	r2, #0
 8001728:	2001      	movs	r0, #1
 800172a:	e76e      	b.n	800160a <__aeabi_dmul+0x7a>
 800172c:	4653      	mov	r3, sl
 800172e:	2003      	movs	r0, #3
 8001730:	e76b      	b.n	800160a <__aeabi_dmul+0x7a>
 8001732:	2300      	movs	r3, #0
 8001734:	469b      	mov	fp, r3
 8001736:	3301      	adds	r3, #1
 8001738:	2704      	movs	r7, #4
 800173a:	2600      	movs	r6, #0
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	e74c      	b.n	80015da <__aeabi_dmul+0x4a>
 8001740:	2303      	movs	r3, #3
 8001742:	4681      	mov	r9, r0
 8001744:	270c      	movs	r7, #12
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	e747      	b.n	80015da <__aeabi_dmul+0x4a>
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	2300      	movs	r3, #0
 800174e:	2500      	movs	r5, #0
 8001750:	0312      	lsls	r2, r2, #12
 8001752:	4699      	mov	r9, r3
 8001754:	4c05      	ldr	r4, [pc, #20]	; (800176c <__aeabi_dmul+0x1dc>)
 8001756:	e782      	b.n	800165e <__aeabi_dmul+0xce>
 8001758:	465c      	mov	r4, fp
 800175a:	464b      	mov	r3, r9
 800175c:	9802      	ldr	r0, [sp, #8]
 800175e:	e76f      	b.n	8001640 <__aeabi_dmul+0xb0>
 8001760:	465c      	mov	r4, fp
 8001762:	464b      	mov	r3, r9
 8001764:	9501      	str	r5, [sp, #4]
 8001766:	9802      	ldr	r0, [sp, #8]
 8001768:	e76a      	b.n	8001640 <__aeabi_dmul+0xb0>
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	000007ff 	.word	0x000007ff
 8001770:	fffffc01 	.word	0xfffffc01
 8001774:	0800a484 	.word	0x0800a484
 8001778:	800fffff 	.word	0x800fffff
 800177c:	fffffc0d 	.word	0xfffffc0d
 8001780:	464a      	mov	r2, r9
 8001782:	4649      	mov	r1, r9
 8001784:	0c17      	lsrs	r7, r2, #16
 8001786:	0c1a      	lsrs	r2, r3, #16
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	0408      	lsls	r0, r1, #16
 800178e:	0019      	movs	r1, r3
 8001790:	0c00      	lsrs	r0, r0, #16
 8001792:	4341      	muls	r1, r0
 8001794:	0015      	movs	r5, r2
 8001796:	4688      	mov	r8, r1
 8001798:	0019      	movs	r1, r3
 800179a:	437d      	muls	r5, r7
 800179c:	4379      	muls	r1, r7
 800179e:	9503      	str	r5, [sp, #12]
 80017a0:	4689      	mov	r9, r1
 80017a2:	0029      	movs	r1, r5
 80017a4:	0015      	movs	r5, r2
 80017a6:	4345      	muls	r5, r0
 80017a8:	444d      	add	r5, r9
 80017aa:	9502      	str	r5, [sp, #8]
 80017ac:	4645      	mov	r5, r8
 80017ae:	0c2d      	lsrs	r5, r5, #16
 80017b0:	46aa      	mov	sl, r5
 80017b2:	9d02      	ldr	r5, [sp, #8]
 80017b4:	4455      	add	r5, sl
 80017b6:	45a9      	cmp	r9, r5
 80017b8:	d906      	bls.n	80017c8 <__aeabi_dmul+0x238>
 80017ba:	468a      	mov	sl, r1
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	0249      	lsls	r1, r1, #9
 80017c0:	4689      	mov	r9, r1
 80017c2:	44ca      	add	sl, r9
 80017c4:	4651      	mov	r1, sl
 80017c6:	9103      	str	r1, [sp, #12]
 80017c8:	0c29      	lsrs	r1, r5, #16
 80017ca:	9104      	str	r1, [sp, #16]
 80017cc:	4641      	mov	r1, r8
 80017ce:	0409      	lsls	r1, r1, #16
 80017d0:	042d      	lsls	r5, r5, #16
 80017d2:	0c09      	lsrs	r1, r1, #16
 80017d4:	4688      	mov	r8, r1
 80017d6:	0029      	movs	r1, r5
 80017d8:	0c25      	lsrs	r5, r4, #16
 80017da:	0424      	lsls	r4, r4, #16
 80017dc:	4441      	add	r1, r8
 80017de:	0c24      	lsrs	r4, r4, #16
 80017e0:	9105      	str	r1, [sp, #20]
 80017e2:	0021      	movs	r1, r4
 80017e4:	4341      	muls	r1, r0
 80017e6:	4688      	mov	r8, r1
 80017e8:	0021      	movs	r1, r4
 80017ea:	4379      	muls	r1, r7
 80017ec:	468a      	mov	sl, r1
 80017ee:	4368      	muls	r0, r5
 80017f0:	4641      	mov	r1, r8
 80017f2:	4450      	add	r0, sl
 80017f4:	4681      	mov	r9, r0
 80017f6:	0c08      	lsrs	r0, r1, #16
 80017f8:	4448      	add	r0, r9
 80017fa:	436f      	muls	r7, r5
 80017fc:	4582      	cmp	sl, r0
 80017fe:	d903      	bls.n	8001808 <__aeabi_dmul+0x278>
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	0249      	lsls	r1, r1, #9
 8001804:	4689      	mov	r9, r1
 8001806:	444f      	add	r7, r9
 8001808:	0c01      	lsrs	r1, r0, #16
 800180a:	4689      	mov	r9, r1
 800180c:	0039      	movs	r1, r7
 800180e:	4449      	add	r1, r9
 8001810:	9102      	str	r1, [sp, #8]
 8001812:	4641      	mov	r1, r8
 8001814:	040f      	lsls	r7, r1, #16
 8001816:	9904      	ldr	r1, [sp, #16]
 8001818:	0c3f      	lsrs	r7, r7, #16
 800181a:	4688      	mov	r8, r1
 800181c:	0400      	lsls	r0, r0, #16
 800181e:	19c0      	adds	r0, r0, r7
 8001820:	4480      	add	r8, r0
 8001822:	4641      	mov	r1, r8
 8001824:	9104      	str	r1, [sp, #16]
 8001826:	4659      	mov	r1, fp
 8001828:	0c0f      	lsrs	r7, r1, #16
 800182a:	0409      	lsls	r1, r1, #16
 800182c:	0c09      	lsrs	r1, r1, #16
 800182e:	4688      	mov	r8, r1
 8001830:	4359      	muls	r1, r3
 8001832:	468a      	mov	sl, r1
 8001834:	0039      	movs	r1, r7
 8001836:	4351      	muls	r1, r2
 8001838:	4689      	mov	r9, r1
 800183a:	4641      	mov	r1, r8
 800183c:	434a      	muls	r2, r1
 800183e:	4651      	mov	r1, sl
 8001840:	0c09      	lsrs	r1, r1, #16
 8001842:	468b      	mov	fp, r1
 8001844:	437b      	muls	r3, r7
 8001846:	18d2      	adds	r2, r2, r3
 8001848:	445a      	add	r2, fp
 800184a:	4293      	cmp	r3, r2
 800184c:	d903      	bls.n	8001856 <__aeabi_dmul+0x2c6>
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	025b      	lsls	r3, r3, #9
 8001852:	469b      	mov	fp, r3
 8001854:	44d9      	add	r9, fp
 8001856:	4651      	mov	r1, sl
 8001858:	0409      	lsls	r1, r1, #16
 800185a:	0c09      	lsrs	r1, r1, #16
 800185c:	468a      	mov	sl, r1
 800185e:	4641      	mov	r1, r8
 8001860:	4361      	muls	r1, r4
 8001862:	437c      	muls	r4, r7
 8001864:	0c13      	lsrs	r3, r2, #16
 8001866:	0412      	lsls	r2, r2, #16
 8001868:	444b      	add	r3, r9
 800186a:	4452      	add	r2, sl
 800186c:	46a1      	mov	r9, r4
 800186e:	468a      	mov	sl, r1
 8001870:	003c      	movs	r4, r7
 8001872:	4641      	mov	r1, r8
 8001874:	436c      	muls	r4, r5
 8001876:	434d      	muls	r5, r1
 8001878:	4651      	mov	r1, sl
 800187a:	444d      	add	r5, r9
 800187c:	0c0f      	lsrs	r7, r1, #16
 800187e:	197d      	adds	r5, r7, r5
 8001880:	45a9      	cmp	r9, r5
 8001882:	d903      	bls.n	800188c <__aeabi_dmul+0x2fc>
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0249      	lsls	r1, r1, #9
 8001888:	4688      	mov	r8, r1
 800188a:	4444      	add	r4, r8
 800188c:	9f04      	ldr	r7, [sp, #16]
 800188e:	9903      	ldr	r1, [sp, #12]
 8001890:	46b8      	mov	r8, r7
 8001892:	4441      	add	r1, r8
 8001894:	468b      	mov	fp, r1
 8001896:	4583      	cmp	fp, r0
 8001898:	4180      	sbcs	r0, r0
 800189a:	4241      	negs	r1, r0
 800189c:	4688      	mov	r8, r1
 800189e:	4651      	mov	r1, sl
 80018a0:	0408      	lsls	r0, r1, #16
 80018a2:	042f      	lsls	r7, r5, #16
 80018a4:	0c00      	lsrs	r0, r0, #16
 80018a6:	183f      	adds	r7, r7, r0
 80018a8:	4658      	mov	r0, fp
 80018aa:	9902      	ldr	r1, [sp, #8]
 80018ac:	1810      	adds	r0, r2, r0
 80018ae:	4689      	mov	r9, r1
 80018b0:	4290      	cmp	r0, r2
 80018b2:	4192      	sbcs	r2, r2
 80018b4:	444f      	add	r7, r9
 80018b6:	46ba      	mov	sl, r7
 80018b8:	4252      	negs	r2, r2
 80018ba:	4699      	mov	r9, r3
 80018bc:	4693      	mov	fp, r2
 80018be:	44c2      	add	sl, r8
 80018c0:	44d1      	add	r9, sl
 80018c2:	44cb      	add	fp, r9
 80018c4:	428f      	cmp	r7, r1
 80018c6:	41bf      	sbcs	r7, r7
 80018c8:	45c2      	cmp	sl, r8
 80018ca:	4189      	sbcs	r1, r1
 80018cc:	4599      	cmp	r9, r3
 80018ce:	419b      	sbcs	r3, r3
 80018d0:	4593      	cmp	fp, r2
 80018d2:	4192      	sbcs	r2, r2
 80018d4:	427f      	negs	r7, r7
 80018d6:	4249      	negs	r1, r1
 80018d8:	0c2d      	lsrs	r5, r5, #16
 80018da:	4252      	negs	r2, r2
 80018dc:	430f      	orrs	r7, r1
 80018de:	425b      	negs	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	197f      	adds	r7, r7, r5
 80018e4:	18ff      	adds	r7, r7, r3
 80018e6:	465b      	mov	r3, fp
 80018e8:	193c      	adds	r4, r7, r4
 80018ea:	0ddb      	lsrs	r3, r3, #23
 80018ec:	9a05      	ldr	r2, [sp, #20]
 80018ee:	0264      	lsls	r4, r4, #9
 80018f0:	431c      	orrs	r4, r3
 80018f2:	0243      	lsls	r3, r0, #9
 80018f4:	4313      	orrs	r3, r2
 80018f6:	1e5d      	subs	r5, r3, #1
 80018f8:	41ab      	sbcs	r3, r5
 80018fa:	465a      	mov	r2, fp
 80018fc:	0dc0      	lsrs	r0, r0, #23
 80018fe:	4303      	orrs	r3, r0
 8001900:	0252      	lsls	r2, r2, #9
 8001902:	4313      	orrs	r3, r2
 8001904:	01e2      	lsls	r2, r4, #7
 8001906:	d556      	bpl.n	80019b6 <__aeabi_dmul+0x426>
 8001908:	2001      	movs	r0, #1
 800190a:	085a      	lsrs	r2, r3, #1
 800190c:	4003      	ands	r3, r0
 800190e:	4313      	orrs	r3, r2
 8001910:	07e2      	lsls	r2, r4, #31
 8001912:	4313      	orrs	r3, r2
 8001914:	0864      	lsrs	r4, r4, #1
 8001916:	485a      	ldr	r0, [pc, #360]	; (8001a80 <__aeabi_dmul+0x4f0>)
 8001918:	4460      	add	r0, ip
 800191a:	2800      	cmp	r0, #0
 800191c:	dd4d      	ble.n	80019ba <__aeabi_dmul+0x42a>
 800191e:	075a      	lsls	r2, r3, #29
 8001920:	d009      	beq.n	8001936 <__aeabi_dmul+0x3a6>
 8001922:	220f      	movs	r2, #15
 8001924:	401a      	ands	r2, r3
 8001926:	2a04      	cmp	r2, #4
 8001928:	d005      	beq.n	8001936 <__aeabi_dmul+0x3a6>
 800192a:	1d1a      	adds	r2, r3, #4
 800192c:	429a      	cmp	r2, r3
 800192e:	419b      	sbcs	r3, r3
 8001930:	425b      	negs	r3, r3
 8001932:	18e4      	adds	r4, r4, r3
 8001934:	0013      	movs	r3, r2
 8001936:	01e2      	lsls	r2, r4, #7
 8001938:	d504      	bpl.n	8001944 <__aeabi_dmul+0x3b4>
 800193a:	2080      	movs	r0, #128	; 0x80
 800193c:	4a51      	ldr	r2, [pc, #324]	; (8001a84 <__aeabi_dmul+0x4f4>)
 800193e:	00c0      	lsls	r0, r0, #3
 8001940:	4014      	ands	r4, r2
 8001942:	4460      	add	r0, ip
 8001944:	4a50      	ldr	r2, [pc, #320]	; (8001a88 <__aeabi_dmul+0x4f8>)
 8001946:	4290      	cmp	r0, r2
 8001948:	dd00      	ble.n	800194c <__aeabi_dmul+0x3bc>
 800194a:	e6e3      	b.n	8001714 <__aeabi_dmul+0x184>
 800194c:	2501      	movs	r5, #1
 800194e:	08db      	lsrs	r3, r3, #3
 8001950:	0762      	lsls	r2, r4, #29
 8001952:	431a      	orrs	r2, r3
 8001954:	0264      	lsls	r4, r4, #9
 8001956:	9b01      	ldr	r3, [sp, #4]
 8001958:	4691      	mov	r9, r2
 800195a:	0b22      	lsrs	r2, r4, #12
 800195c:	0544      	lsls	r4, r0, #21
 800195e:	0d64      	lsrs	r4, r4, #21
 8001960:	401d      	ands	r5, r3
 8001962:	e67c      	b.n	800165e <__aeabi_dmul+0xce>
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	4659      	mov	r1, fp
 8001968:	0312      	lsls	r2, r2, #12
 800196a:	4211      	tst	r1, r2
 800196c:	d008      	beq.n	8001980 <__aeabi_dmul+0x3f0>
 800196e:	4214      	tst	r4, r2
 8001970:	d106      	bne.n	8001980 <__aeabi_dmul+0x3f0>
 8001972:	4322      	orrs	r2, r4
 8001974:	0312      	lsls	r2, r2, #12
 8001976:	0b12      	lsrs	r2, r2, #12
 8001978:	4645      	mov	r5, r8
 800197a:	4699      	mov	r9, r3
 800197c:	4c43      	ldr	r4, [pc, #268]	; (8001a8c <__aeabi_dmul+0x4fc>)
 800197e:	e66e      	b.n	800165e <__aeabi_dmul+0xce>
 8001980:	465b      	mov	r3, fp
 8001982:	431a      	orrs	r2, r3
 8001984:	0312      	lsls	r2, r2, #12
 8001986:	0b12      	lsrs	r2, r2, #12
 8001988:	4c40      	ldr	r4, [pc, #256]	; (8001a8c <__aeabi_dmul+0x4fc>)
 800198a:	e668      	b.n	800165e <__aeabi_dmul+0xce>
 800198c:	0003      	movs	r3, r0
 800198e:	4654      	mov	r4, sl
 8001990:	3b28      	subs	r3, #40	; 0x28
 8001992:	409c      	lsls	r4, r3
 8001994:	2300      	movs	r3, #0
 8001996:	e6b9      	b.n	800170c <__aeabi_dmul+0x17c>
 8001998:	f000 fd54 	bl	8002444 <__clzsi2>
 800199c:	3020      	adds	r0, #32
 800199e:	e6a6      	b.n	80016ee <__aeabi_dmul+0x15e>
 80019a0:	0003      	movs	r3, r0
 80019a2:	3b28      	subs	r3, #40	; 0x28
 80019a4:	409f      	lsls	r7, r3
 80019a6:	2300      	movs	r3, #0
 80019a8:	46bb      	mov	fp, r7
 80019aa:	4699      	mov	r9, r3
 80019ac:	e68a      	b.n	80016c4 <__aeabi_dmul+0x134>
 80019ae:	f000 fd49 	bl	8002444 <__clzsi2>
 80019b2:	3020      	adds	r0, #32
 80019b4:	e674      	b.n	80016a0 <__aeabi_dmul+0x110>
 80019b6:	46b4      	mov	ip, r6
 80019b8:	e7ad      	b.n	8001916 <__aeabi_dmul+0x386>
 80019ba:	2501      	movs	r5, #1
 80019bc:	1a2a      	subs	r2, r5, r0
 80019be:	2a38      	cmp	r2, #56	; 0x38
 80019c0:	dd06      	ble.n	80019d0 <__aeabi_dmul+0x440>
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	2400      	movs	r4, #0
 80019c6:	401d      	ands	r5, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	2200      	movs	r2, #0
 80019cc:	4699      	mov	r9, r3
 80019ce:	e646      	b.n	800165e <__aeabi_dmul+0xce>
 80019d0:	2a1f      	cmp	r2, #31
 80019d2:	dc21      	bgt.n	8001a18 <__aeabi_dmul+0x488>
 80019d4:	2520      	movs	r5, #32
 80019d6:	0020      	movs	r0, r4
 80019d8:	1aad      	subs	r5, r5, r2
 80019da:	001e      	movs	r6, r3
 80019dc:	40ab      	lsls	r3, r5
 80019de:	40a8      	lsls	r0, r5
 80019e0:	40d6      	lsrs	r6, r2
 80019e2:	1e5d      	subs	r5, r3, #1
 80019e4:	41ab      	sbcs	r3, r5
 80019e6:	4330      	orrs	r0, r6
 80019e8:	4318      	orrs	r0, r3
 80019ea:	40d4      	lsrs	r4, r2
 80019ec:	0743      	lsls	r3, r0, #29
 80019ee:	d009      	beq.n	8001a04 <__aeabi_dmul+0x474>
 80019f0:	230f      	movs	r3, #15
 80019f2:	4003      	ands	r3, r0
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d005      	beq.n	8001a04 <__aeabi_dmul+0x474>
 80019f8:	0003      	movs	r3, r0
 80019fa:	1d18      	adds	r0, r3, #4
 80019fc:	4298      	cmp	r0, r3
 80019fe:	419b      	sbcs	r3, r3
 8001a00:	425b      	negs	r3, r3
 8001a02:	18e4      	adds	r4, r4, r3
 8001a04:	0223      	lsls	r3, r4, #8
 8001a06:	d521      	bpl.n	8001a4c <__aeabi_dmul+0x4bc>
 8001a08:	2501      	movs	r5, #1
 8001a0a:	9b01      	ldr	r3, [sp, #4]
 8001a0c:	2401      	movs	r4, #1
 8001a0e:	401d      	ands	r5, r3
 8001a10:	2300      	movs	r3, #0
 8001a12:	2200      	movs	r2, #0
 8001a14:	4699      	mov	r9, r3
 8001a16:	e622      	b.n	800165e <__aeabi_dmul+0xce>
 8001a18:	251f      	movs	r5, #31
 8001a1a:	0021      	movs	r1, r4
 8001a1c:	426d      	negs	r5, r5
 8001a1e:	1a28      	subs	r0, r5, r0
 8001a20:	40c1      	lsrs	r1, r0
 8001a22:	0008      	movs	r0, r1
 8001a24:	2a20      	cmp	r2, #32
 8001a26:	d01d      	beq.n	8001a64 <__aeabi_dmul+0x4d4>
 8001a28:	355f      	adds	r5, #95	; 0x5f
 8001a2a:	1aaa      	subs	r2, r5, r2
 8001a2c:	4094      	lsls	r4, r2
 8001a2e:	4323      	orrs	r3, r4
 8001a30:	1e5c      	subs	r4, r3, #1
 8001a32:	41a3      	sbcs	r3, r4
 8001a34:	2507      	movs	r5, #7
 8001a36:	4303      	orrs	r3, r0
 8001a38:	401d      	ands	r5, r3
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2d00      	cmp	r5, #0
 8001a3e:	d009      	beq.n	8001a54 <__aeabi_dmul+0x4c4>
 8001a40:	220f      	movs	r2, #15
 8001a42:	2400      	movs	r4, #0
 8001a44:	401a      	ands	r2, r3
 8001a46:	0018      	movs	r0, r3
 8001a48:	2a04      	cmp	r2, #4
 8001a4a:	d1d6      	bne.n	80019fa <__aeabi_dmul+0x46a>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	0765      	lsls	r5, r4, #29
 8001a50:	0264      	lsls	r4, r4, #9
 8001a52:	0b22      	lsrs	r2, r4, #12
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	432b      	orrs	r3, r5
 8001a58:	2501      	movs	r5, #1
 8001a5a:	4699      	mov	r9, r3
 8001a5c:	9b01      	ldr	r3, [sp, #4]
 8001a5e:	2400      	movs	r4, #0
 8001a60:	401d      	ands	r5, r3
 8001a62:	e5fc      	b.n	800165e <__aeabi_dmul+0xce>
 8001a64:	2400      	movs	r4, #0
 8001a66:	e7e2      	b.n	8001a2e <__aeabi_dmul+0x49e>
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	2501      	movs	r5, #1
 8001a6c:	0312      	lsls	r2, r2, #12
 8001a6e:	4322      	orrs	r2, r4
 8001a70:	9901      	ldr	r1, [sp, #4]
 8001a72:	0312      	lsls	r2, r2, #12
 8001a74:	0b12      	lsrs	r2, r2, #12
 8001a76:	400d      	ands	r5, r1
 8001a78:	4699      	mov	r9, r3
 8001a7a:	4c04      	ldr	r4, [pc, #16]	; (8001a8c <__aeabi_dmul+0x4fc>)
 8001a7c:	e5ef      	b.n	800165e <__aeabi_dmul+0xce>
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	000003ff 	.word	0x000003ff
 8001a84:	feffffff 	.word	0xfeffffff
 8001a88:	000007fe 	.word	0x000007fe
 8001a8c:	000007ff 	.word	0x000007ff

08001a90 <__aeabi_dsub>:
 8001a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a92:	4646      	mov	r6, r8
 8001a94:	46d6      	mov	lr, sl
 8001a96:	464f      	mov	r7, r9
 8001a98:	030c      	lsls	r4, r1, #12
 8001a9a:	b5c0      	push	{r6, r7, lr}
 8001a9c:	0fcd      	lsrs	r5, r1, #31
 8001a9e:	004e      	lsls	r6, r1, #1
 8001aa0:	0a61      	lsrs	r1, r4, #9
 8001aa2:	0f44      	lsrs	r4, r0, #29
 8001aa4:	430c      	orrs	r4, r1
 8001aa6:	00c1      	lsls	r1, r0, #3
 8001aa8:	0058      	lsls	r0, r3, #1
 8001aaa:	0d40      	lsrs	r0, r0, #21
 8001aac:	4684      	mov	ip, r0
 8001aae:	468a      	mov	sl, r1
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	0319      	lsls	r1, r3, #12
 8001ab4:	0f50      	lsrs	r0, r2, #29
 8001ab6:	0a49      	lsrs	r1, r1, #9
 8001ab8:	4301      	orrs	r1, r0
 8001aba:	48c6      	ldr	r0, [pc, #792]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001abc:	0d76      	lsrs	r6, r6, #21
 8001abe:	46a8      	mov	r8, r5
 8001ac0:	0fdb      	lsrs	r3, r3, #31
 8001ac2:	00d2      	lsls	r2, r2, #3
 8001ac4:	4584      	cmp	ip, r0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x3a>
 8001ac8:	e0d8      	b.n	8001c7c <__aeabi_dsub+0x1ec>
 8001aca:	2001      	movs	r0, #1
 8001acc:	4043      	eors	r3, r0
 8001ace:	42ab      	cmp	r3, r5
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x44>
 8001ad2:	e0a6      	b.n	8001c22 <__aeabi_dsub+0x192>
 8001ad4:	4660      	mov	r0, ip
 8001ad6:	1a35      	subs	r5, r6, r0
 8001ad8:	2d00      	cmp	r5, #0
 8001ada:	dc00      	bgt.n	8001ade <__aeabi_dsub+0x4e>
 8001adc:	e105      	b.n	8001cea <__aeabi_dsub+0x25a>
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	d110      	bne.n	8001b04 <__aeabi_dsub+0x74>
 8001ae2:	000b      	movs	r3, r1
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dsub+0x5a>
 8001ae8:	e0d7      	b.n	8001c9a <__aeabi_dsub+0x20a>
 8001aea:	1e6b      	subs	r3, r5, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d000      	beq.n	8001af2 <__aeabi_dsub+0x62>
 8001af0:	e14b      	b.n	8001d8a <__aeabi_dsub+0x2fa>
 8001af2:	4653      	mov	r3, sl
 8001af4:	1a9f      	subs	r7, r3, r2
 8001af6:	45ba      	cmp	sl, r7
 8001af8:	4180      	sbcs	r0, r0
 8001afa:	1a64      	subs	r4, r4, r1
 8001afc:	4240      	negs	r0, r0
 8001afe:	1a24      	subs	r4, r4, r0
 8001b00:	2601      	movs	r6, #1
 8001b02:	e01e      	b.n	8001b42 <__aeabi_dsub+0xb2>
 8001b04:	4bb3      	ldr	r3, [pc, #716]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001b06:	429e      	cmp	r6, r3
 8001b08:	d048      	beq.n	8001b9c <__aeabi_dsub+0x10c>
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	4319      	orrs	r1, r3
 8001b10:	2d38      	cmp	r5, #56	; 0x38
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0x86>
 8001b14:	e119      	b.n	8001d4a <__aeabi_dsub+0x2ba>
 8001b16:	2d1f      	cmp	r5, #31
 8001b18:	dd00      	ble.n	8001b1c <__aeabi_dsub+0x8c>
 8001b1a:	e14c      	b.n	8001db6 <__aeabi_dsub+0x326>
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	000f      	movs	r7, r1
 8001b20:	1b5b      	subs	r3, r3, r5
 8001b22:	0010      	movs	r0, r2
 8001b24:	409a      	lsls	r2, r3
 8001b26:	409f      	lsls	r7, r3
 8001b28:	40e8      	lsrs	r0, r5
 8001b2a:	1e53      	subs	r3, r2, #1
 8001b2c:	419a      	sbcs	r2, r3
 8001b2e:	40e9      	lsrs	r1, r5
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4317      	orrs	r7, r2
 8001b34:	4653      	mov	r3, sl
 8001b36:	1bdf      	subs	r7, r3, r7
 8001b38:	1a61      	subs	r1, r4, r1
 8001b3a:	45ba      	cmp	sl, r7
 8001b3c:	41a4      	sbcs	r4, r4
 8001b3e:	4264      	negs	r4, r4
 8001b40:	1b0c      	subs	r4, r1, r4
 8001b42:	0223      	lsls	r3, r4, #8
 8001b44:	d400      	bmi.n	8001b48 <__aeabi_dsub+0xb8>
 8001b46:	e0c5      	b.n	8001cd4 <__aeabi_dsub+0x244>
 8001b48:	0264      	lsls	r4, r4, #9
 8001b4a:	0a65      	lsrs	r5, r4, #9
 8001b4c:	2d00      	cmp	r5, #0
 8001b4e:	d100      	bne.n	8001b52 <__aeabi_dsub+0xc2>
 8001b50:	e0f6      	b.n	8001d40 <__aeabi_dsub+0x2b0>
 8001b52:	0028      	movs	r0, r5
 8001b54:	f000 fc76 	bl	8002444 <__clzsi2>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	3b08      	subs	r3, #8
 8001b5c:	2b1f      	cmp	r3, #31
 8001b5e:	dd00      	ble.n	8001b62 <__aeabi_dsub+0xd2>
 8001b60:	e0e9      	b.n	8001d36 <__aeabi_dsub+0x2a6>
 8001b62:	2220      	movs	r2, #32
 8001b64:	003c      	movs	r4, r7
 8001b66:	1ad2      	subs	r2, r2, r3
 8001b68:	409d      	lsls	r5, r3
 8001b6a:	40d4      	lsrs	r4, r2
 8001b6c:	409f      	lsls	r7, r3
 8001b6e:	4325      	orrs	r5, r4
 8001b70:	429e      	cmp	r6, r3
 8001b72:	dd00      	ble.n	8001b76 <__aeabi_dsub+0xe6>
 8001b74:	e0db      	b.n	8001d2e <__aeabi_dsub+0x29e>
 8001b76:	1b9e      	subs	r6, r3, r6
 8001b78:	1c73      	adds	r3, r6, #1
 8001b7a:	2b1f      	cmp	r3, #31
 8001b7c:	dd00      	ble.n	8001b80 <__aeabi_dsub+0xf0>
 8001b7e:	e10a      	b.n	8001d96 <__aeabi_dsub+0x306>
 8001b80:	2220      	movs	r2, #32
 8001b82:	0038      	movs	r0, r7
 8001b84:	1ad2      	subs	r2, r2, r3
 8001b86:	0029      	movs	r1, r5
 8001b88:	4097      	lsls	r7, r2
 8001b8a:	002c      	movs	r4, r5
 8001b8c:	4091      	lsls	r1, r2
 8001b8e:	40d8      	lsrs	r0, r3
 8001b90:	1e7a      	subs	r2, r7, #1
 8001b92:	4197      	sbcs	r7, r2
 8001b94:	40dc      	lsrs	r4, r3
 8001b96:	2600      	movs	r6, #0
 8001b98:	4301      	orrs	r1, r0
 8001b9a:	430f      	orrs	r7, r1
 8001b9c:	077b      	lsls	r3, r7, #29
 8001b9e:	d009      	beq.n	8001bb4 <__aeabi_dsub+0x124>
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	403b      	ands	r3, r7
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d005      	beq.n	8001bb4 <__aeabi_dsub+0x124>
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	42bb      	cmp	r3, r7
 8001bac:	41bf      	sbcs	r7, r7
 8001bae:	427f      	negs	r7, r7
 8001bb0:	19e4      	adds	r4, r4, r7
 8001bb2:	001f      	movs	r7, r3
 8001bb4:	0223      	lsls	r3, r4, #8
 8001bb6:	d525      	bpl.n	8001c04 <__aeabi_dsub+0x174>
 8001bb8:	4b86      	ldr	r3, [pc, #536]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001bba:	3601      	adds	r6, #1
 8001bbc:	429e      	cmp	r6, r3
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dsub+0x132>
 8001bc0:	e0af      	b.n	8001d22 <__aeabi_dsub+0x292>
 8001bc2:	4b85      	ldr	r3, [pc, #532]	; (8001dd8 <__aeabi_dsub+0x348>)
 8001bc4:	2501      	movs	r5, #1
 8001bc6:	401c      	ands	r4, r3
 8001bc8:	4643      	mov	r3, r8
 8001bca:	0762      	lsls	r2, r4, #29
 8001bcc:	08ff      	lsrs	r7, r7, #3
 8001bce:	0264      	lsls	r4, r4, #9
 8001bd0:	0576      	lsls	r6, r6, #21
 8001bd2:	4317      	orrs	r7, r2
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	0d76      	lsrs	r6, r6, #21
 8001bd8:	401d      	ands	r5, r3
 8001bda:	2100      	movs	r1, #0
 8001bdc:	0324      	lsls	r4, r4, #12
 8001bde:	0b23      	lsrs	r3, r4, #12
 8001be0:	0d0c      	lsrs	r4, r1, #20
 8001be2:	4a7e      	ldr	r2, [pc, #504]	; (8001ddc <__aeabi_dsub+0x34c>)
 8001be4:	0524      	lsls	r4, r4, #20
 8001be6:	431c      	orrs	r4, r3
 8001be8:	4014      	ands	r4, r2
 8001bea:	0533      	lsls	r3, r6, #20
 8001bec:	4323      	orrs	r3, r4
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	07ed      	lsls	r5, r5, #31
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	432b      	orrs	r3, r5
 8001bf6:	0038      	movs	r0, r7
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	bc1c      	pop	{r2, r3, r4}
 8001bfc:	4690      	mov	r8, r2
 8001bfe:	4699      	mov	r9, r3
 8001c00:	46a2      	mov	sl, r4
 8001c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c04:	2501      	movs	r5, #1
 8001c06:	4643      	mov	r3, r8
 8001c08:	0762      	lsls	r2, r4, #29
 8001c0a:	08ff      	lsrs	r7, r7, #3
 8001c0c:	4317      	orrs	r7, r2
 8001c0e:	08e4      	lsrs	r4, r4, #3
 8001c10:	401d      	ands	r5, r3
 8001c12:	4b70      	ldr	r3, [pc, #448]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001c14:	429e      	cmp	r6, r3
 8001c16:	d036      	beq.n	8001c86 <__aeabi_dsub+0x1f6>
 8001c18:	0324      	lsls	r4, r4, #12
 8001c1a:	0576      	lsls	r6, r6, #21
 8001c1c:	0b24      	lsrs	r4, r4, #12
 8001c1e:	0d76      	lsrs	r6, r6, #21
 8001c20:	e7db      	b.n	8001bda <__aeabi_dsub+0x14a>
 8001c22:	4663      	mov	r3, ip
 8001c24:	1af3      	subs	r3, r6, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	dc00      	bgt.n	8001c2c <__aeabi_dsub+0x19c>
 8001c2a:	e094      	b.n	8001d56 <__aeabi_dsub+0x2c6>
 8001c2c:	4660      	mov	r0, ip
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	d035      	beq.n	8001c9e <__aeabi_dsub+0x20e>
 8001c32:	4868      	ldr	r0, [pc, #416]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001c34:	4286      	cmp	r6, r0
 8001c36:	d0b1      	beq.n	8001b9c <__aeabi_dsub+0x10c>
 8001c38:	2780      	movs	r7, #128	; 0x80
 8001c3a:	043f      	lsls	r7, r7, #16
 8001c3c:	4339      	orrs	r1, r7
 8001c3e:	2b38      	cmp	r3, #56	; 0x38
 8001c40:	dc00      	bgt.n	8001c44 <__aeabi_dsub+0x1b4>
 8001c42:	e0fd      	b.n	8001e40 <__aeabi_dsub+0x3b0>
 8001c44:	430a      	orrs	r2, r1
 8001c46:	0017      	movs	r7, r2
 8001c48:	2100      	movs	r1, #0
 8001c4a:	1e7a      	subs	r2, r7, #1
 8001c4c:	4197      	sbcs	r7, r2
 8001c4e:	4457      	add	r7, sl
 8001c50:	4557      	cmp	r7, sl
 8001c52:	4180      	sbcs	r0, r0
 8001c54:	1909      	adds	r1, r1, r4
 8001c56:	4244      	negs	r4, r0
 8001c58:	190c      	adds	r4, r1, r4
 8001c5a:	0223      	lsls	r3, r4, #8
 8001c5c:	d53a      	bpl.n	8001cd4 <__aeabi_dsub+0x244>
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001c60:	3601      	adds	r6, #1
 8001c62:	429e      	cmp	r6, r3
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x1d8>
 8001c66:	e14b      	b.n	8001f00 <__aeabi_dsub+0x470>
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	; (8001dd8 <__aeabi_dsub+0x348>)
 8001c6c:	401c      	ands	r4, r3
 8001c6e:	087b      	lsrs	r3, r7, #1
 8001c70:	4017      	ands	r7, r2
 8001c72:	431f      	orrs	r7, r3
 8001c74:	07e2      	lsls	r2, r4, #31
 8001c76:	4317      	orrs	r7, r2
 8001c78:	0864      	lsrs	r4, r4, #1
 8001c7a:	e78f      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001c7c:	0008      	movs	r0, r1
 8001c7e:	4310      	orrs	r0, r2
 8001c80:	d000      	beq.n	8001c84 <__aeabi_dsub+0x1f4>
 8001c82:	e724      	b.n	8001ace <__aeabi_dsub+0x3e>
 8001c84:	e721      	b.n	8001aca <__aeabi_dsub+0x3a>
 8001c86:	0023      	movs	r3, r4
 8001c88:	433b      	orrs	r3, r7
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x1fe>
 8001c8c:	e1b9      	b.n	8002002 <__aeabi_dsub+0x572>
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	0312      	lsls	r2, r2, #12
 8001c92:	4314      	orrs	r4, r2
 8001c94:	0324      	lsls	r4, r4, #12
 8001c96:	0b24      	lsrs	r4, r4, #12
 8001c98:	e79f      	b.n	8001bda <__aeabi_dsub+0x14a>
 8001c9a:	002e      	movs	r6, r5
 8001c9c:	e77e      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001c9e:	0008      	movs	r0, r1
 8001ca0:	4310      	orrs	r0, r2
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_dsub+0x216>
 8001ca4:	e0ca      	b.n	8001e3c <__aeabi_dsub+0x3ac>
 8001ca6:	1e58      	subs	r0, r3, #1
 8001ca8:	4684      	mov	ip, r0
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d000      	beq.n	8001cb0 <__aeabi_dsub+0x220>
 8001cae:	e0e7      	b.n	8001e80 <__aeabi_dsub+0x3f0>
 8001cb0:	4452      	add	r2, sl
 8001cb2:	4552      	cmp	r2, sl
 8001cb4:	4180      	sbcs	r0, r0
 8001cb6:	1864      	adds	r4, r4, r1
 8001cb8:	4240      	negs	r0, r0
 8001cba:	1824      	adds	r4, r4, r0
 8001cbc:	0017      	movs	r7, r2
 8001cbe:	2601      	movs	r6, #1
 8001cc0:	0223      	lsls	r3, r4, #8
 8001cc2:	d507      	bpl.n	8001cd4 <__aeabi_dsub+0x244>
 8001cc4:	2602      	movs	r6, #2
 8001cc6:	e7cf      	b.n	8001c68 <__aeabi_dsub+0x1d8>
 8001cc8:	4664      	mov	r4, ip
 8001cca:	432c      	orrs	r4, r5
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x240>
 8001cce:	e1b3      	b.n	8002038 <__aeabi_dsub+0x5a8>
 8001cd0:	002c      	movs	r4, r5
 8001cd2:	4667      	mov	r7, ip
 8001cd4:	077b      	lsls	r3, r7, #29
 8001cd6:	d000      	beq.n	8001cda <__aeabi_dsub+0x24a>
 8001cd8:	e762      	b.n	8001ba0 <__aeabi_dsub+0x110>
 8001cda:	0763      	lsls	r3, r4, #29
 8001cdc:	08ff      	lsrs	r7, r7, #3
 8001cde:	431f      	orrs	r7, r3
 8001ce0:	2501      	movs	r5, #1
 8001ce2:	4643      	mov	r3, r8
 8001ce4:	08e4      	lsrs	r4, r4, #3
 8001ce6:	401d      	ands	r5, r3
 8001ce8:	e793      	b.n	8001c12 <__aeabi_dsub+0x182>
 8001cea:	2d00      	cmp	r5, #0
 8001cec:	d178      	bne.n	8001de0 <__aeabi_dsub+0x350>
 8001cee:	1c75      	adds	r5, r6, #1
 8001cf0:	056d      	lsls	r5, r5, #21
 8001cf2:	0d6d      	lsrs	r5, r5, #21
 8001cf4:	2d01      	cmp	r5, #1
 8001cf6:	dc00      	bgt.n	8001cfa <__aeabi_dsub+0x26a>
 8001cf8:	e0f2      	b.n	8001ee0 <__aeabi_dsub+0x450>
 8001cfa:	4650      	mov	r0, sl
 8001cfc:	1a80      	subs	r0, r0, r2
 8001cfe:	4582      	cmp	sl, r0
 8001d00:	41bf      	sbcs	r7, r7
 8001d02:	1a65      	subs	r5, r4, r1
 8001d04:	427f      	negs	r7, r7
 8001d06:	1bed      	subs	r5, r5, r7
 8001d08:	4684      	mov	ip, r0
 8001d0a:	0228      	lsls	r0, r5, #8
 8001d0c:	d400      	bmi.n	8001d10 <__aeabi_dsub+0x280>
 8001d0e:	e08c      	b.n	8001e2a <__aeabi_dsub+0x39a>
 8001d10:	4650      	mov	r0, sl
 8001d12:	1a17      	subs	r7, r2, r0
 8001d14:	42ba      	cmp	r2, r7
 8001d16:	4192      	sbcs	r2, r2
 8001d18:	1b0c      	subs	r4, r1, r4
 8001d1a:	4255      	negs	r5, r2
 8001d1c:	1b65      	subs	r5, r4, r5
 8001d1e:	4698      	mov	r8, r3
 8001d20:	e714      	b.n	8001b4c <__aeabi_dsub+0xbc>
 8001d22:	2501      	movs	r5, #1
 8001d24:	4643      	mov	r3, r8
 8001d26:	2400      	movs	r4, #0
 8001d28:	401d      	ands	r5, r3
 8001d2a:	2700      	movs	r7, #0
 8001d2c:	e755      	b.n	8001bda <__aeabi_dsub+0x14a>
 8001d2e:	4c2a      	ldr	r4, [pc, #168]	; (8001dd8 <__aeabi_dsub+0x348>)
 8001d30:	1af6      	subs	r6, r6, r3
 8001d32:	402c      	ands	r4, r5
 8001d34:	e732      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001d36:	003d      	movs	r5, r7
 8001d38:	3828      	subs	r0, #40	; 0x28
 8001d3a:	4085      	lsls	r5, r0
 8001d3c:	2700      	movs	r7, #0
 8001d3e:	e717      	b.n	8001b70 <__aeabi_dsub+0xe0>
 8001d40:	0038      	movs	r0, r7
 8001d42:	f000 fb7f 	bl	8002444 <__clzsi2>
 8001d46:	3020      	adds	r0, #32
 8001d48:	e706      	b.n	8001b58 <__aeabi_dsub+0xc8>
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	0017      	movs	r7, r2
 8001d4e:	2100      	movs	r1, #0
 8001d50:	1e7a      	subs	r2, r7, #1
 8001d52:	4197      	sbcs	r7, r2
 8001d54:	e6ee      	b.n	8001b34 <__aeabi_dsub+0xa4>
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d000      	beq.n	8001d5c <__aeabi_dsub+0x2cc>
 8001d5a:	e0e5      	b.n	8001f28 <__aeabi_dsub+0x498>
 8001d5c:	1c73      	adds	r3, r6, #1
 8001d5e:	469c      	mov	ip, r3
 8001d60:	055b      	lsls	r3, r3, #21
 8001d62:	0d5b      	lsrs	r3, r3, #21
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x2da>
 8001d68:	e09f      	b.n	8001eaa <__aeabi_dsub+0x41a>
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001d6c:	459c      	cmp	ip, r3
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x2e2>
 8001d70:	e0c5      	b.n	8001efe <__aeabi_dsub+0x46e>
 8001d72:	4452      	add	r2, sl
 8001d74:	4552      	cmp	r2, sl
 8001d76:	4180      	sbcs	r0, r0
 8001d78:	1864      	adds	r4, r4, r1
 8001d7a:	4240      	negs	r0, r0
 8001d7c:	1824      	adds	r4, r4, r0
 8001d7e:	07e7      	lsls	r7, r4, #31
 8001d80:	0852      	lsrs	r2, r2, #1
 8001d82:	4317      	orrs	r7, r2
 8001d84:	0864      	lsrs	r4, r4, #1
 8001d86:	4666      	mov	r6, ip
 8001d88:	e708      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001d8a:	4812      	ldr	r0, [pc, #72]	; (8001dd4 <__aeabi_dsub+0x344>)
 8001d8c:	4285      	cmp	r5, r0
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dsub+0x302>
 8001d90:	e085      	b.n	8001e9e <__aeabi_dsub+0x40e>
 8001d92:	001d      	movs	r5, r3
 8001d94:	e6bc      	b.n	8001b10 <__aeabi_dsub+0x80>
 8001d96:	0029      	movs	r1, r5
 8001d98:	3e1f      	subs	r6, #31
 8001d9a:	40f1      	lsrs	r1, r6
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x312>
 8001da0:	e07f      	b.n	8001ea2 <__aeabi_dsub+0x412>
 8001da2:	2240      	movs	r2, #64	; 0x40
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	409d      	lsls	r5, r3
 8001da8:	432f      	orrs	r7, r5
 8001daa:	1e7d      	subs	r5, r7, #1
 8001dac:	41af      	sbcs	r7, r5
 8001dae:	2400      	movs	r4, #0
 8001db0:	430f      	orrs	r7, r1
 8001db2:	2600      	movs	r6, #0
 8001db4:	e78e      	b.n	8001cd4 <__aeabi_dsub+0x244>
 8001db6:	002b      	movs	r3, r5
 8001db8:	000f      	movs	r7, r1
 8001dba:	3b20      	subs	r3, #32
 8001dbc:	40df      	lsrs	r7, r3
 8001dbe:	2d20      	cmp	r5, #32
 8001dc0:	d071      	beq.n	8001ea6 <__aeabi_dsub+0x416>
 8001dc2:	2340      	movs	r3, #64	; 0x40
 8001dc4:	1b5d      	subs	r5, r3, r5
 8001dc6:	40a9      	lsls	r1, r5
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	1e51      	subs	r1, r2, #1
 8001dcc:	418a      	sbcs	r2, r1
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4317      	orrs	r7, r2
 8001dd2:	e6af      	b.n	8001b34 <__aeabi_dsub+0xa4>
 8001dd4:	000007ff 	.word	0x000007ff
 8001dd8:	ff7fffff 	.word	0xff7fffff
 8001ddc:	800fffff 	.word	0x800fffff
 8001de0:	2e00      	cmp	r6, #0
 8001de2:	d03e      	beq.n	8001e62 <__aeabi_dsub+0x3d2>
 8001de4:	4eb3      	ldr	r6, [pc, #716]	; (80020b4 <__aeabi_dsub+0x624>)
 8001de6:	45b4      	cmp	ip, r6
 8001de8:	d045      	beq.n	8001e76 <__aeabi_dsub+0x3e6>
 8001dea:	2680      	movs	r6, #128	; 0x80
 8001dec:	0436      	lsls	r6, r6, #16
 8001dee:	426d      	negs	r5, r5
 8001df0:	4334      	orrs	r4, r6
 8001df2:	2d38      	cmp	r5, #56	; 0x38
 8001df4:	dd00      	ble.n	8001df8 <__aeabi_dsub+0x368>
 8001df6:	e0a8      	b.n	8001f4a <__aeabi_dsub+0x4ba>
 8001df8:	2d1f      	cmp	r5, #31
 8001dfa:	dd00      	ble.n	8001dfe <__aeabi_dsub+0x36e>
 8001dfc:	e11f      	b.n	800203e <__aeabi_dsub+0x5ae>
 8001dfe:	2620      	movs	r6, #32
 8001e00:	0027      	movs	r7, r4
 8001e02:	4650      	mov	r0, sl
 8001e04:	1b76      	subs	r6, r6, r5
 8001e06:	40b7      	lsls	r7, r6
 8001e08:	40e8      	lsrs	r0, r5
 8001e0a:	4307      	orrs	r7, r0
 8001e0c:	4650      	mov	r0, sl
 8001e0e:	40b0      	lsls	r0, r6
 8001e10:	1e46      	subs	r6, r0, #1
 8001e12:	41b0      	sbcs	r0, r6
 8001e14:	40ec      	lsrs	r4, r5
 8001e16:	4338      	orrs	r0, r7
 8001e18:	1a17      	subs	r7, r2, r0
 8001e1a:	42ba      	cmp	r2, r7
 8001e1c:	4192      	sbcs	r2, r2
 8001e1e:	1b0c      	subs	r4, r1, r4
 8001e20:	4252      	negs	r2, r2
 8001e22:	1aa4      	subs	r4, r4, r2
 8001e24:	4666      	mov	r6, ip
 8001e26:	4698      	mov	r8, r3
 8001e28:	e68b      	b.n	8001b42 <__aeabi_dsub+0xb2>
 8001e2a:	4664      	mov	r4, ip
 8001e2c:	4667      	mov	r7, ip
 8001e2e:	432c      	orrs	r4, r5
 8001e30:	d000      	beq.n	8001e34 <__aeabi_dsub+0x3a4>
 8001e32:	e68b      	b.n	8001b4c <__aeabi_dsub+0xbc>
 8001e34:	2500      	movs	r5, #0
 8001e36:	2600      	movs	r6, #0
 8001e38:	2700      	movs	r7, #0
 8001e3a:	e6ea      	b.n	8001c12 <__aeabi_dsub+0x182>
 8001e3c:	001e      	movs	r6, r3
 8001e3e:	e6ad      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001e40:	2b1f      	cmp	r3, #31
 8001e42:	dc60      	bgt.n	8001f06 <__aeabi_dsub+0x476>
 8001e44:	2720      	movs	r7, #32
 8001e46:	1af8      	subs	r0, r7, r3
 8001e48:	000f      	movs	r7, r1
 8001e4a:	4684      	mov	ip, r0
 8001e4c:	4087      	lsls	r7, r0
 8001e4e:	0010      	movs	r0, r2
 8001e50:	40d8      	lsrs	r0, r3
 8001e52:	4307      	orrs	r7, r0
 8001e54:	4660      	mov	r0, ip
 8001e56:	4082      	lsls	r2, r0
 8001e58:	1e50      	subs	r0, r2, #1
 8001e5a:	4182      	sbcs	r2, r0
 8001e5c:	40d9      	lsrs	r1, r3
 8001e5e:	4317      	orrs	r7, r2
 8001e60:	e6f5      	b.n	8001c4e <__aeabi_dsub+0x1be>
 8001e62:	0026      	movs	r6, r4
 8001e64:	4650      	mov	r0, sl
 8001e66:	4306      	orrs	r6, r0
 8001e68:	d005      	beq.n	8001e76 <__aeabi_dsub+0x3e6>
 8001e6a:	43ed      	mvns	r5, r5
 8001e6c:	2d00      	cmp	r5, #0
 8001e6e:	d0d3      	beq.n	8001e18 <__aeabi_dsub+0x388>
 8001e70:	4e90      	ldr	r6, [pc, #576]	; (80020b4 <__aeabi_dsub+0x624>)
 8001e72:	45b4      	cmp	ip, r6
 8001e74:	d1bd      	bne.n	8001df2 <__aeabi_dsub+0x362>
 8001e76:	000c      	movs	r4, r1
 8001e78:	0017      	movs	r7, r2
 8001e7a:	4666      	mov	r6, ip
 8001e7c:	4698      	mov	r8, r3
 8001e7e:	e68d      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001e80:	488c      	ldr	r0, [pc, #560]	; (80020b4 <__aeabi_dsub+0x624>)
 8001e82:	4283      	cmp	r3, r0
 8001e84:	d00b      	beq.n	8001e9e <__aeabi_dsub+0x40e>
 8001e86:	4663      	mov	r3, ip
 8001e88:	e6d9      	b.n	8001c3e <__aeabi_dsub+0x1ae>
 8001e8a:	2d00      	cmp	r5, #0
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x400>
 8001e8e:	e096      	b.n	8001fbe <__aeabi_dsub+0x52e>
 8001e90:	0008      	movs	r0, r1
 8001e92:	4310      	orrs	r0, r2
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dsub+0x408>
 8001e96:	e0e2      	b.n	800205e <__aeabi_dsub+0x5ce>
 8001e98:	000c      	movs	r4, r1
 8001e9a:	0017      	movs	r7, r2
 8001e9c:	4698      	mov	r8, r3
 8001e9e:	4e85      	ldr	r6, [pc, #532]	; (80020b4 <__aeabi_dsub+0x624>)
 8001ea0:	e67c      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001ea2:	2500      	movs	r5, #0
 8001ea4:	e780      	b.n	8001da8 <__aeabi_dsub+0x318>
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	e78e      	b.n	8001dc8 <__aeabi_dsub+0x338>
 8001eaa:	0023      	movs	r3, r4
 8001eac:	4650      	mov	r0, sl
 8001eae:	4303      	orrs	r3, r0
 8001eb0:	2e00      	cmp	r6, #0
 8001eb2:	d000      	beq.n	8001eb6 <__aeabi_dsub+0x426>
 8001eb4:	e0a8      	b.n	8002008 <__aeabi_dsub+0x578>
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dsub+0x42c>
 8001eba:	e0de      	b.n	800207a <__aeabi_dsub+0x5ea>
 8001ebc:	000b      	movs	r3, r1
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x434>
 8001ec2:	e66b      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001ec4:	4452      	add	r2, sl
 8001ec6:	4552      	cmp	r2, sl
 8001ec8:	4180      	sbcs	r0, r0
 8001eca:	1864      	adds	r4, r4, r1
 8001ecc:	4240      	negs	r0, r0
 8001ece:	1824      	adds	r4, r4, r0
 8001ed0:	0017      	movs	r7, r2
 8001ed2:	0223      	lsls	r3, r4, #8
 8001ed4:	d400      	bmi.n	8001ed8 <__aeabi_dsub+0x448>
 8001ed6:	e6fd      	b.n	8001cd4 <__aeabi_dsub+0x244>
 8001ed8:	4b77      	ldr	r3, [pc, #476]	; (80020b8 <__aeabi_dsub+0x628>)
 8001eda:	4666      	mov	r6, ip
 8001edc:	401c      	ands	r4, r3
 8001ede:	e65d      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001ee0:	0025      	movs	r5, r4
 8001ee2:	4650      	mov	r0, sl
 8001ee4:	4305      	orrs	r5, r0
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	d1cf      	bne.n	8001e8a <__aeabi_dsub+0x3fa>
 8001eea:	2d00      	cmp	r5, #0
 8001eec:	d14f      	bne.n	8001f8e <__aeabi_dsub+0x4fe>
 8001eee:	000c      	movs	r4, r1
 8001ef0:	4314      	orrs	r4, r2
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x466>
 8001ef4:	e0a0      	b.n	8002038 <__aeabi_dsub+0x5a8>
 8001ef6:	000c      	movs	r4, r1
 8001ef8:	0017      	movs	r7, r2
 8001efa:	4698      	mov	r8, r3
 8001efc:	e64e      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001efe:	4666      	mov	r6, ip
 8001f00:	2400      	movs	r4, #0
 8001f02:	2700      	movs	r7, #0
 8001f04:	e685      	b.n	8001c12 <__aeabi_dsub+0x182>
 8001f06:	001f      	movs	r7, r3
 8001f08:	0008      	movs	r0, r1
 8001f0a:	3f20      	subs	r7, #32
 8001f0c:	40f8      	lsrs	r0, r7
 8001f0e:	0007      	movs	r7, r0
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d100      	bne.n	8001f16 <__aeabi_dsub+0x486>
 8001f14:	e08e      	b.n	8002034 <__aeabi_dsub+0x5a4>
 8001f16:	2040      	movs	r0, #64	; 0x40
 8001f18:	1ac3      	subs	r3, r0, r3
 8001f1a:	4099      	lsls	r1, r3
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	1e51      	subs	r1, r2, #1
 8001f20:	418a      	sbcs	r2, r1
 8001f22:	2100      	movs	r1, #0
 8001f24:	4317      	orrs	r7, r2
 8001f26:	e692      	b.n	8001c4e <__aeabi_dsub+0x1be>
 8001f28:	2e00      	cmp	r6, #0
 8001f2a:	d114      	bne.n	8001f56 <__aeabi_dsub+0x4c6>
 8001f2c:	0026      	movs	r6, r4
 8001f2e:	4650      	mov	r0, sl
 8001f30:	4306      	orrs	r6, r0
 8001f32:	d062      	beq.n	8001ffa <__aeabi_dsub+0x56a>
 8001f34:	43db      	mvns	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d15c      	bne.n	8001ff4 <__aeabi_dsub+0x564>
 8001f3a:	1887      	adds	r7, r0, r2
 8001f3c:	4297      	cmp	r7, r2
 8001f3e:	4192      	sbcs	r2, r2
 8001f40:	1864      	adds	r4, r4, r1
 8001f42:	4252      	negs	r2, r2
 8001f44:	18a4      	adds	r4, r4, r2
 8001f46:	4666      	mov	r6, ip
 8001f48:	e687      	b.n	8001c5a <__aeabi_dsub+0x1ca>
 8001f4a:	4650      	mov	r0, sl
 8001f4c:	4320      	orrs	r0, r4
 8001f4e:	1e44      	subs	r4, r0, #1
 8001f50:	41a0      	sbcs	r0, r4
 8001f52:	2400      	movs	r4, #0
 8001f54:	e760      	b.n	8001e18 <__aeabi_dsub+0x388>
 8001f56:	4e57      	ldr	r6, [pc, #348]	; (80020b4 <__aeabi_dsub+0x624>)
 8001f58:	45b4      	cmp	ip, r6
 8001f5a:	d04e      	beq.n	8001ffa <__aeabi_dsub+0x56a>
 8001f5c:	2680      	movs	r6, #128	; 0x80
 8001f5e:	0436      	lsls	r6, r6, #16
 8001f60:	425b      	negs	r3, r3
 8001f62:	4334      	orrs	r4, r6
 8001f64:	2b38      	cmp	r3, #56	; 0x38
 8001f66:	dd00      	ble.n	8001f6a <__aeabi_dsub+0x4da>
 8001f68:	e07f      	b.n	800206a <__aeabi_dsub+0x5da>
 8001f6a:	2b1f      	cmp	r3, #31
 8001f6c:	dd00      	ble.n	8001f70 <__aeabi_dsub+0x4e0>
 8001f6e:	e08b      	b.n	8002088 <__aeabi_dsub+0x5f8>
 8001f70:	2620      	movs	r6, #32
 8001f72:	0027      	movs	r7, r4
 8001f74:	4650      	mov	r0, sl
 8001f76:	1af6      	subs	r6, r6, r3
 8001f78:	40b7      	lsls	r7, r6
 8001f7a:	40d8      	lsrs	r0, r3
 8001f7c:	4307      	orrs	r7, r0
 8001f7e:	4650      	mov	r0, sl
 8001f80:	40b0      	lsls	r0, r6
 8001f82:	1e46      	subs	r6, r0, #1
 8001f84:	41b0      	sbcs	r0, r6
 8001f86:	4307      	orrs	r7, r0
 8001f88:	40dc      	lsrs	r4, r3
 8001f8a:	18bf      	adds	r7, r7, r2
 8001f8c:	e7d6      	b.n	8001f3c <__aeabi_dsub+0x4ac>
 8001f8e:	000d      	movs	r5, r1
 8001f90:	4315      	orrs	r5, r2
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dsub+0x506>
 8001f94:	e602      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001f96:	4650      	mov	r0, sl
 8001f98:	1a80      	subs	r0, r0, r2
 8001f9a:	4582      	cmp	sl, r0
 8001f9c:	41bf      	sbcs	r7, r7
 8001f9e:	1a65      	subs	r5, r4, r1
 8001fa0:	427f      	negs	r7, r7
 8001fa2:	1bed      	subs	r5, r5, r7
 8001fa4:	4684      	mov	ip, r0
 8001fa6:	0228      	lsls	r0, r5, #8
 8001fa8:	d400      	bmi.n	8001fac <__aeabi_dsub+0x51c>
 8001faa:	e68d      	b.n	8001cc8 <__aeabi_dsub+0x238>
 8001fac:	4650      	mov	r0, sl
 8001fae:	1a17      	subs	r7, r2, r0
 8001fb0:	42ba      	cmp	r2, r7
 8001fb2:	4192      	sbcs	r2, r2
 8001fb4:	1b0c      	subs	r4, r1, r4
 8001fb6:	4252      	negs	r2, r2
 8001fb8:	1aa4      	subs	r4, r4, r2
 8001fba:	4698      	mov	r8, r3
 8001fbc:	e5ee      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001fbe:	000d      	movs	r5, r1
 8001fc0:	4315      	orrs	r5, r2
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_dsub+0x536>
 8001fc4:	e76b      	b.n	8001e9e <__aeabi_dsub+0x40e>
 8001fc6:	4650      	mov	r0, sl
 8001fc8:	0767      	lsls	r7, r4, #29
 8001fca:	08c0      	lsrs	r0, r0, #3
 8001fcc:	4307      	orrs	r7, r0
 8001fce:	2080      	movs	r0, #128	; 0x80
 8001fd0:	08e4      	lsrs	r4, r4, #3
 8001fd2:	0300      	lsls	r0, r0, #12
 8001fd4:	4204      	tst	r4, r0
 8001fd6:	d007      	beq.n	8001fe8 <__aeabi_dsub+0x558>
 8001fd8:	08cd      	lsrs	r5, r1, #3
 8001fda:	4205      	tst	r5, r0
 8001fdc:	d104      	bne.n	8001fe8 <__aeabi_dsub+0x558>
 8001fde:	002c      	movs	r4, r5
 8001fe0:	4698      	mov	r8, r3
 8001fe2:	08d7      	lsrs	r7, r2, #3
 8001fe4:	0749      	lsls	r1, r1, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	0f7b      	lsrs	r3, r7, #29
 8001fea:	00e4      	lsls	r4, r4, #3
 8001fec:	431c      	orrs	r4, r3
 8001fee:	00ff      	lsls	r7, r7, #3
 8001ff0:	4e30      	ldr	r6, [pc, #192]	; (80020b4 <__aeabi_dsub+0x624>)
 8001ff2:	e5d3      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8001ff4:	4e2f      	ldr	r6, [pc, #188]	; (80020b4 <__aeabi_dsub+0x624>)
 8001ff6:	45b4      	cmp	ip, r6
 8001ff8:	d1b4      	bne.n	8001f64 <__aeabi_dsub+0x4d4>
 8001ffa:	000c      	movs	r4, r1
 8001ffc:	0017      	movs	r7, r2
 8001ffe:	4666      	mov	r6, ip
 8002000:	e5cc      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8002002:	2700      	movs	r7, #0
 8002004:	2400      	movs	r4, #0
 8002006:	e5e8      	b.n	8001bda <__aeabi_dsub+0x14a>
 8002008:	2b00      	cmp	r3, #0
 800200a:	d039      	beq.n	8002080 <__aeabi_dsub+0x5f0>
 800200c:	000b      	movs	r3, r1
 800200e:	4313      	orrs	r3, r2
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x584>
 8002012:	e744      	b.n	8001e9e <__aeabi_dsub+0x40e>
 8002014:	08c0      	lsrs	r0, r0, #3
 8002016:	0767      	lsls	r7, r4, #29
 8002018:	4307      	orrs	r7, r0
 800201a:	2080      	movs	r0, #128	; 0x80
 800201c:	08e4      	lsrs	r4, r4, #3
 800201e:	0300      	lsls	r0, r0, #12
 8002020:	4204      	tst	r4, r0
 8002022:	d0e1      	beq.n	8001fe8 <__aeabi_dsub+0x558>
 8002024:	08cb      	lsrs	r3, r1, #3
 8002026:	4203      	tst	r3, r0
 8002028:	d1de      	bne.n	8001fe8 <__aeabi_dsub+0x558>
 800202a:	08d7      	lsrs	r7, r2, #3
 800202c:	0749      	lsls	r1, r1, #29
 800202e:	430f      	orrs	r7, r1
 8002030:	001c      	movs	r4, r3
 8002032:	e7d9      	b.n	8001fe8 <__aeabi_dsub+0x558>
 8002034:	2100      	movs	r1, #0
 8002036:	e771      	b.n	8001f1c <__aeabi_dsub+0x48c>
 8002038:	2500      	movs	r5, #0
 800203a:	2700      	movs	r7, #0
 800203c:	e5e9      	b.n	8001c12 <__aeabi_dsub+0x182>
 800203e:	002e      	movs	r6, r5
 8002040:	0027      	movs	r7, r4
 8002042:	3e20      	subs	r6, #32
 8002044:	40f7      	lsrs	r7, r6
 8002046:	2d20      	cmp	r5, #32
 8002048:	d02f      	beq.n	80020aa <__aeabi_dsub+0x61a>
 800204a:	2640      	movs	r6, #64	; 0x40
 800204c:	1b75      	subs	r5, r6, r5
 800204e:	40ac      	lsls	r4, r5
 8002050:	4650      	mov	r0, sl
 8002052:	4320      	orrs	r0, r4
 8002054:	1e44      	subs	r4, r0, #1
 8002056:	41a0      	sbcs	r0, r4
 8002058:	2400      	movs	r4, #0
 800205a:	4338      	orrs	r0, r7
 800205c:	e6dc      	b.n	8001e18 <__aeabi_dsub+0x388>
 800205e:	2480      	movs	r4, #128	; 0x80
 8002060:	2500      	movs	r5, #0
 8002062:	0324      	lsls	r4, r4, #12
 8002064:	4e13      	ldr	r6, [pc, #76]	; (80020b4 <__aeabi_dsub+0x624>)
 8002066:	2700      	movs	r7, #0
 8002068:	e5d3      	b.n	8001c12 <__aeabi_dsub+0x182>
 800206a:	4650      	mov	r0, sl
 800206c:	4320      	orrs	r0, r4
 800206e:	0007      	movs	r7, r0
 8002070:	1e78      	subs	r0, r7, #1
 8002072:	4187      	sbcs	r7, r0
 8002074:	2400      	movs	r4, #0
 8002076:	18bf      	adds	r7, r7, r2
 8002078:	e760      	b.n	8001f3c <__aeabi_dsub+0x4ac>
 800207a:	000c      	movs	r4, r1
 800207c:	0017      	movs	r7, r2
 800207e:	e58d      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8002080:	000c      	movs	r4, r1
 8002082:	0017      	movs	r7, r2
 8002084:	4e0b      	ldr	r6, [pc, #44]	; (80020b4 <__aeabi_dsub+0x624>)
 8002086:	e589      	b.n	8001b9c <__aeabi_dsub+0x10c>
 8002088:	001e      	movs	r6, r3
 800208a:	0027      	movs	r7, r4
 800208c:	3e20      	subs	r6, #32
 800208e:	40f7      	lsrs	r7, r6
 8002090:	2b20      	cmp	r3, #32
 8002092:	d00c      	beq.n	80020ae <__aeabi_dsub+0x61e>
 8002094:	2640      	movs	r6, #64	; 0x40
 8002096:	1af3      	subs	r3, r6, r3
 8002098:	409c      	lsls	r4, r3
 800209a:	4650      	mov	r0, sl
 800209c:	4320      	orrs	r0, r4
 800209e:	1e44      	subs	r4, r0, #1
 80020a0:	41a0      	sbcs	r0, r4
 80020a2:	4307      	orrs	r7, r0
 80020a4:	2400      	movs	r4, #0
 80020a6:	18bf      	adds	r7, r7, r2
 80020a8:	e748      	b.n	8001f3c <__aeabi_dsub+0x4ac>
 80020aa:	2400      	movs	r4, #0
 80020ac:	e7d0      	b.n	8002050 <__aeabi_dsub+0x5c0>
 80020ae:	2400      	movs	r4, #0
 80020b0:	e7f3      	b.n	800209a <__aeabi_dsub+0x60a>
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	000007ff 	.word	0x000007ff
 80020b8:	ff7fffff 	.word	0xff7fffff

080020bc <__aeabi_d2iz>:
 80020bc:	b530      	push	{r4, r5, lr}
 80020be:	4d13      	ldr	r5, [pc, #76]	; (800210c <__aeabi_d2iz+0x50>)
 80020c0:	030a      	lsls	r2, r1, #12
 80020c2:	004b      	lsls	r3, r1, #1
 80020c4:	0b12      	lsrs	r2, r2, #12
 80020c6:	0d5b      	lsrs	r3, r3, #21
 80020c8:	0fc9      	lsrs	r1, r1, #31
 80020ca:	2400      	movs	r4, #0
 80020cc:	42ab      	cmp	r3, r5
 80020ce:	dd10      	ble.n	80020f2 <__aeabi_d2iz+0x36>
 80020d0:	4c0f      	ldr	r4, [pc, #60]	; (8002110 <__aeabi_d2iz+0x54>)
 80020d2:	42a3      	cmp	r3, r4
 80020d4:	dc0f      	bgt.n	80020f6 <__aeabi_d2iz+0x3a>
 80020d6:	2480      	movs	r4, #128	; 0x80
 80020d8:	4d0e      	ldr	r5, [pc, #56]	; (8002114 <__aeabi_d2iz+0x58>)
 80020da:	0364      	lsls	r4, r4, #13
 80020dc:	4322      	orrs	r2, r4
 80020de:	1aed      	subs	r5, r5, r3
 80020e0:	2d1f      	cmp	r5, #31
 80020e2:	dd0b      	ble.n	80020fc <__aeabi_d2iz+0x40>
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <__aeabi_d2iz+0x5c>)
 80020e6:	1ac3      	subs	r3, r0, r3
 80020e8:	40da      	lsrs	r2, r3
 80020ea:	4254      	negs	r4, r2
 80020ec:	2900      	cmp	r1, #0
 80020ee:	d100      	bne.n	80020f2 <__aeabi_d2iz+0x36>
 80020f0:	0014      	movs	r4, r2
 80020f2:	0020      	movs	r0, r4
 80020f4:	bd30      	pop	{r4, r5, pc}
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <__aeabi_d2iz+0x60>)
 80020f8:	18cc      	adds	r4, r1, r3
 80020fa:	e7fa      	b.n	80020f2 <__aeabi_d2iz+0x36>
 80020fc:	4c08      	ldr	r4, [pc, #32]	; (8002120 <__aeabi_d2iz+0x64>)
 80020fe:	40e8      	lsrs	r0, r5
 8002100:	46a4      	mov	ip, r4
 8002102:	4463      	add	r3, ip
 8002104:	409a      	lsls	r2, r3
 8002106:	4302      	orrs	r2, r0
 8002108:	e7ef      	b.n	80020ea <__aeabi_d2iz+0x2e>
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	000003fe 	.word	0x000003fe
 8002110:	0000041d 	.word	0x0000041d
 8002114:	00000433 	.word	0x00000433
 8002118:	00000413 	.word	0x00000413
 800211c:	7fffffff 	.word	0x7fffffff
 8002120:	fffffbed 	.word	0xfffffbed

08002124 <__aeabi_i2d>:
 8002124:	b570      	push	{r4, r5, r6, lr}
 8002126:	2800      	cmp	r0, #0
 8002128:	d030      	beq.n	800218c <__aeabi_i2d+0x68>
 800212a:	17c3      	asrs	r3, r0, #31
 800212c:	18c4      	adds	r4, r0, r3
 800212e:	405c      	eors	r4, r3
 8002130:	0fc5      	lsrs	r5, r0, #31
 8002132:	0020      	movs	r0, r4
 8002134:	f000 f986 	bl	8002444 <__clzsi2>
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <__aeabi_i2d+0x74>)
 800213a:	4a18      	ldr	r2, [pc, #96]	; (800219c <__aeabi_i2d+0x78>)
 800213c:	1a1b      	subs	r3, r3, r0
 800213e:	1ad2      	subs	r2, r2, r3
 8002140:	2a1f      	cmp	r2, #31
 8002142:	dd18      	ble.n	8002176 <__aeabi_i2d+0x52>
 8002144:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <__aeabi_i2d+0x7c>)
 8002146:	1ad2      	subs	r2, r2, r3
 8002148:	4094      	lsls	r4, r2
 800214a:	2200      	movs	r2, #0
 800214c:	0324      	lsls	r4, r4, #12
 800214e:	055b      	lsls	r3, r3, #21
 8002150:	0b24      	lsrs	r4, r4, #12
 8002152:	0d5b      	lsrs	r3, r3, #21
 8002154:	2100      	movs	r1, #0
 8002156:	0010      	movs	r0, r2
 8002158:	0324      	lsls	r4, r4, #12
 800215a:	0d0a      	lsrs	r2, r1, #20
 800215c:	0b24      	lsrs	r4, r4, #12
 800215e:	0512      	lsls	r2, r2, #20
 8002160:	4322      	orrs	r2, r4
 8002162:	4c10      	ldr	r4, [pc, #64]	; (80021a4 <__aeabi_i2d+0x80>)
 8002164:	051b      	lsls	r3, r3, #20
 8002166:	4022      	ands	r2, r4
 8002168:	4313      	orrs	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	07ed      	lsls	r5, r5, #31
 800216e:	085b      	lsrs	r3, r3, #1
 8002170:	432b      	orrs	r3, r5
 8002172:	0019      	movs	r1, r3
 8002174:	bd70      	pop	{r4, r5, r6, pc}
 8002176:	0021      	movs	r1, r4
 8002178:	4091      	lsls	r1, r2
 800217a:	000a      	movs	r2, r1
 800217c:	210b      	movs	r1, #11
 800217e:	1a08      	subs	r0, r1, r0
 8002180:	40c4      	lsrs	r4, r0
 8002182:	055b      	lsls	r3, r3, #21
 8002184:	0324      	lsls	r4, r4, #12
 8002186:	0b24      	lsrs	r4, r4, #12
 8002188:	0d5b      	lsrs	r3, r3, #21
 800218a:	e7e3      	b.n	8002154 <__aeabi_i2d+0x30>
 800218c:	2500      	movs	r5, #0
 800218e:	2300      	movs	r3, #0
 8002190:	2400      	movs	r4, #0
 8002192:	2200      	movs	r2, #0
 8002194:	e7de      	b.n	8002154 <__aeabi_i2d+0x30>
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	0000041e 	.word	0x0000041e
 800219c:	00000433 	.word	0x00000433
 80021a0:	00000413 	.word	0x00000413
 80021a4:	800fffff 	.word	0x800fffff

080021a8 <__aeabi_ui2d>:
 80021a8:	b510      	push	{r4, lr}
 80021aa:	1e04      	subs	r4, r0, #0
 80021ac:	d028      	beq.n	8002200 <__aeabi_ui2d+0x58>
 80021ae:	f000 f949 	bl	8002444 <__clzsi2>
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <__aeabi_ui2d+0x60>)
 80021b4:	4a15      	ldr	r2, [pc, #84]	; (800220c <__aeabi_ui2d+0x64>)
 80021b6:	1a1b      	subs	r3, r3, r0
 80021b8:	1ad2      	subs	r2, r2, r3
 80021ba:	2a1f      	cmp	r2, #31
 80021bc:	dd15      	ble.n	80021ea <__aeabi_ui2d+0x42>
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <__aeabi_ui2d+0x68>)
 80021c0:	1ad2      	subs	r2, r2, r3
 80021c2:	4094      	lsls	r4, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	0324      	lsls	r4, r4, #12
 80021c8:	055b      	lsls	r3, r3, #21
 80021ca:	0b24      	lsrs	r4, r4, #12
 80021cc:	0d5b      	lsrs	r3, r3, #21
 80021ce:	2100      	movs	r1, #0
 80021d0:	0010      	movs	r0, r2
 80021d2:	0324      	lsls	r4, r4, #12
 80021d4:	0d0a      	lsrs	r2, r1, #20
 80021d6:	0b24      	lsrs	r4, r4, #12
 80021d8:	0512      	lsls	r2, r2, #20
 80021da:	4322      	orrs	r2, r4
 80021dc:	4c0d      	ldr	r4, [pc, #52]	; (8002214 <__aeabi_ui2d+0x6c>)
 80021de:	051b      	lsls	r3, r3, #20
 80021e0:	4022      	ands	r2, r4
 80021e2:	4313      	orrs	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	0859      	lsrs	r1, r3, #1
 80021e8:	bd10      	pop	{r4, pc}
 80021ea:	0021      	movs	r1, r4
 80021ec:	4091      	lsls	r1, r2
 80021ee:	000a      	movs	r2, r1
 80021f0:	210b      	movs	r1, #11
 80021f2:	1a08      	subs	r0, r1, r0
 80021f4:	40c4      	lsrs	r4, r0
 80021f6:	055b      	lsls	r3, r3, #21
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	0d5b      	lsrs	r3, r3, #21
 80021fe:	e7e6      	b.n	80021ce <__aeabi_ui2d+0x26>
 8002200:	2300      	movs	r3, #0
 8002202:	2400      	movs	r4, #0
 8002204:	2200      	movs	r2, #0
 8002206:	e7e2      	b.n	80021ce <__aeabi_ui2d+0x26>
 8002208:	0000041e 	.word	0x0000041e
 800220c:	00000433 	.word	0x00000433
 8002210:	00000413 	.word	0x00000413
 8002214:	800fffff 	.word	0x800fffff

08002218 <__aeabi_f2d>:
 8002218:	0041      	lsls	r1, r0, #1
 800221a:	0e09      	lsrs	r1, r1, #24
 800221c:	1c4b      	adds	r3, r1, #1
 800221e:	b570      	push	{r4, r5, r6, lr}
 8002220:	b2db      	uxtb	r3, r3
 8002222:	0246      	lsls	r6, r0, #9
 8002224:	0a75      	lsrs	r5, r6, #9
 8002226:	0fc4      	lsrs	r4, r0, #31
 8002228:	2b01      	cmp	r3, #1
 800222a:	dd14      	ble.n	8002256 <__aeabi_f2d+0x3e>
 800222c:	23e0      	movs	r3, #224	; 0xe0
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	076d      	lsls	r5, r5, #29
 8002232:	0b36      	lsrs	r6, r6, #12
 8002234:	18cb      	adds	r3, r1, r3
 8002236:	2100      	movs	r1, #0
 8002238:	0d0a      	lsrs	r2, r1, #20
 800223a:	0028      	movs	r0, r5
 800223c:	0512      	lsls	r2, r2, #20
 800223e:	4d1c      	ldr	r5, [pc, #112]	; (80022b0 <__aeabi_f2d+0x98>)
 8002240:	4332      	orrs	r2, r6
 8002242:	055b      	lsls	r3, r3, #21
 8002244:	402a      	ands	r2, r5
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	4313      	orrs	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	07e4      	lsls	r4, r4, #31
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	4323      	orrs	r3, r4
 8002252:	0019      	movs	r1, r3
 8002254:	bd70      	pop	{r4, r5, r6, pc}
 8002256:	2900      	cmp	r1, #0
 8002258:	d114      	bne.n	8002284 <__aeabi_f2d+0x6c>
 800225a:	2d00      	cmp	r5, #0
 800225c:	d01e      	beq.n	800229c <__aeabi_f2d+0x84>
 800225e:	0028      	movs	r0, r5
 8002260:	f000 f8f0 	bl	8002444 <__clzsi2>
 8002264:	280a      	cmp	r0, #10
 8002266:	dc1c      	bgt.n	80022a2 <__aeabi_f2d+0x8a>
 8002268:	230b      	movs	r3, #11
 800226a:	002a      	movs	r2, r5
 800226c:	1a1b      	subs	r3, r3, r0
 800226e:	40da      	lsrs	r2, r3
 8002270:	0003      	movs	r3, r0
 8002272:	3315      	adds	r3, #21
 8002274:	409d      	lsls	r5, r3
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <__aeabi_f2d+0x9c>)
 8002278:	0312      	lsls	r2, r2, #12
 800227a:	1a1b      	subs	r3, r3, r0
 800227c:	055b      	lsls	r3, r3, #21
 800227e:	0b16      	lsrs	r6, r2, #12
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	e7d8      	b.n	8002236 <__aeabi_f2d+0x1e>
 8002284:	2d00      	cmp	r5, #0
 8002286:	d006      	beq.n	8002296 <__aeabi_f2d+0x7e>
 8002288:	0b32      	lsrs	r2, r6, #12
 800228a:	2680      	movs	r6, #128	; 0x80
 800228c:	0336      	lsls	r6, r6, #12
 800228e:	076d      	lsls	r5, r5, #29
 8002290:	4316      	orrs	r6, r2
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <__aeabi_f2d+0xa0>)
 8002294:	e7cf      	b.n	8002236 <__aeabi_f2d+0x1e>
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <__aeabi_f2d+0xa0>)
 8002298:	2600      	movs	r6, #0
 800229a:	e7cc      	b.n	8002236 <__aeabi_f2d+0x1e>
 800229c:	2300      	movs	r3, #0
 800229e:	2600      	movs	r6, #0
 80022a0:	e7c9      	b.n	8002236 <__aeabi_f2d+0x1e>
 80022a2:	0003      	movs	r3, r0
 80022a4:	002a      	movs	r2, r5
 80022a6:	3b0b      	subs	r3, #11
 80022a8:	409a      	lsls	r2, r3
 80022aa:	2500      	movs	r5, #0
 80022ac:	e7e3      	b.n	8002276 <__aeabi_f2d+0x5e>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	800fffff 	.word	0x800fffff
 80022b4:	00000389 	.word	0x00000389
 80022b8:	000007ff 	.word	0x000007ff

080022bc <__aeabi_d2f>:
 80022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022be:	004c      	lsls	r4, r1, #1
 80022c0:	0d64      	lsrs	r4, r4, #21
 80022c2:	030b      	lsls	r3, r1, #12
 80022c4:	1c62      	adds	r2, r4, #1
 80022c6:	0f45      	lsrs	r5, r0, #29
 80022c8:	0a5b      	lsrs	r3, r3, #9
 80022ca:	0552      	lsls	r2, r2, #21
 80022cc:	432b      	orrs	r3, r5
 80022ce:	0fc9      	lsrs	r1, r1, #31
 80022d0:	00c5      	lsls	r5, r0, #3
 80022d2:	0d52      	lsrs	r2, r2, #21
 80022d4:	2a01      	cmp	r2, #1
 80022d6:	dd28      	ble.n	800232a <__aeabi_d2f+0x6e>
 80022d8:	4a3a      	ldr	r2, [pc, #232]	; (80023c4 <__aeabi_d2f+0x108>)
 80022da:	18a6      	adds	r6, r4, r2
 80022dc:	2efe      	cmp	r6, #254	; 0xfe
 80022de:	dc1b      	bgt.n	8002318 <__aeabi_d2f+0x5c>
 80022e0:	2e00      	cmp	r6, #0
 80022e2:	dd3e      	ble.n	8002362 <__aeabi_d2f+0xa6>
 80022e4:	0180      	lsls	r0, r0, #6
 80022e6:	0002      	movs	r2, r0
 80022e8:	1e50      	subs	r0, r2, #1
 80022ea:	4182      	sbcs	r2, r0
 80022ec:	0f6d      	lsrs	r5, r5, #29
 80022ee:	432a      	orrs	r2, r5
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4313      	orrs	r3, r2
 80022f4:	075a      	lsls	r2, r3, #29
 80022f6:	d004      	beq.n	8002302 <__aeabi_d2f+0x46>
 80022f8:	220f      	movs	r2, #15
 80022fa:	401a      	ands	r2, r3
 80022fc:	2a04      	cmp	r2, #4
 80022fe:	d000      	beq.n	8002302 <__aeabi_d2f+0x46>
 8002300:	3304      	adds	r3, #4
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	04d2      	lsls	r2, r2, #19
 8002306:	401a      	ands	r2, r3
 8002308:	d05a      	beq.n	80023c0 <__aeabi_d2f+0x104>
 800230a:	3601      	adds	r6, #1
 800230c:	2eff      	cmp	r6, #255	; 0xff
 800230e:	d003      	beq.n	8002318 <__aeabi_d2f+0x5c>
 8002310:	019b      	lsls	r3, r3, #6
 8002312:	0a5b      	lsrs	r3, r3, #9
 8002314:	b2f4      	uxtb	r4, r6
 8002316:	e001      	b.n	800231c <__aeabi_d2f+0x60>
 8002318:	24ff      	movs	r4, #255	; 0xff
 800231a:	2300      	movs	r3, #0
 800231c:	0258      	lsls	r0, r3, #9
 800231e:	05e4      	lsls	r4, r4, #23
 8002320:	0a40      	lsrs	r0, r0, #9
 8002322:	07c9      	lsls	r1, r1, #31
 8002324:	4320      	orrs	r0, r4
 8002326:	4308      	orrs	r0, r1
 8002328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800232a:	2c00      	cmp	r4, #0
 800232c:	d007      	beq.n	800233e <__aeabi_d2f+0x82>
 800232e:	431d      	orrs	r5, r3
 8002330:	d0f2      	beq.n	8002318 <__aeabi_d2f+0x5c>
 8002332:	2080      	movs	r0, #128	; 0x80
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	0480      	lsls	r0, r0, #18
 8002338:	4303      	orrs	r3, r0
 800233a:	26ff      	movs	r6, #255	; 0xff
 800233c:	e7da      	b.n	80022f4 <__aeabi_d2f+0x38>
 800233e:	432b      	orrs	r3, r5
 8002340:	d003      	beq.n	800234a <__aeabi_d2f+0x8e>
 8002342:	2305      	movs	r3, #5
 8002344:	08db      	lsrs	r3, r3, #3
 8002346:	2cff      	cmp	r4, #255	; 0xff
 8002348:	d003      	beq.n	8002352 <__aeabi_d2f+0x96>
 800234a:	025b      	lsls	r3, r3, #9
 800234c:	0a5b      	lsrs	r3, r3, #9
 800234e:	b2e4      	uxtb	r4, r4
 8002350:	e7e4      	b.n	800231c <__aeabi_d2f+0x60>
 8002352:	2b00      	cmp	r3, #0
 8002354:	d032      	beq.n	80023bc <__aeabi_d2f+0x100>
 8002356:	2080      	movs	r0, #128	; 0x80
 8002358:	03c0      	lsls	r0, r0, #15
 800235a:	4303      	orrs	r3, r0
 800235c:	025b      	lsls	r3, r3, #9
 800235e:	0a5b      	lsrs	r3, r3, #9
 8002360:	e7dc      	b.n	800231c <__aeabi_d2f+0x60>
 8002362:	0032      	movs	r2, r6
 8002364:	3217      	adds	r2, #23
 8002366:	db14      	blt.n	8002392 <__aeabi_d2f+0xd6>
 8002368:	2280      	movs	r2, #128	; 0x80
 800236a:	271e      	movs	r7, #30
 800236c:	0412      	lsls	r2, r2, #16
 800236e:	4313      	orrs	r3, r2
 8002370:	1bbf      	subs	r7, r7, r6
 8002372:	2f1f      	cmp	r7, #31
 8002374:	dc0f      	bgt.n	8002396 <__aeabi_d2f+0xda>
 8002376:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <__aeabi_d2f+0x10c>)
 8002378:	4694      	mov	ip, r2
 800237a:	4464      	add	r4, ip
 800237c:	002a      	movs	r2, r5
 800237e:	40a5      	lsls	r5, r4
 8002380:	002e      	movs	r6, r5
 8002382:	40a3      	lsls	r3, r4
 8002384:	1e75      	subs	r5, r6, #1
 8002386:	41ae      	sbcs	r6, r5
 8002388:	40fa      	lsrs	r2, r7
 800238a:	4333      	orrs	r3, r6
 800238c:	4313      	orrs	r3, r2
 800238e:	2600      	movs	r6, #0
 8002390:	e7b0      	b.n	80022f4 <__aeabi_d2f+0x38>
 8002392:	2400      	movs	r4, #0
 8002394:	e7d5      	b.n	8002342 <__aeabi_d2f+0x86>
 8002396:	2202      	movs	r2, #2
 8002398:	4252      	negs	r2, r2
 800239a:	1b96      	subs	r6, r2, r6
 800239c:	001a      	movs	r2, r3
 800239e:	40f2      	lsrs	r2, r6
 80023a0:	2f20      	cmp	r7, #32
 80023a2:	d009      	beq.n	80023b8 <__aeabi_d2f+0xfc>
 80023a4:	4809      	ldr	r0, [pc, #36]	; (80023cc <__aeabi_d2f+0x110>)
 80023a6:	4684      	mov	ip, r0
 80023a8:	4464      	add	r4, ip
 80023aa:	40a3      	lsls	r3, r4
 80023ac:	432b      	orrs	r3, r5
 80023ae:	1e5d      	subs	r5, r3, #1
 80023b0:	41ab      	sbcs	r3, r5
 80023b2:	2600      	movs	r6, #0
 80023b4:	4313      	orrs	r3, r2
 80023b6:	e79d      	b.n	80022f4 <__aeabi_d2f+0x38>
 80023b8:	2300      	movs	r3, #0
 80023ba:	e7f7      	b.n	80023ac <__aeabi_d2f+0xf0>
 80023bc:	2300      	movs	r3, #0
 80023be:	e7ad      	b.n	800231c <__aeabi_d2f+0x60>
 80023c0:	0034      	movs	r4, r6
 80023c2:	e7bf      	b.n	8002344 <__aeabi_d2f+0x88>
 80023c4:	fffffc80 	.word	0xfffffc80
 80023c8:	fffffc82 	.word	0xfffffc82
 80023cc:	fffffca2 	.word	0xfffffca2

080023d0 <__aeabi_cfrcmple>:
 80023d0:	4684      	mov	ip, r0
 80023d2:	1c08      	adds	r0, r1, #0
 80023d4:	4661      	mov	r1, ip
 80023d6:	e7ff      	b.n	80023d8 <__aeabi_cfcmpeq>

080023d8 <__aeabi_cfcmpeq>:
 80023d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80023da:	f000 f8b7 	bl	800254c <__lesf2>
 80023de:	2800      	cmp	r0, #0
 80023e0:	d401      	bmi.n	80023e6 <__aeabi_cfcmpeq+0xe>
 80023e2:	2100      	movs	r1, #0
 80023e4:	42c8      	cmn	r0, r1
 80023e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080023e8 <__aeabi_fcmpeq>:
 80023e8:	b510      	push	{r4, lr}
 80023ea:	f000 f849 	bl	8002480 <__eqsf2>
 80023ee:	4240      	negs	r0, r0
 80023f0:	3001      	adds	r0, #1
 80023f2:	bd10      	pop	{r4, pc}

080023f4 <__aeabi_fcmplt>:
 80023f4:	b510      	push	{r4, lr}
 80023f6:	f000 f8a9 	bl	800254c <__lesf2>
 80023fa:	2800      	cmp	r0, #0
 80023fc:	db01      	blt.n	8002402 <__aeabi_fcmplt+0xe>
 80023fe:	2000      	movs	r0, #0
 8002400:	bd10      	pop	{r4, pc}
 8002402:	2001      	movs	r0, #1
 8002404:	bd10      	pop	{r4, pc}
 8002406:	46c0      	nop			; (mov r8, r8)

08002408 <__aeabi_fcmple>:
 8002408:	b510      	push	{r4, lr}
 800240a:	f000 f89f 	bl	800254c <__lesf2>
 800240e:	2800      	cmp	r0, #0
 8002410:	dd01      	ble.n	8002416 <__aeabi_fcmple+0xe>
 8002412:	2000      	movs	r0, #0
 8002414:	bd10      	pop	{r4, pc}
 8002416:	2001      	movs	r0, #1
 8002418:	bd10      	pop	{r4, pc}
 800241a:	46c0      	nop			; (mov r8, r8)

0800241c <__aeabi_fcmpgt>:
 800241c:	b510      	push	{r4, lr}
 800241e:	f000 f855 	bl	80024cc <__gesf2>
 8002422:	2800      	cmp	r0, #0
 8002424:	dc01      	bgt.n	800242a <__aeabi_fcmpgt+0xe>
 8002426:	2000      	movs	r0, #0
 8002428:	bd10      	pop	{r4, pc}
 800242a:	2001      	movs	r0, #1
 800242c:	bd10      	pop	{r4, pc}
 800242e:	46c0      	nop			; (mov r8, r8)

08002430 <__aeabi_fcmpge>:
 8002430:	b510      	push	{r4, lr}
 8002432:	f000 f84b 	bl	80024cc <__gesf2>
 8002436:	2800      	cmp	r0, #0
 8002438:	da01      	bge.n	800243e <__aeabi_fcmpge+0xe>
 800243a:	2000      	movs	r0, #0
 800243c:	bd10      	pop	{r4, pc}
 800243e:	2001      	movs	r0, #1
 8002440:	bd10      	pop	{r4, pc}
 8002442:	46c0      	nop			; (mov r8, r8)

08002444 <__clzsi2>:
 8002444:	211c      	movs	r1, #28
 8002446:	2301      	movs	r3, #1
 8002448:	041b      	lsls	r3, r3, #16
 800244a:	4298      	cmp	r0, r3
 800244c:	d301      	bcc.n	8002452 <__clzsi2+0xe>
 800244e:	0c00      	lsrs	r0, r0, #16
 8002450:	3910      	subs	r1, #16
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	4298      	cmp	r0, r3
 8002456:	d301      	bcc.n	800245c <__clzsi2+0x18>
 8002458:	0a00      	lsrs	r0, r0, #8
 800245a:	3908      	subs	r1, #8
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	4298      	cmp	r0, r3
 8002460:	d301      	bcc.n	8002466 <__clzsi2+0x22>
 8002462:	0900      	lsrs	r0, r0, #4
 8002464:	3904      	subs	r1, #4
 8002466:	a202      	add	r2, pc, #8	; (adr r2, 8002470 <__clzsi2+0x2c>)
 8002468:	5c10      	ldrb	r0, [r2, r0]
 800246a:	1840      	adds	r0, r0, r1
 800246c:	4770      	bx	lr
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	02020304 	.word	0x02020304
 8002474:	01010101 	.word	0x01010101
	...

08002480 <__eqsf2>:
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	0042      	lsls	r2, r0, #1
 8002484:	0245      	lsls	r5, r0, #9
 8002486:	024e      	lsls	r6, r1, #9
 8002488:	004c      	lsls	r4, r1, #1
 800248a:	0fc3      	lsrs	r3, r0, #31
 800248c:	0a6d      	lsrs	r5, r5, #9
 800248e:	0e12      	lsrs	r2, r2, #24
 8002490:	0a76      	lsrs	r6, r6, #9
 8002492:	0e24      	lsrs	r4, r4, #24
 8002494:	0fc9      	lsrs	r1, r1, #31
 8002496:	2001      	movs	r0, #1
 8002498:	2aff      	cmp	r2, #255	; 0xff
 800249a:	d006      	beq.n	80024aa <__eqsf2+0x2a>
 800249c:	2cff      	cmp	r4, #255	; 0xff
 800249e:	d003      	beq.n	80024a8 <__eqsf2+0x28>
 80024a0:	42a2      	cmp	r2, r4
 80024a2:	d101      	bne.n	80024a8 <__eqsf2+0x28>
 80024a4:	42b5      	cmp	r5, r6
 80024a6:	d006      	beq.n	80024b6 <__eqsf2+0x36>
 80024a8:	bd70      	pop	{r4, r5, r6, pc}
 80024aa:	2d00      	cmp	r5, #0
 80024ac:	d1fc      	bne.n	80024a8 <__eqsf2+0x28>
 80024ae:	2cff      	cmp	r4, #255	; 0xff
 80024b0:	d1fa      	bne.n	80024a8 <__eqsf2+0x28>
 80024b2:	2e00      	cmp	r6, #0
 80024b4:	d1f8      	bne.n	80024a8 <__eqsf2+0x28>
 80024b6:	428b      	cmp	r3, r1
 80024b8:	d006      	beq.n	80024c8 <__eqsf2+0x48>
 80024ba:	2001      	movs	r0, #1
 80024bc:	2a00      	cmp	r2, #0
 80024be:	d1f3      	bne.n	80024a8 <__eqsf2+0x28>
 80024c0:	0028      	movs	r0, r5
 80024c2:	1e45      	subs	r5, r0, #1
 80024c4:	41a8      	sbcs	r0, r5
 80024c6:	e7ef      	b.n	80024a8 <__eqsf2+0x28>
 80024c8:	2000      	movs	r0, #0
 80024ca:	e7ed      	b.n	80024a8 <__eqsf2+0x28>

080024cc <__gesf2>:
 80024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ce:	0042      	lsls	r2, r0, #1
 80024d0:	0245      	lsls	r5, r0, #9
 80024d2:	024c      	lsls	r4, r1, #9
 80024d4:	0fc3      	lsrs	r3, r0, #31
 80024d6:	0048      	lsls	r0, r1, #1
 80024d8:	0a6d      	lsrs	r5, r5, #9
 80024da:	0e12      	lsrs	r2, r2, #24
 80024dc:	0a64      	lsrs	r4, r4, #9
 80024de:	0e00      	lsrs	r0, r0, #24
 80024e0:	0fc9      	lsrs	r1, r1, #31
 80024e2:	2aff      	cmp	r2, #255	; 0xff
 80024e4:	d01e      	beq.n	8002524 <__gesf2+0x58>
 80024e6:	28ff      	cmp	r0, #255	; 0xff
 80024e8:	d021      	beq.n	800252e <__gesf2+0x62>
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	d10a      	bne.n	8002504 <__gesf2+0x38>
 80024ee:	426e      	negs	r6, r5
 80024f0:	416e      	adcs	r6, r5
 80024f2:	b2f6      	uxtb	r6, r6
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d10f      	bne.n	8002518 <__gesf2+0x4c>
 80024f8:	2c00      	cmp	r4, #0
 80024fa:	d10d      	bne.n	8002518 <__gesf2+0x4c>
 80024fc:	2000      	movs	r0, #0
 80024fe:	2d00      	cmp	r5, #0
 8002500:	d009      	beq.n	8002516 <__gesf2+0x4a>
 8002502:	e005      	b.n	8002510 <__gesf2+0x44>
 8002504:	2800      	cmp	r0, #0
 8002506:	d101      	bne.n	800250c <__gesf2+0x40>
 8002508:	2c00      	cmp	r4, #0
 800250a:	d001      	beq.n	8002510 <__gesf2+0x44>
 800250c:	428b      	cmp	r3, r1
 800250e:	d011      	beq.n	8002534 <__gesf2+0x68>
 8002510:	2101      	movs	r1, #1
 8002512:	4258      	negs	r0, r3
 8002514:	4308      	orrs	r0, r1
 8002516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002518:	2e00      	cmp	r6, #0
 800251a:	d0f7      	beq.n	800250c <__gesf2+0x40>
 800251c:	2001      	movs	r0, #1
 800251e:	3901      	subs	r1, #1
 8002520:	4308      	orrs	r0, r1
 8002522:	e7f8      	b.n	8002516 <__gesf2+0x4a>
 8002524:	2d00      	cmp	r5, #0
 8002526:	d0de      	beq.n	80024e6 <__gesf2+0x1a>
 8002528:	2002      	movs	r0, #2
 800252a:	4240      	negs	r0, r0
 800252c:	e7f3      	b.n	8002516 <__gesf2+0x4a>
 800252e:	2c00      	cmp	r4, #0
 8002530:	d0db      	beq.n	80024ea <__gesf2+0x1e>
 8002532:	e7f9      	b.n	8002528 <__gesf2+0x5c>
 8002534:	4282      	cmp	r2, r0
 8002536:	dceb      	bgt.n	8002510 <__gesf2+0x44>
 8002538:	db04      	blt.n	8002544 <__gesf2+0x78>
 800253a:	42a5      	cmp	r5, r4
 800253c:	d8e8      	bhi.n	8002510 <__gesf2+0x44>
 800253e:	2000      	movs	r0, #0
 8002540:	42a5      	cmp	r5, r4
 8002542:	d2e8      	bcs.n	8002516 <__gesf2+0x4a>
 8002544:	2101      	movs	r1, #1
 8002546:	1e58      	subs	r0, r3, #1
 8002548:	4308      	orrs	r0, r1
 800254a:	e7e4      	b.n	8002516 <__gesf2+0x4a>

0800254c <__lesf2>:
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	0042      	lsls	r2, r0, #1
 8002550:	024d      	lsls	r5, r1, #9
 8002552:	004c      	lsls	r4, r1, #1
 8002554:	0246      	lsls	r6, r0, #9
 8002556:	0a76      	lsrs	r6, r6, #9
 8002558:	0e12      	lsrs	r2, r2, #24
 800255a:	0fc3      	lsrs	r3, r0, #31
 800255c:	0a6d      	lsrs	r5, r5, #9
 800255e:	0e24      	lsrs	r4, r4, #24
 8002560:	0fc9      	lsrs	r1, r1, #31
 8002562:	2aff      	cmp	r2, #255	; 0xff
 8002564:	d016      	beq.n	8002594 <__lesf2+0x48>
 8002566:	2cff      	cmp	r4, #255	; 0xff
 8002568:	d018      	beq.n	800259c <__lesf2+0x50>
 800256a:	2a00      	cmp	r2, #0
 800256c:	d10a      	bne.n	8002584 <__lesf2+0x38>
 800256e:	4270      	negs	r0, r6
 8002570:	4170      	adcs	r0, r6
 8002572:	b2c0      	uxtb	r0, r0
 8002574:	2c00      	cmp	r4, #0
 8002576:	d015      	beq.n	80025a4 <__lesf2+0x58>
 8002578:	2800      	cmp	r0, #0
 800257a:	d005      	beq.n	8002588 <__lesf2+0x3c>
 800257c:	2001      	movs	r0, #1
 800257e:	3901      	subs	r1, #1
 8002580:	4308      	orrs	r0, r1
 8002582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002584:	2c00      	cmp	r4, #0
 8002586:	d013      	beq.n	80025b0 <__lesf2+0x64>
 8002588:	4299      	cmp	r1, r3
 800258a:	d014      	beq.n	80025b6 <__lesf2+0x6a>
 800258c:	2001      	movs	r0, #1
 800258e:	425b      	negs	r3, r3
 8002590:	4318      	orrs	r0, r3
 8002592:	e7f6      	b.n	8002582 <__lesf2+0x36>
 8002594:	2002      	movs	r0, #2
 8002596:	2e00      	cmp	r6, #0
 8002598:	d1f3      	bne.n	8002582 <__lesf2+0x36>
 800259a:	e7e4      	b.n	8002566 <__lesf2+0x1a>
 800259c:	2002      	movs	r0, #2
 800259e:	2d00      	cmp	r5, #0
 80025a0:	d1ef      	bne.n	8002582 <__lesf2+0x36>
 80025a2:	e7e2      	b.n	800256a <__lesf2+0x1e>
 80025a4:	2d00      	cmp	r5, #0
 80025a6:	d1e7      	bne.n	8002578 <__lesf2+0x2c>
 80025a8:	2000      	movs	r0, #0
 80025aa:	2e00      	cmp	r6, #0
 80025ac:	d0e9      	beq.n	8002582 <__lesf2+0x36>
 80025ae:	e7ed      	b.n	800258c <__lesf2+0x40>
 80025b0:	2d00      	cmp	r5, #0
 80025b2:	d1e9      	bne.n	8002588 <__lesf2+0x3c>
 80025b4:	e7ea      	b.n	800258c <__lesf2+0x40>
 80025b6:	42a2      	cmp	r2, r4
 80025b8:	dc06      	bgt.n	80025c8 <__lesf2+0x7c>
 80025ba:	dbdf      	blt.n	800257c <__lesf2+0x30>
 80025bc:	42ae      	cmp	r6, r5
 80025be:	d803      	bhi.n	80025c8 <__lesf2+0x7c>
 80025c0:	2000      	movs	r0, #0
 80025c2:	42ae      	cmp	r6, r5
 80025c4:	d3da      	bcc.n	800257c <__lesf2+0x30>
 80025c6:	e7dc      	b.n	8002582 <__lesf2+0x36>
 80025c8:	2001      	movs	r0, #1
 80025ca:	4249      	negs	r1, r1
 80025cc:	4308      	orrs	r0, r1
 80025ce:	e7d8      	b.n	8002582 <__lesf2+0x36>

080025d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_Init+0x24>)
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_Init+0x24>)
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	2110      	movs	r1, #16
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f000 f809 	bl	80025f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e6:	f007 f881 	bl	80096ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	40022000 	.word	0x40022000

080025f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8002600:	f002 f8c0 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 8002604:	0002      	movs	r2, r0
 8002606:	23fa      	movs	r3, #250	; 0xfa
 8002608:	0099      	lsls	r1, r3, #2
 800260a:	0010      	movs	r0, r2
 800260c:	f7fd fd7c 	bl	8000108 <__udivsi3>
 8002610:	0003      	movs	r3, r0
 8002612:	0018      	movs	r0, r3
 8002614:	f000 f90e 	bl	8002834 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	2301      	movs	r3, #1
 800261c:	425b      	negs	r3, r3
 800261e:	2200      	movs	r2, #0
 8002620:	0018      	movs	r0, r3
 8002622:	f000 f8e1 	bl	80027e8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  uwTick++;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_IncTick+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	4b02      	ldr	r3, [pc, #8]	; (8002644 <HAL_IncTick+0x14>)
 800263c:	601a      	str	r2, [r3, #0]
}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200007ec 	.word	0x200007ec

08002648 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;
 800264c:	4b02      	ldr	r3, [pc, #8]	; (8002658 <HAL_GetTick+0x10>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	200007ec 	.word	0x200007ec

0800265c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff fff0 	bl	8002648 <HAL_GetTick>
 8002668:	0003      	movs	r3, r0
 800266a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3301      	adds	r3, #1
 8002674:	d002      	beq.n	800267c <HAL_Delay+0x20>
  {
     wait++;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3301      	adds	r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	f7ff ffe3 	bl	8002648 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	1ad2      	subs	r2, r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	429a      	cmp	r2, r3
 800268c:	d3f7      	bcc.n	800267e <HAL_Delay+0x22>
  {
  }
}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	0002      	movs	r2, r0
 80026a0:	1dfb      	adds	r3, r7, #7
 80026a2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <NVIC_EnableIRQ+0x28>)
 80026a6:	1dfa      	adds	r2, r7, #7
 80026a8:	7812      	ldrb	r2, [r2, #0]
 80026aa:	0011      	movs	r1, r2
 80026ac:	221f      	movs	r2, #31
 80026ae:	400a      	ands	r2, r1
 80026b0:	2101      	movs	r1, #1
 80026b2:	4091      	lsls	r1, r2
 80026b4:	000a      	movs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b002      	add	sp, #8
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	e000e100 	.word	0xe000e100

080026c4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c4:	b5b0      	push	{r4, r5, r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	0002      	movs	r2, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b7f      	cmp	r3, #127	; 0x7f
 80026d8:	d932      	bls.n	8002740 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026da:	4c2f      	ldr	r4, [pc, #188]	; (8002798 <NVIC_SetPriority+0xd4>)
 80026dc:	1dfb      	adds	r3, r7, #7
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	001a      	movs	r2, r3
 80026e2:	230f      	movs	r3, #15
 80026e4:	4013      	ands	r3, r2
 80026e6:	3b08      	subs	r3, #8
 80026e8:	0899      	lsrs	r1, r3, #2
 80026ea:	4a2b      	ldr	r2, [pc, #172]	; (8002798 <NVIC_SetPriority+0xd4>)
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	0018      	movs	r0, r3
 80026f2:	230f      	movs	r3, #15
 80026f4:	4003      	ands	r3, r0
 80026f6:	3b08      	subs	r3, #8
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3306      	adds	r3, #6
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	18d3      	adds	r3, r2, r3
 8002700:	3304      	adds	r3, #4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	1dfa      	adds	r2, r7, #7
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	0010      	movs	r0, r2
 800270a:	2203      	movs	r2, #3
 800270c:	4002      	ands	r2, r0
 800270e:	00d2      	lsls	r2, r2, #3
 8002710:	20ff      	movs	r0, #255	; 0xff
 8002712:	4090      	lsls	r0, r2
 8002714:	0002      	movs	r2, r0
 8002716:	43d2      	mvns	r2, r2
 8002718:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	019b      	lsls	r3, r3, #6
 800271e:	20ff      	movs	r0, #255	; 0xff
 8002720:	4018      	ands	r0, r3
 8002722:	1dfb      	adds	r3, r7, #7
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	001d      	movs	r5, r3
 8002728:	2303      	movs	r3, #3
 800272a:	402b      	ands	r3, r5
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4098      	lsls	r0, r3
 8002730:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002732:	431a      	orrs	r2, r3
 8002734:	1d8b      	adds	r3, r1, #6
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	18e3      	adds	r3, r4, r3
 800273a:	3304      	adds	r3, #4
 800273c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800273e:	e027      	b.n	8002790 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002740:	4c16      	ldr	r4, [pc, #88]	; (800279c <NVIC_SetPriority+0xd8>)
 8002742:	1dfb      	adds	r3, r7, #7
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	b25b      	sxtb	r3, r3
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	4914      	ldr	r1, [pc, #80]	; (800279c <NVIC_SetPriority+0xd8>)
 800274c:	1dfa      	adds	r2, r7, #7
 800274e:	7812      	ldrb	r2, [r2, #0]
 8002750:	b252      	sxtb	r2, r2
 8002752:	0892      	lsrs	r2, r2, #2
 8002754:	32c0      	adds	r2, #192	; 0xc0
 8002756:	0092      	lsls	r2, r2, #2
 8002758:	5852      	ldr	r2, [r2, r1]
 800275a:	1df9      	adds	r1, r7, #7
 800275c:	7809      	ldrb	r1, [r1, #0]
 800275e:	0008      	movs	r0, r1
 8002760:	2103      	movs	r1, #3
 8002762:	4001      	ands	r1, r0
 8002764:	00c9      	lsls	r1, r1, #3
 8002766:	20ff      	movs	r0, #255	; 0xff
 8002768:	4088      	lsls	r0, r1
 800276a:	0001      	movs	r1, r0
 800276c:	43c9      	mvns	r1, r1
 800276e:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	0192      	lsls	r2, r2, #6
 8002774:	20ff      	movs	r0, #255	; 0xff
 8002776:	4010      	ands	r0, r2
 8002778:	1dfa      	adds	r2, r7, #7
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	0015      	movs	r5, r2
 800277e:	2203      	movs	r2, #3
 8002780:	402a      	ands	r2, r5
 8002782:	00d2      	lsls	r2, r2, #3
 8002784:	4090      	lsls	r0, r2
 8002786:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002788:	430a      	orrs	r2, r1
 800278a:	33c0      	adds	r3, #192	; 0xc0
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	511a      	str	r2, [r3, r4]
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bdb0      	pop	{r4, r5, r7, pc}
 8002798:	e000ed00 	.word	0xe000ed00
 800279c:	e000e100 	.word	0xe000e100

080027a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	4a0c      	ldr	r2, [pc, #48]	; (80027e0 <SysTick_Config+0x40>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b2:	2301      	movs	r3, #1
 80027b4:	e010      	b.n	80027d8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <SysTick_Config+0x44>)
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	3a01      	subs	r2, #1
 80027bc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027be:	2301      	movs	r3, #1
 80027c0:	425b      	negs	r3, r3
 80027c2:	2103      	movs	r1, #3
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7ff ff7d 	bl	80026c4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <SysTick_Config+0x44>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SysTick_Config+0x44>)
 80027d2:	2207      	movs	r2, #7
 80027d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	00ffffff 	.word	0x00ffffff
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	230f      	movs	r3, #15
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	1c02      	adds	r2, r0, #0
 80027f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	230f      	movs	r3, #15
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	b25b      	sxtb	r3, r3
 8002804:	0011      	movs	r1, r2
 8002806:	0018      	movs	r0, r3
 8002808:	f7ff ff5c 	bl	80026c4 <NVIC_SetPriority>
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b004      	add	sp, #16
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	0002      	movs	r2, r0
 800281c:	1dfb      	adds	r3, r7, #7
 800281e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002820:	1dfb      	adds	r3, r7, #7
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	b25b      	sxtb	r3, r3
 8002826:	0018      	movs	r0, r3
 8002828:	f7ff ff36 	bl	8002698 <NVIC_EnableIRQ>
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	0018      	movs	r0, r3
 8002840:	f7ff ffae 	bl	80027a0 <SysTick_Config>
 8002844:	0003      	movs	r3, r0
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b002      	add	sp, #8
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d106      	bne.n	800286c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	2104      	movs	r1, #4
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800286a:	e005      	b.n	8002878 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800286e:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	2104      	movs	r1, #4
 8002874:	438a      	bics	r2, r1
 8002876:	601a      	str	r2, [r3, #0]
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b002      	add	sp, #8
 800287e:	bd80      	pop	{r7, pc}
 8002880:	e000e010 	.word	0xe000e010

08002884 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002888:	f000 f803 	bl	8002892 <HAL_SYSTICK_Callback>
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e042      	b.n	8002938 <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2221      	movs	r2, #33	; 0x21
 80028b6:	2102      	movs	r1, #2
 80028b8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_DMA_Init+0xa4>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0018      	movs	r0, r3
 8002904:	f000 f998 	bl	8002c38 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2221      	movs	r2, #33	; 0x21
 800292a:	2101      	movs	r1, #1
 800292c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	2100      	movs	r1, #0
 8002934:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}  
 8002938:	0018      	movs	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	b004      	add	sp, #16
 800293e:	bd80      	pop	{r7, pc}
 8002940:	ffffc00f 	.word	0xffffc00f

08002944 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002952:	2317      	movs	r3, #23
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	5c9b      	ldrb	r3, [r3, r2]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_DMA_Start_IT+0x24>
 8002964:	2302      	movs	r3, #2
 8002966:	e04f      	b.n	8002a08 <HAL_DMA_Start_IT+0xc4>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	2101      	movs	r1, #1
 800296e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2221      	movs	r2, #33	; 0x21
 8002974:	5c9b      	ldrb	r3, [r3, r2]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d13a      	bne.n	80029f2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2221      	movs	r2, #33	; 0x21
 8002980:	2102      	movs	r1, #2
 8002982:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	2101      	movs	r1, #1
 8002996:	438a      	bics	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f91d 	bl	8002be0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	210e      	movs	r1, #14
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e00f      	b.n	80029e0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	210a      	movs	r1, #10
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	2104      	movs	r1, #4
 80029dc:	438a      	bics	r2, r1
 80029de:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	e007      	b.n	8002a02 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80029fa:	2317      	movs	r3, #23
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2202      	movs	r2, #2
 8002a00:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002a02:	2317      	movs	r3, #23
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	781b      	ldrb	r3, [r3, #0]
} 
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b006      	add	sp, #24
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a18:	230f      	movs	r3, #15
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2221      	movs	r2, #33	; 0x21
 8002a24:	5c9b      	ldrb	r3, [r3, r2]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d007      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a32:	230f      	movs	r3, #15
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e028      	b.n	8002a8e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	210e      	movs	r1, #14
 8002a48:	438a      	bics	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	2101      	movs	r1, #1
 8002a58:	438a      	bics	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a64:	2101      	movs	r1, #1
 8002a66:	4091      	lsls	r1, r2
 8002a68:	000a      	movs	r2, r1
 8002a6a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2221      	movs	r2, #33	; 0x21
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	0010      	movs	r0, r2
 8002a8c:	4798      	blx	r3
    } 
  }
  return status;
 8002a8e:	230f      	movs	r3, #15
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	781b      	ldrb	r3, [r3, #0]
}
 8002a94:	0018      	movs	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b004      	add	sp, #16
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	2204      	movs	r2, #4
 8002aba:	409a      	lsls	r2, r3
 8002abc:	0013      	movs	r3, r2
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d024      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x72>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d020      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d107      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	438a      	bics	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002af0:	2104      	movs	r1, #4
 8002af2:	4091      	lsls	r1, r2
 8002af4:	000a      	movs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d100      	bne.n	8002b02 <HAL_DMA_IRQHandler+0x66>
 8002b00:	e06a      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	0010      	movs	r0, r2
 8002b0a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b0c:	e064      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2202      	movs	r2, #2
 8002b14:	409a      	lsls	r2, r3
 8002b16:	0013      	movs	r3, r2
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d02b      	beq.n	8002b76 <HAL_DMA_IRQHandler+0xda>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2202      	movs	r2, #2
 8002b22:	4013      	ands	r3, r2
 8002b24:	d027      	beq.n	8002b76 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d10b      	bne.n	8002b4a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	210a      	movs	r1, #10
 8002b3e:	438a      	bics	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2221      	movs	r2, #33	; 0x21
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b52:	2102      	movs	r1, #2
 8002b54:	4091      	lsls	r1, r2
 8002b56:	000a      	movs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	2100      	movs	r1, #0
 8002b60:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d036      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	0010      	movs	r0, r2
 8002b72:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002b74:	e030      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	0013      	movs	r3, r2
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4013      	ands	r3, r2
 8002b84:	d028      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x13c>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2208      	movs	r2, #8
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d024      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	210e      	movs	r1, #14
 8002b9a:	438a      	bics	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4091      	lsls	r1, r2
 8002baa:	000a      	movs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2221      	movs	r2, #33	; 0x21
 8002bb8:	2101      	movs	r1, #1
 8002bba:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	0010      	movs	r0, r2
 8002bd4:	4798      	blx	r3
    }
   }
}  
 8002bd6:	e7ff      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x13c>
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b004      	add	sp, #16
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4091      	lsls	r1, r2
 8002bfa:	000a      	movs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d108      	bne.n	8002c20 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c1e:	e007      	b.n	8002c30 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	60da      	str	r2, [r3, #12]
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b004      	add	sp, #16
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <DMA_CalcBaseAndBitshift+0x30>)
 8002c46:	4694      	mov	ip, r2
 8002c48:	4463      	add	r3, ip
 8002c4a:	2114      	movs	r1, #20
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7fd fa5b 	bl	8000108 <__udivsi3>
 8002c52:	0003      	movs	r3, r0
 8002c54:	009a      	lsls	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a03      	ldr	r2, [pc, #12]	; (8002c6c <DMA_CalcBaseAndBitshift+0x34>)
 8002c5e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b002      	add	sp, #8
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	bffdfff8 	.word	0xbffdfff8
 8002c6c:	40020000 	.word	0x40020000

08002c70 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603a      	str	r2, [r7, #0]
 8002c7c:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c7e:	2317      	movs	r3, #23
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8002c86:	2316      	movs	r3, #22
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8002c8e:	2315      	movs	r3, #21
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c96:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_FLASH_Program+0x124>)
 8002c98:	7e1b      	ldrb	r3, [r3, #24]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_FLASH_Program+0x32>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e074      	b.n	8002d8c <HAL_FLASH_Program+0x11c>
 8002ca2:	4b3c      	ldr	r3, [pc, #240]	; (8002d94 <HAL_FLASH_Program+0x124>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002ca8:	2317      	movs	r3, #23
 8002caa:	18fe      	adds	r6, r7, r3
 8002cac:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <HAL_FLASH_Program+0x128>)
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 f8ba 	bl	8002e28 <FLASH_WaitForLastOperation>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8002cb8:	2317      	movs	r3, #23
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d15e      	bne.n	8002d80 <HAL_FLASH_Program+0x110>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d104      	bne.n	8002cd2 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002cc8:	2315      	movs	r3, #21
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e00b      	b.n	8002cea <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d104      	bne.n	8002ce2 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002cd8:	2315      	movs	r3, #21
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	2202      	movs	r2, #2
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e003      	b.n	8002cea <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002ce2:	2315      	movs	r3, #21
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8002cea:	2316      	movs	r3, #22
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	e03b      	b.n	8002d6c <HAL_FLASH_Program+0xfc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002cf4:	2316      	movs	r3, #22
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	005a      	lsls	r2, r3, #1
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	18d0      	adds	r0, r2, r3
 8002d00:	2316      	movs	r3, #22
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	001a      	movs	r2, r3
 8002d0a:	3a20      	subs	r2, #32
 8002d0c:	2a00      	cmp	r2, #0
 8002d0e:	db03      	blt.n	8002d18 <HAL_FLASH_Program+0xa8>
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	40d1      	lsrs	r1, r2
 8002d14:	000c      	movs	r4, r1
 8002d16:	e008      	b.n	8002d2a <HAL_FLASH_Program+0xba>
 8002d18:	2220      	movs	r2, #32
 8002d1a:	1ad2      	subs	r2, r2, r3
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4091      	lsls	r1, r2
 8002d20:	000a      	movs	r2, r1
 8002d22:	6839      	ldr	r1, [r7, #0]
 8002d24:	40d9      	lsrs	r1, r3
 8002d26:	000c      	movs	r4, r1
 8002d28:	4314      	orrs	r4, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	40da      	lsrs	r2, r3
 8002d2e:	0015      	movs	r5, r2
 8002d30:	b2a3      	uxth	r3, r4
 8002d32:	0019      	movs	r1, r3
 8002d34:	f000 f85c 	bl	8002df0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d38:	2317      	movs	r3, #23
 8002d3a:	18fe      	adds	r6, r7, r3
 8002d3c:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_FLASH_Program+0x128>)
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 f872 	bl	8002e28 <FLASH_WaitForLastOperation>
 8002d44:	0003      	movs	r3, r0
 8002d46:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_FLASH_Program+0x12c>)
 8002d4a:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <HAL_FLASH_Program+0x12c>)
 8002d4c:	6912      	ldr	r2, [r2, #16]
 8002d4e:	2101      	movs	r1, #1
 8002d50:	438a      	bics	r2, r1
 8002d52:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002d54:	2317      	movs	r3, #23
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10f      	bne.n	8002d7e <HAL_FLASH_Program+0x10e>
    for (index = 0U; index < nbiterations; index++)
 8002d5e:	2316      	movs	r3, #22
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	2316      	movs	r3, #22
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	3201      	adds	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	2316      	movs	r3, #22
 8002d6e:	18fa      	adds	r2, r7, r3
 8002d70:	2315      	movs	r3, #21
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	7812      	ldrb	r2, [r2, #0]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d3bb      	bcc.n	8002cf4 <HAL_FLASH_Program+0x84>
 8002d7c:	e000      	b.n	8002d80 <HAL_FLASH_Program+0x110>
      {
        break;
 8002d7e:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_FLASH_Program+0x124>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	761a      	strb	r2, [r3, #24]

  return status;
 8002d86:	2317      	movs	r3, #23
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	781b      	ldrb	r3, [r3, #0]
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b007      	add	sp, #28
 8002d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d94:	200007f0 	.word	0x200007f0
 8002d98:	0000c350 	.word	0x0000c350
 8002d9c:	40022000 	.word	0x40022000

08002da0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8002da4:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <HAL_FLASH_Unlock+0x28>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	4013      	ands	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_FLASH_Unlock+0x1e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_FLASH_Unlock+0x28>)
 8002db0:	4a06      	ldr	r2, [pc, #24]	; (8002dcc <HAL_FLASH_Unlock+0x2c>)
 8002db2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <HAL_FLASH_Unlock+0x28>)
 8002db6:	4a06      	ldr	r2, [pc, #24]	; (8002dd0 <HAL_FLASH_Unlock+0x30>)
 8002db8:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK; 
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e000      	b.n	8002dc0 <HAL_FLASH_Unlock+0x20>
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40022000 	.word	0x40022000
 8002dcc:	45670123 	.word	0x45670123
 8002dd0:	cdef89ab 	.word	0xcdef89ab

08002dd4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <HAL_FLASH_Lock+0x18>)
 8002dda:	4a04      	ldr	r2, [pc, #16]	; (8002dec <HAL_FLASH_Lock+0x18>)
 8002ddc:	6912      	ldr	r2, [r2, #16]
 8002dde:	2180      	movs	r1, #128	; 0x80
 8002de0:	430a      	orrs	r2, r1
 8002de2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	0018      	movs	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40022000 	.word	0x40022000

08002df0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	000a      	movs	r2, r1
 8002dfa:	1cbb      	adds	r3, r7, #2
 8002dfc:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <FLASH_Program_HalfWord+0x30>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <FLASH_Program_HalfWord+0x34>)
 8002e06:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <FLASH_Program_HalfWord+0x34>)
 8002e08:	6912      	ldr	r2, [r2, #16]
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	1cba      	adds	r2, r7, #2
 8002e14:	8812      	ldrh	r2, [r2, #0]
 8002e16:	801a      	strh	r2, [r3, #0]
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b002      	add	sp, #8
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200007f0 	.word	0x200007f0
 8002e24:	40022000 	.word	0x40022000

08002e28 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff fc0a 	bl	8002648 <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e38:	e00f      	b.n	8002e5a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	d00c      	beq.n	8002e5a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <FLASH_WaitForLastOperation+0x2e>
 8002e46:	f7ff fbff 	bl	8002648 <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad2      	subs	r2, r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d901      	bls.n	8002e5a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e01f      	b.n	8002e9a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <FLASH_WaitForLastOperation+0x7c>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d0e9      	beq.n	8002e3a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <FLASH_WaitForLastOperation+0x7c>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d102      	bne.n	8002e78 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <FLASH_WaitForLastOperation+0x7c>)
 8002e74:	2220      	movs	r2, #32
 8002e76:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <FLASH_WaitForLastOperation+0x7c>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	d005      	beq.n	8002e90 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <FLASH_WaitForLastOperation+0x7c>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2204      	movs	r2, #4
 8002e8a:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d103      	bne.n	8002e98 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002e90:	f000 f80a 	bl	8002ea8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b004      	add	sp, #16
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	40022000 	.word	0x40022000

08002ea8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <FLASH_SetErrorCode+0x58>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d109      	bne.n	8002ed2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002ebe:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <FLASH_SetErrorCode+0x5c>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <FLASH_SetErrorCode+0x5c>)
 8002ec8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <FLASH_SetErrorCode+0x58>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d109      	bne.n	8002ef2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <FLASH_SetErrorCode+0x5c>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <FLASH_SetErrorCode+0x5c>)
 8002ee8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2204      	movs	r2, #4
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002ef2:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <FLASH_SetErrorCode+0x58>)
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	60da      	str	r2, [r3, #12]
}  
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40022000 	.word	0x40022000
 8002f04:	200007f0 	.word	0x200007f0

08002f08 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f12:	230f      	movs	r3, #15
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f1e:	4b33      	ldr	r3, [pc, #204]	; (8002fec <HAL_FLASHEx_Erase+0xe4>)
 8002f20:	7e1b      	ldrb	r3, [r3, #24]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_FLASHEx_Erase+0x22>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e05b      	b.n	8002fe2 <HAL_FLASHEx_Erase+0xda>
 8002f2a:	4b30      	ldr	r3, [pc, #192]	; (8002fec <HAL_FLASHEx_Erase+0xe4>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d116      	bne.n	8002f66 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002f38:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_FLASHEx_Erase+0xe8>)
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f7ff ff74 	bl	8002e28 <FLASH_WaitForLastOperation>
 8002f40:	1e03      	subs	r3, r0, #0
 8002f42:	d148      	bne.n	8002fd6 <HAL_FLASHEx_Erase+0xce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002f44:	f000 f858 	bl	8002ff8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f48:	230f      	movs	r3, #15
 8002f4a:	18fc      	adds	r4, r7, r3
 8002f4c:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <HAL_FLASHEx_Erase+0xe8>)
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff ff6a 	bl	8002e28 <FLASH_WaitForLastOperation>
 8002f54:	0003      	movs	r3, r0
 8002f56:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002f58:	4b26      	ldr	r3, [pc, #152]	; (8002ff4 <HAL_FLASHEx_Erase+0xec>)
 8002f5a:	4a26      	ldr	r2, [pc, #152]	; (8002ff4 <HAL_FLASHEx_Erase+0xec>)
 8002f5c:	6912      	ldr	r2, [r2, #16]
 8002f5e:	2104      	movs	r1, #4
 8002f60:	438a      	bics	r2, r1
 8002f62:	611a      	str	r2, [r3, #16]
 8002f64:	e037      	b.n	8002fd6 <HAL_FLASHEx_Erase+0xce>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002f66:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <HAL_FLASHEx_Erase+0xe8>)
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f7ff ff5d 	bl	8002e28 <FLASH_WaitForLastOperation>
 8002f6e:	1e03      	subs	r3, r0, #0
 8002f70:	d131      	bne.n	8002fd6 <HAL_FLASHEx_Erase+0xce>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2201      	movs	r2, #1
 8002f76:	4252      	negs	r2, r2
 8002f78:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	e020      	b.n	8002fc4 <HAL_FLASHEx_Erase+0xbc>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f000 f84f 	bl	8003028 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f8a:	230f      	movs	r3, #15
 8002f8c:	18fc      	adds	r4, r7, r3
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <HAL_FLASHEx_Erase+0xe8>)
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7ff ff49 	bl	8002e28 <FLASH_WaitForLastOperation>
 8002f96:	0003      	movs	r3, r0
 8002f98:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002f9a:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <HAL_FLASHEx_Erase+0xec>)
 8002f9c:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <HAL_FLASHEx_Erase+0xec>)
 8002f9e:	6912      	ldr	r2, [r2, #16]
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	438a      	bics	r2, r1
 8002fa4:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8002fa6:	230f      	movs	r3, #15
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_FLASHEx_Erase+0xb0>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	601a      	str	r2, [r3, #0]
            break;
 8002fb6:	e00e      	b.n	8002fd6 <HAL_FLASHEx_Erase+0xce>
            address += FLASH_PAGE_SIZE)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2280      	movs	r2, #128	; 0x80
 8002fbc:	00d2      	lsls	r2, r2, #3
 8002fbe:	4694      	mov	ip, r2
 8002fc0:	4463      	add	r3, ip
 8002fc2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	029a      	lsls	r2, r3, #10
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	18d2      	adds	r2, r2, r3
        for(address = pEraseInit->PageAddress;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d8d5      	bhi.n	8002f82 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_FLASHEx_Erase+0xe4>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	761a      	strb	r2, [r3, #24]

  return status;
 8002fdc:	230f      	movs	r3, #15
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	781b      	ldrb	r3, [r3, #0]
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b005      	add	sp, #20
 8002fe8:	bd90      	pop	{r4, r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	200007f0 	.word	0x200007f0
 8002ff0:	0000c350 	.word	0x0000c350
 8002ff4:	40022000 	.word	0x40022000

08002ff8 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <FLASH_MassErase+0x28>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <FLASH_MassErase+0x2c>)
 8003004:	4a07      	ldr	r2, [pc, #28]	; (8003024 <FLASH_MassErase+0x2c>)
 8003006:	6912      	ldr	r2, [r2, #16]
 8003008:	2104      	movs	r1, #4
 800300a:	430a      	orrs	r2, r1
 800300c:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <FLASH_MassErase+0x2c>)
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <FLASH_MassErase+0x2c>)
 8003012:	6912      	ldr	r2, [r2, #16]
 8003014:	2140      	movs	r1, #64	; 0x40
 8003016:	430a      	orrs	r2, r1
 8003018:	611a      	str	r2, [r3, #16]
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	200007f0 	.word	0x200007f0
 8003024:	40022000 	.word	0x40022000

08003028 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <FLASH_PageErase+0x34>)
 8003032:	2200      	movs	r2, #0
 8003034:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <FLASH_PageErase+0x38>)
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <FLASH_PageErase+0x38>)
 800303a:	6912      	ldr	r2, [r2, #16]
 800303c:	2102      	movs	r1, #2
 800303e:	430a      	orrs	r2, r1
 8003040:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <FLASH_PageErase+0x38>)
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <FLASH_PageErase+0x38>)
 800304a:	4a05      	ldr	r2, [pc, #20]	; (8003060 <FLASH_PageErase+0x38>)
 800304c:	6912      	ldr	r2, [r2, #16]
 800304e:	2140      	movs	r1, #64	; 0x40
 8003050:	430a      	orrs	r2, r1
 8003052:	611a      	str	r2, [r3, #16]
}
 8003054:	46c0      	nop			; (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}
 800305c:	200007f0 	.word	0x200007f0
 8003060:	40022000 	.word	0x40022000

08003064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800307a:	e14f      	b.n	800331c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4091      	lsls	r1, r2
 8003086:	000a      	movs	r2, r1
 8003088:	4013      	ands	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d100      	bne.n	8003094 <HAL_GPIO_Init+0x30>
 8003092:	e140      	b.n	8003316 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x40>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b12      	cmp	r3, #18
 80030a2:	d123      	bne.n	80030ec <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	08da      	lsrs	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3208      	adds	r2, #8
 80030ac:	0092      	lsls	r2, r2, #2
 80030ae:	58d3      	ldr	r3, [r2, r3]
 80030b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2207      	movs	r2, #7
 80030b6:	4013      	ands	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	220f      	movs	r2, #15
 80030bc:	409a      	lsls	r2, r3
 80030be:	0013      	movs	r3, r2
 80030c0:	43da      	mvns	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2107      	movs	r1, #7
 80030d0:	400b      	ands	r3, r1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	409a      	lsls	r2, r3
 80030d6:	0013      	movs	r3, r2
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	08da      	lsrs	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	0092      	lsls	r2, r2, #2
 80030e8:	6939      	ldr	r1, [r7, #16]
 80030ea:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	409a      	lsls	r2, r3
 80030fa:	0013      	movs	r3, r2
 80030fc:	43da      	mvns	r2, r3
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2203      	movs	r2, #3
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	409a      	lsls	r2, r3
 8003112:	0013      	movs	r3, r2
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d00b      	beq.n	8003140 <HAL_GPIO_Init+0xdc>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d007      	beq.n	8003140 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003134:	2b11      	cmp	r3, #17
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b12      	cmp	r3, #18
 800313e:	d130      	bne.n	80031a2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	2203      	movs	r2, #3
 800314c:	409a      	lsls	r2, r3
 800314e:	0013      	movs	r3, r2
 8003150:	43da      	mvns	r2, r3
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	409a      	lsls	r2, r3
 8003162:	0013      	movs	r3, r2
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003176:	2201      	movs	r2, #1
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	409a      	lsls	r2, r3
 800317c:	0013      	movs	r3, r2
 800317e:	43da      	mvns	r2, r3
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	2201      	movs	r2, #1
 800318e:	401a      	ands	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	409a      	lsls	r2, r3
 8003194:	0013      	movs	r3, r2
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	2203      	movs	r2, #3
 80031ae:	409a      	lsls	r2, r3
 80031b0:	0013      	movs	r3, r2
 80031b2:	43da      	mvns	r2, r3
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	409a      	lsls	r2, r3
 80031c4:	0013      	movs	r3, r2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	055b      	lsls	r3, r3, #21
 80031da:	4013      	ands	r3, r2
 80031dc:	d100      	bne.n	80031e0 <HAL_GPIO_Init+0x17c>
 80031de:	e09a      	b.n	8003316 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e0:	4b54      	ldr	r3, [pc, #336]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80031e2:	4a54      	ldr	r2, [pc, #336]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80031e4:	6992      	ldr	r2, [r2, #24]
 80031e6:	2101      	movs	r1, #1
 80031e8:	430a      	orrs	r2, r1
 80031ea:	619a      	str	r2, [r3, #24]
 80031ec:	4b51      	ldr	r3, [pc, #324]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2201      	movs	r2, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80031f8:	4a4f      	ldr	r2, [pc, #316]	; (8003338 <HAL_GPIO_Init+0x2d4>)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	089b      	lsrs	r3, r3, #2
 80031fe:	3302      	adds	r3, #2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	589b      	ldr	r3, [r3, r2]
 8003204:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2203      	movs	r2, #3
 800320a:	4013      	ands	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	220f      	movs	r2, #15
 8003210:	409a      	lsls	r2, r3
 8003212:	0013      	movs	r3, r2
 8003214:	43da      	mvns	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	2390      	movs	r3, #144	; 0x90
 8003220:	05db      	lsls	r3, r3, #23
 8003222:	429a      	cmp	r2, r3
 8003224:	d013      	beq.n	800324e <HAL_GPIO_Init+0x1ea>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a44      	ldr	r2, [pc, #272]	; (800333c <HAL_GPIO_Init+0x2d8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00d      	beq.n	800324a <HAL_GPIO_Init+0x1e6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a43      	ldr	r2, [pc, #268]	; (8003340 <HAL_GPIO_Init+0x2dc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <HAL_GPIO_Init+0x1e2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a42      	ldr	r2, [pc, #264]	; (8003344 <HAL_GPIO_Init+0x2e0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_GPIO_Init+0x1de>
 800323e:	2303      	movs	r3, #3
 8003240:	e006      	b.n	8003250 <HAL_GPIO_Init+0x1ec>
 8003242:	2305      	movs	r3, #5
 8003244:	e004      	b.n	8003250 <HAL_GPIO_Init+0x1ec>
 8003246:	2302      	movs	r3, #2
 8003248:	e002      	b.n	8003250 <HAL_GPIO_Init+0x1ec>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_GPIO_Init+0x1ec>
 800324e:	2300      	movs	r3, #0
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	2103      	movs	r1, #3
 8003254:	400a      	ands	r2, r1
 8003256:	0092      	lsls	r2, r2, #2
 8003258:	4093      	lsls	r3, r2
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003260:	4935      	ldr	r1, [pc, #212]	; (8003338 <HAL_GPIO_Init+0x2d4>)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	3302      	adds	r3, #2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_GPIO_Init+0x2e4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	43da      	mvns	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	025b      	lsls	r3, r3, #9
 8003286:	4013      	ands	r3, r2
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003292:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_GPIO_Init+0x2e4>)
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003298:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <HAL_GPIO_Init+0x2e4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	43da      	mvns	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	029b      	lsls	r3, r3, #10
 80032b0:	4013      	ands	r3, r2
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_GPIO_Init+0x2e4>)
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032c2:	4b21      	ldr	r3, [pc, #132]	; (8003348 <HAL_GPIO_Init+0x2e4>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	43da      	mvns	r2, r3
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4013      	ands	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	035b      	lsls	r3, r3, #13
 80032da:	4013      	ands	r3, r2
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032e6:	4b18      	ldr	r3, [pc, #96]	; (8003348 <HAL_GPIO_Init+0x2e4>)
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80032ec:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_GPIO_Init+0x2e4>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	43da      	mvns	r2, r3
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	039b      	lsls	r3, r3, #14
 8003304:	4013      	ands	r3, r2
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003310:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_GPIO_Init+0x2e4>)
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	3301      	adds	r3, #1
 800331a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	40da      	lsrs	r2, r3
 8003324:	1e13      	subs	r3, r2, #0
 8003326:	d000      	beq.n	800332a <HAL_GPIO_Init+0x2c6>
 8003328:	e6a8      	b.n	800307c <HAL_GPIO_Init+0x18>
  } 
}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b006      	add	sp, #24
 8003330:	bd80      	pop	{r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	40021000 	.word	0x40021000
 8003338:	40010000 	.word	0x40010000
 800333c:	48000400 	.word	0x48000400
 8003340:	48000800 	.word	0x48000800
 8003344:	48000c00 	.word	0x48000c00
 8003348:	40010400 	.word	0x40010400

0800334c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	0008      	movs	r0, r1
 8003356:	0011      	movs	r1, r2
 8003358:	1cbb      	adds	r3, r7, #2
 800335a:	1c02      	adds	r2, r0, #0
 800335c:	801a      	strh	r2, [r3, #0]
 800335e:	1c7b      	adds	r3, r7, #1
 8003360:	1c0a      	adds	r2, r1, #0
 8003362:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003364:	1c7b      	adds	r3, r7, #1
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800336c:	1cbb      	adds	r3, r7, #2
 800336e:	881a      	ldrh	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003374:	e003      	b.n	800337e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003376:	1cbb      	adds	r3, r7, #2
 8003378:	881a      	ldrh	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	b002      	add	sp, #8
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	0002      	movs	r2, r0
 8003390:	1dbb      	adds	r3, r7, #6
 8003392:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	1dba      	adds	r2, r7, #6
 800339a:	8812      	ldrh	r2, [r2, #0]
 800339c:	4013      	ands	r3, r2
 800339e:	d008      	beq.n	80033b2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80033a2:	1dba      	adds	r2, r7, #6
 80033a4:	8812      	ldrh	r2, [r2, #0]
 80033a6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033a8:	1dbb      	adds	r3, r7, #6
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f005 f8bd 	bl	800852c <HAL_GPIO_EXTI_Callback>
  }
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b002      	add	sp, #8
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	40010400 	.word	0x40010400

080033c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e081      	b.n	80034d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2241      	movs	r2, #65	; 0x41
 80033d6:	5c9b      	ldrb	r3, [r3, r2]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	2100      	movs	r1, #0
 80033e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f004 ff87 	bl	80082fc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2241      	movs	r2, #65	; 0x41
 80033f2:	2124      	movs	r1, #36	; 0x24
 80033f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	2101      	movs	r1, #1
 8003402:	438a      	bics	r2, r1
 8003404:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6852      	ldr	r2, [r2, #4]
 800340e:	4934      	ldr	r1, [pc, #208]	; (80034e0 <HAL_I2C_Init+0x120>)
 8003410:	400a      	ands	r2, r1
 8003412:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	6892      	ldr	r2, [r2, #8]
 800341e:	4931      	ldr	r1, [pc, #196]	; (80034e4 <HAL_I2C_Init+0x124>)
 8003420:	400a      	ands	r2, r1
 8003422:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d108      	bne.n	800343e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6892      	ldr	r2, [r2, #8]
 8003434:	2180      	movs	r1, #128	; 0x80
 8003436:	0209      	lsls	r1, r1, #8
 8003438:	430a      	orrs	r2, r1
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	e007      	b.n	800344e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6892      	ldr	r2, [r2, #8]
 8003446:	2184      	movs	r1, #132	; 0x84
 8003448:	0209      	lsls	r1, r1, #8
 800344a:	430a      	orrs	r2, r1
 800344c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d104      	bne.n	8003460 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	6852      	ldr	r2, [r2, #4]
 800346a:	491f      	ldr	r1, [pc, #124]	; (80034e8 <HAL_I2C_Init+0x128>)
 800346c:	430a      	orrs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	68d2      	ldr	r2, [r2, #12]
 800347a:	491a      	ldr	r1, [pc, #104]	; (80034e4 <HAL_I2C_Init+0x124>)
 800347c:	400a      	ands	r2, r1
 800347e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6911      	ldr	r1, [r2, #16]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6952      	ldr	r2, [r2, #20]
 800348c:	4311      	orrs	r1, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6992      	ldr	r2, [r2, #24]
 8003492:	0212      	lsls	r2, r2, #8
 8003494:	430a      	orrs	r2, r1
 8003496:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	69d1      	ldr	r1, [r2, #28]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6a12      	ldr	r2, [r2, #32]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	2101      	movs	r1, #1
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2241      	movs	r2, #65	; 0x41
 80034c2:	2120      	movs	r1, #32
 80034c4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2242      	movs	r2, #66	; 0x42
 80034d0:	2100      	movs	r1, #0
 80034d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b002      	add	sp, #8
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	f0ffffff 	.word	0xf0ffffff
 80034e4:	ffff7fff 	.word	0xffff7fff
 80034e8:	02008000 	.word	0x02008000

080034ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	0008      	movs	r0, r1
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	0019      	movs	r1, r3
 80034fa:	230a      	movs	r3, #10
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	1c02      	adds	r2, r0, #0
 8003500:	801a      	strh	r2, [r3, #0]
 8003502:	2308      	movs	r3, #8
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	1c0a      	adds	r2, r1, #0
 8003508:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2241      	movs	r2, #65	; 0x41
 8003512:	5c9b      	ldrb	r3, [r3, r2]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b20      	cmp	r3, #32
 8003518:	d000      	beq.n	800351c <HAL_I2C_Master_Transmit+0x30>
 800351a:	e0f3      	b.n	8003704 <HAL_I2C_Master_Transmit+0x218>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2240      	movs	r2, #64	; 0x40
 8003520:	5c9b      	ldrb	r3, [r3, r2]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_I2C_Master_Transmit+0x3e>
 8003526:	2302      	movs	r3, #2
 8003528:	e0ed      	b.n	8003706 <HAL_I2C_Master_Transmit+0x21a>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2240      	movs	r2, #64	; 0x40
 800352e:	2101      	movs	r1, #1
 8003530:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003532:	f7ff f889 	bl	8002648 <HAL_GetTick>
 8003536:	0003      	movs	r3, r0
 8003538:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	0219      	lsls	r1, r3, #8
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2319      	movs	r3, #25
 8003546:	2201      	movs	r2, #1
 8003548:	f000 fab3 	bl	8003ab2 <I2C_WaitOnFlagUntilTimeout>
 800354c:	1e03      	subs	r3, r0, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e0d8      	b.n	8003706 <HAL_I2C_Master_Transmit+0x21a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2241      	movs	r2, #65	; 0x41
 8003558:	2121      	movs	r1, #33	; 0x21
 800355a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2242      	movs	r2, #66	; 0x42
 8003560:	2110      	movs	r1, #16
 8003562:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2208      	movs	r2, #8
 8003574:	18ba      	adds	r2, r7, r2
 8003576:	8812      	ldrh	r2, [r2, #0]
 8003578:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	2bff      	cmp	r3, #255	; 0xff
 8003588:	d912      	bls.n	80035b0 <HAL_I2C_Master_Transmit+0xc4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	22ff      	movs	r2, #255	; 0xff
 800358e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	b2da      	uxtb	r2, r3
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	045c      	lsls	r4, r3, #17
 800359a:	230a      	movs	r3, #10
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	8819      	ldrh	r1, [r3, #0]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	019b      	lsls	r3, r3, #6
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	0023      	movs	r3, r4
 80035aa:	f000 fb95 	bl	8003cd8 <I2C_TransferConfig>
 80035ae:	e07a      	b.n	80036a6 <HAL_I2C_Master_Transmit+0x1ba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	049c      	lsls	r4, r3, #18
 80035c4:	230a      	movs	r3, #10
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	8819      	ldrh	r1, [r3, #0]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	019b      	lsls	r3, r3, #6
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	0023      	movs	r3, r4
 80035d4:	f000 fb80 	bl	8003cd8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80035d8:	e065      	b.n	80036a6 <HAL_I2C_Master_Transmit+0x1ba>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f000 fa9f 	bl	8003b24 <I2C_WaitOnTXISFlagUntilTimeout>
 80035e6:	1e03      	subs	r3, r0, #0
 80035e8:	d007      	beq.n	80035fa <HAL_I2C_Master_Transmit+0x10e>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d101      	bne.n	80035f6 <HAL_I2C_Master_Transmit+0x10a>
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e087      	b.n	8003706 <HAL_I2C_Master_Transmit+0x21a>
        }
        else
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e085      	b.n	8003706 <HAL_I2C_Master_Transmit+0x21a>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003602:	1c50      	adds	r0, r2, #1
 8003604:	68f9      	ldr	r1, [r7, #12]
 8003606:	6248      	str	r0, [r1, #36]	; 0x24
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	2b00      	cmp	r3, #0
 800362c:	d13b      	bne.n	80036a6 <HAL_I2C_Master_Transmit+0x1ba>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d036      	beq.n	80036a6 <HAL_I2C_Master_Transmit+0x1ba>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	0013      	movs	r3, r2
 8003642:	2200      	movs	r2, #0
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	f000 fa34 	bl	8003ab2 <I2C_WaitOnFlagUntilTimeout>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d001      	beq.n	8003652 <HAL_I2C_Master_Transmit+0x166>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e059      	b.n	8003706 <HAL_I2C_Master_Transmit+0x21a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	2bff      	cmp	r3, #255	; 0xff
 800365a:	d911      	bls.n	8003680 <HAL_I2C_Master_Transmit+0x194>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	22ff      	movs	r2, #255	; 0xff
 8003660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	b2da      	uxtb	r2, r3
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	045c      	lsls	r4, r3, #17
 800366c:	230a      	movs	r3, #10
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	8819      	ldrh	r1, [r3, #0]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	2300      	movs	r3, #0
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	0023      	movs	r3, r4
 800367a:	f000 fb2d 	bl	8003cd8 <I2C_TransferConfig>
 800367e:	e012      	b.n	80036a6 <HAL_I2C_Master_Transmit+0x1ba>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	b2da      	uxtb	r2, r3
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	049c      	lsls	r4, r3, #18
 8003694:	230a      	movs	r3, #10
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	8819      	ldrh	r1, [r3, #0]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	2300      	movs	r3, #0
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	0023      	movs	r3, r4
 80036a2:	f000 fb19 	bl	8003cd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d194      	bne.n	80035da <HAL_I2C_Master_Transmit+0xee>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 fa73 	bl	8003ba2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036bc:	1e03      	subs	r3, r0, #0
 80036be:	d007      	beq.n	80036d0 <HAL_I2C_Master_Transmit+0x1e4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d101      	bne.n	80036cc <HAL_I2C_Master_Transmit+0x1e0>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e01c      	b.n	8003706 <HAL_I2C_Master_Transmit+0x21a>
      }
      else
      {
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e01a      	b.n	8003706 <HAL_I2C_Master_Transmit+0x21a>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2220      	movs	r2, #32
 80036d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	6852      	ldr	r2, [r2, #4]
 80036e2:	490b      	ldr	r1, [pc, #44]	; (8003710 <HAL_I2C_Master_Transmit+0x224>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2241      	movs	r2, #65	; 0x41
 80036ec:	2120      	movs	r1, #32
 80036ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2242      	movs	r2, #66	; 0x42
 80036f4:	2100      	movs	r1, #0
 80036f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2240      	movs	r2, #64	; 0x40
 80036fc:	2100      	movs	r1, #0
 80036fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_I2C_Master_Transmit+0x21a>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b007      	add	sp, #28
 800370c:	bd90      	pop	{r4, r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	fe00e800 	.word	0xfe00e800

08003714 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b089      	sub	sp, #36	; 0x24
 8003718:	af02      	add	r7, sp, #8
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	000c      	movs	r4, r1
 800371e:	0010      	movs	r0, r2
 8003720:	0019      	movs	r1, r3
 8003722:	230a      	movs	r3, #10
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	1c22      	adds	r2, r4, #0
 8003728:	801a      	strh	r2, [r3, #0]
 800372a:	2308      	movs	r3, #8
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	1c02      	adds	r2, r0, #0
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	1dbb      	adds	r3, r7, #6
 8003734:	1c0a      	adds	r2, r1, #0
 8003736:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2241      	movs	r2, #65	; 0x41
 8003740:	5c9b      	ldrb	r3, [r3, r2]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b20      	cmp	r3, #32
 8003746:	d000      	beq.n	800374a <HAL_I2C_Mem_Read+0x36>
 8003748:	e11c      	b.n	8003984 <HAL_I2C_Mem_Read+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <HAL_I2C_Mem_Read+0x46>
 8003750:	232c      	movs	r3, #44	; 0x2c
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_I2C_Mem_Read+0x4a>
    {
      return  HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e113      	b.n	8003986 <HAL_I2C_Mem_Read+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2240      	movs	r2, #64	; 0x40
 8003762:	5c9b      	ldrb	r3, [r3, r2]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_I2C_Mem_Read+0x58>
 8003768:	2302      	movs	r3, #2
 800376a:	e10c      	b.n	8003986 <HAL_I2C_Mem_Read+0x272>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2240      	movs	r2, #64	; 0x40
 8003770:	2101      	movs	r1, #1
 8003772:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003774:	f7fe ff68 	bl	8002648 <HAL_GetTick>
 8003778:	0003      	movs	r3, r0
 800377a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	0219      	lsls	r1, r3, #8
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2319      	movs	r3, #25
 8003788:	2201      	movs	r2, #1
 800378a:	f000 f992 	bl	8003ab2 <I2C_WaitOnFlagUntilTimeout>
 800378e:	1e03      	subs	r3, r0, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Mem_Read+0x82>
    {
      return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e0f7      	b.n	8003986 <HAL_I2C_Mem_Read+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2241      	movs	r2, #65	; 0x41
 800379a:	2122      	movs	r1, #34	; 0x22
 800379c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2242      	movs	r2, #66	; 0x42
 80037a2:	2140      	movs	r1, #64	; 0x40
 80037a4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	222c      	movs	r2, #44	; 0x2c
 80037b6:	18ba      	adds	r2, r7, r2
 80037b8:	8812      	ldrh	r2, [r2, #0]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037c2:	1dbb      	adds	r3, r7, #6
 80037c4:	881c      	ldrh	r4, [r3, #0]
 80037c6:	2308      	movs	r3, #8
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	881a      	ldrh	r2, [r3, #0]
 80037cc:	230a      	movs	r3, #10
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	8819      	ldrh	r1, [r3, #0]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	0023      	movs	r3, r4
 80037de:	f000 f8d9 	bl	8003994 <I2C_RequestMemoryRead>
 80037e2:	1e03      	subs	r3, r0, #0
 80037e4:	d00f      	beq.n	8003806 <HAL_I2C_Mem_Read+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d105      	bne.n	80037fa <HAL_I2C_Mem_Read+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2240      	movs	r2, #64	; 0x40
 80037f2:	2100      	movs	r1, #0
 80037f4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e0c5      	b.n	8003986 <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2240      	movs	r2, #64	; 0x40
 80037fe:	2100      	movs	r1, #0
 8003800:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e0bf      	b.n	8003986 <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2bff      	cmp	r3, #255	; 0xff
 800380e:	d912      	bls.n	8003836 <HAL_I2C_Mem_Read+0x122>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	22ff      	movs	r2, #255	; 0xff
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	b2da      	uxtb	r2, r3
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	045c      	lsls	r4, r3, #17
 8003820:	230a      	movs	r3, #10
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	8819      	ldrh	r1, [r3, #0]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	2390      	movs	r3, #144	; 0x90
 800382a:	019b      	lsls	r3, r3, #6
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	0023      	movs	r3, r4
 8003830:	f000 fa52 	bl	8003cd8 <I2C_TransferConfig>
 8003834:	e013      	b.n	800385e <HAL_I2C_Mem_Read+0x14a>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	b2da      	uxtb	r2, r3
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	049c      	lsls	r4, r3, #18
 800384a:	230a      	movs	r3, #10
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	8819      	ldrh	r1, [r3, #0]
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	2390      	movs	r3, #144	; 0x90
 8003854:	019b      	lsls	r3, r3, #6
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	0023      	movs	r3, r4
 800385a:	f000 fa3d 	bl	8003cd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800385e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	0013      	movs	r3, r2
 8003868:	2200      	movs	r2, #0
 800386a:	2104      	movs	r1, #4
 800386c:	f000 f921 	bl	8003ab2 <I2C_WaitOnFlagUntilTimeout>
 8003870:	1e03      	subs	r3, r0, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Mem_Read+0x164>
      {
        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e086      	b.n	8003986 <HAL_I2C_Mem_Read+0x272>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	1c59      	adds	r1, r3, #1
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	6251      	str	r1, [r2, #36]	; 0x24
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d13b      	bne.n	8003926 <HAL_I2C_Mem_Read+0x212>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d036      	beq.n	8003926 <HAL_I2C_Mem_Read+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	0013      	movs	r3, r2
 80038c2:	2200      	movs	r2, #0
 80038c4:	2180      	movs	r1, #128	; 0x80
 80038c6:	f000 f8f4 	bl	8003ab2 <I2C_WaitOnFlagUntilTimeout>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_I2C_Mem_Read+0x1be>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e059      	b.n	8003986 <HAL_I2C_Mem_Read+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2bff      	cmp	r3, #255	; 0xff
 80038da:	d911      	bls.n	8003900 <HAL_I2C_Mem_Read+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	22ff      	movs	r2, #255	; 0xff
 80038e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	045c      	lsls	r4, r3, #17
 80038ec:	230a      	movs	r3, #10
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	8819      	ldrh	r1, [r3, #0]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	2300      	movs	r3, #0
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	0023      	movs	r3, r4
 80038fa:	f000 f9ed 	bl	8003cd8 <I2C_TransferConfig>
 80038fe:	e012      	b.n	8003926 <HAL_I2C_Mem_Read+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	b2da      	uxtb	r2, r3
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	049c      	lsls	r4, r3, #18
 8003914:	230a      	movs	r3, #10
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	8819      	ldrh	r1, [r3, #0]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	2300      	movs	r3, #0
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	0023      	movs	r3, r4
 8003922:	f000 f9d9 	bl	8003cd8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d196      	bne.n	800385e <HAL_I2C_Mem_Read+0x14a>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	0018      	movs	r0, r3
 8003938:	f000 f933 	bl	8003ba2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800393c:	1e03      	subs	r3, r0, #0
 800393e:	d007      	beq.n	8003950 <HAL_I2C_Mem_Read+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	2b04      	cmp	r3, #4
 8003946:	d101      	bne.n	800394c <HAL_I2C_Mem_Read+0x238>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e01c      	b.n	8003986 <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e01a      	b.n	8003986 <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2220      	movs	r2, #32
 8003956:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	6852      	ldr	r2, [r2, #4]
 8003962:	490b      	ldr	r1, [pc, #44]	; (8003990 <HAL_I2C_Mem_Read+0x27c>)
 8003964:	400a      	ands	r2, r1
 8003966:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2241      	movs	r2, #65	; 0x41
 800396c:	2120      	movs	r1, #32
 800396e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2242      	movs	r2, #66	; 0x42
 8003974:	2100      	movs	r1, #0
 8003976:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2240      	movs	r2, #64	; 0x40
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_I2C_Mem_Read+0x272>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b007      	add	sp, #28
 800398c:	bd90      	pop	{r4, r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	fe00e800 	.word	0xfe00e800

08003994 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b087      	sub	sp, #28
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	000c      	movs	r4, r1
 800399e:	0010      	movs	r0, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	230a      	movs	r3, #10
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	1c22      	adds	r2, r4, #0
 80039a8:	801a      	strh	r2, [r3, #0]
 80039aa:	2308      	movs	r3, #8
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	1c02      	adds	r2, r0, #0
 80039b0:	801a      	strh	r2, [r3, #0]
 80039b2:	1dbb      	adds	r3, r7, #6
 80039b4:	1c0a      	adds	r2, r1, #0
 80039b6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80039b8:	1dbb      	adds	r3, r7, #6
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	230a      	movs	r3, #10
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	8819      	ldrh	r1, [r3, #0]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	019b      	lsls	r3, r3, #6
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	2300      	movs	r3, #0
 80039ce:	f000 f983 	bl	8003cd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	6a39      	ldr	r1, [r7, #32]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 f8a3 	bl	8003b24 <I2C_WaitOnTXISFlagUntilTimeout>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d007      	beq.n	80039f2 <I2C_RequestMemoryRead+0x5e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d101      	bne.n	80039ee <I2C_RequestMemoryRead+0x5a>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e03b      	b.n	8003a66 <I2C_RequestMemoryRead+0xd2>
    }
    else
    {
      return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e039      	b.n	8003a66 <I2C_RequestMemoryRead+0xd2>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039f2:	1dbb      	adds	r3, r7, #6
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d107      	bne.n	8003a0a <I2C_RequestMemoryRead+0x76>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2208      	movs	r2, #8
 8003a00:	18ba      	adds	r2, r7, r2
 8003a02:	8812      	ldrh	r2, [r2, #0]
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
 8003a08:	e01f      	b.n	8003a4a <I2C_RequestMemoryRead+0xb6>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2208      	movs	r2, #8
 8003a10:	18ba      	adds	r2, r7, r2
 8003a12:	8812      	ldrh	r2, [r2, #0]
 8003a14:	0a12      	lsrs	r2, r2, #8
 8003a16:	b292      	uxth	r2, r2
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	6a39      	ldr	r1, [r7, #32]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 f87e 	bl	8003b24 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a28:	1e03      	subs	r3, r0, #0
 8003a2a:	d007      	beq.n	8003a3c <I2C_RequestMemoryRead+0xa8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d101      	bne.n	8003a38 <I2C_RequestMemoryRead+0xa4>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e016      	b.n	8003a66 <I2C_RequestMemoryRead+0xd2>
      }
      else
      {
        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e014      	b.n	8003a66 <I2C_RequestMemoryRead+0xd2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2208      	movs	r2, #8
 8003a42:	18ba      	adds	r2, r7, r2
 8003a44:	8812      	ldrh	r2, [r2, #0]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a4a:	6a3a      	ldr	r2, [r7, #32]
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	0013      	movs	r3, r2
 8003a54:	2200      	movs	r2, #0
 8003a56:	2140      	movs	r1, #64	; 0x40
 8003a58:	f000 f82b 	bl	8003ab2 <I2C_WaitOnFlagUntilTimeout>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d001      	beq.n	8003a64 <I2C_RequestMemoryRead+0xd0>
  {
    return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e000      	b.n	8003a66 <I2C_RequestMemoryRead+0xd2>
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b005      	add	sp, #20
 8003a6c:	bd90      	pop	{r4, r7, pc}

08003a6e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d103      	bne.n	8003a8c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2201      	movs	r2, #1
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d007      	beq.n	8003aaa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	6992      	ldr	r2, [r2, #24]
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	619a      	str	r2, [r3, #24]
  }
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b002      	add	sp, #8
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	1dfb      	adds	r3, r7, #7
 8003ac0:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac2:	e01b      	b.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	d018      	beq.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003ad0:	f7fe fdba 	bl	8002648 <HAL_GetTick>
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	1ad2      	subs	r2, r2, r3
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d90d      	bls.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2241      	movs	r2, #65	; 0x41
 8003ae4:	2120      	movs	r1, #32
 8003ae6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2242      	movs	r2, #66	; 0x42
 8003aec:	2100      	movs	r1, #0
 8003aee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2240      	movs	r2, #64	; 0x40
 8003af4:	2100      	movs	r1, #0
 8003af6:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e00f      	b.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	401a      	ands	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	425a      	negs	r2, r3
 8003b0c:	4153      	adcs	r3, r2
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	001a      	movs	r2, r3
 8003b12:	1dfb      	adds	r3, r7, #7
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d0d4      	beq.n	8003ac4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b004      	add	sp, #16
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b30:	e02b      	b.n	8003b8a <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 f86f 	bl	8003c1c <I2C_IsAcknowledgeFailed>
 8003b3e:	1e03      	subs	r3, r0, #0
 8003b40:	d001      	beq.n	8003b46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e029      	b.n	8003b9a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	d01e      	beq.n	8003b8a <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003b52:	f7fe fd79 	bl	8002648 <HAL_GetTick>
 8003b56:	0002      	movs	r2, r0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	1ad2      	subs	r2, r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d913      	bls.n	8003b8a <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	2220      	movs	r2, #32
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2241      	movs	r2, #65	; 0x41
 8003b72:	2120      	movs	r1, #32
 8003b74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2242      	movs	r2, #66	; 0x42
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2240      	movs	r2, #64	; 0x40
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e007      	b.n	8003b9a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2202      	movs	r2, #2
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d1cc      	bne.n	8003b32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bae:	e028      	b.n	8003c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f000 f830 	bl	8003c1c <I2C_IsAcknowledgeFailed>
 8003bbc:	1e03      	subs	r3, r0, #0
 8003bbe:	d001      	beq.n	8003bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e026      	b.n	8003c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bca:	f7fe fd3d 	bl	8002648 <HAL_GetTick>
 8003bce:	0002      	movs	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1ad2      	subs	r2, r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d913      	bls.n	8003c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	2220      	movs	r2, #32
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2241      	movs	r2, #65	; 0x41
 8003bea:	2120      	movs	r1, #32
 8003bec:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2242      	movs	r2, #66	; 0x42
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2240      	movs	r2, #64	; 0x40
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e007      	b.n	8003c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d1cf      	bne.n	8003bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b004      	add	sp, #16
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2210      	movs	r2, #16
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d148      	bne.n	8003cc8 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c36:	e01b      	b.n	8003c70 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	d018      	beq.n	8003c70 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <I2C_IsAcknowledgeFailed+0x38>
 8003c44:	f7fe fd00 	bl	8002648 <HAL_GetTick>
 8003c48:	0002      	movs	r2, r0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	1ad2      	subs	r2, r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d90d      	bls.n	8003c70 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2241      	movs	r2, #65	; 0x41
 8003c58:	2120      	movs	r1, #32
 8003c5a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2242      	movs	r2, #66	; 0x42
 8003c60:	2100      	movs	r1, #0
 8003c62:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2240      	movs	r2, #64	; 0x40
 8003c68:	2100      	movs	r1, #0
 8003c6a:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e02c      	b.n	8003cca <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2220      	movs	r2, #32
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d1dc      	bne.n	8003c38 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2210      	movs	r2, #16
 8003c84:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f7ff feec 	bl	8003a6e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	6852      	ldr	r2, [r2, #4]
 8003ca0:	490c      	ldr	r1, [pc, #48]	; (8003cd4 <I2C_IsAcknowledgeFailed+0xb8>)
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2204      	movs	r2, #4
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2241      	movs	r2, #65	; 0x41
 8003cb0:	2120      	movs	r1, #32
 8003cb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2242      	movs	r2, #66	; 0x42
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2240      	movs	r2, #64	; 0x40
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b004      	add	sp, #16
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	fe00e800 	.word	0xfe00e800

08003cd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	0008      	movs	r0, r1
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	230a      	movs	r3, #10
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	1c02      	adds	r2, r0, #0
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	2309      	movs	r3, #9
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	1c0a      	adds	r2, r1, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	4a0f      	ldr	r2, [pc, #60]	; (8003d44 <I2C_TransferConfig+0x6c>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8003d0a:	230a      	movs	r3, #10
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	059b      	lsls	r3, r3, #22
 8003d12:	0d9a      	lsrs	r2, r3, #22
 8003d14:	2309      	movs	r3, #9
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	0419      	lsls	r1, r3, #16
 8003d1c:	23ff      	movs	r3, #255	; 0xff
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	400b      	ands	r3, r1
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	605a      	str	r2, [r3, #4]
}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b006      	add	sp, #24
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	fc009800 	.word	0xfc009800

08003d48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2241      	movs	r2, #65	; 0x41
 8003d56:	5c9b      	ldrb	r3, [r3, r2]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d138      	bne.n	8003dd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2240      	movs	r2, #64	; 0x40
 8003d62:	5c9b      	ldrb	r3, [r3, r2]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e032      	b.n	8003dd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2240      	movs	r2, #64	; 0x40
 8003d70:	2101      	movs	r1, #1
 8003d72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2241      	movs	r2, #65	; 0x41
 8003d78:	2124      	movs	r1, #36	; 0x24
 8003d7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	2101      	movs	r1, #1
 8003d88:	438a      	bics	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	4911      	ldr	r1, [pc, #68]	; (8003ddc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	6811      	ldr	r1, [r2, #0]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	2101      	movs	r1, #1
 8003db8:	430a      	orrs	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2241      	movs	r2, #65	; 0x41
 8003dc0:	2120      	movs	r1, #32
 8003dc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2240      	movs	r2, #64	; 0x40
 8003dc8:	2100      	movs	r1, #0
 8003dca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b002      	add	sp, #8
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	ffffefff 	.word	0xffffefff

08003de0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2241      	movs	r2, #65	; 0x41
 8003df2:	5c9b      	ldrb	r3, [r3, r2]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d139      	bne.n	8003e6e <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2240      	movs	r2, #64	; 0x40
 8003dfe:	5c9b      	ldrb	r3, [r3, r2]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e033      	b.n	8003e70 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2241      	movs	r2, #65	; 0x41
 8003e14:	2124      	movs	r1, #36	; 0x24
 8003e16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	2101      	movs	r1, #1
 8003e24:	438a      	bics	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a11      	ldr	r2, [pc, #68]	; (8003e78 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	2101      	movs	r1, #1
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2241      	movs	r2, #65	; 0x41
 8003e5e:	2120      	movs	r1, #32
 8003e60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2240      	movs	r2, #64	; 0x40
 8003e66:	2100      	movs	r1, #0
 8003e68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
  }
}
 8003e70:	0018      	movs	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b004      	add	sp, #16
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	fffff0ff 	.word	0xfffff0ff

08003e7c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e036      	b.n	8003efc <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <HAL_IWDG_Init+0x88>)
 8003e94:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <HAL_IWDG_Init+0x8c>)
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6852      	ldr	r2, [r2, #4]
 8003ea6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6892      	ldr	r2, [r2, #8]
 8003eb0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003eb2:	f7fe fbc9 	bl	8002648 <HAL_GetTick>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	60fb      	str	r3, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_IWDG_Init+0x52>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003ebc:	f7fe fbc4 	bl	8002648 <HAL_GetTick>
 8003ec0:	0002      	movs	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b27      	cmp	r3, #39	; 0x27
 8003ec8:	d901      	bls.n	8003ece <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e016      	b.n	8003efc <HAL_IWDG_Init+0x80>
  while(hiwdg->Instance->SR != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f1      	bne.n	8003ebc <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d005      	beq.n	8003ef2 <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68d2      	ldr	r2, [r2, #12]
 8003eee:	611a      	str	r2, [r3, #16]
 8003ef0:	e003      	b.n	8003efa <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <HAL_IWDG_Init+0x90>)
 8003ef8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b004      	add	sp, #16
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	0000cccc 	.word	0x0000cccc
 8003f08:	00005555 	.word	0x00005555
 8003f0c:	0000aaaa 	.word	0x0000aaaa

08003f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2201      	movs	r2, #1
 8003f22:	4013      	ands	r3, r2
 8003f24:	d100      	bne.n	8003f28 <HAL_RCC_OscConfig+0x18>
 8003f26:	e08d      	b.n	8004044 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f28:	4bc3      	ldr	r3, [pc, #780]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	220c      	movs	r2, #12
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d00e      	beq.n	8003f52 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f34:	4bc0      	ldr	r3, [pc, #768]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	220c      	movs	r2, #12
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d116      	bne.n	8003f6e <HAL_RCC_OscConfig+0x5e>
 8003f40:	4bbd      	ldr	r3, [pc, #756]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	025b      	lsls	r3, r3, #9
 8003f48:	401a      	ands	r2, r3
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	025b      	lsls	r3, r3, #9
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d10d      	bne.n	8003f6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f52:	4bb9      	ldr	r3, [pc, #740]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	029b      	lsls	r3, r3, #10
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d100      	bne.n	8003f60 <HAL_RCC_OscConfig+0x50>
 8003f5e:	e070      	b.n	8004042 <HAL_RCC_OscConfig+0x132>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d000      	beq.n	8003f6a <HAL_RCC_OscConfig+0x5a>
 8003f68:	e06b      	b.n	8004042 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e2b5      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_OscConfig+0x76>
 8003f76:	4bb0      	ldr	r3, [pc, #704]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003f78:	4aaf      	ldr	r2, [pc, #700]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	2180      	movs	r1, #128	; 0x80
 8003f7e:	0249      	lsls	r1, r1, #9
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	e02f      	b.n	8003fe6 <HAL_RCC_OscConfig+0xd6>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x98>
 8003f8e:	4baa      	ldr	r3, [pc, #680]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003f90:	4aa9      	ldr	r2, [pc, #676]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	49a9      	ldr	r1, [pc, #676]	; (800423c <HAL_RCC_OscConfig+0x32c>)
 8003f96:	400a      	ands	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	4ba7      	ldr	r3, [pc, #668]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003f9c:	4aa6      	ldr	r2, [pc, #664]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	49a7      	ldr	r1, [pc, #668]	; (8004240 <HAL_RCC_OscConfig+0x330>)
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e01e      	b.n	8003fe6 <HAL_RCC_OscConfig+0xd6>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	d10e      	bne.n	8003fce <HAL_RCC_OscConfig+0xbe>
 8003fb0:	4ba1      	ldr	r3, [pc, #644]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003fb2:	4aa1      	ldr	r2, [pc, #644]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	2180      	movs	r1, #128	; 0x80
 8003fb8:	02c9      	lsls	r1, r1, #11
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	4b9e      	ldr	r3, [pc, #632]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003fc0:	4a9d      	ldr	r2, [pc, #628]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	2180      	movs	r1, #128	; 0x80
 8003fc6:	0249      	lsls	r1, r1, #9
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e00b      	b.n	8003fe6 <HAL_RCC_OscConfig+0xd6>
 8003fce:	4b9a      	ldr	r3, [pc, #616]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003fd0:	4a99      	ldr	r2, [pc, #612]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	4999      	ldr	r1, [pc, #612]	; (800423c <HAL_RCC_OscConfig+0x32c>)
 8003fd6:	400a      	ands	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	4b97      	ldr	r3, [pc, #604]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003fdc:	4a96      	ldr	r2, [pc, #600]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	4997      	ldr	r1, [pc, #604]	; (8004240 <HAL_RCC_OscConfig+0x330>)
 8003fe2:	400a      	ands	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d014      	beq.n	8004018 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fee:	f7fe fb2b 	bl	8002648 <HAL_GetTick>
 8003ff2:	0003      	movs	r3, r0
 8003ff4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7fe fb26 	bl	8002648 <HAL_GetTick>
 8003ffc:	0002      	movs	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e267      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	4b8b      	ldr	r3, [pc, #556]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	029b      	lsls	r3, r3, #10
 8004012:	4013      	ands	r3, r2
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0xe8>
 8004016:	e015      	b.n	8004044 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fe fb16 	bl	8002648 <HAL_GetTick>
 800401c:	0003      	movs	r3, r0
 800401e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004022:	f7fe fb11 	bl	8002648 <HAL_GetTick>
 8004026:	0002      	movs	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b64      	cmp	r3, #100	; 0x64
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e252      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004034:	4b80      	ldr	r3, [pc, #512]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	029b      	lsls	r3, r3, #10
 800403c:	4013      	ands	r3, r2
 800403e:	d1f0      	bne.n	8004022 <HAL_RCC_OscConfig+0x112>
 8004040:	e000      	b.n	8004044 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004042:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2202      	movs	r2, #2
 800404a:	4013      	ands	r3, r2
 800404c:	d100      	bne.n	8004050 <HAL_RCC_OscConfig+0x140>
 800404e:	e069      	b.n	8004124 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004050:	4b79      	ldr	r3, [pc, #484]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	220c      	movs	r2, #12
 8004056:	4013      	ands	r3, r2
 8004058:	d00b      	beq.n	8004072 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800405a:	4b77      	ldr	r3, [pc, #476]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	220c      	movs	r2, #12
 8004060:	4013      	ands	r3, r2
 8004062:	2b08      	cmp	r3, #8
 8004064:	d11c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x190>
 8004066:	4b74      	ldr	r3, [pc, #464]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	2380      	movs	r3, #128	; 0x80
 800406c:	025b      	lsls	r3, r3, #9
 800406e:	4013      	ands	r3, r2
 8004070:	d116      	bne.n	80040a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004072:	4b71      	ldr	r3, [pc, #452]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2202      	movs	r2, #2
 8004078:	4013      	ands	r3, r2
 800407a:	d005      	beq.n	8004088 <HAL_RCC_OscConfig+0x178>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d001      	beq.n	8004088 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e228      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	4a6b      	ldr	r2, [pc, #428]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 800408a:	4b6b      	ldr	r3, [pc, #428]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	21f8      	movs	r1, #248	; 0xf8
 8004090:	438b      	bics	r3, r1
 8004092:	0019      	movs	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	430b      	orrs	r3, r1
 800409c:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409e:	e041      	b.n	8004124 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d024      	beq.n	80040f2 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a8:	4b63      	ldr	r3, [pc, #396]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 80040aa:	4a63      	ldr	r2, [pc, #396]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	2101      	movs	r1, #1
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fe fac8 	bl	8002648 <HAL_GetTick>
 80040b8:	0003      	movs	r3, r0
 80040ba:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040be:	f7fe fac3 	bl	8002648 <HAL_GetTick>
 80040c2:	0002      	movs	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e204      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d0:	4b59      	ldr	r3, [pc, #356]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2202      	movs	r2, #2
 80040d6:	4013      	ands	r3, r2
 80040d8:	d0f1      	beq.n	80040be <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040da:	4a57      	ldr	r2, [pc, #348]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 80040dc:	4b56      	ldr	r3, [pc, #344]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	21f8      	movs	r1, #248	; 0xf8
 80040e2:	438b      	bics	r3, r1
 80040e4:	0019      	movs	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	e018      	b.n	8004124 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f2:	4b51      	ldr	r3, [pc, #324]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 80040f4:	4a50      	ldr	r2, [pc, #320]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	438a      	bics	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fe:	f7fe faa3 	bl	8002648 <HAL_GetTick>
 8004102:	0003      	movs	r3, r0
 8004104:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004108:	f7fe fa9e 	bl	8002648 <HAL_GetTick>
 800410c:	0002      	movs	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e1df      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411a:	4b47      	ldr	r3, [pc, #284]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2202      	movs	r2, #2
 8004120:	4013      	ands	r3, r2
 8004122:	d1f1      	bne.n	8004108 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2208      	movs	r2, #8
 800412a:	4013      	ands	r3, r2
 800412c:	d036      	beq.n	800419c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d019      	beq.n	800416a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004136:	4b40      	ldr	r3, [pc, #256]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8004138:	4a3f      	ldr	r2, [pc, #252]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 800413a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800413c:	2101      	movs	r1, #1
 800413e:	430a      	orrs	r2, r1
 8004140:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004142:	f7fe fa81 	bl	8002648 <HAL_GetTick>
 8004146:	0003      	movs	r3, r0
 8004148:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414c:	f7fe fa7c 	bl	8002648 <HAL_GetTick>
 8004150:	0002      	movs	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1bd      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	4b36      	ldr	r3, [pc, #216]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	2202      	movs	r2, #2
 8004164:	4013      	ands	r3, r2
 8004166:	d0f1      	beq.n	800414c <HAL_RCC_OscConfig+0x23c>
 8004168:	e018      	b.n	800419c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416a:	4b33      	ldr	r3, [pc, #204]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 800416c:	4a32      	ldr	r2, [pc, #200]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 800416e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004170:	2101      	movs	r1, #1
 8004172:	438a      	bics	r2, r1
 8004174:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004176:	f7fe fa67 	bl	8002648 <HAL_GetTick>
 800417a:	0003      	movs	r3, r0
 800417c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004180:	f7fe fa62 	bl	8002648 <HAL_GetTick>
 8004184:	0002      	movs	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e1a3      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004192:	4b29      	ldr	r3, [pc, #164]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2202      	movs	r2, #2
 8004198:	4013      	ands	r3, r2
 800419a:	d1f1      	bne.n	8004180 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2204      	movs	r2, #4
 80041a2:	4013      	ands	r3, r2
 80041a4:	d100      	bne.n	80041a8 <HAL_RCC_OscConfig+0x298>
 80041a6:	e0b5      	b.n	8004314 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a8:	2317      	movs	r3, #23
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b0:	4b21      	ldr	r3, [pc, #132]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	055b      	lsls	r3, r3, #21
 80041b8:	4013      	ands	r3, r2
 80041ba:	d111      	bne.n	80041e0 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	4b1e      	ldr	r3, [pc, #120]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 80041be:	4a1e      	ldr	r2, [pc, #120]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 80041c0:	69d2      	ldr	r2, [r2, #28]
 80041c2:	2180      	movs	r1, #128	; 0x80
 80041c4:	0549      	lsls	r1, r1, #21
 80041c6:	430a      	orrs	r2, r1
 80041c8:	61da      	str	r2, [r3, #28]
 80041ca:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	055b      	lsls	r3, r3, #21
 80041d2:	4013      	ands	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041d8:	2317      	movs	r3, #23
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	2201      	movs	r2, #1
 80041de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e0:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_RCC_OscConfig+0x334>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4013      	ands	r3, r2
 80041ea:	d11a      	bne.n	8004222 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ec:	4b15      	ldr	r3, [pc, #84]	; (8004244 <HAL_RCC_OscConfig+0x334>)
 80041ee:	4a15      	ldr	r2, [pc, #84]	; (8004244 <HAL_RCC_OscConfig+0x334>)
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	2180      	movs	r1, #128	; 0x80
 80041f4:	0049      	lsls	r1, r1, #1
 80041f6:	430a      	orrs	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fa:	f7fe fa25 	bl	8002648 <HAL_GetTick>
 80041fe:	0003      	movs	r3, r0
 8004200:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004204:	f7fe fa20 	bl	8002648 <HAL_GetTick>
 8004208:	0002      	movs	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e161      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004216:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCC_OscConfig+0x334>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	4013      	ands	r3, r2
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d10e      	bne.n	8004248 <HAL_RCC_OscConfig+0x338>
 800422a:	4b03      	ldr	r3, [pc, #12]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 800422c:	4a02      	ldr	r2, [pc, #8]	; (8004238 <HAL_RCC_OscConfig+0x328>)
 800422e:	6a12      	ldr	r2, [r2, #32]
 8004230:	2101      	movs	r1, #1
 8004232:	430a      	orrs	r2, r1
 8004234:	621a      	str	r2, [r3, #32]
 8004236:	e035      	b.n	80042a4 <HAL_RCC_OscConfig+0x394>
 8004238:	40021000 	.word	0x40021000
 800423c:	fffeffff 	.word	0xfffeffff
 8004240:	fffbffff 	.word	0xfffbffff
 8004244:	40007000 	.word	0x40007000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10c      	bne.n	800426a <HAL_RCC_OscConfig+0x35a>
 8004250:	4ba4      	ldr	r3, [pc, #656]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004252:	4aa4      	ldr	r2, [pc, #656]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004254:	6a12      	ldr	r2, [r2, #32]
 8004256:	2101      	movs	r1, #1
 8004258:	438a      	bics	r2, r1
 800425a:	621a      	str	r2, [r3, #32]
 800425c:	4ba1      	ldr	r3, [pc, #644]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 800425e:	4aa1      	ldr	r2, [pc, #644]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004260:	6a12      	ldr	r2, [r2, #32]
 8004262:	2104      	movs	r1, #4
 8004264:	438a      	bics	r2, r1
 8004266:	621a      	str	r2, [r3, #32]
 8004268:	e01c      	b.n	80042a4 <HAL_RCC_OscConfig+0x394>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b05      	cmp	r3, #5
 8004270:	d10c      	bne.n	800428c <HAL_RCC_OscConfig+0x37c>
 8004272:	4b9c      	ldr	r3, [pc, #624]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004274:	4a9b      	ldr	r2, [pc, #620]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004276:	6a12      	ldr	r2, [r2, #32]
 8004278:	2104      	movs	r1, #4
 800427a:	430a      	orrs	r2, r1
 800427c:	621a      	str	r2, [r3, #32]
 800427e:	4b99      	ldr	r3, [pc, #612]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004280:	4a98      	ldr	r2, [pc, #608]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004282:	6a12      	ldr	r2, [r2, #32]
 8004284:	2101      	movs	r1, #1
 8004286:	430a      	orrs	r2, r1
 8004288:	621a      	str	r2, [r3, #32]
 800428a:	e00b      	b.n	80042a4 <HAL_RCC_OscConfig+0x394>
 800428c:	4b95      	ldr	r3, [pc, #596]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 800428e:	4a95      	ldr	r2, [pc, #596]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004290:	6a12      	ldr	r2, [r2, #32]
 8004292:	2101      	movs	r1, #1
 8004294:	438a      	bics	r2, r1
 8004296:	621a      	str	r2, [r3, #32]
 8004298:	4b92      	ldr	r3, [pc, #584]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 800429a:	4a92      	ldr	r2, [pc, #584]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 800429c:	6a12      	ldr	r2, [r2, #32]
 800429e:	2104      	movs	r1, #4
 80042a0:	438a      	bics	r2, r1
 80042a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d014      	beq.n	80042d6 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ac:	f7fe f9cc 	bl	8002648 <HAL_GetTick>
 80042b0:	0003      	movs	r3, r0
 80042b2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b4:	e009      	b.n	80042ca <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7fe f9c7 	bl	8002648 <HAL_GetTick>
 80042ba:	0002      	movs	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	4a89      	ldr	r2, [pc, #548]	; (80044e8 <HAL_RCC_OscConfig+0x5d8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e107      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ca:	4b86      	ldr	r3, [pc, #536]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	2202      	movs	r2, #2
 80042d0:	4013      	ands	r3, r2
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x3a6>
 80042d4:	e013      	b.n	80042fe <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d6:	f7fe f9b7 	bl	8002648 <HAL_GetTick>
 80042da:	0003      	movs	r3, r0
 80042dc:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042de:	e009      	b.n	80042f4 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fe f9b2 	bl	8002648 <HAL_GetTick>
 80042e4:	0002      	movs	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	4a7f      	ldr	r2, [pc, #508]	; (80044e8 <HAL_RCC_OscConfig+0x5d8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e0f2      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f4:	4b7b      	ldr	r3, [pc, #492]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	2202      	movs	r2, #2
 80042fa:	4013      	ands	r3, r2
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042fe:	2317      	movs	r3, #23
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d105      	bne.n	8004314 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004308:	4b76      	ldr	r3, [pc, #472]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 800430a:	4a76      	ldr	r2, [pc, #472]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 800430c:	69d2      	ldr	r2, [r2, #28]
 800430e:	4977      	ldr	r1, [pc, #476]	; (80044ec <HAL_RCC_OscConfig+0x5dc>)
 8004310:	400a      	ands	r2, r1
 8004312:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2210      	movs	r2, #16
 800431a:	4013      	ands	r3, r2
 800431c:	d063      	beq.n	80043e6 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d12a      	bne.n	800437c <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004326:	4b6f      	ldr	r3, [pc, #444]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004328:	4a6e      	ldr	r2, [pc, #440]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 800432a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800432c:	2104      	movs	r1, #4
 800432e:	430a      	orrs	r2, r1
 8004330:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004332:	4b6c      	ldr	r3, [pc, #432]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004334:	4a6b      	ldr	r2, [pc, #428]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004336:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004338:	2101      	movs	r1, #1
 800433a:	430a      	orrs	r2, r1
 800433c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433e:	f7fe f983 	bl	8002648 <HAL_GetTick>
 8004342:	0003      	movs	r3, r0
 8004344:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004348:	f7fe f97e 	bl	8002648 <HAL_GetTick>
 800434c:	0002      	movs	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e0bf      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800435a:	4b62      	ldr	r3, [pc, #392]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 800435c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435e:	2202      	movs	r2, #2
 8004360:	4013      	ands	r3, r2
 8004362:	d0f1      	beq.n	8004348 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004364:	4a5f      	ldr	r2, [pc, #380]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004366:	4b5f      	ldr	r3, [pc, #380]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	21f8      	movs	r1, #248	; 0xf8
 800436c:	438b      	bics	r3, r1
 800436e:	0019      	movs	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	430b      	orrs	r3, r1
 8004378:	6353      	str	r3, [r2, #52]	; 0x34
 800437a:	e034      	b.n	80043e6 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	3305      	adds	r3, #5
 8004382:	d111      	bne.n	80043a8 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004384:	4b57      	ldr	r3, [pc, #348]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004386:	4a57      	ldr	r2, [pc, #348]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004388:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800438a:	2104      	movs	r1, #4
 800438c:	438a      	bics	r2, r1
 800438e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004390:	4a54      	ldr	r2, [pc, #336]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004392:	4b54      	ldr	r3, [pc, #336]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	21f8      	movs	r1, #248	; 0xf8
 8004398:	438b      	bics	r3, r1
 800439a:	0019      	movs	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6353      	str	r3, [r2, #52]	; 0x34
 80043a6:	e01e      	b.n	80043e6 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80043a8:	4b4e      	ldr	r3, [pc, #312]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 80043aa:	4a4e      	ldr	r2, [pc, #312]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 80043ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043ae:	2104      	movs	r1, #4
 80043b0:	430a      	orrs	r2, r1
 80043b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80043b4:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 80043b6:	4a4b      	ldr	r2, [pc, #300]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 80043b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043ba:	2101      	movs	r1, #1
 80043bc:	438a      	bics	r2, r1
 80043be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c0:	f7fe f942 	bl	8002648 <HAL_GetTick>
 80043c4:	0003      	movs	r3, r0
 80043c6:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80043ca:	f7fe f93d 	bl	8002648 <HAL_GetTick>
 80043ce:	0002      	movs	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e07e      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80043dc:	4b41      	ldr	r3, [pc, #260]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 80043de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e0:	2202      	movs	r2, #2
 80043e2:	4013      	ands	r3, r2
 80043e4:	d1f1      	bne.n	80043ca <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d100      	bne.n	80043f0 <HAL_RCC_OscConfig+0x4e0>
 80043ee:	e073      	b.n	80044d8 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043f0:	4b3c      	ldr	r3, [pc, #240]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	220c      	movs	r2, #12
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d100      	bne.n	80043fe <HAL_RCC_OscConfig+0x4ee>
 80043fc:	e06a      	b.n	80044d4 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d14b      	bne.n	800449e <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004406:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004408:	4a36      	ldr	r2, [pc, #216]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	4938      	ldr	r1, [pc, #224]	; (80044f0 <HAL_RCC_OscConfig+0x5e0>)
 800440e:	400a      	ands	r2, r1
 8004410:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004412:	f7fe f919 	bl	8002648 <HAL_GetTick>
 8004416:	0003      	movs	r3, r0
 8004418:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441c:	f7fe f914 	bl	8002648 <HAL_GetTick>
 8004420:	0002      	movs	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e055      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800442e:	4b2d      	ldr	r3, [pc, #180]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	049b      	lsls	r3, r3, #18
 8004436:	4013      	ands	r3, r2
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800443a:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 800443c:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	210f      	movs	r1, #15
 8004442:	438b      	bics	r3, r1
 8004444:	0019      	movs	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	430b      	orrs	r3, r1
 800444c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800444e:	4a25      	ldr	r2, [pc, #148]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004450:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4927      	ldr	r1, [pc, #156]	; (80044f4 <HAL_RCC_OscConfig+0x5e4>)
 8004456:	4019      	ands	r1, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	4303      	orrs	r3, r0
 8004462:	430b      	orrs	r3, r1
 8004464:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004466:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004468:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	2180      	movs	r1, #128	; 0x80
 800446e:	0449      	lsls	r1, r1, #17
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fe f8e8 	bl	8002648 <HAL_GetTick>
 8004478:	0003      	movs	r3, r0
 800447a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447e:	f7fe f8e3 	bl	8002648 <HAL_GetTick>
 8004482:	0002      	movs	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e024      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004490:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	049b      	lsls	r3, r3, #18
 8004498:	4013      	ands	r3, r2
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x56e>
 800449c:	e01c      	b.n	80044d8 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 80044a0:	4a10      	ldr	r2, [pc, #64]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	4912      	ldr	r1, [pc, #72]	; (80044f0 <HAL_RCC_OscConfig+0x5e0>)
 80044a6:	400a      	ands	r2, r1
 80044a8:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fe f8cd 	bl	8002648 <HAL_GetTick>
 80044ae:	0003      	movs	r3, r0
 80044b0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fe f8c8 	bl	8002648 <HAL_GetTick>
 80044b8:	0002      	movs	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e009      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <HAL_RCC_OscConfig+0x5d4>)
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	049b      	lsls	r3, r3, #18
 80044ce:	4013      	ands	r3, r2
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x5a4>
 80044d2:	e001      	b.n	80044d8 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	b006      	add	sp, #24
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	40021000 	.word	0x40021000
 80044e8:	00001388 	.word	0x00001388
 80044ec:	efffffff 	.word	0xefffffff
 80044f0:	feffffff 	.word	0xfeffffff
 80044f4:	ffc2ffff 	.word	0xffc2ffff

080044f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004506:	4b69      	ldr	r3, [pc, #420]	; (80046ac <HAL_RCC_ClockConfig+0x1b4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2201      	movs	r2, #1
 800450c:	401a      	ands	r2, r3
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d211      	bcs.n	8004538 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004514:	4b65      	ldr	r3, [pc, #404]	; (80046ac <HAL_RCC_ClockConfig+0x1b4>)
 8004516:	4a65      	ldr	r2, [pc, #404]	; (80046ac <HAL_RCC_ClockConfig+0x1b4>)
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	2101      	movs	r1, #1
 800451c:	438a      	bics	r2, r1
 800451e:	0011      	movs	r1, r2
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004526:	4b61      	ldr	r3, [pc, #388]	; (80046ac <HAL_RCC_ClockConfig+0x1b4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2201      	movs	r2, #1
 800452c:	401a      	ands	r2, r3
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0b5      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2202      	movs	r2, #2
 800453e:	4013      	ands	r3, r2
 8004540:	d009      	beq.n	8004556 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004542:	4a5b      	ldr	r2, [pc, #364]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004544:	4b5a      	ldr	r3, [pc, #360]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	21f0      	movs	r1, #240	; 0xf0
 800454a:	438b      	bics	r3, r1
 800454c:	0019      	movs	r1, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	430b      	orrs	r3, r1
 8004554:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	4013      	ands	r3, r2
 800455e:	d100      	bne.n	8004562 <HAL_RCC_ClockConfig+0x6a>
 8004560:	e067      	b.n	8004632 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	4b51      	ldr	r3, [pc, #324]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	2380      	movs	r3, #128	; 0x80
 8004570:	029b      	lsls	r3, r3, #10
 8004572:	4013      	ands	r3, r2
 8004574:	d114      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e094      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004582:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	2380      	movs	r3, #128	; 0x80
 8004588:	049b      	lsls	r3, r3, #18
 800458a:	4013      	ands	r3, r2
 800458c:	d108      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e088      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004592:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2202      	movs	r2, #2
 8004598:	4013      	ands	r3, r2
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e081      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045a0:	4a43      	ldr	r2, [pc, #268]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 80045a2:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2103      	movs	r1, #3
 80045a8:	438b      	bics	r3, r1
 80045aa:	0019      	movs	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b4:	f7fe f848 	bl	8002648 <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d111      	bne.n	80045e8 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045c4:	e009      	b.n	80045da <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c6:	f7fe f83f 	bl	8002648 <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	4a38      	ldr	r2, [pc, #224]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e064      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045da:	4b35      	ldr	r3, [pc, #212]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	220c      	movs	r2, #12
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d1ef      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xce>
 80045e6:	e024      	b.n	8004632 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d11b      	bne.n	8004628 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045f0:	e009      	b.n	8004606 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f2:	f7fe f829 	bl	8002648 <HAL_GetTick>
 80045f6:	0002      	movs	r2, r0
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	4a2d      	ldr	r2, [pc, #180]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e04e      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004606:	4b2a      	ldr	r3, [pc, #168]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	220c      	movs	r2, #12
 800460c:	4013      	ands	r3, r2
 800460e:	2b08      	cmp	r3, #8
 8004610:	d1ef      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xfa>
 8004612:	e00e      	b.n	8004632 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004614:	f7fe f818 	bl	8002648 <HAL_GetTick>
 8004618:	0002      	movs	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	4a25      	ldr	r2, [pc, #148]	; (80046b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e03d      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004628:	4b21      	ldr	r3, [pc, #132]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	220c      	movs	r2, #12
 800462e:	4013      	ands	r3, r2
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004632:	4b1e      	ldr	r3, [pc, #120]	; (80046ac <HAL_RCC_ClockConfig+0x1b4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2201      	movs	r2, #1
 8004638:	401a      	ands	r2, r3
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d911      	bls.n	8004664 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004640:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <HAL_RCC_ClockConfig+0x1b4>)
 8004642:	4a1a      	ldr	r2, [pc, #104]	; (80046ac <HAL_RCC_ClockConfig+0x1b4>)
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	2101      	movs	r1, #1
 8004648:	438a      	bics	r2, r1
 800464a:	0011      	movs	r1, r2
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004652:	4b16      	ldr	r3, [pc, #88]	; (80046ac <HAL_RCC_ClockConfig+0x1b4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2201      	movs	r2, #1
 8004658:	401a      	ands	r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e01f      	b.n	80046a4 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2204      	movs	r2, #4
 800466a:	4013      	ands	r3, r2
 800466c:	d008      	beq.n	8004680 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800466e:	4a10      	ldr	r2, [pc, #64]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004670:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4910      	ldr	r1, [pc, #64]	; (80046b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004676:	4019      	ands	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	430b      	orrs	r3, r1
 800467e:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004680:	f000 f820 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 8004684:	0001      	movs	r1, r0
 8004686:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	220f      	movs	r2, #15
 800468e:	4013      	ands	r3, r2
 8004690:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <HAL_RCC_ClockConfig+0x1c4>)
 8004692:	5cd3      	ldrb	r3, [r2, r3]
 8004694:	000a      	movs	r2, r1
 8004696:	40da      	lsrs	r2, r3
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <HAL_RCC_ClockConfig+0x1c8>)
 800469a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800469c:	2000      	movs	r0, #0
 800469e:	f7fd ffab 	bl	80025f8 <HAL_InitTick>
  
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	0018      	movs	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b004      	add	sp, #16
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40022000 	.word	0x40022000
 80046b0:	40021000 	.word	0x40021000
 80046b4:	00001388 	.word	0x00001388
 80046b8:	fffff8ff 	.word	0xfffff8ff
 80046bc:	0800a4c8 	.word	0x0800a4c8
 80046c0:	20000298 	.word	0x20000298

080046c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b08f      	sub	sp, #60	; 0x3c
 80046c8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80046ca:	2314      	movs	r3, #20
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	4a28      	ldr	r2, [pc, #160]	; (8004770 <HAL_RCC_GetSysClockFreq+0xac>)
 80046d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046d2:	c313      	stmia	r3!, {r0, r1, r4}
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80046d8:	1d3b      	adds	r3, r7, #4
 80046da:	4a26      	ldr	r2, [pc, #152]	; (8004774 <HAL_RCC_GetSysClockFreq+0xb0>)
 80046dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046de:	c313      	stmia	r3!, {r0, r1, r4}
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e8:	2300      	movs	r3, #0
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ec:	2300      	movs	r3, #0
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
 80046f0:	2300      	movs	r3, #0
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80046f8:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <HAL_RCC_GetSysClockFreq+0xb4>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	220c      	movs	r2, #12
 8004702:	4013      	ands	r3, r2
 8004704:	2b04      	cmp	r3, #4
 8004706:	d002      	beq.n	800470e <HAL_RCC_GetSysClockFreq+0x4a>
 8004708:	2b08      	cmp	r3, #8
 800470a:	d003      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x50>
 800470c:	e027      	b.n	800475e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800470e:	4b1b      	ldr	r3, [pc, #108]	; (800477c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004712:	e027      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004716:	0c9b      	lsrs	r3, r3, #18
 8004718:	220f      	movs	r2, #15
 800471a:	4013      	ands	r3, r2
 800471c:	2214      	movs	r2, #20
 800471e:	18ba      	adds	r2, r7, r2
 8004720:	5cd3      	ldrb	r3, [r2, r3]
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	220f      	movs	r2, #15
 800472a:	4013      	ands	r3, r2
 800472c:	1d3a      	adds	r2, r7, #4
 800472e:	5cd3      	ldrb	r3, [r2, r3]
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	025b      	lsls	r3, r3, #9
 8004738:	4013      	ands	r3, r2
 800473a:	d009      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800473c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800473e:	480f      	ldr	r0, [pc, #60]	; (800477c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004740:	f7fb fce2 	bl	8000108 <__udivsi3>
 8004744:	0003      	movs	r3, r0
 8004746:	001a      	movs	r2, r3
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	4353      	muls	r3, r2
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
 800474e:	e003      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004754:	4353      	muls	r3, r2
 8004756:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800475c:	e002      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004760:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004762:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004766:	0018      	movs	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	b00f      	add	sp, #60	; 0x3c
 800476c:	bd90      	pop	{r4, r7, pc}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	0800a354 	.word	0x0800a354
 8004774:	0800a364 	.word	0x0800a364
 8004778:	40021000 	.word	0x40021000
 800477c:	007a1200 	.word	0x007a1200
 8004780:	003d0900 	.word	0x003d0900

08004784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004788:	4b02      	ldr	r3, [pc, #8]	; (8004794 <HAL_RCC_GetHCLKFreq+0x10>)
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	0018      	movs	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	20000298 	.word	0x20000298

08004798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800479c:	f7ff fff2 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 80047a0:	0001      	movs	r1, r0
 80047a2:	4b06      	ldr	r3, [pc, #24]	; (80047bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	0a1b      	lsrs	r3, r3, #8
 80047a8:	2207      	movs	r2, #7
 80047aa:	4013      	ands	r3, r2
 80047ac:	4a04      	ldr	r2, [pc, #16]	; (80047c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ae:	5cd3      	ldrb	r3, [r2, r3]
 80047b0:	40d9      	lsrs	r1, r3
 80047b2:	000b      	movs	r3, r1
}    
 80047b4:	0018      	movs	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	40021000 	.word	0x40021000
 80047c0:	0800a4d8 	.word	0x0800a4d8

080047c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	025b      	lsls	r3, r3, #9
 80047dc:	4013      	ands	r3, r2
 80047de:	d100      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80047e0:	e08e      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	2317      	movs	r3, #23
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ea:	4b5f      	ldr	r3, [pc, #380]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047ec:	69da      	ldr	r2, [r3, #28]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	055b      	lsls	r3, r3, #21
 80047f2:	4013      	ands	r3, r2
 80047f4:	d111      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	4b5c      	ldr	r3, [pc, #368]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047f8:	4a5b      	ldr	r2, [pc, #364]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80047fa:	69d2      	ldr	r2, [r2, #28]
 80047fc:	2180      	movs	r1, #128	; 0x80
 80047fe:	0549      	lsls	r1, r1, #21
 8004800:	430a      	orrs	r2, r1
 8004802:	61da      	str	r2, [r3, #28]
 8004804:	4b58      	ldr	r3, [pc, #352]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	055b      	lsls	r3, r3, #21
 800480c:	4013      	ands	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004812:	2317      	movs	r3, #23
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481a:	4b54      	ldr	r3, [pc, #336]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	4013      	ands	r3, r2
 8004824:	d11a      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004826:	4b51      	ldr	r3, [pc, #324]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004828:	4a50      	ldr	r2, [pc, #320]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	2180      	movs	r1, #128	; 0x80
 800482e:	0049      	lsls	r1, r1, #1
 8004830:	430a      	orrs	r2, r1
 8004832:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004834:	f7fd ff08 	bl	8002648 <HAL_GetTick>
 8004838:	0003      	movs	r3, r0
 800483a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483c:	e008      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483e:	f7fd ff03 	bl	8002648 <HAL_GetTick>
 8004842:	0002      	movs	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b64      	cmp	r3, #100	; 0x64
 800484a:	d901      	bls.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e086      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004850:	4b46      	ldr	r3, [pc, #280]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	4013      	ands	r3, r2
 800485a:	d0f0      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800485c:	4b42      	ldr	r3, [pc, #264]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800485e:	6a1a      	ldr	r2, [r3, #32]
 8004860:	23c0      	movs	r3, #192	; 0xc0
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d034      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	23c0      	movs	r3, #192	; 0xc0
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	401a      	ands	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	429a      	cmp	r2, r3
 800487c:	d02c      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800487e:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	4a3b      	ldr	r2, [pc, #236]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004884:	4013      	ands	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004888:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800488a:	4a37      	ldr	r2, [pc, #220]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800488c:	6a12      	ldr	r2, [r2, #32]
 800488e:	2180      	movs	r1, #128	; 0x80
 8004890:	0249      	lsls	r1, r1, #9
 8004892:	430a      	orrs	r2, r1
 8004894:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004896:	4b34      	ldr	r3, [pc, #208]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004898:	4a33      	ldr	r2, [pc, #204]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800489a:	6a12      	ldr	r2, [r2, #32]
 800489c:	4935      	ldr	r1, [pc, #212]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800489e:	400a      	ands	r2, r1
 80048a0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048a2:	4b31      	ldr	r3, [pc, #196]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	4013      	ands	r3, r2
 80048ae:	d013      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fd feca 	bl	8002648 <HAL_GetTick>
 80048b4:	0003      	movs	r3, r0
 80048b6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b8:	e009      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ba:	f7fd fec5 	bl	8002648 <HAL_GetTick>
 80048be:	0002      	movs	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	4a2c      	ldr	r2, [pc, #176]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e047      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ce:	4b26      	ldr	r3, [pc, #152]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	2202      	movs	r2, #2
 80048d4:	4013      	ands	r3, r2
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d8:	4a23      	ldr	r2, [pc, #140]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048da:	4b23      	ldr	r3, [pc, #140]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	4924      	ldr	r1, [pc, #144]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048e0:	4019      	ands	r1, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	430b      	orrs	r3, r1
 80048e8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048ea:	2317      	movs	r3, #23
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d105      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f4:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048f6:	4a1c      	ldr	r2, [pc, #112]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048f8:	69d2      	ldr	r2, [r2, #28]
 80048fa:	4920      	ldr	r1, [pc, #128]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048fc:	400a      	ands	r2, r1
 80048fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2201      	movs	r2, #1
 8004906:	4013      	ands	r3, r2
 8004908:	d009      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800490a:	4a17      	ldr	r2, [pc, #92]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800490c:	4b16      	ldr	r3, [pc, #88]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	2103      	movs	r1, #3
 8004912:	438b      	bics	r3, r1
 8004914:	0019      	movs	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	430b      	orrs	r3, r1
 800491c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2220      	movs	r2, #32
 8004924:	4013      	ands	r3, r2
 8004926:	d009      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004928:	4a0f      	ldr	r2, [pc, #60]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800492a:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	2110      	movs	r1, #16
 8004930:	438b      	bics	r3, r1
 8004932:	0019      	movs	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	430b      	orrs	r3, r1
 800493a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4013      	ands	r3, r2
 8004946:	d009      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004948:	4a07      	ldr	r2, [pc, #28]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	2140      	movs	r1, #64	; 0x40
 8004950:	438b      	bics	r3, r1
 8004952:	0019      	movs	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	430b      	orrs	r3, r1
 800495a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	0018      	movs	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	b006      	add	sp, #24
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	40021000 	.word	0x40021000
 800496c:	40007000 	.word	0x40007000
 8004970:	fffffcff 	.word	0xfffffcff
 8004974:	fffeffff 	.word	0xfffeffff
 8004978:	00001388 	.word	0x00001388
 800497c:	efffffff 	.word	0xefffffff

08004980 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e01e      	b.n	80049d0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	223d      	movs	r2, #61	; 0x3d
 8004996:	5c9b      	ldrb	r3, [r3, r2]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	223c      	movs	r2, #60	; 0x3c
 80049a2:	2100      	movs	r1, #0
 80049a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f005 f98d 	bl	8009cc8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	223d      	movs	r2, #61	; 0x3d
 80049b2:	2102      	movs	r1, #2
 80049b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3304      	adds	r3, #4
 80049be:	0019      	movs	r1, r3
 80049c0:	0010      	movs	r0, r2
 80049c2:	f000 fae7 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	223d      	movs	r2, #61	; 0x3d
 80049ca:	2101      	movs	r1, #1
 80049cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	0018      	movs	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e01e      	b.n	8004a28 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	223d      	movs	r2, #61	; 0x3d
 80049ee:	5c9b      	ldrb	r3, [r3, r2]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d107      	bne.n	8004a06 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	223c      	movs	r2, #60	; 0x3c
 80049fa:	2100      	movs	r1, #0
 80049fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f005 f9c1 	bl	8009d88 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	223d      	movs	r2, #61	; 0x3d
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3304      	adds	r3, #4
 8004a16:	0019      	movs	r1, r3
 8004a18:	0010      	movs	r0, r2
 8004a1a:	f000 fabb 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	223d      	movs	r2, #61	; 0x3d
 8004a22:	2101      	movs	r1, #1
 8004a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6839      	ldr	r1, [r7, #0]
 8004a40:	2201      	movs	r2, #1
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 fe50 	bl	80056e8 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <HAL_TIM_PWM_Start+0x78>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00e      	beq.n	8004a70 <HAL_TIM_PWM_Start+0x40>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a15      	ldr	r2, [pc, #84]	; (8004aac <HAL_TIM_PWM_Start+0x7c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_TIM_PWM_Start+0x40>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a13      	ldr	r2, [pc, #76]	; (8004ab0 <HAL_TIM_PWM_Start+0x80>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_TIM_PWM_Start+0x40>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a12      	ldr	r2, [pc, #72]	; (8004ab4 <HAL_TIM_PWM_Start+0x84>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d101      	bne.n	8004a74 <HAL_TIM_PWM_Start+0x44>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <HAL_TIM_PWM_Start+0x46>
 8004a74:	2300      	movs	r3, #0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a84:	2180      	movs	r1, #128	; 0x80
 8004a86:	0209      	lsls	r1, r1, #8
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	2101      	movs	r1, #1
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b002      	add	sp, #8
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800

08004ab8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses wil be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e02e      	b.n	8004b2a <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	223d      	movs	r2, #61	; 0x3d
 8004ad0:	5c9b      	ldrb	r3, [r3, r2]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	223c      	movs	r2, #60	; 0x3c
 8004adc:	2100      	movs	r1, #0
 8004ade:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f000 f825 	bl	8004b32 <HAL_TIM_OnePulse_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	223d      	movs	r2, #61	; 0x3d
 8004aec:	2102      	movs	r1, #2
 8004aee:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3304      	adds	r3, #4
 8004af8:	0019      	movs	r1, r3
 8004afa:	0010      	movs	r0, r2
 8004afc:	f000 fa4a 	bl	8004f94 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	2108      	movs	r1, #8
 8004b0c:	438a      	bics	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	6811      	ldr	r1, [r2, #0]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	223d      	movs	r2, #61	; 0x3d
 8004b24:	2101      	movs	r1, #1
 8004b26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b002      	add	sp, #8
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b002      	add	sp, #8
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2202      	movs	r2, #2
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d124      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d11d      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	4252      	negs	r2, r2
 8004b6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	0018      	movs	r0, r3
 8004b86:	f000 f9ed 	bl	8004f64 <HAL_TIM_IC_CaptureCallback>
 8004b8a:	e007      	b.n	8004b9c <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f000 f9e0 	bl	8004f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	0018      	movs	r0, r3
 8004b98:	f000 f9ec 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2204      	movs	r2, #4
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d125      	bne.n	8004bfc <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d11e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2205      	movs	r2, #5
 8004bc4:	4252      	negs	r2, r2
 8004bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	23c0      	movs	r3, #192	; 0xc0
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	0018      	movs	r0, r3
 8004be0:	f000 f9c0 	bl	8004f64 <HAL_TIM_IC_CaptureCallback>
 8004be4:	e007      	b.n	8004bf6 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f000 f9b3 	bl	8004f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f000 f9bf 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2208      	movs	r2, #8
 8004c04:	4013      	ands	r3, r2
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d124      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	2208      	movs	r2, #8
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d11d      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2209      	movs	r2, #9
 8004c1e:	4252      	negs	r2, r2
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2204      	movs	r2, #4
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	2203      	movs	r2, #3
 8004c30:	4013      	ands	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	0018      	movs	r0, r3
 8004c38:	f000 f994 	bl	8004f64 <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e007      	b.n	8004c4e <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f000 f987 	bl	8004f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f000 f993 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d125      	bne.n	8004cae <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	2210      	movs	r2, #16
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d11e      	bne.n	8004cae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2211      	movs	r2, #17
 8004c76:	4252      	negs	r2, r2
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69da      	ldr	r2, [r3, #28]
 8004c86:	23c0      	movs	r3, #192	; 0xc0
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	0018      	movs	r0, r3
 8004c92:	f000 f967 	bl	8004f64 <HAL_TIM_IC_CaptureCallback>
 8004c96:	e007      	b.n	8004ca8 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f000 f95a 	bl	8004f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f000 f966 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d10f      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d108      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	4252      	negs	r2, r2
 8004cd2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f003 fc74 	bl	80085c4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2280      	movs	r2, #128	; 0x80
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d10f      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2280      	movs	r2, #128	; 0x80
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b80      	cmp	r3, #128	; 0x80
 8004cf6:	d108      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2281      	movs	r2, #129	; 0x81
 8004cfe:	4252      	negs	r2, r2
 8004d00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 fd5b 	bl	80057c0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2240      	movs	r2, #64	; 0x40
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d10f      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2240      	movs	r2, #64	; 0x40
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d108      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2241      	movs	r2, #65	; 0x41
 8004d2c:	4252      	negs	r2, r2
 8004d2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 f926 	bl	8004f84 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d10f      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d108      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2221      	movs	r2, #33	; 0x21
 8004d5a:	4252      	negs	r2, r2
 8004d5c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 fd25 	bl	80057b0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b002      	add	sp, #8
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	223c      	movs	r2, #60	; 0x3c
 8004d80:	5c9b      	ldrb	r3, [r3, r2]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e0a4      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x164>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	223c      	movs	r2, #60	; 0x3c
 8004d8e:	2101      	movs	r1, #1
 8004d90:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	223d      	movs	r2, #61	; 0x3d
 8004d96:	2102      	movs	r1, #2
 8004d98:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d029      	beq.n	8004df4 <HAL_TIM_PWM_ConfigChannel+0x84>
 8004da0:	d802      	bhi.n	8004da8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 8004da6:	e08c      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d046      	beq.n	8004e3a <HAL_TIM_PWM_ConfigChannel+0xca>
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	d065      	beq.n	8004e7c <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 8004db0:	e087      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	0011      	movs	r1, r2
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 f96c 	bl	8005098 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	6992      	ldr	r2, [r2, #24]
 8004dca:	2108      	movs	r1, #8
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	6992      	ldr	r2, [r2, #24]
 8004dda:	2104      	movs	r1, #4
 8004ddc:	438a      	bics	r2, r1
 8004dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	6991      	ldr	r1, [r2, #24]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	6912      	ldr	r2, [r2, #16]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	619a      	str	r2, [r3, #24]
    break;
 8004df2:	e066      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	0011      	movs	r1, r2
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f000 f9d9 	bl	80051b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	6992      	ldr	r2, [r2, #24]
 8004e0c:	2180      	movs	r1, #128	; 0x80
 8004e0e:	0109      	lsls	r1, r1, #4
 8004e10:	430a      	orrs	r2, r1
 8004e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	6992      	ldr	r2, [r2, #24]
 8004e1e:	492f      	ldr	r1, [pc, #188]	; (8004edc <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8004e20:	400a      	ands	r2, r1
 8004e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	6991      	ldr	r1, [r2, #24]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	6912      	ldr	r2, [r2, #16]
 8004e32:	0212      	lsls	r2, r2, #8
 8004e34:	430a      	orrs	r2, r1
 8004e36:	619a      	str	r2, [r3, #24]
    break;
 8004e38:	e043      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	0011      	movs	r1, r2
 8004e42:	0018      	movs	r0, r3
 8004e44:	f000 fa40 	bl	80052c8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	69d2      	ldr	r2, [r2, #28]
 8004e52:	2108      	movs	r1, #8
 8004e54:	430a      	orrs	r2, r1
 8004e56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	69d2      	ldr	r2, [r2, #28]
 8004e62:	2104      	movs	r1, #4
 8004e64:	438a      	bics	r2, r1
 8004e66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	69d1      	ldr	r1, [r2, #28]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	6912      	ldr	r2, [r2, #16]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	61da      	str	r2, [r3, #28]
    break;
 8004e7a:	e022      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	0011      	movs	r1, r2
 8004e84:	0018      	movs	r0, r3
 8004e86:	f000 faab 	bl	80053e0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	69d2      	ldr	r2, [r2, #28]
 8004e94:	2180      	movs	r1, #128	; 0x80
 8004e96:	0109      	lsls	r1, r1, #4
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	69d2      	ldr	r2, [r2, #28]
 8004ea6:	490d      	ldr	r1, [pc, #52]	; (8004edc <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8004ea8:	400a      	ands	r2, r1
 8004eaa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	69d1      	ldr	r1, [r2, #28]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	6912      	ldr	r2, [r2, #16]
 8004eba:	0212      	lsls	r2, r2, #8
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	61da      	str	r2, [r3, #28]
    break;
 8004ec0:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	223d      	movs	r2, #61	; 0x3d
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	223c      	movs	r2, #60	; 0x3c
 8004ece:	2100      	movs	r1, #0
 8004ed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b004      	add	sp, #16
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	fffffbff 	.word	0xfffffbff

08004ee0 <HAL_TIM_SlaveConfigSynchronization>:
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	223c      	movs	r2, #60	; 0x3c
 8004eee:	5c9b      	ldrb	r3, [r3, r2]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIM_SlaveConfigSynchronization+0x18>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e026      	b.n	8004f46 <HAL_TIM_SlaveConfigSynchronization+0x66>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	223c      	movs	r2, #60	; 0x3c
 8004efc:	2101      	movs	r1, #1
 8004efe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	223d      	movs	r2, #61	; 0x3d
 8004f04:	2102      	movs	r1, #2
 8004f06:	5499      	strb	r1, [r3, r2]

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	0011      	movs	r1, r2
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f000 fad6 	bl	80054c0 <TIM_SlaveTimer_SetConfig>

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	68d2      	ldr	r2, [r2, #12]
 8004f1e:	2140      	movs	r1, #64	; 0x40
 8004f20:	438a      	bics	r2, r1
 8004f22:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	68d2      	ldr	r2, [r2, #12]
 8004f2e:	4908      	ldr	r1, [pc, #32]	; (8004f50 <HAL_TIM_SlaveConfigSynchronization+0x70>)
 8004f30:	400a      	ands	r2, r1
 8004f32:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	223d      	movs	r2, #61	; 0x3d
 8004f38:	2101      	movs	r1, #1
 8004f3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	223c      	movs	r2, #60	; 0x3c
 8004f40:	2100      	movs	r1, #0
 8004f42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
    }
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b002      	add	sp, #8
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	ffffbfff 	.word	0xffffbfff

08004f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b002      	add	sp, #8
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b002      	add	sp, #8
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b002      	add	sp, #8
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f8c:	46c0      	nop			; (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b002      	add	sp, #8
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a34      	ldr	r2, [pc, #208]	; (800507c <TIM_Base_SetConfig+0xe8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d008      	beq.n	8004fc2 <TIM_Base_SetConfig+0x2e>
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	2380      	movs	r3, #128	; 0x80
 8004fb4:	05db      	lsls	r3, r3, #23
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d003      	beq.n	8004fc2 <TIM_Base_SetConfig+0x2e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a30      	ldr	r2, [pc, #192]	; (8005080 <TIM_Base_SetConfig+0xec>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d108      	bne.n	8004fd4 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2270      	movs	r2, #112	; 0x70
 8004fc6:	4393      	bics	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a29      	ldr	r2, [pc, #164]	; (800507c <TIM_Base_SetConfig+0xe8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d018      	beq.n	800500e <TIM_Base_SetConfig+0x7a>
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	05db      	lsls	r3, r3, #23
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d013      	beq.n	800500e <TIM_Base_SetConfig+0x7a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a25      	ldr	r2, [pc, #148]	; (8005080 <TIM_Base_SetConfig+0xec>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00f      	beq.n	800500e <TIM_Base_SetConfig+0x7a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a24      	ldr	r2, [pc, #144]	; (8005084 <TIM_Base_SetConfig+0xf0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00b      	beq.n	800500e <TIM_Base_SetConfig+0x7a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a23      	ldr	r2, [pc, #140]	; (8005088 <TIM_Base_SetConfig+0xf4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d007      	beq.n	800500e <TIM_Base_SetConfig+0x7a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a22      	ldr	r2, [pc, #136]	; (800508c <TIM_Base_SetConfig+0xf8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_Base_SetConfig+0x7a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a21      	ldr	r2, [pc, #132]	; (8005090 <TIM_Base_SetConfig+0xfc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d108      	bne.n	8005020 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a20      	ldr	r2, [pc, #128]	; (8005094 <TIM_Base_SetConfig+0x100>)
 8005012:	4013      	ands	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2280      	movs	r2, #128	; 0x80
 8005024:	4393      	bics	r3, r2
 8005026:	001a      	movs	r2, r3
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a0c      	ldr	r2, [pc, #48]	; (800507c <TIM_Base_SetConfig+0xe8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00b      	beq.n	8005066 <TIM_Base_SetConfig+0xd2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <TIM_Base_SetConfig+0xf4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d007      	beq.n	8005066 <TIM_Base_SetConfig+0xd2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a0c      	ldr	r2, [pc, #48]	; (800508c <TIM_Base_SetConfig+0xf8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_Base_SetConfig+0xd2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a0b      	ldr	r2, [pc, #44]	; (8005090 <TIM_Base_SetConfig+0xfc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d103      	bne.n	800506e <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	615a      	str	r2, [r3, #20]
}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b004      	add	sp, #16
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40000400 	.word	0x40000400
 8005084:	40002000 	.word	0x40002000
 8005088:	40014000 	.word	0x40014000
 800508c:	40014400 	.word	0x40014400
 8005090:	40014800 	.word	0x40014800
 8005094:	fffffcff 	.word	0xfffffcff

08005098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	2201      	movs	r2, #1
 80050b4:	4393      	bics	r3, r2
 80050b6:	001a      	movs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2270      	movs	r2, #112	; 0x70
 80050d2:	4393      	bics	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2203      	movs	r2, #3
 80050da:	4393      	bics	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2202      	movs	r2, #2
 80050ec:	4393      	bics	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a27      	ldr	r2, [pc, #156]	; (800519c <TIM_OC1_SetConfig+0x104>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00b      	beq.n	800511a <TIM_OC1_SetConfig+0x82>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <TIM_OC1_SetConfig+0x108>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d007      	beq.n	800511a <TIM_OC1_SetConfig+0x82>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a25      	ldr	r2, [pc, #148]	; (80051a4 <TIM_OC1_SetConfig+0x10c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d003      	beq.n	800511a <TIM_OC1_SetConfig+0x82>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a24      	ldr	r2, [pc, #144]	; (80051a8 <TIM_OC1_SetConfig+0x110>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10c      	bne.n	8005134 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2208      	movs	r2, #8
 800511e:	4393      	bics	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2204      	movs	r2, #4
 8005130:	4393      	bics	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a19      	ldr	r2, [pc, #100]	; (800519c <TIM_OC1_SetConfig+0x104>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00b      	beq.n	8005154 <TIM_OC1_SetConfig+0xbc>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <TIM_OC1_SetConfig+0x108>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d007      	beq.n	8005154 <TIM_OC1_SetConfig+0xbc>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a17      	ldr	r2, [pc, #92]	; (80051a4 <TIM_OC1_SetConfig+0x10c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <TIM_OC1_SetConfig+0xbc>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <TIM_OC1_SetConfig+0x110>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d111      	bne.n	8005178 <TIM_OC1_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4a15      	ldr	r2, [pc, #84]	; (80051ac <TIM_OC1_SetConfig+0x114>)
 8005158:	4013      	ands	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	4a14      	ldr	r2, [pc, #80]	; (80051b0 <TIM_OC1_SetConfig+0x118>)
 8005160:	4013      	ands	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	46bd      	mov	sp, r7
 8005196:	b006      	add	sp, #24
 8005198:	bd80      	pop	{r7, pc}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	40012c00 	.word	0x40012c00
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800
 80051ac:	fffffeff 	.word	0xfffffeff
 80051b0:	fffffdff 	.word	0xfffffdff

080051b4 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	2210      	movs	r2, #16
 80051d0:	4393      	bics	r3, r2
 80051d2:	001a      	movs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4a2e      	ldr	r2, [pc, #184]	; (80052a8 <TIM_OC2_SetConfig+0xf4>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4a2d      	ldr	r2, [pc, #180]	; (80052ac <TIM_OC2_SetConfig+0xf8>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2220      	movs	r2, #32
 800520a:	4393      	bics	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a24      	ldr	r2, [pc, #144]	; (80052b0 <TIM_OC2_SetConfig+0xfc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10d      	bne.n	800523e <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2280      	movs	r2, #128	; 0x80
 8005226:	4393      	bics	r3, r2
 8005228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2240      	movs	r2, #64	; 0x40
 800523a:	4393      	bics	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a1b      	ldr	r2, [pc, #108]	; (80052b0 <TIM_OC2_SetConfig+0xfc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_OC2_SetConfig+0xaa>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a1a      	ldr	r2, [pc, #104]	; (80052b4 <TIM_OC2_SetConfig+0x100>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <TIM_OC2_SetConfig+0xaa>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <TIM_OC2_SetConfig+0x104>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_OC2_SetConfig+0xaa>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a18      	ldr	r2, [pc, #96]	; (80052bc <TIM_OC2_SetConfig+0x108>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d113      	bne.n	8005286 <TIM_OC2_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <TIM_OC2_SetConfig+0x10c>)
 8005262:	4013      	ands	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <TIM_OC2_SetConfig+0x110>)
 800526a:	4013      	ands	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	621a      	str	r2, [r3, #32]
}
 80052a0:	46c0      	nop			; (mov r8, r8)
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b006      	add	sp, #24
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	ffff8fff 	.word	0xffff8fff
 80052ac:	fffffcff 	.word	0xfffffcff
 80052b0:	40012c00 	.word	0x40012c00
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800
 80052c0:	fffffbff 	.word	0xfffffbff
 80052c4:	fffff7ff 	.word	0xfffff7ff

080052c8 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	4a35      	ldr	r2, [pc, #212]	; (80053b8 <TIM_OC3_SetConfig+0xf0>)
 80052e4:	401a      	ands	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2270      	movs	r2, #112	; 0x70
 8005300:	4393      	bics	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2203      	movs	r2, #3
 8005308:	4393      	bics	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	4a28      	ldr	r2, [pc, #160]	; (80053bc <TIM_OC3_SetConfig+0xf4>)
 800531a:	4013      	ands	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a24      	ldr	r2, [pc, #144]	; (80053c0 <TIM_OC3_SetConfig+0xf8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d10d      	bne.n	800534e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	4a23      	ldr	r2, [pc, #140]	; (80053c4 <TIM_OC3_SetConfig+0xfc>)
 8005336:	4013      	ands	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	4a1f      	ldr	r2, [pc, #124]	; (80053c8 <TIM_OC3_SetConfig+0x100>)
 800534a:	4013      	ands	r3, r2
 800534c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1b      	ldr	r2, [pc, #108]	; (80053c0 <TIM_OC3_SetConfig+0xf8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00b      	beq.n	800536e <TIM_OC3_SetConfig+0xa6>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1c      	ldr	r2, [pc, #112]	; (80053cc <TIM_OC3_SetConfig+0x104>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <TIM_OC3_SetConfig+0xa6>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <TIM_OC3_SetConfig+0x108>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_OC3_SetConfig+0xa6>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1a      	ldr	r2, [pc, #104]	; (80053d4 <TIM_OC3_SetConfig+0x10c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d113      	bne.n	8005396 <TIM_OC3_SetConfig+0xce>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4a19      	ldr	r2, [pc, #100]	; (80053d8 <TIM_OC3_SetConfig+0x110>)
 8005372:	4013      	ands	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4a18      	ldr	r2, [pc, #96]	; (80053dc <TIM_OC3_SetConfig+0x114>)
 800537a:	4013      	ands	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	621a      	str	r2, [r3, #32]
}
 80053b0:	46c0      	nop			; (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b006      	add	sp, #24
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	fffffeff 	.word	0xfffffeff
 80053bc:	fffffdff 	.word	0xfffffdff
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	fffff7ff 	.word	0xfffff7ff
 80053c8:	fffffbff 	.word	0xfffffbff
 80053cc:	40014000 	.word	0x40014000
 80053d0:	40014400 	.word	0x40014400
 80053d4:	40014800 	.word	0x40014800
 80053d8:	ffffefff 	.word	0xffffefff
 80053dc:	ffffdfff 	.word	0xffffdfff

080053e0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	4a28      	ldr	r2, [pc, #160]	; (800549c <TIM_OC4_SetConfig+0xbc>)
 80053fc:	401a      	ands	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4a22      	ldr	r2, [pc, #136]	; (80054a0 <TIM_OC4_SetConfig+0xc0>)
 8005418:	4013      	ands	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4a21      	ldr	r2, [pc, #132]	; (80054a4 <TIM_OC4_SetConfig+0xc4>)
 8005420:	4013      	ands	r3, r2
 8005422:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a1d      	ldr	r2, [pc, #116]	; (80054a8 <TIM_OC4_SetConfig+0xc8>)
 8005434:	4013      	ands	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	031b      	lsls	r3, r3, #12
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a19      	ldr	r2, [pc, #100]	; (80054ac <TIM_OC4_SetConfig+0xcc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00b      	beq.n	8005464 <TIM_OC4_SetConfig+0x84>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a18      	ldr	r2, [pc, #96]	; (80054b0 <TIM_OC4_SetConfig+0xd0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d007      	beq.n	8005464 <TIM_OC4_SetConfig+0x84>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a17      	ldr	r2, [pc, #92]	; (80054b4 <TIM_OC4_SetConfig+0xd4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_OC4_SetConfig+0x84>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a16      	ldr	r2, [pc, #88]	; (80054b8 <TIM_OC4_SetConfig+0xd8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d109      	bne.n	8005478 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	4a15      	ldr	r2, [pc, #84]	; (80054bc <TIM_OC4_SetConfig+0xdc>)
 8005468:	4013      	ands	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	019b      	lsls	r3, r3, #6
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	46bd      	mov	sp, r7
 8005496:	b006      	add	sp, #24
 8005498:	bd80      	pop	{r7, pc}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	ffffefff 	.word	0xffffefff
 80054a0:	ffff8fff 	.word	0xffff8fff
 80054a4:	fffffcff 	.word	0xfffffcff
 80054a8:	ffffdfff 	.word	0xffffdfff
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40014400 	.word	0x40014400
 80054b8:	40014800 	.word	0x40014800
 80054bc:	ffffbfff 	.word	0xffffbfff

080054c0 <TIM_SlaveTimer_SetConfig>:

static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2270      	movs	r2, #112	; 0x70
 80054e2:	4393      	bics	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2207      	movs	r2, #7
 80054f4:	4393      	bics	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b30      	cmp	r3, #48	; 0x30
 8005510:	d054      	beq.n	80055bc <TIM_SlaveTimer_SetConfig+0xfc>
 8005512:	d806      	bhi.n	8005522 <TIM_SlaveTimer_SetConfig+0x62>
 8005514:	2b10      	cmp	r3, #16
 8005516:	d053      	beq.n	80055c0 <TIM_SlaveTimer_SetConfig+0x100>
 8005518:	2b20      	cmp	r3, #32
 800551a:	d053      	beq.n	80055c4 <TIM_SlaveTimer_SetConfig+0x104>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d053      	beq.n	80055c8 <TIM_SlaveTimer_SetConfig+0x108>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;

  default:
    break;
 8005520:	e053      	b.n	80055ca <TIM_SlaveTimer_SetConfig+0x10a>
  switch (sSlaveConfig->InputTrigger)
 8005522:	2b50      	cmp	r3, #80	; 0x50
 8005524:	d036      	beq.n	8005594 <TIM_SlaveTimer_SetConfig+0xd4>
 8005526:	d802      	bhi.n	800552e <TIM_SlaveTimer_SetConfig+0x6e>
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d010      	beq.n	800554e <TIM_SlaveTimer_SetConfig+0x8e>
    break;
 800552c:	e04d      	b.n	80055ca <TIM_SlaveTimer_SetConfig+0x10a>
  switch (sSlaveConfig->InputTrigger)
 800552e:	2b60      	cmp	r3, #96	; 0x60
 8005530:	d03a      	beq.n	80055a8 <TIM_SlaveTimer_SetConfig+0xe8>
 8005532:	2b70      	cmp	r3, #112	; 0x70
 8005534:	d000      	beq.n	8005538 <TIM_SlaveTimer_SetConfig+0x78>
    break;
 8005536:	e048      	b.n	80055ca <TIM_SlaveTimer_SetConfig+0x10a>
      TIM_ETR_SetConfig(htim->Instance,
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	68d9      	ldr	r1, [r3, #12]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f000 f8ac 	bl	80056a4 <TIM_ETR_SetConfig>
    break;
 800554c:	e03d      	b.n	80055ca <TIM_SlaveTimer_SetConfig+0x10a>
      tmpccer = htim->Instance->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	6a12      	ldr	r2, [r2, #32]
 8005560:	2101      	movs	r1, #1
 8005562:	438a      	bics	r2, r1
 8005564:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	613b      	str	r3, [r7, #16]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	22f0      	movs	r2, #240	; 0xf0
 8005572:	4393      	bics	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
      htim->Instance->CCMR1 = tmpccmr1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	621a      	str	r2, [r3, #32]
    break;
 8005592:	e01a      	b.n	80055ca <TIM_SlaveTimer_SetConfig+0x10a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	6899      	ldr	r1, [r3, #8]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	001a      	movs	r2, r3
 80055a2:	f000 f816 	bl	80055d2 <TIM_TI1_ConfigInputStage>
    break;
 80055a6:	e010      	b.n	80055ca <TIM_SlaveTimer_SetConfig+0x10a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6899      	ldr	r1, [r3, #8]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	001a      	movs	r2, r3
 80055b6:	f000 f83f 	bl	8005638 <TIM_TI2_ConfigInputStage>
    break;
 80055ba:	e006      	b.n	80055ca <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 80055bc:	46c0      	nop			; (mov r8, r8)
 80055be:	e004      	b.n	80055ca <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 80055c0:	46c0      	nop			; (mov r8, r8)
 80055c2:	e002      	b.n	80055ca <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 80055c4:	46c0      	nop			; (mov r8, r8)
 80055c6:	e000      	b.n	80055ca <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 80055c8:	46c0      	nop			; (mov r8, r8)
  }
}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b006      	add	sp, #24
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b086      	sub	sp, #24
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	2201      	movs	r2, #1
 80055f2:	4393      	bics	r3, r2
 80055f4:	001a      	movs	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	22f0      	movs	r2, #240	; 0xf0
 8005604:	4393      	bics	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	220a      	movs	r2, #10
 8005616:	4393      	bics	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	46bd      	mov	sp, r7
 8005632:	b006      	add	sp, #24
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	2210      	movs	r2, #16
 8005652:	4393      	bics	r3, r2
 8005654:	001a      	movs	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	4a0d      	ldr	r2, [pc, #52]	; (80056a0 <TIM_TI2_ConfigInputStage+0x68>)
 800566a:	4013      	ands	r3, r2
 800566c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	031b      	lsls	r3, r3, #12
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	22a0      	movs	r2, #160	; 0xa0
 800567c:	4393      	bics	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	46bd      	mov	sp, r7
 800569a:	b006      	add	sp, #24
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	ffff0fff 	.word	0xffff0fff

080056a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <TIM_ETR_SetConfig+0x40>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	021a      	lsls	r2, r3, #8
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	609a      	str	r2, [r3, #8]
}
 80056dc:	46c0      	nop			; (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	b006      	add	sp, #24
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	ffff00ff 	.word	0xffff00ff

080056e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80056f8:	2201      	movs	r2, #1
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	409a      	lsls	r2, r3
 80056fe:	0013      	movs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	43d2      	mvns	r2, r2
 800570a:	401a      	ands	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1a      	ldr	r2, [r3, #32]
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4099      	lsls	r1, r3
 800571a:	000b      	movs	r3, r1
 800571c:	431a      	orrs	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	46bd      	mov	sp, r7
 8005726:	b006      	add	sp, #24
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	223c      	movs	r2, #60	; 0x3c
 8005738:	5c9b      	ldrb	r3, [r3, r2]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800573e:	2302      	movs	r3, #2
 8005740:	e032      	b.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	223c      	movs	r2, #60	; 0x3c
 8005746:	2101      	movs	r1, #1
 8005748:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	223d      	movs	r2, #61	; 0x3d
 800574e:	2102      	movs	r1, #2
 8005750:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	6852      	ldr	r2, [r2, #4]
 800575c:	2170      	movs	r1, #112	; 0x70
 800575e:	438a      	bics	r2, r1
 8005760:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	6851      	ldr	r1, [r2, #4]
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	6892      	ldr	r2, [r2, #8]
 800577e:	2180      	movs	r1, #128	; 0x80
 8005780:	438a      	bics	r2, r1
 8005782:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	6891      	ldr	r1, [r2, #8]
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	6852      	ldr	r2, [r2, #4]
 8005792:	430a      	orrs	r2, r1
 8005794:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	223d      	movs	r2, #61	; 0x3d
 800579a:	2101      	movs	r1, #1
 800579c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	223c      	movs	r2, #60	; 0x3c
 80057a2:	2100      	movs	r1, #0
 80057a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	0018      	movs	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b002      	add	sp, #8
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80057b8:	46c0      	nop			; (mov r8, r8)
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b002      	add	sp, #8
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057c8:	46c0      	nop			; (mov r8, r8)
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b002      	add	sp, #8
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e047      	b.n	8005872 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2269      	movs	r2, #105	; 0x69
 80057e6:	5c9b      	ldrb	r3, [r3, r2]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d107      	bne.n	80057fe <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2268      	movs	r2, #104	; 0x68
 80057f2:	2100      	movs	r1, #0
 80057f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	0018      	movs	r0, r3
 80057fa:	f004 fbcf 	bl	8009f9c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2269      	movs	r2, #105	; 0x69
 8005802:	2124      	movs	r1, #36	; 0x24
 8005804:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	2101      	movs	r1, #1
 8005812:	438a      	bics	r2, r1
 8005814:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	0018      	movs	r0, r3
 800581a:	f000 fa67 	bl	8005cec <UART_SetConfig>
 800581e:	0003      	movs	r3, r0
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e024      	b.n	8005872 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	0018      	movs	r0, r3
 8005834:	f000 fbd0 	bl	8005fd8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	6852      	ldr	r2, [r2, #4]
 8005842:	490e      	ldr	r1, [pc, #56]	; (800587c <HAL_UART_Init+0xac>)
 8005844:	400a      	ands	r2, r1
 8005846:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	6892      	ldr	r2, [r2, #8]
 8005852:	212a      	movs	r1, #42	; 0x2a
 8005854:	438a      	bics	r2, r1
 8005856:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	2101      	movs	r1, #1
 8005864:	430a      	orrs	r2, r1
 8005866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	0018      	movs	r0, r3
 800586c:	f000 fc60 	bl	8006130 <UART_CheckIdleState>
 8005870:	0003      	movs	r3, r0
}
 8005872:	0018      	movs	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	b002      	add	sp, #8
 8005878:	bd80      	pop	{r7, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	ffffb7ff 	.word	0xffffb7ff

08005880 <HAL_UART_Transmit_DMA>:
  *         (as sent data will be handled by DMA from halfword frontier). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	1dbb      	adds	r3, r7, #6
 800588c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2269      	movs	r2, #105	; 0x69
 8005892:	5c9b      	ldrb	r3, [r3, r2]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b20      	cmp	r3, #32
 8005898:	d166      	bne.n	8005968 <HAL_UART_Transmit_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0U))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_UART_Transmit_DMA+0x28>
 80058a0:	1dbb      	adds	r3, r7, #6
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e05e      	b.n	800596a <HAL_UART_Transmit_DMA+0xea>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data copy into TDR will be 
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	2380      	movs	r3, #128	; 0x80
 80058b2:	015b      	lsls	r3, r3, #5
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d109      	bne.n	80058cc <HAL_UART_Transmit_DMA+0x4c>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d105      	bne.n	80058cc <HAL_UART_Transmit_DMA+0x4c>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2201      	movs	r2, #1
 80058c4:	4013      	ands	r3, r2
 80058c6:	d001      	beq.n	80058cc <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e04e      	b.n	800596a <HAL_UART_Transmit_DMA+0xea>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2268      	movs	r2, #104	; 0x68
 80058d0:	5c9b      	ldrb	r3, [r3, r2]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_UART_Transmit_DMA+0x5a>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e047      	b.n	800596a <HAL_UART_Transmit_DMA+0xea>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2268      	movs	r2, #104	; 0x68
 80058de:	2101      	movs	r1, #1
 80058e0:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr = pData;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	1dba      	adds	r2, r7, #6
 80058ec:	2150      	movs	r1, #80	; 0x50
 80058ee:	8812      	ldrh	r2, [r2, #0]
 80058f0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	1dba      	adds	r2, r7, #6
 80058f6:	2152      	movs	r1, #82	; 0x52
 80058f8:	8812      	ldrh	r2, [r2, #0]
 80058fa:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2269      	movs	r2, #105	; 0x69
 8005906:	2121      	movs	r1, #33	; 0x21
 8005908:	5499      	strb	r1, [r3, r2]

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590e:	4a19      	ldr	r2, [pc, #100]	; (8005974 <HAL_UART_Transmit_DMA+0xf4>)
 8005910:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005916:	4a18      	ldr	r2, [pc, #96]	; (8005978 <HAL_UART_Transmit_DMA+0xf8>)
 8005918:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591e:	4a17      	ldr	r2, [pc, #92]	; (800597c <HAL_UART_Transmit_DMA+0xfc>)
 8005920:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005926:	2200      	movs	r2, #0
 8005928:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005932:	0019      	movs	r1, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3328      	adds	r3, #40	; 0x28
 800593a:	001a      	movs	r2, r3
 800593c:	1dbb      	adds	r3, r7, #6
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	f7fd f800 	bl	8002944 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2240      	movs	r2, #64	; 0x40
 800594a:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2268      	movs	r2, #104	; 0x68
 8005950:	2100      	movs	r1, #0
 8005952:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	6892      	ldr	r2, [r2, #8]
 800595e:	2180      	movs	r1, #128	; 0x80
 8005960:	430a      	orrs	r2, r1
 8005962:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
  }
}
 800596a:	0018      	movs	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	b004      	add	sp, #16
 8005970:	bd80      	pop	{r7, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	080062d1 	.word	0x080062d1
 8005978:	08006325 	.word	0x08006325
 800597c:	080063d3 	.word	0x080063d3

08005980 <HAL_UART_Receive_DMA>:
  *         (as received data will be handled by DMA from halfword frontier). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	1dbb      	adds	r3, r7, #6
 800598c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	226a      	movs	r2, #106	; 0x6a
 8005992:	5c9b      	ldrb	r3, [r3, r2]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b20      	cmp	r3, #32
 8005998:	d000      	beq.n	800599c <HAL_UART_Receive_DMA+0x1c>
 800599a:	e06e      	b.n	8005a7a <HAL_UART_Receive_DMA+0xfa>
  {
    if((pData == NULL ) || (Size == 0U))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_UART_Receive_DMA+0x2a>
 80059a2:	1dbb      	adds	r3, r7, #6
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Receive_DMA+0x2e>
    {
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e066      	b.n	8005a7c <HAL_UART_Receive_DMA+0xfc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data copy from RDR will be 
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	2380      	movs	r3, #128	; 0x80
 80059b4:	015b      	lsls	r3, r3, #5
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d109      	bne.n	80059ce <HAL_UART_Receive_DMA+0x4e>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d105      	bne.n	80059ce <HAL_UART_Receive_DMA+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2201      	movs	r2, #1
 80059c6:	4013      	ands	r3, r2
 80059c8:	d001      	beq.n	80059ce <HAL_UART_Receive_DMA+0x4e>
      {
        return  HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e056      	b.n	8005a7c <HAL_UART_Receive_DMA+0xfc>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2268      	movs	r2, #104	; 0x68
 80059d2:	5c9b      	ldrb	r3, [r3, r2]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_UART_Receive_DMA+0x5c>
 80059d8:	2302      	movs	r3, #2
 80059da:	e04f      	b.n	8005a7c <HAL_UART_Receive_DMA+0xfc>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2268      	movs	r2, #104	; 0x68
 80059e0:	2101      	movs	r1, #1
 80059e2:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1dba      	adds	r2, r7, #6
 80059ee:	2158      	movs	r1, #88	; 0x58
 80059f0:	8812      	ldrh	r2, [r2, #0]
 80059f2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	226a      	movs	r2, #106	; 0x6a
 80059fe:	2122      	movs	r1, #34	; 0x22
 8005a00:	5499      	strb	r1, [r3, r2]

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a06:	4a1f      	ldr	r2, [pc, #124]	; (8005a84 <HAL_UART_Receive_DMA+0x104>)
 8005a08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a0e:	4a1e      	ldr	r2, [pc, #120]	; (8005a88 <HAL_UART_Receive_DMA+0x108>)
 8005a10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a16:	4a1d      	ldr	r2, [pc, #116]	; (8005a8c <HAL_UART_Receive_DMA+0x10c>)
 8005a18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a1e:	2200      	movs	r2, #0
 8005a20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3324      	adds	r3, #36	; 0x24
 8005a2c:	0019      	movs	r1, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	001a      	movs	r2, r3
 8005a34:	1dbb      	adds	r3, r7, #6
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	f7fc ff84 	bl	8002944 <HAL_DMA_Start_IT>

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2268      	movs	r2, #104	; 0x68
 8005a40:	2100      	movs	r1, #0
 8005a42:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	0049      	lsls	r1, r1, #1
 8005a52:	430a      	orrs	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	6892      	ldr	r2, [r2, #8]
 8005a60:	2101      	movs	r1, #1
 8005a62:	430a      	orrs	r2, r1
 8005a64:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	6892      	ldr	r2, [r2, #8]
 8005a70:	2140      	movs	r1, #64	; 0x40
 8005a72:	430a      	orrs	r2, r1
 8005a74:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	e000      	b.n	8005a7c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8005a7a:	2302      	movs	r3, #2
  }
}
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	b004      	add	sp, #16
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	08006345 	.word	0x08006345
 8005a88:	080063b5 	.word	0x080063b5
 8005a8c:	080063d3 	.word	0x080063d3

08005a90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	220f      	movs	r2, #15
 8005aac:	4013      	ands	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10c      	bne.n	8005ad0 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	4013      	ands	r3, r2
 8005abc:	d008      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x40>
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d004      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f000 fd47 	bl	800655c <UART_Receive_IT>
      return;
 8005ace:	e0ef      	b.n	8005cb0 <HAL_UART_IRQHandler+0x220>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d100      	bne.n	8005ae0 <HAL_UART_IRQHandler+0x50>
 8005ade:	e0af      	b.n	8005c40 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d105      	bne.n	8005af4 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	2390      	movs	r3, #144	; 0x90
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4013      	ands	r3, r2
 8005af0:	d100      	bne.n	8005af4 <HAL_UART_IRQHandler+0x64>
 8005af2:	e0a5      	b.n	8005c40 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2201      	movs	r2, #1
 8005af8:	4013      	ands	r3, r2
 8005afa:	d00e      	beq.n	8005b1a <HAL_UART_IRQHandler+0x8a>
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	4013      	ands	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b12:	2201      	movs	r2, #1
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d00d      	beq.n	8005b3e <HAL_UART_IRQHandler+0xae>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2201      	movs	r2, #1
 8005b26:	4013      	ands	r3, r2
 8005b28:	d009      	beq.n	8005b3e <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b36:	2204      	movs	r2, #4
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2204      	movs	r2, #4
 8005b42:	4013      	ands	r3, r2
 8005b44:	d00d      	beq.n	8005b62 <HAL_UART_IRQHandler+0xd2>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	d009      	beq.n	8005b62 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2204      	movs	r2, #4
 8005b54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2208      	movs	r2, #8
 8005b66:	4013      	ands	r3, r2
 8005b68:	d011      	beq.n	8005b8e <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8005b70:	d103      	bne.n	8005b7a <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2201      	movs	r2, #1
 8005b76:	4013      	ands	r3, r2
 8005b78:	d009      	beq.n	8005b8e <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2208      	movs	r2, #8
 8005b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b86:	2208      	movs	r2, #8
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d100      	bne.n	8005b98 <HAL_UART_IRQHandler+0x108>
 8005b96:	e08a      	b.n	8005cae <HAL_UART_IRQHandler+0x21e>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d007      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x120>
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	0018      	movs	r0, r3
 8005bac:	f000 fcd6 	bl	800655c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d105      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2240      	movs	r2, #64	; 0x40
 8005bc2:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005bc4:	d032      	beq.n	8005c2c <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f000 fb63 	bl	8006294 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2240      	movs	r2, #64	; 0x40
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d023      	beq.n	8005c22 <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	6892      	ldr	r2, [r2, #8]
 8005be4:	2140      	movs	r1, #64	; 0x40
 8005be6:	438a      	bics	r2, r1
 8005be8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d012      	beq.n	8005c18 <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf6:	4a30      	ldr	r2, [pc, #192]	; (8005cb8 <HAL_UART_IRQHandler+0x228>)
 8005bf8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7fc ff06 	bl	8002a10 <HAL_DMA_Abort_IT>
 8005c04:	1e03      	subs	r3, r0, #0
 8005c06:	d019      	beq.n	8005c3c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c12:	0018      	movs	r0, r3
 8005c14:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c16:	e011      	b.n	8005c3c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f000 f85e 	bl	8005cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	e00c      	b.n	8005c3c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	0018      	movs	r0, r3
 8005c26:	f000 f859 	bl	8005cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c2a:	e007      	b.n	8005c3c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f000 f854 	bl	8005cdc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 8005c3a:	e038      	b.n	8005cae <HAL_UART_IRQHandler+0x21e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3c:	46c0      	nop			; (mov r8, r8)
    return;
 8005c3e:	e036      	b.n	8005cae <HAL_UART_IRQHandler+0x21e>

  } /* End if some error occurs */

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	2380      	movs	r3, #128	; 0x80
 8005c44:	035b      	lsls	r3, r3, #13
 8005c46:	4013      	ands	r3, r2
 8005c48:	d016      	beq.n	8005c78 <HAL_UART_IRQHandler+0x1e8>
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	03db      	lsls	r3, r3, #15
 8005c50:	4013      	ands	r3, r2
 8005c52:	d011      	beq.n	8005c78 <HAL_UART_IRQHandler+0x1e8>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2280      	movs	r2, #128	; 0x80
 8005c5a:	0352      	lsls	r2, r2, #13
 8005c5c:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2269      	movs	r2, #105	; 0x69
 8005c62:	2120      	movs	r1, #32
 8005c64:	5499      	strb	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	226a      	movs	r2, #106	; 0x6a
 8005c6a:	2120      	movs	r1, #32
 8005c6c:	5499      	strb	r1, [r3, r2]
    HAL_UARTEx_WakeupCallback(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	0018      	movs	r0, r3
 8005c72:	f000 fd61 	bl	8006738 <HAL_UARTEx_WakeupCallback>
    return;
 8005c76:	e01b      	b.n	8005cb0 <HAL_UART_IRQHandler+0x220>
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2280      	movs	r2, #128	; 0x80
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	d008      	beq.n	8005c92 <HAL_UART_IRQHandler+0x202>
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	2280      	movs	r2, #128	; 0x80
 8005c84:	4013      	ands	r3, r2
 8005c86:	d004      	beq.n	8005c92 <HAL_UART_IRQHandler+0x202>
  {
    UART_Transmit_IT(huart);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f000 fbf5 	bl	800647a <UART_Transmit_IT>
    return;
 8005c90:	e00e      	b.n	8005cb0 <HAL_UART_IRQHandler+0x220>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2240      	movs	r2, #64	; 0x40
 8005c96:	4013      	ands	r3, r2
 8005c98:	d00a      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x220>
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2240      	movs	r2, #64	; 0x40
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d006      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x220>
  {
    UART_EndTransmit_IT(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f000 fc3f 	bl	8006528 <UART_EndTransmit_IT>
    return;
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	e000      	b.n	8005cb0 <HAL_UART_IRQHandler+0x220>
    return;
 8005cae:	46c0      	nop			; (mov r8, r8)
  }

}
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b006      	add	sp, #24
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	0800644d 	.word	0x0800644d

08005cbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cc4:	46c0      	nop			; (mov r8, r8)
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	b002      	add	sp, #8
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005cd4:	46c0      	nop			; (mov r8, r8)
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b002      	add	sp, #8
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ce4:	46c0      	nop			; (mov r8, r8)
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b002      	add	sp, #8
 8005cea:	bd80      	pop	{r7, pc}

08005cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005cf8:	2317      	movs	r3, #23
 8005cfa:	18fb      	adds	r3, r7, r3
 8005cfc:	2210      	movs	r2, #16
 8005cfe:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8005d00:	230a      	movs	r3, #10
 8005d02:	18fb      	adds	r3, r7, r3
 8005d04:	2200      	movs	r2, #0
 8005d06:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8005d08:	2314      	movs	r3, #20
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d10:	2313      	movs	r3, #19
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	499f      	ldr	r1, [pc, #636]	; (8005fb8 <UART_SetConfig+0x2cc>)
 8005d3c:	4011      	ands	r1, r2
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	6852      	ldr	r2, [r2, #4]
 8005d4e:	499b      	ldr	r1, [pc, #620]	; (8005fbc <UART_SetConfig+0x2d0>)
 8005d50:	4011      	ands	r1, r2
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	68d2      	ldr	r2, [r2, #12]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6812      	ldr	r2, [r2, #0]
 8005d6e:	6892      	ldr	r2, [r2, #8]
 8005d70:	4993      	ldr	r1, [pc, #588]	; (8005fc0 <UART_SetConfig+0x2d4>)
 8005d72:	4011      	ands	r1, r2
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a91      	ldr	r2, [pc, #580]	; (8005fc4 <UART_SetConfig+0x2d8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d125      	bne.n	8005dd0 <UART_SetConfig+0xe4>
 8005d84:	4b90      	ldr	r3, [pc, #576]	; (8005fc8 <UART_SetConfig+0x2dc>)
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	2203      	movs	r2, #3
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d00f      	beq.n	8005db0 <UART_SetConfig+0xc4>
 8005d90:	d304      	bcc.n	8005d9c <UART_SetConfig+0xb0>
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d011      	beq.n	8005dba <UART_SetConfig+0xce>
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d005      	beq.n	8005da6 <UART_SetConfig+0xba>
 8005d9a:	e013      	b.n	8005dc4 <UART_SetConfig+0xd8>
 8005d9c:	2317      	movs	r3, #23
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	e022      	b.n	8005dec <UART_SetConfig+0x100>
 8005da6:	2317      	movs	r3, #23
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	2202      	movs	r2, #2
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	e01d      	b.n	8005dec <UART_SetConfig+0x100>
 8005db0:	2317      	movs	r3, #23
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	2204      	movs	r2, #4
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	e018      	b.n	8005dec <UART_SetConfig+0x100>
 8005dba:	2317      	movs	r3, #23
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	2208      	movs	r2, #8
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	e013      	b.n	8005dec <UART_SetConfig+0x100>
 8005dc4:	2317      	movs	r3, #23
 8005dc6:	18fb      	adds	r3, r7, r3
 8005dc8:	2210      	movs	r2, #16
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	46c0      	nop			; (mov r8, r8)
 8005dce:	e00d      	b.n	8005dec <UART_SetConfig+0x100>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a7d      	ldr	r2, [pc, #500]	; (8005fcc <UART_SetConfig+0x2e0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d104      	bne.n	8005de4 <UART_SetConfig+0xf8>
 8005dda:	2317      	movs	r3, #23
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	e003      	b.n	8005dec <UART_SetConfig+0x100>
 8005de4:	2317      	movs	r3, #23
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	2210      	movs	r2, #16
 8005dea:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d000      	beq.n	8005dfa <UART_SetConfig+0x10e>
 8005df8:	e07b      	b.n	8005ef2 <UART_SetConfig+0x206>
  {
    switch (clocksource)
 8005dfa:	2317      	movs	r3, #23
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d01c      	beq.n	8005e3e <UART_SetConfig+0x152>
 8005e04:	dc02      	bgt.n	8005e0c <UART_SetConfig+0x120>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <UART_SetConfig+0x12a>
 8005e0a:	e04f      	b.n	8005eac <UART_SetConfig+0x1c0>
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d027      	beq.n	8005e60 <UART_SetConfig+0x174>
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d039      	beq.n	8005e88 <UART_SetConfig+0x19c>
 8005e14:	e04a      	b.n	8005eac <UART_SetConfig+0x1c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005e16:	f7fe fcbf 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	005a      	lsls	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	18d2      	adds	r2, r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	0019      	movs	r1, r3
 8005e2c:	0010      	movs	r0, r2
 8005e2e:	f7fa f96b 	bl	8000108 <__udivsi3>
 8005e32:	0003      	movs	r3, r0
 8005e34:	001a      	movs	r2, r3
 8005e36:	2314      	movs	r3, #20
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	801a      	strh	r2, [r3, #0]
        break;
 8005e3c:	e03b      	b.n	8005eb6 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	4a62      	ldr	r2, [pc, #392]	; (8005fd0 <UART_SetConfig+0x2e4>)
 8005e46:	189a      	adds	r2, r3, r2
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	0019      	movs	r1, r3
 8005e4e:	0010      	movs	r0, r2
 8005e50:	f7fa f95a 	bl	8000108 <__udivsi3>
 8005e54:	0003      	movs	r3, r0
 8005e56:	001a      	movs	r2, r3
 8005e58:	2314      	movs	r3, #20
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	801a      	strh	r2, [r3, #0]
        break;
 8005e5e:	e02a      	b.n	8005eb6 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005e60:	f7fe fc30 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 8005e64:	0003      	movs	r3, r0
 8005e66:	005a      	lsls	r2, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	18d2      	adds	r2, r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	0019      	movs	r1, r3
 8005e76:	0010      	movs	r0, r2
 8005e78:	f7fa f946 	bl	8000108 <__udivsi3>
 8005e7c:	0003      	movs	r3, r0
 8005e7e:	001a      	movs	r2, r3
 8005e80:	2314      	movs	r3, #20
 8005e82:	18fb      	adds	r3, r7, r3
 8005e84:	801a      	strh	r2, [r3, #0]
        break;
 8005e86:	e016      	b.n	8005eb6 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	085b      	lsrs	r3, r3, #1
 8005e8e:	2280      	movs	r2, #128	; 0x80
 8005e90:	0252      	lsls	r2, r2, #9
 8005e92:	189a      	adds	r2, r3, r2
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	0019      	movs	r1, r3
 8005e9a:	0010      	movs	r0, r2
 8005e9c:	f7fa f934 	bl	8000108 <__udivsi3>
 8005ea0:	0003      	movs	r3, r0
 8005ea2:	001a      	movs	r2, r3
 8005ea4:	2314      	movs	r3, #20
 8005ea6:	18fb      	adds	r3, r7, r3
 8005ea8:	801a      	strh	r2, [r3, #0]
        break;
 8005eaa:	e004      	b.n	8005eb6 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005eac:	2313      	movs	r3, #19
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
        break;
 8005eb4:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8005eb6:	230a      	movs	r3, #10
 8005eb8:	18fb      	adds	r3, r7, r3
 8005eba:	2214      	movs	r2, #20
 8005ebc:	18ba      	adds	r2, r7, r2
 8005ebe:	8812      	ldrh	r2, [r2, #0]
 8005ec0:	210f      	movs	r1, #15
 8005ec2:	438a      	bics	r2, r1
 8005ec4:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ec6:	2314      	movs	r3, #20
 8005ec8:	18fb      	adds	r3, r7, r3
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	105b      	asrs	r3, r3, #1
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2207      	movs	r2, #7
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	b299      	uxth	r1, r3
 8005ed6:	230a      	movs	r3, #10
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	220a      	movs	r2, #10
 8005edc:	18ba      	adds	r2, r7, r2
 8005ede:	8812      	ldrh	r2, [r2, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	220a      	movs	r2, #10
 8005eea:	18ba      	adds	r2, r7, r2
 8005eec:	8812      	ldrh	r2, [r2, #0]
 8005eee:	60da      	str	r2, [r3, #12]
 8005ef0:	e05b      	b.n	8005faa <UART_SetConfig+0x2be>
  }
  else
  {
    switch (clocksource)
 8005ef2:	2317      	movs	r3, #23
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d01b      	beq.n	8005f34 <UART_SetConfig+0x248>
 8005efc:	dc02      	bgt.n	8005f04 <UART_SetConfig+0x218>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <UART_SetConfig+0x222>
 8005f02:	e04d      	b.n	8005fa0 <UART_SetConfig+0x2b4>
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d026      	beq.n	8005f56 <UART_SetConfig+0x26a>
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d037      	beq.n	8005f7c <UART_SetConfig+0x290>
 8005f0c:	e048      	b.n	8005fa0 <UART_SetConfig+0x2b4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681c      	ldr	r4, [r3, #0]
 8005f12:	f7fe fc41 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8005f16:	0002      	movs	r2, r0
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	18d2      	adds	r2, r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	0019      	movs	r1, r3
 8005f26:	0010      	movs	r0, r2
 8005f28:	f7fa f8ee 	bl	8000108 <__udivsi3>
 8005f2c:	0003      	movs	r3, r0
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	60e3      	str	r3, [r4, #12]
        break;
 8005f32:	e03a      	b.n	8005faa <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681c      	ldr	r4, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	085b      	lsrs	r3, r3, #1
 8005f3e:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <UART_SetConfig+0x2e8>)
 8005f40:	189a      	adds	r2, r3, r2
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	0019      	movs	r1, r3
 8005f48:	0010      	movs	r0, r2
 8005f4a:	f7fa f8dd 	bl	8000108 <__udivsi3>
 8005f4e:	0003      	movs	r3, r0
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	60e3      	str	r3, [r4, #12]
        break;
 8005f54:	e029      	b.n	8005faa <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681c      	ldr	r4, [r3, #0]
 8005f5a:	f7fe fbb3 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 8005f5e:	0002      	movs	r2, r0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	18d2      	adds	r2, r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	0019      	movs	r1, r3
 8005f6e:	0010      	movs	r0, r2
 8005f70:	f7fa f8ca 	bl	8000108 <__udivsi3>
 8005f74:	0003      	movs	r3, r0
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	60e3      	str	r3, [r4, #12]
        break;
 8005f7a:	e016      	b.n	8005faa <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681c      	ldr	r4, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	085b      	lsrs	r3, r3, #1
 8005f86:	2280      	movs	r2, #128	; 0x80
 8005f88:	0212      	lsls	r2, r2, #8
 8005f8a:	189a      	adds	r2, r3, r2
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	0019      	movs	r1, r3
 8005f92:	0010      	movs	r0, r2
 8005f94:	f7fa f8b8 	bl	8000108 <__udivsi3>
 8005f98:	0003      	movs	r3, r0
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	60e3      	str	r3, [r4, #12]
        break;
 8005f9e:	e004      	b.n	8005faa <UART_SetConfig+0x2be>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005fa0:	2313      	movs	r3, #19
 8005fa2:	18fb      	adds	r3, r7, r3
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	701a      	strb	r2, [r3, #0]
        break;
 8005fa8:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8005faa:	2313      	movs	r3, #19
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	781b      	ldrb	r3, [r3, #0]

}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b007      	add	sp, #28
 8005fb6:	bd90      	pop	{r4, r7, pc}
 8005fb8:	ffff69f3 	.word	0xffff69f3
 8005fbc:	ffffcfff 	.word	0xffffcfff
 8005fc0:	fffff4ff 	.word	0xfffff4ff
 8005fc4:	40013800 	.word	0x40013800
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	40004400 	.word	0x40004400
 8005fd0:	00f42400 	.word	0x00f42400
 8005fd4:	007a1200 	.word	0x007a1200

08005fd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d00a      	beq.n	8006000 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	6812      	ldr	r2, [r2, #0]
 8005ff2:	6852      	ldr	r2, [r2, #4]
 8005ff4:	4945      	ldr	r1, [pc, #276]	; (800610c <UART_AdvFeatureConfig+0x134>)
 8005ff6:	4011      	ands	r1, r2
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	2202      	movs	r2, #2
 8006006:	4013      	ands	r3, r2
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	6852      	ldr	r2, [r2, #4]
 8006014:	493e      	ldr	r1, [pc, #248]	; (8006110 <UART_AdvFeatureConfig+0x138>)
 8006016:	4011      	ands	r1, r2
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	2204      	movs	r2, #4
 8006026:	4013      	ands	r3, r2
 8006028:	d00a      	beq.n	8006040 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6812      	ldr	r2, [r2, #0]
 8006032:	6852      	ldr	r2, [r2, #4]
 8006034:	4937      	ldr	r1, [pc, #220]	; (8006114 <UART_AdvFeatureConfig+0x13c>)
 8006036:	4011      	ands	r1, r2
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800603c:	430a      	orrs	r2, r1
 800603e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	2208      	movs	r2, #8
 8006046:	4013      	ands	r3, r2
 8006048:	d00a      	beq.n	8006060 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6812      	ldr	r2, [r2, #0]
 8006052:	6852      	ldr	r2, [r2, #4]
 8006054:	4930      	ldr	r1, [pc, #192]	; (8006118 <UART_AdvFeatureConfig+0x140>)
 8006056:	4011      	ands	r1, r2
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800605c:	430a      	orrs	r2, r1
 800605e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	2210      	movs	r2, #16
 8006066:	4013      	ands	r3, r2
 8006068:	d00a      	beq.n	8006080 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	6892      	ldr	r2, [r2, #8]
 8006074:	4929      	ldr	r1, [pc, #164]	; (800611c <UART_AdvFeatureConfig+0x144>)
 8006076:	4011      	ands	r1, r2
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800607c:	430a      	orrs	r2, r1
 800607e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	2220      	movs	r2, #32
 8006086:	4013      	ands	r3, r2
 8006088:	d00a      	beq.n	80060a0 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6812      	ldr	r2, [r2, #0]
 8006092:	6892      	ldr	r2, [r2, #8]
 8006094:	4922      	ldr	r1, [pc, #136]	; (8006120 <UART_AdvFeatureConfig+0x148>)
 8006096:	4011      	ands	r1, r2
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800609c:	430a      	orrs	r2, r1
 800609e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	2240      	movs	r2, #64	; 0x40
 80060a6:	4013      	ands	r3, r2
 80060a8:	d01b      	beq.n	80060e2 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6812      	ldr	r2, [r2, #0]
 80060b2:	6852      	ldr	r2, [r2, #4]
 80060b4:	491b      	ldr	r1, [pc, #108]	; (8006124 <UART_AdvFeatureConfig+0x14c>)
 80060b6:	4011      	ands	r1, r2
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80060bc:	430a      	orrs	r2, r1
 80060be:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	035b      	lsls	r3, r3, #13
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d10a      	bne.n	80060e2 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	6852      	ldr	r2, [r2, #4]
 80060d6:	4914      	ldr	r1, [pc, #80]	; (8006128 <UART_AdvFeatureConfig+0x150>)
 80060d8:	4011      	ands	r1, r2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	2280      	movs	r2, #128	; 0x80
 80060e8:	4013      	ands	r3, r2
 80060ea:	d00a      	beq.n	8006102 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	6852      	ldr	r2, [r2, #4]
 80060f6:	490d      	ldr	r1, [pc, #52]	; (800612c <UART_AdvFeatureConfig+0x154>)
 80060f8:	4011      	ands	r1, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
  }
}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	46bd      	mov	sp, r7
 8006106:	b002      	add	sp, #8
 8006108:	bd80      	pop	{r7, pc}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	fffdffff 	.word	0xfffdffff
 8006110:	fffeffff 	.word	0xfffeffff
 8006114:	fffbffff 	.word	0xfffbffff
 8006118:	ffff7fff 	.word	0xffff7fff
 800611c:	ffffefff 	.word	0xffffefff
 8006120:	ffffdfff 	.word	0xffffdfff
 8006124:	ffefffff 	.word	0xffefffff
 8006128:	ff9fffff 	.word	0xff9fffff
 800612c:	fff7ffff 	.word	0xfff7ffff

08006130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af02      	add	r7, sp, #8
 8006136:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006142:	f7fc fa81 	bl	8002648 <HAL_GetTick>
 8006146:	0003      	movs	r3, r0
 8006148:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <UART_CheckIdleState+0x9c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d129      	bne.n	80061a8 <UART_CheckIdleState+0x78>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2208      	movs	r2, #8
 800615c:	4013      	ands	r3, r2
 800615e:	2b08      	cmp	r3, #8
 8006160:	d10d      	bne.n	800617e <UART_CheckIdleState+0x4e>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	2380      	movs	r3, #128	; 0x80
 8006166:	0399      	lsls	r1, r3, #14
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4b19      	ldr	r3, [pc, #100]	; (80061d0 <UART_CheckIdleState+0xa0>)
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	0013      	movs	r3, r2
 8006170:	2200      	movs	r2, #0
 8006172:	f000 f82f 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 8006176:	1e03      	subs	r3, r0, #0
 8006178:	d001      	beq.n	800617e <UART_CheckIdleState+0x4e>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e021      	b.n	80061c2 <UART_CheckIdleState+0x92>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2204      	movs	r2, #4
 8006186:	4013      	ands	r3, r2
 8006188:	2b04      	cmp	r3, #4
 800618a:	d10d      	bne.n	80061a8 <UART_CheckIdleState+0x78>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	2380      	movs	r3, #128	; 0x80
 8006190:	03d9      	lsls	r1, r3, #15
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4b0e      	ldr	r3, [pc, #56]	; (80061d0 <UART_CheckIdleState+0xa0>)
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	0013      	movs	r3, r2
 800619a:	2200      	movs	r2, #0
 800619c:	f000 f81a 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 80061a0:	1e03      	subs	r3, r0, #0
 80061a2:	d001      	beq.n	80061a8 <UART_CheckIdleState+0x78>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e00c      	b.n	80061c2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2269      	movs	r2, #105	; 0x69
 80061ac:	2120      	movs	r1, #32
 80061ae:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	226a      	movs	r2, #106	; 0x6a
 80061b4:	2120      	movs	r1, #32
 80061b6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2268      	movs	r2, #104	; 0x68
 80061bc:	2100      	movs	r1, #0
 80061be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	0018      	movs	r0, r3
 80061c4:	46bd      	mov	sp, r7
 80061c6:	b004      	add	sp, #16
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	40013800 	.word	0x40013800
 80061d0:	01ffffff 	.word	0x01ffffff

080061d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	1dfb      	adds	r3, r7, #7
 80061e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e4:	e02b      	b.n	800623e <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	3301      	adds	r3, #1
 80061ea:	d028      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <UART_WaitOnFlagUntilTimeout+0x2e>
 80061f2:	f7fc fa29 	bl	8002648 <HAL_GetTick>
 80061f6:	0002      	movs	r2, r0
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	1ad2      	subs	r2, r2, r3
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d91d      	bls.n	800623e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	6812      	ldr	r2, [r2, #0]
 800620c:	4916      	ldr	r1, [pc, #88]	; (8006268 <UART_WaitOnFlagUntilTimeout+0x94>)
 800620e:	400a      	ands	r2, r1
 8006210:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	6892      	ldr	r2, [r2, #8]
 800621c:	2101      	movs	r1, #1
 800621e:	438a      	bics	r2, r1
 8006220:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2269      	movs	r2, #105	; 0x69
 8006226:	2120      	movs	r1, #32
 8006228:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	226a      	movs	r2, #106	; 0x6a
 800622e:	2120      	movs	r1, #32
 8006230:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2268      	movs	r2, #104	; 0x68
 8006236:	2100      	movs	r1, #0
 8006238:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e00f      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	401a      	ands	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	425a      	negs	r2, r3
 800624e:	4153      	adcs	r3, r2
 8006250:	b2db      	uxtb	r3, r3
 8006252:	001a      	movs	r2, r3
 8006254:	1dfb      	adds	r3, r7, #7
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d0c4      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b004      	add	sp, #16
 8006264:	bd80      	pop	{r7, pc}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	fffffe5f 	.word	0xfffffe5f

0800626c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	21c0      	movs	r1, #192	; 0xc0
 8006280:	438a      	bics	r2, r1
 8006282:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2269      	movs	r2, #105	; 0x69
 8006288:	2120      	movs	r1, #32
 800628a:	5499      	strb	r1, [r3, r2]
}
 800628c:	46c0      	nop			; (mov r8, r8)
 800628e:	46bd      	mov	sp, r7
 8006290:	b002      	add	sp, #8
 8006292:	bd80      	pop	{r7, pc}

08006294 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	4909      	ldr	r1, [pc, #36]	; (80062cc <UART_EndRxTransfer+0x38>)
 80062a8:	400a      	ands	r2, r1
 80062aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6812      	ldr	r2, [r2, #0]
 80062b4:	6892      	ldr	r2, [r2, #8]
 80062b6:	2101      	movs	r1, #1
 80062b8:	438a      	bics	r2, r1
 80062ba:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	226a      	movs	r2, #106	; 0x6a
 80062c0:	2120      	movs	r1, #32
 80062c2:	5499      	strb	r1, [r3, r2]
}
 80062c4:	46c0      	nop			; (mov r8, r8)
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b002      	add	sp, #8
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	fffffedf 	.word	0xfffffedf

080062d0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	60fb      	str	r3, [r7, #12]
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2220      	movs	r2, #32
 80062e6:	4013      	ands	r3, r2
 80062e8:	d114      	bne.n	8006314 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2252      	movs	r2, #82	; 0x52
 80062ee:	2100      	movs	r1, #0
 80062f0:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	6892      	ldr	r2, [r2, #8]
 80062fc:	2180      	movs	r1, #128	; 0x80
 80062fe:	438a      	bics	r2, r1
 8006300:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	6812      	ldr	r2, [r2, #0]
 800630a:	6812      	ldr	r2, [r2, #0]
 800630c:	2140      	movs	r1, #64	; 0x40
 800630e:	430a      	orrs	r2, r1
 8006310:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8006312:	e003      	b.n	800631c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	0018      	movs	r0, r3
 8006318:	f7ff fcd0 	bl	8005cbc <HAL_UART_TxCpltCallback>
}
 800631c:	46c0      	nop			; (mov r8, r8)
 800631e:	46bd      	mov	sp, r7
 8006320:	b004      	add	sp, #16
 8006322:	bd80      	pop	{r7, pc}

08006324 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	0018      	movs	r0, r3
 8006336:	f7ff fcc9 	bl	8005ccc <HAL_UART_TxHalfCpltCallback>
}
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	46bd      	mov	sp, r7
 800633e:	b004      	add	sp, #16
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2220      	movs	r2, #32
 800635a:	4013      	ands	r3, r2
 800635c:	d11f      	bne.n	800639e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	225a      	movs	r2, #90	; 0x5a
 8006362:	2100      	movs	r1, #0
 8006364:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	6812      	ldr	r2, [r2, #0]
 8006370:	490f      	ldr	r1, [pc, #60]	; (80063b0 <UART_DMAReceiveCplt+0x6c>)
 8006372:	400a      	ands	r2, r1
 8006374:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	6892      	ldr	r2, [r2, #8]
 8006380:	2101      	movs	r1, #1
 8006382:	438a      	bics	r2, r1
 8006384:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	6812      	ldr	r2, [r2, #0]
 800638e:	6892      	ldr	r2, [r2, #8]
 8006390:	2140      	movs	r1, #64	; 0x40
 8006392:	438a      	bics	r2, r1
 8006394:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	226a      	movs	r2, #106	; 0x6a
 800639a:	2120      	movs	r1, #32
 800639c:	5499      	strb	r1, [r3, r2]
  }

  HAL_UART_RxCpltCallback(huart);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	0018      	movs	r0, r3
 80063a2:	f002 f867 	bl	8008474 <HAL_UART_RxCpltCallback>
}
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	46bd      	mov	sp, r7
 80063aa:	b004      	add	sp, #16
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	fffffeff 	.word	0xfffffeff

080063b4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	0018      	movs	r0, r3
 80063c6:	f001 fff9 	bl	80083bc <HAL_UART_RxHalfCpltCallback>
}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	46bd      	mov	sp, r7
 80063ce:	b004      	add	sp, #16
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2269      	movs	r2, #105	; 0x69
 80063e4:	5c9b      	ldrb	r3, [r3, r2]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b21      	cmp	r3, #33	; 0x21
 80063ea:	d10d      	bne.n	8006408 <UART_DMAError+0x36>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2280      	movs	r2, #128	; 0x80
 80063f4:	4013      	ands	r3, r2
 80063f6:	d007      	beq.n	8006408 <UART_DMAError+0x36>
  {
    huart->TxXferCount = 0U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2252      	movs	r2, #82	; 0x52
 80063fc:	2100      	movs	r1, #0
 80063fe:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	0018      	movs	r0, r3
 8006404:	f7ff ff32 	bl	800626c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	226a      	movs	r2, #106	; 0x6a
 800640c:	5c9b      	ldrb	r3, [r3, r2]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b22      	cmp	r3, #34	; 0x22
 8006412:	d10d      	bne.n	8006430 <UART_DMAError+0x5e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	2240      	movs	r2, #64	; 0x40
 800641c:	4013      	ands	r3, r2
 800641e:	d007      	beq.n	8006430 <UART_DMAError+0x5e>
  {
    huart->RxXferCount = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	225a      	movs	r2, #90	; 0x5a
 8006424:	2100      	movs	r1, #0
 8006426:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	0018      	movs	r0, r3
 800642c:	f7ff ff32 	bl	8006294 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006434:	2210      	movs	r2, #16
 8006436:	431a      	orrs	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	0018      	movs	r0, r3
 8006440:	f7ff fc4c 	bl	8005cdc <HAL_UART_ErrorCallback>
}
 8006444:	46c0      	nop			; (mov r8, r8)
 8006446:	46bd      	mov	sp, r7
 8006448:	b004      	add	sp, #16
 800644a:	bd80      	pop	{r7, pc}

0800644c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	225a      	movs	r2, #90	; 0x5a
 800645e:	2100      	movs	r1, #0
 8006460:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2252      	movs	r2, #82	; 0x52
 8006466:	2100      	movs	r1, #0
 8006468:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	0018      	movs	r0, r3
 800646e:	f7ff fc35 	bl	8005cdc <HAL_UART_ErrorCallback>
}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	46bd      	mov	sp, r7
 8006476:	b004      	add	sp, #16
 8006478:	bd80      	pop	{r7, pc}

0800647a <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2269      	movs	r2, #105	; 0x69
 8006486:	5c9b      	ldrb	r3, [r3, r2]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b21      	cmp	r3, #33	; 0x21
 800648c:	d147      	bne.n	800651e <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2252      	movs	r2, #82	; 0x52
 8006492:	5a9b      	ldrh	r3, [r3, r2]
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d111      	bne.n	80064be <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	2180      	movs	r1, #128	; 0x80
 80064a6:	438a      	bics	r2, r1
 80064a8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	2140      	movs	r1, #64	; 0x40
 80064b6:	430a      	orrs	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e030      	b.n	8006520 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	015b      	lsls	r3, r3, #5
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d114      	bne.n	80064f4 <UART_Transmit_IT+0x7a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d110      	bne.n	80064f4 <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d6:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	8812      	ldrh	r2, [r2, #0]
 80064e0:	05d2      	lsls	r2, r2, #23
 80064e2:	0dd2      	lsrs	r2, r2, #23
 80064e4:	b292      	uxth	r2, r2
 80064e6:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ec:	1c9a      	adds	r2, r3, #2
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80064f2:	e009      	b.n	8006508 <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6819      	ldr	r1, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fc:	1c58      	adds	r0, r3, #1
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	64d0      	str	r0, [r2, #76]	; 0x4c
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	850b      	strh	r3, [r1, #40]	; 0x28
      }
      huart->TxXferCount--;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2252      	movs	r2, #82	; 0x52
 800650c:	5a9b      	ldrh	r3, [r3, r2]
 800650e:	b29b      	uxth	r3, r3
 8006510:	3b01      	subs	r3, #1
 8006512:	b299      	uxth	r1, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2252      	movs	r2, #82	; 0x52
 8006518:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	e000      	b.n	8006520 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 800651e:	2302      	movs	r3, #2
  }
}
 8006520:	0018      	movs	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	b004      	add	sp, #16
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	2140      	movs	r1, #64	; 0x40
 800653c:	438a      	bics	r2, r1
 800653e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2269      	movs	r2, #105	; 0x69
 8006544:	2120      	movs	r1, #32
 8006546:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	0018      	movs	r0, r3
 800654c:	f7ff fbb6 	bl	8005cbc <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	0018      	movs	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	b002      	add	sp, #8
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8006564:	230e      	movs	r3, #14
 8006566:	18fb      	adds	r3, r7, r3
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	215c      	movs	r1, #92	; 0x5c
 800656c:	5a52      	ldrh	r2, [r2, r1]
 800656e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	226a      	movs	r2, #106	; 0x6a
 8006574:	5c9b      	ldrb	r3, [r3, r2]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b22      	cmp	r3, #34	; 0x22
 800657a:	d15a      	bne.n	8006632 <UART_Receive_IT+0xd6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	230c      	movs	r3, #12
 8006582:	18fb      	adds	r3, r7, r3
 8006584:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006586:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	015b      	lsls	r3, r3, #5
 8006590:	429a      	cmp	r2, r3
 8006592:	d116      	bne.n	80065c2 <UART_Receive_IT+0x66>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d112      	bne.n	80065c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a0:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 80065a2:	230c      	movs	r3, #12
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	220e      	movs	r2, #14
 80065a8:	18ba      	adds	r2, r7, r2
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	8812      	ldrh	r2, [r2, #0]
 80065ae:	4013      	ands	r3, r2
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ba:	1c9a      	adds	r2, r3, #2
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	655a      	str	r2, [r3, #84]	; 0x54
 80065c0:	e00f      	b.n	80065e2 <UART_Receive_IT+0x86>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6551      	str	r1, [r2, #84]	; 0x54
 80065cc:	220c      	movs	r2, #12
 80065ce:	18ba      	adds	r2, r7, r2
 80065d0:	8812      	ldrh	r2, [r2, #0]
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	210e      	movs	r1, #14
 80065d6:	1879      	adds	r1, r7, r1
 80065d8:	8809      	ldrh	r1, [r1, #0]
 80065da:	b2c9      	uxtb	r1, r1
 80065dc:	400a      	ands	r2, r1
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	225a      	movs	r2, #90	; 0x5a
 80065e6:	5a9b      	ldrh	r3, [r3, r2]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	215a      	movs	r1, #90	; 0x5a
 80065f2:	1c18      	adds	r0, r3, #0
 80065f4:	5250      	strh	r0, [r2, r1]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d119      	bne.n	800662e <UART_Receive_IT+0xd2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	4911      	ldr	r1, [pc, #68]	; (800664c <UART_Receive_IT+0xf0>)
 8006606:	400a      	ands	r2, r1
 8006608:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	6892      	ldr	r2, [r2, #8]
 8006614:	2101      	movs	r1, #1
 8006616:	438a      	bics	r2, r1
 8006618:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	226a      	movs	r2, #106	; 0x6a
 800661e:	2120      	movs	r1, #32
 8006620:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	0018      	movs	r0, r3
 8006626:	f001 ff25 	bl	8008474 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	e00a      	b.n	8006644 <UART_Receive_IT+0xe8>
    }

    return HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	e008      	b.n	8006644 <UART_Receive_IT+0xe8>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6812      	ldr	r2, [r2, #0]
 800663a:	6992      	ldr	r2, [r2, #24]
 800663c:	2108      	movs	r1, #8
 800663e:	430a      	orrs	r2, r1
 8006640:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8006642:	2302      	movs	r3, #2
  }
}
 8006644:	0018      	movs	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	b004      	add	sp, #16
 800664a:	bd80      	pop	{r7, pc}
 800664c:	fffffedf 	.word	0xfffffedf

08006650 <HAL_RS485Ex_Init>:
  *                         It is expressed in sample time units (1/8 or 1/16 bit time, depending on the
  *                         oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime, uint32_t DeassertionTime)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0x0U;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]

  /* Check the UART handle allocation */
  if(huart == NULL)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_RS485Ex_Init+0x1c>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e05c      	b.n	8006726 <HAL_RS485Ex_Init+0xd6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if(huart->gState == HAL_UART_STATE_RESET)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2269      	movs	r2, #105	; 0x69
 8006670:	5c9b      	ldrb	r3, [r3, r2]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d107      	bne.n	8006688 <HAL_RS485Ex_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2268      	movs	r2, #104	; 0x68
 800667c:	2100      	movs	r1, #0
 800667e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	0018      	movs	r0, r3
 8006684:	f003 fc8a 	bl	8009f9c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2269      	movs	r2, #105	; 0x69
 800668c:	2124      	movs	r1, #36	; 0x24
 800668e:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	6812      	ldr	r2, [r2, #0]
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	2101      	movs	r1, #1
 800669c:	438a      	bics	r2, r1
 800669e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7ff fb22 	bl	8005cec <UART_SetConfig>
 80066a8:	0003      	movs	r3, r0
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e039      	b.n	8006726 <HAL_RS485Ex_Init+0xd6>
  }

  if(huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_RS485Ex_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	0018      	movs	r0, r3
 80066be:	f7ff fc8b 	bl	8005fd8 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	6892      	ldr	r2, [r2, #8]
 80066cc:	2180      	movs	r1, #128	; 0x80
 80066ce:	01c9      	lsls	r1, r1, #7
 80066d0:	430a      	orrs	r2, r1
 80066d2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	6892      	ldr	r2, [r2, #8]
 80066de:	4914      	ldr	r1, [pc, #80]	; (8006730 <HAL_RS485Ex_Init+0xe0>)
 80066e0:	4011      	ands	r1, r2
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	055b      	lsls	r3, r3, #21
 80066ec:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	041b      	lsls	r3, r3, #16
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT|USART_CR1_DEAT), temp);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	6812      	ldr	r2, [r2, #0]
 8006702:	490c      	ldr	r1, [pc, #48]	; (8006734 <HAL_RS485Ex_Init+0xe4>)
 8006704:	4011      	ands	r1, r2
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	430a      	orrs	r2, r1
 800670a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	6812      	ldr	r2, [r2, #0]
 8006716:	2101      	movs	r1, #1
 8006718:	430a      	orrs	r2, r1
 800671a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	0018      	movs	r0, r3
 8006720:	f7ff fd06 	bl	8006130 <UART_CheckIdleState>
 8006724:	0003      	movs	r3, r0
}
 8006726:	0018      	movs	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	b006      	add	sp, #24
 800672c:	bd80      	pop	{r7, pc}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	ffff7fff 	.word	0xffff7fff
 8006734:	fc00ffff 	.word	0xfc00ffff

08006738 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006740:	46c0      	nop			; (mov r8, r8)
 8006742:	46bd      	mov	sp, r7
 8006744:	b002      	add	sp, #8
 8006746:	bd80      	pop	{r7, pc}

08006748 <CRC4>:
										MS5837_CONVERSION_TIME_OSR_1024,
										MS5837_CONVERSION_TIME_OSR_2048,
										MS5837_CONVERSION_TIME_OSR_4096,
										MS5837_CONVERSION_TIME_OSR_8192 };

static uint16_t CRC4(uint16_t *n_prom) {
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	uint16_t n_rem = 0;
 8006750:	230e      	movs	r3, #14
 8006752:	18fb      	adds	r3, r7, r3
 8006754:	2200      	movs	r2, #0
 8006756:	801a      	strh	r2, [r3, #0]

	for (uint8_t cnt = 0; cnt < 16; cnt++)
 8006758:	230d      	movs	r3, #13
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	2200      	movs	r2, #0
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	e062      	b.n	8006828 <CRC4+0xe0>
	{
		if (cnt % 2 == 1) n_rem ^= n_prom[cnt >> 1] & 0x00FF;
 8006762:	230d      	movs	r3, #13
 8006764:	18fb      	adds	r3, r7, r3
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2201      	movs	r2, #1
 800676a:	4013      	ands	r3, r2
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d016      	beq.n	80067a0 <CRC4+0x58>
 8006772:	230d      	movs	r3, #13
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	085b      	lsrs	r3, r3, #1
 800677a:	b2db      	uxtb	r3, r3
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	18d3      	adds	r3, r2, r3
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	b21b      	sxth	r3, r3
 8006786:	22ff      	movs	r2, #255	; 0xff
 8006788:	4013      	ands	r3, r2
 800678a:	b21a      	sxth	r2, r3
 800678c:	230e      	movs	r3, #14
 800678e:	18fb      	adds	r3, r7, r3
 8006790:	2100      	movs	r1, #0
 8006792:	5e5b      	ldrsh	r3, [r3, r1]
 8006794:	4053      	eors	r3, r2
 8006796:	b21a      	sxth	r2, r3
 8006798:	230e      	movs	r3, #14
 800679a:	18fb      	adds	r3, r7, r3
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	e011      	b.n	80067c4 <CRC4+0x7c>
		else			  n_rem ^= n_prom[cnt >> 1] >> 8;
 80067a0:	230d      	movs	r3, #13
 80067a2:	18fb      	adds	r3, r7, r3
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	085b      	lsrs	r3, r3, #1
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	18d3      	adds	r3, r2, r3
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	b299      	uxth	r1, r3
 80067b6:	230e      	movs	r3, #14
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	220e      	movs	r2, #14
 80067bc:	18ba      	adds	r2, r7, r2
 80067be:	8812      	ldrh	r2, [r2, #0]
 80067c0:	404a      	eors	r2, r1
 80067c2:	801a      	strh	r2, [r3, #0]

		for (uint8_t n_bit = 8; n_bit > 0; n_bit--)
 80067c4:	230c      	movs	r3, #12
 80067c6:	18fb      	adds	r3, r7, r3
 80067c8:	2208      	movs	r2, #8
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	e020      	b.n	8006810 <CRC4+0xc8>
			if (n_rem & 0x8000) n_rem = (n_rem << 1) ^ 0x3000;
 80067ce:	230e      	movs	r3, #14
 80067d0:	18fb      	adds	r3, r7, r3
 80067d2:	2200      	movs	r2, #0
 80067d4:	5e9b      	ldrsh	r3, [r3, r2]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da0c      	bge.n	80067f4 <CRC4+0xac>
 80067da:	230e      	movs	r3, #14
 80067dc:	18fb      	adds	r3, r7, r3
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	b21b      	sxth	r3, r3
 80067e4:	22c0      	movs	r2, #192	; 0xc0
 80067e6:	0192      	lsls	r2, r2, #6
 80067e8:	4053      	eors	r3, r2
 80067ea:	b21a      	sxth	r2, r3
 80067ec:	230e      	movs	r3, #14
 80067ee:	18fb      	adds	r3, r7, r3
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	e006      	b.n	8006802 <CRC4+0xba>
			else 				  n_rem = n_rem << 1;
 80067f4:	230e      	movs	r3, #14
 80067f6:	18fa      	adds	r2, r7, r3
 80067f8:	230e      	movs	r3, #14
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	18db      	adds	r3, r3, r3
 8006800:	8013      	strh	r3, [r2, #0]
		for (uint8_t n_bit = 8; n_bit > 0; n_bit--)
 8006802:	230c      	movs	r3, #12
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	781a      	ldrb	r2, [r3, #0]
 8006808:	230c      	movs	r3, #12
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	3a01      	subs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	230c      	movs	r3, #12
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1d9      	bne.n	80067ce <CRC4+0x86>
	for (uint8_t cnt = 0; cnt < 16; cnt++)
 800681a:	230d      	movs	r3, #13
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	781a      	ldrb	r2, [r3, #0]
 8006820:	230d      	movs	r3, #13
 8006822:	18fb      	adds	r3, r7, r3
 8006824:	3201      	adds	r2, #1
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	230d      	movs	r3, #13
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b0f      	cmp	r3, #15
 8006830:	d997      	bls.n	8006762 <CRC4+0x1a>
	}

	n_rem = n_rem >> 12 & 0x000F;
 8006832:	230e      	movs	r3, #14
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	220e      	movs	r2, #14
 8006838:	18ba      	adds	r2, r7, r2
 800683a:	8812      	ldrh	r2, [r2, #0]
 800683c:	0b12      	lsrs	r2, r2, #12
 800683e:	801a      	strh	r2, [r3, #0]
	return n_rem ^ 0x00;
 8006840:	230e      	movs	r3, #14
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	881b      	ldrh	r3, [r3, #0]
}
 8006846:	0018      	movs	r0, r3
 8006848:	46bd      	mov	sp, r7
 800684a:	b004      	add	sp, #16
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <MS5837ReadEEPROMCoeffs>:

static enum MS5837ErrorCode MS5837ReadEEPROMCoeffs(void) {
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af04      	add	r7, sp, #16
	uint8_t buffer[MS5837_PROM_DATA_SIZE];

	for (uint8_t i = 0; i < MS5837_COEFFICIENT_NUMBER; i++) {
 8006856:	1dfb      	adds	r3, r7, #7
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	e02a      	b.n	80068b4 <MS5837ReadEEPROMCoeffs+0x64>
		if (HAL_I2C_Mem_Read(&hi2c1, MS5837_ADDR << 1 | MS5837_READ_MASK,
				MS5837_PROM_READ_ADDRESS_0 + (i << 1), MS5837_COMMAND_SIZE,
 800685e:	1dfb      	adds	r3, r7, #7
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	18db      	adds	r3, r3, r3
 8006866:	b29b      	uxth	r3, r3
		if (HAL_I2C_Mem_Read(&hi2c1, MS5837_ADDR << 1 | MS5837_READ_MASK,
 8006868:	33a0      	adds	r3, #160	; 0xa0
 800686a:	b29a      	uxth	r2, r3
 800686c:	4826      	ldr	r0, [pc, #152]	; (8006908 <MS5837ReadEEPROMCoeffs+0xb8>)
 800686e:	23fa      	movs	r3, #250	; 0xfa
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	9302      	str	r3, [sp, #8]
 8006874:	2302      	movs	r3, #2
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	1d3b      	adds	r3, r7, #4
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	2301      	movs	r3, #1
 800687e:	21ec      	movs	r1, #236	; 0xec
 8006880:	f7fc ff48 	bl	8003714 <HAL_I2C_Mem_Read>
 8006884:	1e03      	subs	r3, r0, #0
 8006886:	d001      	beq.n	800688c <MS5837ReadEEPROMCoeffs+0x3c>
				buffer, MS5837_PROM_DATA_SIZE, MS5837_TIMEOUT_MS))
			return MS5837_ANY_ERROR;
 8006888:	23ff      	movs	r3, #255	; 0xff
 800688a:	e039      	b.n	8006900 <MS5837ReadEEPROMCoeffs+0xb0>
		m_eepromCoeffs[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 800688c:	1dfb      	adds	r3, r7, #7
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	1d3b      	adds	r3, r7, #4
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	b219      	sxth	r1, r3
 8006898:	1d3b      	adds	r3, r7, #4
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	b21b      	sxth	r3, r3
 800689e:	430b      	orrs	r3, r1
 80068a0:	b21b      	sxth	r3, r3
 80068a2:	b299      	uxth	r1, r3
 80068a4:	4b19      	ldr	r3, [pc, #100]	; (800690c <MS5837ReadEEPROMCoeffs+0xbc>)
 80068a6:	0052      	lsls	r2, r2, #1
 80068a8:	52d1      	strh	r1, [r2, r3]
	for (uint8_t i = 0; i < MS5837_COEFFICIENT_NUMBER; i++) {
 80068aa:	1dfb      	adds	r3, r7, #7
 80068ac:	781a      	ldrb	r2, [r3, #0]
 80068ae:	1dfb      	adds	r3, r7, #7
 80068b0:	3201      	adds	r2, #1
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	1dfb      	adds	r3, r7, #7
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b06      	cmp	r3, #6
 80068ba:	d9d0      	bls.n	800685e <MS5837ReadEEPROMCoeffs+0xe>
	}

	uint8_t prom_crc = (m_eepromCoeffs[MS5837_CRC_INDEX] & 0xF000) >> 12;
 80068bc:	4b13      	ldr	r3, [pc, #76]	; (800690c <MS5837ReadEEPROMCoeffs+0xbc>)
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	0b1b      	lsrs	r3, r3, #12
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	1dbb      	adds	r3, r7, #6
 80068c6:	701a      	strb	r2, [r3, #0]
	m_eepromCoeffs[MS5837_CRC_INDEX] = m_eepromCoeffs[MS5837_CRC_INDEX] & 0x0FFF;
 80068c8:	4b10      	ldr	r3, [pc, #64]	; (800690c <MS5837ReadEEPROMCoeffs+0xbc>)
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	051b      	lsls	r3, r3, #20
 80068ce:	0d1b      	lsrs	r3, r3, #20
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	4b0e      	ldr	r3, [pc, #56]	; (800690c <MS5837ReadEEPROMCoeffs+0xbc>)
 80068d4:	801a      	strh	r2, [r3, #0]
	m_eepromCoeffs[MS5837_SUBSIDIARY_VALUE_INDEX] = 0;
 80068d6:	4b0d      	ldr	r3, [pc, #52]	; (800690c <MS5837ReadEEPROMCoeffs+0xbc>)
 80068d8:	2200      	movs	r2, #0
 80068da:	81da      	strh	r2, [r3, #14]

	if (CRC4(m_eepromCoeffs) != prom_crc)
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <MS5837ReadEEPROMCoeffs+0xbc>)
 80068de:	0018      	movs	r0, r3
 80068e0:	f7ff ff32 	bl	8006748 <CRC4>
 80068e4:	0003      	movs	r3, r0
 80068e6:	001a      	movs	r2, r3
 80068e8:	1dbb      	adds	r3, r7, #6
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d001      	beq.n	80068f6 <MS5837ReadEEPROMCoeffs+0xa6>
		return MS5837_CRC_ERROR;
 80068f2:	2302      	movs	r3, #2
 80068f4:	e004      	b.n	8006900 <MS5837ReadEEPROMCoeffs+0xb0>

	return m_connectionStatus = MS5837_ALL_OK;
 80068f6:	4b06      	ldr	r3, [pc, #24]	; (8006910 <MS5837ReadEEPROMCoeffs+0xc0>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	4b04      	ldr	r3, [pc, #16]	; (8006910 <MS5837ReadEEPROMCoeffs+0xc0>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
}
 8006900:	0018      	movs	r0, r3
 8006902:	46bd      	mov	sp, r7
 8006904:	b002      	add	sp, #8
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20000848 	.word	0x20000848
 800690c:	200002bc 	.word	0x200002bc
 8006910:	20000000 	.word	0x20000000

08006914 <MS5837Init>:

enum MS5837ErrorCode MS5837Init(void) {
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
	if (MS5837Reset())
 8006918:	f000 f818 	bl	800694c <MS5837Reset>
 800691c:	1e03      	subs	r3, r0, #0
 800691e:	d001      	beq.n	8006924 <MS5837Init+0x10>
		return MS5837_ANY_ERROR;
 8006920:	23ff      	movs	r3, #255	; 0xff
 8006922:	e005      	b.n	8006930 <MS5837Init+0x1c>
	//10ms like in python driver version
	HAL_Delay(10);
 8006924:	200a      	movs	r0, #10
 8006926:	f7fb fe99 	bl	800265c <HAL_Delay>

	MS5837ReadEEPROMCoeffs();
 800692a:	f7ff ff91 	bl	8006850 <MS5837ReadEEPROMCoeffs>
	return MS5837_ALL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	0018      	movs	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <MS5837IsConnected>:

enum MS5837ErrorCode MS5837IsConnected(void) {
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
	return m_connectionStatus;
 800693c:	4b02      	ldr	r3, [pc, #8]	; (8006948 <MS5837IsConnected+0x10>)
 800693e:	781b      	ldrb	r3, [r3, #0]
}
 8006940:	0018      	movs	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	20000000 	.word	0x20000000

0800694c <MS5837Reset>:

enum MS5837ErrorCode MS5837Reset(void) {
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af02      	add	r7, sp, #8
	uint8_t command = MS5837_RESET_COMMAND;
 8006952:	1dfb      	adds	r3, r7, #7
 8006954:	221e      	movs	r2, #30
 8006956:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Master_Transmit(&hi2c1, MS5837_ADDR << 1 | MS5837_WRITE_MASK,
 8006958:	1dfa      	adds	r2, r7, #7
 800695a:	4808      	ldr	r0, [pc, #32]	; (800697c <MS5837Reset+0x30>)
 800695c:	23fa      	movs	r3, #250	; 0xfa
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	2301      	movs	r3, #1
 8006964:	21ed      	movs	r1, #237	; 0xed
 8006966:	f7fc fdc1 	bl	80034ec <HAL_I2C_Master_Transmit>
 800696a:	1e03      	subs	r3, r0, #0
 800696c:	d001      	beq.n	8006972 <MS5837Reset+0x26>
			&command, MS5837_COMMAND_SIZE, MS5837_TIMEOUT_MS))
		return MS5837_ANY_ERROR;
 800696e:	23ff      	movs	r3, #255	; 0xff
 8006970:	e000      	b.n	8006974 <MS5837Reset+0x28>

	return MS5837_ALL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	0018      	movs	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	b002      	add	sp, #8
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20000848 	.word	0x20000848

08006980 <MS5837ReadTemperature>:

enum MS5837ErrorCode MS5837ReadTemperature(enum MS5837D2OSRCommand osrD2, float *temperature) {
 8006980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006982:	b095      	sub	sp, #84	; 0x54
 8006984:	af04      	add	r7, sp, #16
 8006986:	0002      	movs	r2, r0
 8006988:	61b9      	str	r1, [r7, #24]
 800698a:	231f      	movs	r3, #31
 800698c:	18fb      	adds	r3, r7, r3
 800698e:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[MS5837_ADC_DATA_SIZE];
	if (HAL_I2C_Master_Transmit(&hi2c1, MS5837_ADDR << 1 | MS5837_WRITE_MASK,
 8006990:	231f      	movs	r3, #31
 8006992:	18fa      	adds	r2, r7, r3
 8006994:	486e      	ldr	r0, [pc, #440]	; (8006b50 <MS5837ReadTemperature+0x1d0>)
 8006996:	23fa      	movs	r3, #250	; 0xfa
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	2301      	movs	r3, #1
 800699e:	21ed      	movs	r1, #237	; 0xed
 80069a0:	f7fc fda4 	bl	80034ec <HAL_I2C_Master_Transmit>
 80069a4:	1e03      	subs	r3, r0, #0
 80069a6:	d001      	beq.n	80069ac <MS5837ReadTemperature+0x2c>
			&osrD2, MS5837_COMMAND_SIZE, MS5837_TIMEOUT_MS))
		return MS5837_ANY_ERROR;
 80069a8:	23ff      	movs	r3, #255	; 0xff
 80069aa:	e0cc      	b.n	8006b46 <MS5837ReadTemperature+0x1c6>

	HAL_Delay(m_conversionTime[(osrD2 & MS5837_CONVERSION_OSR_MASK) / 2]);
 80069ac:	231f      	movs	r3, #31
 80069ae:	18fb      	adds	r3, r7, r3
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	001a      	movs	r2, r3
 80069b4:	230f      	movs	r3, #15
 80069b6:	4013      	ands	r3, r2
 80069b8:	d500      	bpl.n	80069bc <MS5837ReadTemperature+0x3c>
 80069ba:	3301      	adds	r3, #1
 80069bc:	105b      	asrs	r3, r3, #1
 80069be:	001a      	movs	r2, r3
 80069c0:	4b64      	ldr	r3, [pc, #400]	; (8006b54 <MS5837ReadTemperature+0x1d4>)
 80069c2:	0092      	lsls	r2, r2, #2
 80069c4:	58d3      	ldr	r3, [r2, r3]
 80069c6:	0018      	movs	r0, r3
 80069c8:	f7fb fe48 	bl	800265c <HAL_Delay>

	if (HAL_I2C_Mem_Read(&hi2c1, MS5837_ADDR << 1 | MS5837_READ_MASK,
 80069cc:	4860      	ldr	r0, [pc, #384]	; (8006b50 <MS5837ReadTemperature+0x1d0>)
 80069ce:	23fa      	movs	r3, #250	; 0xfa
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	9302      	str	r3, [sp, #8]
 80069d4:	2303      	movs	r3, #3
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	230c      	movs	r3, #12
 80069da:	2218      	movs	r2, #24
 80069dc:	4694      	mov	ip, r2
 80069de:	44bc      	add	ip, r7
 80069e0:	4463      	add	r3, ip
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	2301      	movs	r3, #1
 80069e6:	2200      	movs	r2, #0
 80069e8:	21ec      	movs	r1, #236	; 0xec
 80069ea:	f7fc fe93 	bl	8003714 <HAL_I2C_Mem_Read>
 80069ee:	1e03      	subs	r3, r0, #0
 80069f0:	d001      	beq.n	80069f6 <MS5837ReadTemperature+0x76>
			MS5837_READ_ADC_COMMAND, MS5837_COMMAND_SIZE,
			buffer, MS5837_ADC_DATA_SIZE, MS5837_TIMEOUT_MS))
		return MS5837_ANY_ERROR;
 80069f2:	23ff      	movs	r3, #255	; 0xff
 80069f4:	e0a7      	b.n	8006b46 <MS5837ReadTemperature+0x1c6>

	uint32_t adc_temperature = buffer[0] << 16 | buffer[1] << 8 | buffer[2];
 80069f6:	230c      	movs	r3, #12
 80069f8:	2218      	movs	r2, #24
 80069fa:	4694      	mov	ip, r2
 80069fc:	44bc      	add	ip, r7
 80069fe:	4463      	add	r3, ip
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	041a      	lsls	r2, r3, #16
 8006a04:	230c      	movs	r3, #12
 8006a06:	2118      	movs	r1, #24
 8006a08:	468c      	mov	ip, r1
 8006a0a:	44bc      	add	ip, r7
 8006a0c:	4463      	add	r3, ip
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	021b      	lsls	r3, r3, #8
 8006a12:	4313      	orrs	r3, r2
 8006a14:	220c      	movs	r2, #12
 8006a16:	2118      	movs	r1, #24
 8006a18:	468c      	mov	ip, r1
 8006a1a:	44bc      	add	ip, r7
 8006a1c:	4462      	add	r2, ip
 8006a1e:	7892      	ldrb	r2, [r2, #2]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (adc_temperature == 0)
 8006a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <MS5837ReadTemperature+0xae>
		return MS5837_I2C_TRANSFER_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e08b      	b.n	8006b46 <MS5837ReadTemperature+0x1c6>

	int32_t dT = (int32_t)adc_temperature -
 8006a2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
			((int32_t)m_eepromCoeffs[MS5837_REFERENCE_TEMPERATURE_INDEX] << 8);
 8006a30:	4b49      	ldr	r3, [pc, #292]	; (8006b58 <MS5837ReadTemperature+0x1d8>)
 8006a32:	895b      	ldrh	r3, [r3, #10]
 8006a34:	021b      	lsls	r3, r3, #8
	int32_t dT = (int32_t)adc_temperature -
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	63bb      	str	r3, [r7, #56]	; 0x38

	int32_t TEMP = 2000	+
			(int32_t)(dT * ((float)m_eepromCoeffs[MS5837_TEMP_COEFF_OF_TEMPERATURE_INDEX] / 8388608));
 8006a3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a3c:	f7fa f902 	bl	8000c44 <__aeabi_i2f>
 8006a40:	1c06      	adds	r6, r0, #0
 8006a42:	4b45      	ldr	r3, [pc, #276]	; (8006b58 <MS5837ReadTemperature+0x1d8>)
 8006a44:	899b      	ldrh	r3, [r3, #12]
 8006a46:	0018      	movs	r0, r3
 8006a48:	f7fa f94c 	bl	8000ce4 <__aeabi_ui2f>
 8006a4c:	1c03      	adds	r3, r0, #0
 8006a4e:	2196      	movs	r1, #150	; 0x96
 8006a50:	05c9      	lsls	r1, r1, #23
 8006a52:	1c18      	adds	r0, r3, #0
 8006a54:	f7f9 fcd2 	bl	80003fc <__aeabi_fdiv>
 8006a58:	1c03      	adds	r3, r0, #0
 8006a5a:	1c19      	adds	r1, r3, #0
 8006a5c:	1c30      	adds	r0, r6, #0
 8006a5e:	f7f9 fe15 	bl	800068c <__aeabi_fmul>
 8006a62:	1c03      	adds	r3, r0, #0
 8006a64:	1c18      	adds	r0, r3, #0
 8006a66:	f7fa f8cd 	bl	8000c04 <__aeabi_f2iz>
 8006a6a:	0003      	movs	r3, r0
	int32_t TEMP = 2000	+
 8006a6c:	22fa      	movs	r2, #250	; 0xfa
 8006a6e:	00d2      	lsls	r2, r2, #3
 8006a70:	4694      	mov	ip, r2
 8006a72:	4463      	add	r3, ip
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34

	int64_t T2 = (TEMP < 2000) ?
 8006a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a78:	4a38      	ldr	r2, [pc, #224]	; (8006b5c <MS5837ReadTemperature+0x1dc>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	dc26      	bgt.n	8006acc <MS5837ReadTemperature+0x14c>
				 (float)(3 * (int64_t)dT  * (int64_t)dT) / 8589934592 :
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	613b      	str	r3, [r7, #16]
 8006a82:	17db      	asrs	r3, r3, #31
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	6938      	ldr	r0, [r7, #16]
 8006a88:	6979      	ldr	r1, [r7, #20]
 8006a8a:	0003      	movs	r3, r0
 8006a8c:	000c      	movs	r4, r1
 8006a8e:	18db      	adds	r3, r3, r3
 8006a90:	4164      	adcs	r4, r4
 8006a92:	18c0      	adds	r0, r0, r3
 8006a94:	4161      	adcs	r1, r4
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	60bb      	str	r3, [r7, #8]
 8006a9a:	17db      	asrs	r3, r3, #31
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f7f9 fbfb 	bl	800029c <__aeabi_lmul>
 8006aa6:	0003      	movs	r3, r0
 8006aa8:	000c      	movs	r4, r1
 8006aaa:	0018      	movs	r0, r3
 8006aac:	0021      	movs	r1, r4
 8006aae:	f7f9 fc73 	bl	8000398 <__aeabi_l2f>
 8006ab2:	1c03      	adds	r3, r0, #0
 8006ab4:	21a0      	movs	r1, #160	; 0xa0
 8006ab6:	05c9      	lsls	r1, r1, #23
 8006ab8:	1c18      	adds	r0, r3, #0
 8006aba:	f7f9 fc9f 	bl	80003fc <__aeabi_fdiv>
 8006abe:	1c03      	adds	r3, r0, #0
	int64_t T2 = (TEMP < 2000) ?
 8006ac0:	1c18      	adds	r0, r3, #0
 8006ac2:	f7f9 fc33 	bl	800032c <__aeabi_f2lz>
 8006ac6:	0003      	movs	r3, r0
 8006ac8:	000c      	movs	r4, r1
 8006aca:	e023      	b.n	8006b14 <MS5837ReadTemperature+0x194>
				 (float)(2 * (int64_t)dT  * (int64_t)dT) / 137438953472;
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	001c      	movs	r4, r3
 8006ad0:	17db      	asrs	r3, r3, #31
 8006ad2:	001d      	movs	r5, r3
 8006ad4:	1924      	adds	r4, r4, r4
 8006ad6:	416d      	adcs	r5, r5
 8006ad8:	0023      	movs	r3, r4
 8006ada:	002c      	movs	r4, r5
 8006adc:	0018      	movs	r0, r3
 8006ade:	0021      	movs	r1, r4
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	17db      	asrs	r3, r3, #31
 8006ae6:	607b      	str	r3, [r7, #4]
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f7f9 fbd6 	bl	800029c <__aeabi_lmul>
 8006af0:	0003      	movs	r3, r0
 8006af2:	000c      	movs	r4, r1
 8006af4:	0018      	movs	r0, r3
 8006af6:	0021      	movs	r1, r4
 8006af8:	f7f9 fc4e 	bl	8000398 <__aeabi_l2f>
 8006afc:	1c03      	adds	r3, r0, #0
 8006afe:	21a4      	movs	r1, #164	; 0xa4
 8006b00:	05c9      	lsls	r1, r1, #23
 8006b02:	1c18      	adds	r0, r3, #0
 8006b04:	f7f9 fc7a 	bl	80003fc <__aeabi_fdiv>
 8006b08:	1c03      	adds	r3, r0, #0
	int64_t T2 = (TEMP < 2000) ?
 8006b0a:	1c18      	adds	r0, r3, #0
 8006b0c:	f7f9 fc0e 	bl	800032c <__aeabi_f2lz>
 8006b10:	0003      	movs	r3, r0
 8006b12:	000c      	movs	r4, r1
 8006b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b16:	62fc      	str	r4, [r7, #44]	; 0x2c

	*temperature = ((float)TEMP  - T2) / 100;
 8006b18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006b1a:	f7fa f893 	bl	8000c44 <__aeabi_i2f>
 8006b1e:	1c04      	adds	r4, r0, #0
 8006b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b24:	f7f9 fc38 	bl	8000398 <__aeabi_l2f>
 8006b28:	1c03      	adds	r3, r0, #0
 8006b2a:	1c19      	adds	r1, r3, #0
 8006b2c:	1c20      	adds	r0, r4, #0
 8006b2e:	f7f9 fecd 	bl	80008cc <__aeabi_fsub>
 8006b32:	1c03      	adds	r3, r0, #0
 8006b34:	490a      	ldr	r1, [pc, #40]	; (8006b60 <MS5837ReadTemperature+0x1e0>)
 8006b36:	1c18      	adds	r0, r3, #0
 8006b38:	f7f9 fc60 	bl	80003fc <__aeabi_fdiv>
 8006b3c:	1c03      	adds	r3, r0, #0
 8006b3e:	1c1a      	adds	r2, r3, #0
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	601a      	str	r2, [r3, #0]

	return MS5837_ALL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	0018      	movs	r0, r3
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	b011      	add	sp, #68	; 0x44
 8006b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	20000848 	.word	0x20000848
 8006b54:	20000004 	.word	0x20000004
 8006b58:	200002bc 	.word	0x200002bc
 8006b5c:	000007cf 	.word	0x000007cf
 8006b60:	42c80000 	.word	0x42c80000

08006b64 <MS5837ReadTemperatureAndPressure>:


enum MS5837ErrorCode MS5837ReadTemperatureAndPressure(enum MS5837D1OSRCommand osrD1,
													  enum MS5837D2OSRCommand osrD2,
													  float *temperature,
													  float *pressure) {
 8006b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b66:	b0d5      	sub	sp, #340	; 0x154
 8006b68:	af04      	add	r7, sp, #16
 8006b6a:	24f8      	movs	r4, #248	; 0xf8
 8006b6c:	193c      	adds	r4, r7, r4
 8006b6e:	6022      	str	r2, [r4, #0]
 8006b70:	22f4      	movs	r2, #244	; 0xf4
 8006b72:	18ba      	adds	r2, r7, r2
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	230f      	movs	r3, #15
 8006b78:	22f0      	movs	r2, #240	; 0xf0
 8006b7a:	18ba      	adds	r2, r7, r2
 8006b7c:	18d2      	adds	r2, r2, r3
 8006b7e:	1c03      	adds	r3, r0, #0
 8006b80:	7013      	strb	r3, [r2, #0]
 8006b82:	230e      	movs	r3, #14
 8006b84:	22f0      	movs	r2, #240	; 0xf0
 8006b86:	18ba      	adds	r2, r7, r2
 8006b88:	18d2      	adds	r2, r2, r3
 8006b8a:	1c0b      	adds	r3, r1, #0
 8006b8c:	7013      	strb	r3, [r2, #0]
	uint8_t buffer[MS5837_ADC_DATA_SIZE];
		if (HAL_I2C_Master_Transmit(&hi2c1, MS5837_ADDR << 1 | MS5837_WRITE_MASK,
 8006b8e:	230e      	movs	r3, #14
 8006b90:	22f0      	movs	r2, #240	; 0xf0
 8006b92:	18ba      	adds	r2, r7, r2
 8006b94:	18d2      	adds	r2, r2, r3
 8006b96:	4857      	ldr	r0, [pc, #348]	; (8006cf4 <MS5837ReadTemperatureAndPressure+0x190>)
 8006b98:	23fa      	movs	r3, #250	; 0xfa
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	21ed      	movs	r1, #237	; 0xed
 8006ba2:	f7fc fca3 	bl	80034ec <HAL_I2C_Master_Transmit>
 8006ba6:	1e03      	subs	r3, r0, #0
 8006ba8:	d002      	beq.n	8006bb0 <MS5837ReadTemperatureAndPressure+0x4c>
				&osrD2, MS5837_COMMAND_SIZE, MS5837_TIMEOUT_MS))
			return MS5837_ANY_ERROR;
 8006baa:	23ff      	movs	r3, #255	; 0xff
 8006bac:	f000 fc00 	bl	80073b0 <MS5837ReadTemperatureAndPressure+0x84c>

		HAL_Delay(m_conversionTime[(osrD2 & MS5837_CONVERSION_OSR_MASK) / 2]);
 8006bb0:	230e      	movs	r3, #14
 8006bb2:	22f0      	movs	r2, #240	; 0xf0
 8006bb4:	4694      	mov	ip, r2
 8006bb6:	44bc      	add	ip, r7
 8006bb8:	4463      	add	r3, ip
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	001a      	movs	r2, r3
 8006bbe:	230f      	movs	r3, #15
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	d500      	bpl.n	8006bc6 <MS5837ReadTemperatureAndPressure+0x62>
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	105b      	asrs	r3, r3, #1
 8006bc8:	4a4b      	ldr	r2, [pc, #300]	; (8006cf8 <MS5837ReadTemperatureAndPressure+0x194>)
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	589b      	ldr	r3, [r3, r2]
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f7fb fd44 	bl	800265c <HAL_Delay>

		if (HAL_I2C_Mem_Read(&hi2c1, MS5837_ADDR << 1 | MS5837_READ_MASK,
 8006bd4:	4847      	ldr	r0, [pc, #284]	; (8006cf4 <MS5837ReadTemperatureAndPressure+0x190>)
 8006bd6:	23fa      	movs	r3, #250	; 0xfa
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	9302      	str	r3, [sp, #8]
 8006bdc:	2303      	movs	r3, #3
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	2310      	movs	r3, #16
 8006be2:	22f0      	movs	r2, #240	; 0xf0
 8006be4:	4694      	mov	ip, r2
 8006be6:	44bc      	add	ip, r7
 8006be8:	4463      	add	r3, ip
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	2301      	movs	r3, #1
 8006bee:	2200      	movs	r2, #0
 8006bf0:	21ec      	movs	r1, #236	; 0xec
 8006bf2:	f7fc fd8f 	bl	8003714 <HAL_I2C_Mem_Read>
 8006bf6:	1e03      	subs	r3, r0, #0
 8006bf8:	d002      	beq.n	8006c00 <MS5837ReadTemperatureAndPressure+0x9c>
				MS5837_READ_ADC_COMMAND, MS5837_COMMAND_SIZE,
				buffer, MS5837_ADC_DATA_SIZE, MS5837_TIMEOUT_MS))
			return MS5837_ANY_ERROR;
 8006bfa:	23ff      	movs	r3, #255	; 0xff
 8006bfc:	f000 fbd8 	bl	80073b0 <MS5837ReadTemperatureAndPressure+0x84c>

		uint32_t adc_temperature = buffer[0] << 16 | buffer[1] << 8 | buffer[2];
 8006c00:	2310      	movs	r3, #16
 8006c02:	22f0      	movs	r2, #240	; 0xf0
 8006c04:	4694      	mov	ip, r2
 8006c06:	44bc      	add	ip, r7
 8006c08:	4463      	add	r3, ip
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	041a      	lsls	r2, r3, #16
 8006c0e:	2310      	movs	r3, #16
 8006c10:	21f0      	movs	r1, #240	; 0xf0
 8006c12:	468c      	mov	ip, r1
 8006c14:	44bc      	add	ip, r7
 8006c16:	4463      	add	r3, ip
 8006c18:	785b      	ldrb	r3, [r3, #1]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	2310      	movs	r3, #16
 8006c20:	21f0      	movs	r1, #240	; 0xf0
 8006c22:	468c      	mov	ip, r1
 8006c24:	44bc      	add	ip, r7
 8006c26:	4463      	add	r3, ip
 8006c28:	789b      	ldrb	r3, [r3, #2]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	2292      	movs	r2, #146	; 0x92
 8006c2e:	0052      	lsls	r2, r2, #1
 8006c30:	18ba      	adds	r2, r7, r2
 8006c32:	6013      	str	r3, [r2, #0]

		if (HAL_I2C_Master_Transmit(&hi2c1, MS5837_ADDR << 1 | MS5837_WRITE_MASK,
 8006c34:	230f      	movs	r3, #15
 8006c36:	22f0      	movs	r2, #240	; 0xf0
 8006c38:	18ba      	adds	r2, r7, r2
 8006c3a:	18d2      	adds	r2, r2, r3
 8006c3c:	482d      	ldr	r0, [pc, #180]	; (8006cf4 <MS5837ReadTemperatureAndPressure+0x190>)
 8006c3e:	23fa      	movs	r3, #250	; 0xfa
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	2301      	movs	r3, #1
 8006c46:	21ed      	movs	r1, #237	; 0xed
 8006c48:	f7fc fc50 	bl	80034ec <HAL_I2C_Master_Transmit>
 8006c4c:	1e03      	subs	r3, r0, #0
 8006c4e:	d001      	beq.n	8006c54 <MS5837ReadTemperatureAndPressure+0xf0>
				&osrD1, MS5837_COMMAND_SIZE, MS5837_TIMEOUT_MS))
			return MS5837_ANY_ERROR;
 8006c50:	23ff      	movs	r3, #255	; 0xff
 8006c52:	e3ad      	b.n	80073b0 <MS5837ReadTemperatureAndPressure+0x84c>

		HAL_Delay(m_conversionTime[(osrD1 & MS5837_CONVERSION_OSR_MASK) / 2]);
 8006c54:	230f      	movs	r3, #15
 8006c56:	22f0      	movs	r2, #240	; 0xf0
 8006c58:	4694      	mov	ip, r2
 8006c5a:	44bc      	add	ip, r7
 8006c5c:	4463      	add	r3, ip
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	001a      	movs	r2, r3
 8006c62:	230f      	movs	r3, #15
 8006c64:	4013      	ands	r3, r2
 8006c66:	d500      	bpl.n	8006c6a <MS5837ReadTemperatureAndPressure+0x106>
 8006c68:	3301      	adds	r3, #1
 8006c6a:	105b      	asrs	r3, r3, #1
 8006c6c:	4a22      	ldr	r2, [pc, #136]	; (8006cf8 <MS5837ReadTemperatureAndPressure+0x194>)
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	589b      	ldr	r3, [r3, r2]
 8006c72:	0018      	movs	r0, r3
 8006c74:	f7fb fcf2 	bl	800265c <HAL_Delay>

		if (HAL_I2C_Mem_Read(&hi2c1, MS5837_ADDR << 1 | MS5837_READ_MASK,
 8006c78:	481e      	ldr	r0, [pc, #120]	; (8006cf4 <MS5837ReadTemperatureAndPressure+0x190>)
 8006c7a:	23fa      	movs	r3, #250	; 0xfa
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	9302      	str	r3, [sp, #8]
 8006c80:	2303      	movs	r3, #3
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	2310      	movs	r3, #16
 8006c86:	22f0      	movs	r2, #240	; 0xf0
 8006c88:	4694      	mov	ip, r2
 8006c8a:	44bc      	add	ip, r7
 8006c8c:	4463      	add	r3, ip
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	2301      	movs	r3, #1
 8006c92:	2200      	movs	r2, #0
 8006c94:	21ec      	movs	r1, #236	; 0xec
 8006c96:	f7fc fd3d 	bl	8003714 <HAL_I2C_Mem_Read>
 8006c9a:	1e03      	subs	r3, r0, #0
 8006c9c:	d001      	beq.n	8006ca2 <MS5837ReadTemperatureAndPressure+0x13e>
				MS5837_READ_ADC_COMMAND, MS5837_COMMAND_SIZE,
				buffer, MS5837_ADC_DATA_SIZE, MS5837_TIMEOUT_MS))
			return MS5837_ANY_ERROR;
 8006c9e:	23ff      	movs	r3, #255	; 0xff
 8006ca0:	e386      	b.n	80073b0 <MS5837ReadTemperatureAndPressure+0x84c>

		uint32_t adc_pressure = buffer[0] << 16 | buffer[1] << 8 | buffer[2];
 8006ca2:	2310      	movs	r3, #16
 8006ca4:	22f0      	movs	r2, #240	; 0xf0
 8006ca6:	4694      	mov	ip, r2
 8006ca8:	44bc      	add	ip, r7
 8006caa:	4463      	add	r3, ip
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	041a      	lsls	r2, r3, #16
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	21f0      	movs	r1, #240	; 0xf0
 8006cb4:	468c      	mov	ip, r1
 8006cb6:	44bc      	add	ip, r7
 8006cb8:	4463      	add	r3, ip
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	021b      	lsls	r3, r3, #8
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	21f0      	movs	r1, #240	; 0xf0
 8006cc4:	468c      	mov	ip, r1
 8006cc6:	44bc      	add	ip, r7
 8006cc8:	4463      	add	r3, ip
 8006cca:	789b      	ldrb	r3, [r3, #2]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	2290      	movs	r2, #144	; 0x90
 8006cd0:	0052      	lsls	r2, r2, #1
 8006cd2:	18ba      	adds	r2, r7, r2
 8006cd4:	6013      	str	r3, [r2, #0]

		if (adc_temperature == 0 || adc_pressure == 0)
 8006cd6:	2392      	movs	r3, #146	; 0x92
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <MS5837ReadTemperatureAndPressure+0x18a>
 8006ce2:	2390      	movs	r3, #144	; 0x90
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	18fb      	adds	r3, r7, r3
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <MS5837ReadTemperatureAndPressure+0x198>
			return MS5837_I2C_TRANSFER_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e35e      	b.n	80073b0 <MS5837ReadTemperatureAndPressure+0x84c>
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	20000848 	.word	0x20000848
 8006cf8:	20000004 	.word	0x20000004

		int32_t dT = (int32_t)adc_temperature - ((int32_t)m_eepromCoeffs[MS5837_REFERENCE_TEMPERATURE_INDEX] << 8);
 8006cfc:	2392      	movs	r3, #146	; 0x92
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	18fb      	adds	r3, r7, r3
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	4bd8      	ldr	r3, [pc, #864]	; (8007068 <MS5837ReadTemperatureAndPressure+0x504>)
 8006d06:	895b      	ldrh	r3, [r3, #10]
 8006d08:	021b      	lsls	r3, r3, #8
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	228e      	movs	r2, #142	; 0x8e
 8006d0e:	0052      	lsls	r2, r2, #1
 8006d10:	18ba      	adds	r2, r7, r2
 8006d12:	6013      	str	r3, [r2, #0]

		int32_t TEMP = 2000	+ (int32_t)(dT * ((float)m_eepromCoeffs[MS5837_TEMP_COEFF_OF_TEMPERATURE_INDEX] / 8388608));
 8006d14:	238e      	movs	r3, #142	; 0x8e
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	18fb      	adds	r3, r7, r3
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	f7f9 ff92 	bl	8000c44 <__aeabi_i2f>
 8006d20:	1c04      	adds	r4, r0, #0
 8006d22:	4bd1      	ldr	r3, [pc, #836]	; (8007068 <MS5837ReadTemperatureAndPressure+0x504>)
 8006d24:	899b      	ldrh	r3, [r3, #12]
 8006d26:	0018      	movs	r0, r3
 8006d28:	f7f9 ffdc 	bl	8000ce4 <__aeabi_ui2f>
 8006d2c:	1c03      	adds	r3, r0, #0
 8006d2e:	2196      	movs	r1, #150	; 0x96
 8006d30:	05c9      	lsls	r1, r1, #23
 8006d32:	1c18      	adds	r0, r3, #0
 8006d34:	f7f9 fb62 	bl	80003fc <__aeabi_fdiv>
 8006d38:	1c03      	adds	r3, r0, #0
 8006d3a:	1c19      	adds	r1, r3, #0
 8006d3c:	1c20      	adds	r0, r4, #0
 8006d3e:	f7f9 fca5 	bl	800068c <__aeabi_fmul>
 8006d42:	1c03      	adds	r3, r0, #0
 8006d44:	1c18      	adds	r0, r3, #0
 8006d46:	f7f9 ff5d 	bl	8000c04 <__aeabi_f2iz>
 8006d4a:	0003      	movs	r3, r0
 8006d4c:	22fa      	movs	r2, #250	; 0xfa
 8006d4e:	00d2      	lsls	r2, r2, #3
 8006d50:	4694      	mov	ip, r2
 8006d52:	4463      	add	r3, ip
 8006d54:	228c      	movs	r2, #140	; 0x8c
 8006d56:	0052      	lsls	r2, r2, #1
 8006d58:	18ba      	adds	r2, r7, r2
 8006d5a:	6013      	str	r3, [r2, #0]

		int64_t T2, SENS, OFF, OFF2, SENS2;

		if (TEMP < 2000)
 8006d5c:	238c      	movs	r3, #140	; 0x8c
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	18fb      	adds	r3, r7, r3
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	4bc1      	ldr	r3, [pc, #772]	; (800706c <MS5837ReadTemperatureAndPressure+0x508>)
 8006d66:	429a      	cmp	r2, r3
 8006d68:	dd00      	ble.n	8006d6c <MS5837ReadTemperatureAndPressure+0x208>
 8006d6a:	e187      	b.n	800707c <MS5837ReadTemperatureAndPressure+0x518>
		{
			T2 = (float)(3 * (int64_t)dT  * (int64_t)dT) / 8589934592;
 8006d6c:	238e      	movs	r3, #142	; 0x8e
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	22b0      	movs	r2, #176	; 0xb0
 8006d76:	18ba      	adds	r2, r7, r2
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	17db      	asrs	r3, r3, #31
 8006d7c:	22b4      	movs	r2, #180	; 0xb4
 8006d7e:	18ba      	adds	r2, r7, r2
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	23b0      	movs	r3, #176	; 0xb0
 8006d84:	18fb      	adds	r3, r7, r3
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	6859      	ldr	r1, [r3, #4]
 8006d8a:	0003      	movs	r3, r0
 8006d8c:	000c      	movs	r4, r1
 8006d8e:	18db      	adds	r3, r3, r3
 8006d90:	4164      	adcs	r4, r4
 8006d92:	18c0      	adds	r0, r0, r3
 8006d94:	4161      	adcs	r1, r4
 8006d96:	238e      	movs	r3, #142	; 0x8e
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	18fb      	adds	r3, r7, r3
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	22a8      	movs	r2, #168	; 0xa8
 8006da0:	18ba      	adds	r2, r7, r2
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	17db      	asrs	r3, r3, #31
 8006da6:	22ac      	movs	r2, #172	; 0xac
 8006da8:	18ba      	adds	r2, r7, r2
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	23a8      	movs	r3, #168	; 0xa8
 8006dae:	18fb      	adds	r3, r7, r3
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f7f9 fa72 	bl	800029c <__aeabi_lmul>
 8006db8:	0003      	movs	r3, r0
 8006dba:	000c      	movs	r4, r1
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	0021      	movs	r1, r4
 8006dc0:	f7f9 faea 	bl	8000398 <__aeabi_l2f>
 8006dc4:	1c03      	adds	r3, r0, #0
 8006dc6:	21a0      	movs	r1, #160	; 0xa0
 8006dc8:	05c9      	lsls	r1, r1, #23
 8006dca:	1c18      	adds	r0, r3, #0
 8006dcc:	f7f9 fb16 	bl	80003fc <__aeabi_fdiv>
 8006dd0:	1c03      	adds	r3, r0, #0
 8006dd2:	1c18      	adds	r0, r3, #0
 8006dd4:	f7f9 faaa 	bl	800032c <__aeabi_f2lz>
 8006dd8:	0003      	movs	r3, r0
 8006dda:	000c      	movs	r4, r1
 8006ddc:	229c      	movs	r2, #156	; 0x9c
 8006dde:	0052      	lsls	r2, r2, #1
 8006de0:	18ba      	adds	r2, r7, r2
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	6054      	str	r4, [r2, #4]
			OFF2 = (float)(3 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000)) / 2;
 8006de6:	238c      	movs	r3, #140	; 0x8c
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	22a0      	movs	r2, #160	; 0xa0
 8006df0:	18ba      	adds	r2, r7, r2
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	17db      	asrs	r3, r3, #31
 8006df6:	22a4      	movs	r2, #164	; 0xa4
 8006df8:	18ba      	adds	r2, r7, r2
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	4b9c      	ldr	r3, [pc, #624]	; (8007070 <MS5837ReadTemperatureAndPressure+0x50c>)
 8006dfe:	2401      	movs	r4, #1
 8006e00:	4264      	negs	r4, r4
 8006e02:	22a0      	movs	r2, #160	; 0xa0
 8006e04:	18ba      	adds	r2, r7, r2
 8006e06:	6811      	ldr	r1, [r2, #0]
 8006e08:	6852      	ldr	r2, [r2, #4]
 8006e0a:	18c9      	adds	r1, r1, r3
 8006e0c:	4162      	adcs	r2, r4
 8006e0e:	000b      	movs	r3, r1
 8006e10:	0014      	movs	r4, r2
 8006e12:	18db      	adds	r3, r3, r3
 8006e14:	4164      	adcs	r4, r4
 8006e16:	185b      	adds	r3, r3, r1
 8006e18:	4154      	adcs	r4, r2
 8006e1a:	22b0      	movs	r2, #176	; 0xb0
 8006e1c:	18ba      	adds	r2, r7, r2
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	6054      	str	r4, [r2, #4]
 8006e22:	238c      	movs	r3, #140	; 0x8c
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	18fb      	adds	r3, r7, r3
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2298      	movs	r2, #152	; 0x98
 8006e2c:	18ba      	adds	r2, r7, r2
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	17db      	asrs	r3, r3, #31
 8006e32:	229c      	movs	r2, #156	; 0x9c
 8006e34:	18ba      	adds	r2, r7, r2
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	4b8d      	ldr	r3, [pc, #564]	; (8007070 <MS5837ReadTemperatureAndPressure+0x50c>)
 8006e3a:	2401      	movs	r4, #1
 8006e3c:	4264      	negs	r4, r4
 8006e3e:	2298      	movs	r2, #152	; 0x98
 8006e40:	18ba      	adds	r2, r7, r2
 8006e42:	6811      	ldr	r1, [r2, #0]
 8006e44:	6852      	ldr	r2, [r2, #4]
 8006e46:	18c9      	adds	r1, r1, r3
 8006e48:	4162      	adcs	r2, r4
 8006e4a:	000b      	movs	r3, r1
 8006e4c:	0014      	movs	r4, r2
 8006e4e:	001a      	movs	r2, r3
 8006e50:	0023      	movs	r3, r4
 8006e52:	21b0      	movs	r1, #176	; 0xb0
 8006e54:	1879      	adds	r1, r7, r1
 8006e56:	6808      	ldr	r0, [r1, #0]
 8006e58:	6849      	ldr	r1, [r1, #4]
 8006e5a:	f7f9 fa1f 	bl	800029c <__aeabi_lmul>
 8006e5e:	0003      	movs	r3, r0
 8006e60:	000c      	movs	r4, r1
 8006e62:	0018      	movs	r0, r3
 8006e64:	0021      	movs	r1, r4
 8006e66:	f7f9 fa97 	bl	8000398 <__aeabi_l2f>
 8006e6a:	1c03      	adds	r3, r0, #0
 8006e6c:	2180      	movs	r1, #128	; 0x80
 8006e6e:	05c9      	lsls	r1, r1, #23
 8006e70:	1c18      	adds	r0, r3, #0
 8006e72:	f7f9 fac3 	bl	80003fc <__aeabi_fdiv>
 8006e76:	1c03      	adds	r3, r0, #0
 8006e78:	1c18      	adds	r0, r3, #0
 8006e7a:	f7f9 fa57 	bl	800032c <__aeabi_f2lz>
 8006e7e:	0003      	movs	r3, r0
 8006e80:	000c      	movs	r4, r1
 8006e82:	2298      	movs	r2, #152	; 0x98
 8006e84:	0052      	lsls	r2, r2, #1
 8006e86:	18ba      	adds	r2, r7, r2
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	6054      	str	r4, [r2, #4]
			SENS2 = (float)(5 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000)) / 8;
 8006e8c:	238c      	movs	r3, #140	; 0x8c
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	18fb      	adds	r3, r7, r3
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2290      	movs	r2, #144	; 0x90
 8006e96:	18ba      	adds	r2, r7, r2
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	17db      	asrs	r3, r3, #31
 8006e9c:	2294      	movs	r2, #148	; 0x94
 8006e9e:	18ba      	adds	r2, r7, r2
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	4b73      	ldr	r3, [pc, #460]	; (8007070 <MS5837ReadTemperatureAndPressure+0x50c>)
 8006ea4:	2401      	movs	r4, #1
 8006ea6:	4264      	negs	r4, r4
 8006ea8:	2290      	movs	r2, #144	; 0x90
 8006eaa:	18ba      	adds	r2, r7, r2
 8006eac:	6811      	ldr	r1, [r2, #0]
 8006eae:	6852      	ldr	r2, [r2, #4]
 8006eb0:	18c9      	adds	r1, r1, r3
 8006eb2:	4162      	adcs	r2, r4
 8006eb4:	000b      	movs	r3, r1
 8006eb6:	0014      	movs	r4, r2
 8006eb8:	0f98      	lsrs	r0, r3, #30
 8006eba:	00a6      	lsls	r6, r4, #2
 8006ebc:	4306      	orrs	r6, r0
 8006ebe:	009d      	lsls	r5, r3, #2
 8006ec0:	186d      	adds	r5, r5, r1
 8006ec2:	4156      	adcs	r6, r2
 8006ec4:	0028      	movs	r0, r5
 8006ec6:	0031      	movs	r1, r6
 8006ec8:	238c      	movs	r3, #140	; 0x8c
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2288      	movs	r2, #136	; 0x88
 8006ed2:	18ba      	adds	r2, r7, r2
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	17db      	asrs	r3, r3, #31
 8006ed8:	228c      	movs	r2, #140	; 0x8c
 8006eda:	18ba      	adds	r2, r7, r2
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	4b64      	ldr	r3, [pc, #400]	; (8007070 <MS5837ReadTemperatureAndPressure+0x50c>)
 8006ee0:	2401      	movs	r4, #1
 8006ee2:	4264      	negs	r4, r4
 8006ee4:	2288      	movs	r2, #136	; 0x88
 8006ee6:	18ba      	adds	r2, r7, r2
 8006ee8:	6815      	ldr	r5, [r2, #0]
 8006eea:	6856      	ldr	r6, [r2, #4]
 8006eec:	18ed      	adds	r5, r5, r3
 8006eee:	4166      	adcs	r6, r4
 8006ef0:	002b      	movs	r3, r5
 8006ef2:	0034      	movs	r4, r6
 8006ef4:	001a      	movs	r2, r3
 8006ef6:	0023      	movs	r3, r4
 8006ef8:	f7f9 f9d0 	bl	800029c <__aeabi_lmul>
 8006efc:	0003      	movs	r3, r0
 8006efe:	000c      	movs	r4, r1
 8006f00:	0018      	movs	r0, r3
 8006f02:	0021      	movs	r1, r4
 8006f04:	f7f9 fa48 	bl	8000398 <__aeabi_l2f>
 8006f08:	1c03      	adds	r3, r0, #0
 8006f0a:	2182      	movs	r1, #130	; 0x82
 8006f0c:	05c9      	lsls	r1, r1, #23
 8006f0e:	1c18      	adds	r0, r3, #0
 8006f10:	f7f9 fa74 	bl	80003fc <__aeabi_fdiv>
 8006f14:	1c03      	adds	r3, r0, #0
 8006f16:	1c18      	adds	r0, r3, #0
 8006f18:	f7f9 fa08 	bl	800032c <__aeabi_f2lz>
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	000c      	movs	r4, r1
 8006f20:	2294      	movs	r2, #148	; 0x94
 8006f22:	0052      	lsls	r2, r2, #1
 8006f24:	18ba      	adds	r2, r7, r2
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	6054      	str	r4, [r2, #4]

			if (TEMP < -1500)
 8006f2a:	238c      	movs	r3, #140	; 0x8c
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	18fb      	adds	r3, r7, r3
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b50      	ldr	r3, [pc, #320]	; (8007074 <MS5837ReadTemperatureAndPressure+0x510>)
 8006f34:	429a      	cmp	r2, r3
 8006f36:	db00      	blt.n	8006f3a <MS5837ReadTemperatureAndPressure+0x3d6>
 8006f38:	e113      	b.n	8007162 <MS5837ReadTemperatureAndPressure+0x5fe>
			{
				OFF2 += 7 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500);
 8006f3a:	238c      	movs	r3, #140	; 0x8c
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	18fb      	adds	r3, r7, r3
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2280      	movs	r2, #128	; 0x80
 8006f44:	18ba      	adds	r2, r7, r2
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	17db      	asrs	r3, r3, #31
 8006f4a:	2284      	movs	r2, #132	; 0x84
 8006f4c:	18ba      	adds	r2, r7, r2
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	4b49      	ldr	r3, [pc, #292]	; (8007078 <MS5837ReadTemperatureAndPressure+0x514>)
 8006f52:	2400      	movs	r4, #0
 8006f54:	2280      	movs	r2, #128	; 0x80
 8006f56:	18ba      	adds	r2, r7, r2
 8006f58:	6811      	ldr	r1, [r2, #0]
 8006f5a:	6852      	ldr	r2, [r2, #4]
 8006f5c:	18c9      	adds	r1, r1, r3
 8006f5e:	4162      	adcs	r2, r4
 8006f60:	000b      	movs	r3, r1
 8006f62:	0014      	movs	r4, r2
 8006f64:	0f58      	lsrs	r0, r3, #29
 8006f66:	00e5      	lsls	r5, r4, #3
 8006f68:	26bc      	movs	r6, #188	; 0xbc
 8006f6a:	19be      	adds	r6, r7, r6
 8006f6c:	6035      	str	r5, [r6, #0]
 8006f6e:	25bc      	movs	r5, #188	; 0xbc
 8006f70:	197d      	adds	r5, r7, r5
 8006f72:	682d      	ldr	r5, [r5, #0]
 8006f74:	4305      	orrs	r5, r0
 8006f76:	20bc      	movs	r0, #188	; 0xbc
 8006f78:	1838      	adds	r0, r7, r0
 8006f7a:	6005      	str	r5, [r0, #0]
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	20b8      	movs	r0, #184	; 0xb8
 8006f80:	1838      	adds	r0, r7, r0
 8006f82:	6003      	str	r3, [r0, #0]
 8006f84:	23b8      	movs	r3, #184	; 0xb8
 8006f86:	18fb      	adds	r3, r7, r3
 8006f88:	685c      	ldr	r4, [r3, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	1a5b      	subs	r3, r3, r1
 8006f8e:	4194      	sbcs	r4, r2
 8006f90:	0018      	movs	r0, r3
 8006f92:	0021      	movs	r1, r4
 8006f94:	238c      	movs	r3, #140	; 0x8c
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	18fb      	adds	r3, r7, r3
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f9e:	17db      	asrs	r3, r3, #31
 8006fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fa2:	4b35      	ldr	r3, [pc, #212]	; (8007078 <MS5837ReadTemperatureAndPressure+0x514>)
 8006fa4:	2400      	movs	r4, #0
 8006fa6:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8006fa8:	6ffe      	ldr	r6, [r7, #124]	; 0x7c
 8006faa:	18ed      	adds	r5, r5, r3
 8006fac:	4166      	adcs	r6, r4
 8006fae:	002b      	movs	r3, r5
 8006fb0:	0034      	movs	r4, r6
 8006fb2:	001a      	movs	r2, r3
 8006fb4:	0023      	movs	r3, r4
 8006fb6:	f7f9 f971 	bl	800029c <__aeabi_lmul>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	000c      	movs	r4, r1
 8006fbe:	0019      	movs	r1, r3
 8006fc0:	0022      	movs	r2, r4
 8006fc2:	2398      	movs	r3, #152	; 0x98
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	18fb      	adds	r3, r7, r3
 8006fc8:	685c      	ldr	r4, [r3, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	185b      	adds	r3, r3, r1
 8006fce:	4154      	adcs	r4, r2
 8006fd0:	2298      	movs	r2, #152	; 0x98
 8006fd2:	0052      	lsls	r2, r2, #1
 8006fd4:	18ba      	adds	r2, r7, r2
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	6054      	str	r4, [r2, #4]
				SENS2 += 4 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500);
 8006fda:	238c      	movs	r3, #140	; 0x8c
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	18fb      	adds	r3, r7, r3
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	673b      	str	r3, [r7, #112]	; 0x70
 8006fe4:	17db      	asrs	r3, r3, #31
 8006fe6:	677b      	str	r3, [r7, #116]	; 0x74
 8006fe8:	4b23      	ldr	r3, [pc, #140]	; (8007078 <MS5837ReadTemperatureAndPressure+0x514>)
 8006fea:	2400      	movs	r4, #0
 8006fec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006fee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006ff0:	18c9      	adds	r1, r1, r3
 8006ff2:	4162      	adcs	r2, r4
 8006ff4:	000b      	movs	r3, r1
 8006ff6:	0014      	movs	r4, r2
 8006ff8:	0f9a      	lsrs	r2, r3, #30
 8006ffa:	00a1      	lsls	r1, r4, #2
 8006ffc:	20ec      	movs	r0, #236	; 0xec
 8006ffe:	1838      	adds	r0, r7, r0
 8007000:	6001      	str	r1, [r0, #0]
 8007002:	21ec      	movs	r1, #236	; 0xec
 8007004:	1879      	adds	r1, r7, r1
 8007006:	6809      	ldr	r1, [r1, #0]
 8007008:	4311      	orrs	r1, r2
 800700a:	22ec      	movs	r2, #236	; 0xec
 800700c:	18ba      	adds	r2, r7, r2
 800700e:	6011      	str	r1, [r2, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	22e8      	movs	r2, #232	; 0xe8
 8007014:	18ba      	adds	r2, r7, r2
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	238c      	movs	r3, #140	; 0x8c
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	66bb      	str	r3, [r7, #104]	; 0x68
 8007022:	17db      	asrs	r3, r3, #31
 8007024:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007026:	4b14      	ldr	r3, [pc, #80]	; (8007078 <MS5837ReadTemperatureAndPressure+0x514>)
 8007028:	2400      	movs	r4, #0
 800702a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800702c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800702e:	18c9      	adds	r1, r1, r3
 8007030:	4162      	adcs	r2, r4
 8007032:	000b      	movs	r3, r1
 8007034:	0014      	movs	r4, r2
 8007036:	001a      	movs	r2, r3
 8007038:	0023      	movs	r3, r4
 800703a:	21e8      	movs	r1, #232	; 0xe8
 800703c:	1879      	adds	r1, r7, r1
 800703e:	6808      	ldr	r0, [r1, #0]
 8007040:	6849      	ldr	r1, [r1, #4]
 8007042:	f7f9 f92b 	bl	800029c <__aeabi_lmul>
 8007046:	0003      	movs	r3, r0
 8007048:	000c      	movs	r4, r1
 800704a:	0019      	movs	r1, r3
 800704c:	0022      	movs	r2, r4
 800704e:	2394      	movs	r3, #148	; 0x94
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	18fb      	adds	r3, r7, r3
 8007054:	685c      	ldr	r4, [r3, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	185b      	adds	r3, r3, r1
 800705a:	4154      	adcs	r4, r2
 800705c:	2294      	movs	r2, #148	; 0x94
 800705e:	0052      	lsls	r2, r2, #1
 8007060:	18ba      	adds	r2, r7, r2
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	6054      	str	r4, [r2, #4]
 8007066:	e07c      	b.n	8007162 <MS5837ReadTemperatureAndPressure+0x5fe>
 8007068:	200002bc 	.word	0x200002bc
 800706c:	000007cf 	.word	0x000007cf
 8007070:	fffff830 	.word	0xfffff830
 8007074:	fffffa24 	.word	0xfffffa24
 8007078:	000005dc 	.word	0x000005dc
			}
		}
		else
		{
			T2 = (float)(2 * (int64_t)dT  * (int64_t)dT) / 137438953472;
 800707c:	238e      	movs	r3, #142	; 0x8e
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	663b      	str	r3, [r7, #96]	; 0x60
 8007086:	17db      	asrs	r3, r3, #31
 8007088:	667b      	str	r3, [r7, #100]	; 0x64
 800708a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800708c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800708e:	18db      	adds	r3, r3, r3
 8007090:	4164      	adcs	r4, r4
 8007092:	0018      	movs	r0, r3
 8007094:	0021      	movs	r1, r4
 8007096:	238e      	movs	r3, #142	; 0x8e
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	18fb      	adds	r3, r7, r3
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	65bb      	str	r3, [r7, #88]	; 0x58
 80070a0:	17db      	asrs	r3, r3, #31
 80070a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a8:	f7f9 f8f8 	bl	800029c <__aeabi_lmul>
 80070ac:	0003      	movs	r3, r0
 80070ae:	000c      	movs	r4, r1
 80070b0:	0018      	movs	r0, r3
 80070b2:	0021      	movs	r1, r4
 80070b4:	f7f9 f970 	bl	8000398 <__aeabi_l2f>
 80070b8:	1c03      	adds	r3, r0, #0
 80070ba:	21a4      	movs	r1, #164	; 0xa4
 80070bc:	05c9      	lsls	r1, r1, #23
 80070be:	1c18      	adds	r0, r3, #0
 80070c0:	f7f9 f99c 	bl	80003fc <__aeabi_fdiv>
 80070c4:	1c03      	adds	r3, r0, #0
 80070c6:	1c18      	adds	r0, r3, #0
 80070c8:	f7f9 f930 	bl	800032c <__aeabi_f2lz>
 80070cc:	0003      	movs	r3, r0
 80070ce:	000c      	movs	r4, r1
 80070d0:	229c      	movs	r2, #156	; 0x9c
 80070d2:	0052      	lsls	r2, r2, #1
 80070d4:	18ba      	adds	r2, r7, r2
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	6054      	str	r4, [r2, #4]
			OFF2 = (float)((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) / 16;
 80070da:	238c      	movs	r3, #140	; 0x8c
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	18fb      	adds	r3, r7, r3
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	653b      	str	r3, [r7, #80]	; 0x50
 80070e4:	17db      	asrs	r3, r3, #31
 80070e6:	657b      	str	r3, [r7, #84]	; 0x54
 80070e8:	4bb3      	ldr	r3, [pc, #716]	; (80073b8 <MS5837ReadTemperatureAndPressure+0x854>)
 80070ea:	2400      	movs	r4, #0
 80070ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070f0:	18c9      	adds	r1, r1, r3
 80070f2:	4162      	adcs	r2, r4
 80070f4:	000b      	movs	r3, r1
 80070f6:	0014      	movs	r4, r2
 80070f8:	0018      	movs	r0, r3
 80070fa:	0021      	movs	r1, r4
 80070fc:	f7f9 f94c 	bl	8000398 <__aeabi_l2f>
 8007100:	1c05      	adds	r5, r0, #0
 8007102:	238c      	movs	r3, #140	; 0x8c
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	18fb      	adds	r3, r7, r3
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	64bb      	str	r3, [r7, #72]	; 0x48
 800710c:	17db      	asrs	r3, r3, #31
 800710e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007110:	4ba9      	ldr	r3, [pc, #676]	; (80073b8 <MS5837ReadTemperatureAndPressure+0x854>)
 8007112:	2400      	movs	r4, #0
 8007114:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007116:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007118:	18c9      	adds	r1, r1, r3
 800711a:	4162      	adcs	r2, r4
 800711c:	000b      	movs	r3, r1
 800711e:	0014      	movs	r4, r2
 8007120:	0018      	movs	r0, r3
 8007122:	0021      	movs	r1, r4
 8007124:	f7f9 f938 	bl	8000398 <__aeabi_l2f>
 8007128:	1c03      	adds	r3, r0, #0
 800712a:	1c19      	adds	r1, r3, #0
 800712c:	1c28      	adds	r0, r5, #0
 800712e:	f7f9 faad 	bl	800068c <__aeabi_fmul>
 8007132:	1c03      	adds	r3, r0, #0
 8007134:	2183      	movs	r1, #131	; 0x83
 8007136:	05c9      	lsls	r1, r1, #23
 8007138:	1c18      	adds	r0, r3, #0
 800713a:	f7f9 f95f 	bl	80003fc <__aeabi_fdiv>
 800713e:	1c03      	adds	r3, r0, #0
 8007140:	1c18      	adds	r0, r3, #0
 8007142:	f7f9 f8f3 	bl	800032c <__aeabi_f2lz>
 8007146:	0003      	movs	r3, r0
 8007148:	000c      	movs	r4, r1
 800714a:	2298      	movs	r2, #152	; 0x98
 800714c:	0052      	lsls	r2, r2, #1
 800714e:	18ba      	adds	r2, r7, r2
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	6054      	str	r4, [r2, #4]
			SENS2 = 0 ;
 8007154:	2300      	movs	r3, #0
 8007156:	2400      	movs	r4, #0
 8007158:	2294      	movs	r2, #148	; 0x94
 800715a:	0052      	lsls	r2, r2, #1
 800715c:	18ba      	adds	r2, r7, r2
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	6054      	str	r4, [r2, #4]
		}

		OFF = ((int64_t)m_eepromCoeffs[MS5837_PRESSURE_OFFSET_INDEX] << 16) +
 8007162:	4b96      	ldr	r3, [pc, #600]	; (80073bc <MS5837ReadTemperatureAndPressure+0x858>)
 8007164:	889b      	ldrh	r3, [r3, #4]
 8007166:	643b      	str	r3, [r7, #64]	; 0x40
 8007168:	2300      	movs	r3, #0
 800716a:	647b      	str	r3, [r7, #68]	; 0x44
 800716c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800716e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8007170:	001a      	movs	r2, r3
 8007172:	0c12      	lsrs	r2, r2, #16
 8007174:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007176:	041b      	lsls	r3, r3, #16
 8007178:	63bb      	str	r3, [r7, #56]	; 0x38
				(((int64_t)m_eepromCoeffs[MS5837_TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX] * dT) >> 7);
 800717a:	4b90      	ldr	r3, [pc, #576]	; (80073bc <MS5837ReadTemperatureAndPressure+0x858>)
 800717c:	891b      	ldrh	r3, [r3, #8]
 800717e:	633b      	str	r3, [r7, #48]	; 0x30
 8007180:	2300      	movs	r3, #0
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
 8007184:	238e      	movs	r3, #142	; 0x8e
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	18fb      	adds	r3, r7, r3
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	62bb      	str	r3, [r7, #40]	; 0x28
 800718e:	17db      	asrs	r3, r3, #31
 8007190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007198:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800719a:	f7f9 f87f 	bl	800029c <__aeabi_lmul>
 800719e:	0003      	movs	r3, r0
 80071a0:	000c      	movs	r4, r1
 80071a2:	0662      	lsls	r2, r4, #25
 80071a4:	09d9      	lsrs	r1, r3, #7
 80071a6:	20e0      	movs	r0, #224	; 0xe0
 80071a8:	1838      	adds	r0, r7, r0
 80071aa:	6001      	str	r1, [r0, #0]
 80071ac:	21e0      	movs	r1, #224	; 0xe0
 80071ae:	1879      	adds	r1, r7, r1
 80071b0:	6809      	ldr	r1, [r1, #0]
 80071b2:	4311      	orrs	r1, r2
 80071b4:	22e0      	movs	r2, #224	; 0xe0
 80071b6:	18ba      	adds	r2, r7, r2
 80071b8:	6011      	str	r1, [r2, #0]
 80071ba:	11e3      	asrs	r3, r4, #7
 80071bc:	22e4      	movs	r2, #228	; 0xe4
 80071be:	18ba      	adds	r2, r7, r2
 80071c0:	6013      	str	r3, [r2, #0]
		OFF = ((int64_t)m_eepromCoeffs[MS5837_PRESSURE_OFFSET_INDEX] << 16) +
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80071c6:	22e0      	movs	r2, #224	; 0xe0
 80071c8:	18ba      	adds	r2, r7, r2
 80071ca:	6811      	ldr	r1, [r2, #0]
 80071cc:	6852      	ldr	r2, [r2, #4]
 80071ce:	185b      	adds	r3, r3, r1
 80071d0:	4154      	adcs	r4, r2
 80071d2:	2288      	movs	r2, #136	; 0x88
 80071d4:	0052      	lsls	r2, r2, #1
 80071d6:	18ba      	adds	r2, r7, r2
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	6054      	str	r4, [r2, #4]
		OFF -= OFF2;
 80071dc:	2388      	movs	r3, #136	; 0x88
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	18fb      	adds	r3, r7, r3
 80071e2:	6819      	ldr	r1, [r3, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	2398      	movs	r3, #152	; 0x98
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	18fb      	adds	r3, r7, r3
 80071ec:	685c      	ldr	r4, [r3, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	1ac9      	subs	r1, r1, r3
 80071f2:	41a2      	sbcs	r2, r4
 80071f4:	000b      	movs	r3, r1
 80071f6:	0014      	movs	r4, r2
 80071f8:	2288      	movs	r2, #136	; 0x88
 80071fa:	0052      	lsls	r2, r2, #1
 80071fc:	18ba      	adds	r2, r7, r2
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	6054      	str	r4, [r2, #4]

		SENS = ((int64_t)m_eepromCoeffs[MS5837_PRESSURE_SENSITIVITY_INDEX] << 15) +
 8007202:	4b6e      	ldr	r3, [pc, #440]	; (80073bc <MS5837ReadTemperatureAndPressure+0x858>)
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	623b      	str	r3, [r7, #32]
 8007208:	2300      	movs	r3, #0
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
 800720c:	6a39      	ldr	r1, [r7, #32]
 800720e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007210:	000b      	movs	r3, r1
 8007212:	0c5b      	lsrs	r3, r3, #17
 8007214:	0010      	movs	r0, r2
 8007216:	03c0      	lsls	r0, r0, #15
 8007218:	24dc      	movs	r4, #220	; 0xdc
 800721a:	193c      	adds	r4, r7, r4
 800721c:	6020      	str	r0, [r4, #0]
 800721e:	20dc      	movs	r0, #220	; 0xdc
 8007220:	1838      	adds	r0, r7, r0
 8007222:	6800      	ldr	r0, [r0, #0]
 8007224:	4318      	orrs	r0, r3
 8007226:	23dc      	movs	r3, #220	; 0xdc
 8007228:	18fb      	adds	r3, r7, r3
 800722a:	6018      	str	r0, [r3, #0]
 800722c:	000b      	movs	r3, r1
 800722e:	03db      	lsls	r3, r3, #15
 8007230:	22d8      	movs	r2, #216	; 0xd8
 8007232:	18ba      	adds	r2, r7, r2
 8007234:	6013      	str	r3, [r2, #0]
				(((int64_t)m_eepromCoeffs[MS5837_TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 8);
 8007236:	4b61      	ldr	r3, [pc, #388]	; (80073bc <MS5837ReadTemperatureAndPressure+0x858>)
 8007238:	88db      	ldrh	r3, [r3, #6]
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	2300      	movs	r3, #0
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	238e      	movs	r3, #142	; 0x8e
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	18fb      	adds	r3, r7, r3
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	17db      	asrs	r3, r3, #31
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	69b8      	ldr	r0, [r7, #24]
 8007254:	69f9      	ldr	r1, [r7, #28]
 8007256:	f7f9 f821 	bl	800029c <__aeabi_lmul>
 800725a:	0003      	movs	r3, r0
 800725c:	000c      	movs	r4, r1
 800725e:	0622      	lsls	r2, r4, #24
 8007260:	0a19      	lsrs	r1, r3, #8
 8007262:	20d0      	movs	r0, #208	; 0xd0
 8007264:	1838      	adds	r0, r7, r0
 8007266:	6001      	str	r1, [r0, #0]
 8007268:	21d0      	movs	r1, #208	; 0xd0
 800726a:	1879      	adds	r1, r7, r1
 800726c:	6809      	ldr	r1, [r1, #0]
 800726e:	4311      	orrs	r1, r2
 8007270:	22d0      	movs	r2, #208	; 0xd0
 8007272:	18ba      	adds	r2, r7, r2
 8007274:	6011      	str	r1, [r2, #0]
 8007276:	1223      	asrs	r3, r4, #8
 8007278:	22d4      	movs	r2, #212	; 0xd4
 800727a:	18ba      	adds	r2, r7, r2
 800727c:	6013      	str	r3, [r2, #0]
		SENS = ((int64_t)m_eepromCoeffs[MS5837_PRESSURE_SENSITIVITY_INDEX] << 15) +
 800727e:	23d8      	movs	r3, #216	; 0xd8
 8007280:	18fb      	adds	r3, r7, r3
 8007282:	685c      	ldr	r4, [r3, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	22d0      	movs	r2, #208	; 0xd0
 8007288:	18ba      	adds	r2, r7, r2
 800728a:	6811      	ldr	r1, [r2, #0]
 800728c:	6852      	ldr	r2, [r2, #4]
 800728e:	185b      	adds	r3, r3, r1
 8007290:	4154      	adcs	r4, r2
 8007292:	2284      	movs	r2, #132	; 0x84
 8007294:	0052      	lsls	r2, r2, #1
 8007296:	18ba      	adds	r2, r7, r2
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	6054      	str	r4, [r2, #4]
		SENS -= SENS2;
 800729c:	2384      	movs	r3, #132	; 0x84
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	18fb      	adds	r3, r7, r3
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	2394      	movs	r3, #148	; 0x94
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	18fb      	adds	r3, r7, r3
 80072ac:	685c      	ldr	r4, [r3, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	1ac9      	subs	r1, r1, r3
 80072b2:	41a2      	sbcs	r2, r4
 80072b4:	000b      	movs	r3, r1
 80072b6:	0014      	movs	r4, r2
 80072b8:	2284      	movs	r2, #132	; 0x84
 80072ba:	0052      	lsls	r2, r2, #1
 80072bc:	18ba      	adds	r2, r7, r2
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	6054      	str	r4, [r2, #4]

		int32_t P = (((adc_pressure * SENS) >> 21) - OFF) >> 13;
 80072c2:	2390      	movs	r3, #144	; 0x90
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	18fb      	adds	r3, r7, r3
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60bb      	str	r3, [r7, #8]
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	2384      	movs	r3, #132	; 0x84
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	68b8      	ldr	r0, [r7, #8]
 80072dc:	68f9      	ldr	r1, [r7, #12]
 80072de:	f7f8 ffdd 	bl	800029c <__aeabi_lmul>
 80072e2:	0003      	movs	r3, r0
 80072e4:	000c      	movs	r4, r1
 80072e6:	02e2      	lsls	r2, r4, #11
 80072e8:	0d59      	lsrs	r1, r3, #21
 80072ea:	20c8      	movs	r0, #200	; 0xc8
 80072ec:	1838      	adds	r0, r7, r0
 80072ee:	6001      	str	r1, [r0, #0]
 80072f0:	21c8      	movs	r1, #200	; 0xc8
 80072f2:	1879      	adds	r1, r7, r1
 80072f4:	6809      	ldr	r1, [r1, #0]
 80072f6:	4311      	orrs	r1, r2
 80072f8:	22c8      	movs	r2, #200	; 0xc8
 80072fa:	18ba      	adds	r2, r7, r2
 80072fc:	6011      	str	r1, [r2, #0]
 80072fe:	1563      	asrs	r3, r4, #21
 8007300:	22cc      	movs	r2, #204	; 0xcc
 8007302:	18ba      	adds	r2, r7, r2
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	2388      	movs	r3, #136	; 0x88
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	18fb      	adds	r3, r7, r3
 800730c:	685c      	ldr	r4, [r3, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	22c8      	movs	r2, #200	; 0xc8
 8007312:	18ba      	adds	r2, r7, r2
 8007314:	6811      	ldr	r1, [r2, #0]
 8007316:	6852      	ldr	r2, [r2, #4]
 8007318:	1ac9      	subs	r1, r1, r3
 800731a:	41a2      	sbcs	r2, r4
 800731c:	000b      	movs	r3, r1
 800731e:	0014      	movs	r4, r2
 8007320:	04e2      	lsls	r2, r4, #19
 8007322:	0b59      	lsrs	r1, r3, #13
 8007324:	20c0      	movs	r0, #192	; 0xc0
 8007326:	1838      	adds	r0, r7, r0
 8007328:	6001      	str	r1, [r0, #0]
 800732a:	21c0      	movs	r1, #192	; 0xc0
 800732c:	1879      	adds	r1, r7, r1
 800732e:	6809      	ldr	r1, [r1, #0]
 8007330:	4311      	orrs	r1, r2
 8007332:	22c0      	movs	r2, #192	; 0xc0
 8007334:	18ba      	adds	r2, r7, r2
 8007336:	6011      	str	r1, [r2, #0]
 8007338:	1363      	asrs	r3, r4, #13
 800733a:	22c4      	movs	r2, #196	; 0xc4
 800733c:	18ba      	adds	r2, r7, r2
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	23c0      	movs	r3, #192	; 0xc0
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	1d7a      	adds	r2, r7, #5
 8007348:	32ff      	adds	r2, #255	; 0xff
 800734a:	6013      	str	r3, [r2, #0]

		*temperature = (float)(TEMP  - T2) / 100;
 800734c:	238c      	movs	r3, #140	; 0x8c
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	18fb      	adds	r3, r7, r3
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	603b      	str	r3, [r7, #0]
 8007356:	17db      	asrs	r3, r3, #31
 8007358:	607b      	str	r3, [r7, #4]
 800735a:	239c      	movs	r3, #156	; 0x9c
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	18fb      	adds	r3, r7, r3
 8007360:	685c      	ldr	r4, [r3, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	1ac9      	subs	r1, r1, r3
 800736a:	41a2      	sbcs	r2, r4
 800736c:	000b      	movs	r3, r1
 800736e:	0014      	movs	r4, r2
 8007370:	0018      	movs	r0, r3
 8007372:	0021      	movs	r1, r4
 8007374:	f7f9 f810 	bl	8000398 <__aeabi_l2f>
 8007378:	1c03      	adds	r3, r0, #0
 800737a:	4911      	ldr	r1, [pc, #68]	; (80073c0 <MS5837ReadTemperatureAndPressure+0x85c>)
 800737c:	1c18      	adds	r0, r3, #0
 800737e:	f7f9 f83d 	bl	80003fc <__aeabi_fdiv>
 8007382:	1c03      	adds	r3, r0, #0
 8007384:	1c1a      	adds	r2, r3, #0
 8007386:	23f8      	movs	r3, #248	; 0xf8
 8007388:	18fb      	adds	r3, r7, r3
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	601a      	str	r2, [r3, #0]
		*pressure = (float)P / 10;
 800738e:	1d7b      	adds	r3, r7, #5
 8007390:	33ff      	adds	r3, #255	; 0xff
 8007392:	6818      	ldr	r0, [r3, #0]
 8007394:	f7f9 fc56 	bl	8000c44 <__aeabi_i2f>
 8007398:	1c03      	adds	r3, r0, #0
 800739a:	490a      	ldr	r1, [pc, #40]	; (80073c4 <MS5837ReadTemperatureAndPressure+0x860>)
 800739c:	1c18      	adds	r0, r3, #0
 800739e:	f7f9 f82d 	bl	80003fc <__aeabi_fdiv>
 80073a2:	1c03      	adds	r3, r0, #0
 80073a4:	1c1a      	adds	r2, r3, #0
 80073a6:	23f4      	movs	r3, #244	; 0xf4
 80073a8:	18fb      	adds	r3, r7, r3
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	601a      	str	r2, [r3, #0]

		return MS5837_ALL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	0018      	movs	r0, r3
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b051      	add	sp, #324	; 0x144
 80073b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b8:	000005dc 	.word	0x000005dc
 80073bc:	200002bc 	.word	0x200002bc
 80073c0:	42c80000 	.word	0x42c80000
 80073c4:	41200000 	.word	0x41200000

080073c8 <FindCommand>:
												   .WriteFunction = NULL}};
static struct ModbusRecvMessage m_message;

uint8_t FindCommand(uint16_t commandCode, struct Command **command);

uint8_t FindCommand(uint16_t commandCode, struct Command **command) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	0002      	movs	r2, r0
 80073d0:	6039      	str	r1, [r7, #0]
 80073d2:	1dbb      	adds	r3, r7, #6
 80073d4:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < m_registeredCommandsCount; i++)
 80073d6:	230f      	movs	r3, #15
 80073d8:	18fb      	adds	r3, r7, r3
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	e022      	b.n	8007426 <FindCommand+0x5e>
		if(m_commands[i].CommandCode == commandCode) {
 80073e0:	230f      	movs	r3, #15
 80073e2:	18fb      	adds	r3, r7, r3
 80073e4:	781a      	ldrb	r2, [r3, #0]
 80073e6:	4916      	ldr	r1, [pc, #88]	; (8007440 <FindCommand+0x78>)
 80073e8:	0013      	movs	r3, r2
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	189b      	adds	r3, r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	18cb      	adds	r3, r1, r3
 80073f2:	3308      	adds	r3, #8
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	1dba      	adds	r2, r7, #6
 80073f8:	8812      	ldrh	r2, [r2, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d10c      	bne.n	8007418 <FindCommand+0x50>
			*command = &m_commands[i];
 80073fe:	230f      	movs	r3, #15
 8007400:	18fb      	adds	r3, r7, r3
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	0013      	movs	r3, r2
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	189b      	adds	r3, r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4a0c      	ldr	r2, [pc, #48]	; (8007440 <FindCommand+0x78>)
 800740e:	189a      	adds	r2, r3, r2
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	601a      	str	r2, [r3, #0]
			return ALL_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	e00f      	b.n	8007438 <FindCommand+0x70>
	for(uint8_t i = 0; i < m_registeredCommandsCount; i++)
 8007418:	230f      	movs	r3, #15
 800741a:	18fb      	adds	r3, r7, r3
 800741c:	781a      	ldrb	r2, [r3, #0]
 800741e:	230f      	movs	r3, #15
 8007420:	18fb      	adds	r3, r7, r3
 8007422:	3201      	adds	r2, #1
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	230f      	movs	r3, #15
 8007428:	18fb      	adds	r3, r7, r3
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	b29a      	uxth	r2, r3
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <FindCommand+0x7c>)
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d3d4      	bcc.n	80073e0 <FindCommand+0x18>
		}

	return ANY_ERROR;
 8007436:	23ff      	movs	r3, #255	; 0xff
}
 8007438:	0018      	movs	r0, r3
 800743a:	46bd      	mov	sp, r7
 800743c:	b004      	add	sp, #16
 800743e:	bd80      	pop	{r7, pc}
 8007440:	200002d0 	.word	0x200002d0
 8007444:	200002cc 	.word	0x200002cc

08007448 <ProcessCommand>:

enum CommandErrorCode ProcessCommand(uint8_t *recvBuffer,
								     uint8_t requestLength,
									 uint8_t *sendBuffer,
									 uint8_t *resultLength) {
 8007448:	b590      	push	{r4, r7, lr}
 800744a:	b089      	sub	sp, #36	; 0x24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	607a      	str	r2, [r7, #4]
 8007452:	603b      	str	r3, [r7, #0]
 8007454:	230b      	movs	r3, #11
 8007456:	18fb      	adds	r3, r7, r3
 8007458:	1c0a      	adds	r2, r1, #0
 800745a:	701a      	strb	r2, [r3, #0]
	{
		enum ModbusErrorCode errorCode;
		if((errorCode = DecodeRequest(recvBuffer, requestLength, &m_message)))
 800745c:	231f      	movs	r3, #31
 800745e:	18fc      	adds	r4, r7, r3
 8007460:	4a31      	ldr	r2, [pc, #196]	; (8007528 <ProcessCommand+0xe0>)
 8007462:	230b      	movs	r3, #11
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	7819      	ldrb	r1, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	0018      	movs	r0, r3
 800746c:	f001 fb76 	bl	8008b5c <DecodeRequest>
 8007470:	0003      	movs	r3, r0
 8007472:	7023      	strb	r3, [r4, #0]
 8007474:	231f      	movs	r3, #31
 8007476:	18fb      	adds	r3, r7, r3
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d009      	beq.n	8007492 <ProcessCommand+0x4a>
			return ProcessError(errorCode, sendBuffer, resultLength);
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	231f      	movs	r3, #31
 8007484:	18fb      	adds	r3, r7, r3
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	0018      	movs	r0, r3
 800748a:	f001 fbcf 	bl	8008c2c <ProcessError>
 800748e:	0003      	movs	r3, r0
 8007490:	e046      	b.n	8007520 <ProcessCommand+0xd8>
	}

	struct Command *calledCommand;

	if(FindCommand(m_message.Command.CommandCode, &calledCommand))
 8007492:	4b25      	ldr	r3, [pc, #148]	; (8007528 <ProcessCommand+0xe0>)
 8007494:	885b      	ldrh	r3, [r3, #2]
 8007496:	2218      	movs	r2, #24
 8007498:	18ba      	adds	r2, r7, r2
 800749a:	0011      	movs	r1, r2
 800749c:	0018      	movs	r0, r3
 800749e:	f7ff ff93 	bl	80073c8 <FindCommand>
 80074a2:	1e03      	subs	r3, r0, #0
 80074a4:	d001      	beq.n	80074aa <ProcessCommand+0x62>
		return CMD_NO_COMMAND;
 80074a6:	2302      	movs	r3, #2
 80074a8:	e03a      	b.n	8007520 <ProcessCommand+0xd8>

	switch(m_message.Function) {
 80074aa:	4b1f      	ldr	r3, [pc, #124]	; (8007528 <ProcessCommand+0xe0>)
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	2b46      	cmp	r3, #70	; 0x46
 80074b0:	d002      	beq.n	80074b8 <ProcessCommand+0x70>
 80074b2:	2b47      	cmp	r3, #71	; 0x47
 80074b4:	d01c      	beq.n	80074f0 <ProcessCommand+0xa8>
 80074b6:	e032      	b.n	800751e <ProcessCommand+0xd6>
		case READ: {
			if(calledCommand->ReadFunction == NULL)
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <ProcessCommand+0x7c>
				return CMD_NO_SUBCOMMAND;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e02d      	b.n	8007520 <ProcessCommand+0xd8>

			uint8_t commandResultLength;
			if(calledCommand->ReadFunction(&m_message,
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	1cd1      	adds	r1, r2, #3
 80074cc:	2217      	movs	r2, #23
 80074ce:	18ba      	adds	r2, r7, r2
 80074d0:	4815      	ldr	r0, [pc, #84]	; (8007528 <ProcessCommand+0xe0>)
 80074d2:	4798      	blx	r3
 80074d4:	1e03      	subs	r3, r0, #0
 80074d6:	d001      	beq.n	80074dc <ProcessCommand+0x94>
								 	       sendBuffer + RP_DATA_COUNT_INDEX,
										   &commandResultLength))
				return CMD_ANY_ERROR;
 80074d8:	23ff      	movs	r3, #255	; 0xff
 80074da:	e021      	b.n	8007520 <ProcessCommand+0xd8>
			EncodeReplyRead(&m_message, sendBuffer, commandResultLength, resultLength);
 80074dc:	2317      	movs	r3, #23
 80074de:	18fb      	adds	r3, r7, r3
 80074e0:	781a      	ldrb	r2, [r3, #0]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	4810      	ldr	r0, [pc, #64]	; (8007528 <ProcessCommand+0xe0>)
 80074e8:	f001 faf0 	bl	8008acc <EncodeReplyRead>
			return CMD_ALL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	e017      	b.n	8007520 <ProcessCommand+0xd8>
		}

		case WRITE:
			if(calledCommand->WriteFunction == NULL)
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <ProcessCommand+0xb4>
				return CMD_NO_SUBCOMMAND;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e011      	b.n	8007520 <ProcessCommand+0xd8>

			if(calledCommand->WriteFunction(&m_message))
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a09      	ldr	r2, [pc, #36]	; (8007528 <ProcessCommand+0xe0>)
 8007502:	0010      	movs	r0, r2
 8007504:	4798      	blx	r3
 8007506:	1e03      	subs	r3, r0, #0
 8007508:	d001      	beq.n	800750e <ProcessCommand+0xc6>
				return CMD_ANY_ERROR;
 800750a:	23ff      	movs	r3, #255	; 0xff
 800750c:	e008      	b.n	8007520 <ProcessCommand+0xd8>
			EncodeReplyWrite(&m_message, sendBuffer, resultLength);
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	4b05      	ldr	r3, [pc, #20]	; (8007528 <ProcessCommand+0xe0>)
 8007514:	0018      	movs	r0, r3
 8007516:	f001 fa6b 	bl	80089f0 <EncodeReplyWrite>
			return CMD_ALL_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	e000      	b.n	8007520 <ProcessCommand+0xd8>
	}

	return CMD_ANY_ERROR;
 800751e:	23ff      	movs	r3, #255	; 0xff
}
 8007520:	0018      	movs	r0, r3
 8007522:	46bd      	mov	sp, r7
 8007524:	b009      	add	sp, #36	; 0x24
 8007526:	bd90      	pop	{r4, r7, pc}
 8007528:	200003c0 	.word	0x200003c0

0800752c <AddCommand>:

enum CommandErrorCode AddCommand(uint16_t commandCode,
				   	   	   	     ReadCommandFunction readFunction,
								 WriteCommandFunction writeFunction) {
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
 8007536:	230e      	movs	r3, #14
 8007538:	18fb      	adds	r3, r7, r3
 800753a:	1c02      	adds	r2, r0, #0
 800753c:	801a      	strh	r2, [r3, #0]
	if(m_registeredCommandsCount >= COMMANDS_NUMBER)
 800753e:	4b17      	ldr	r3, [pc, #92]	; (800759c <AddCommand+0x70>)
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	2b13      	cmp	r3, #19
 8007544:	d901      	bls.n	800754a <AddCommand+0x1e>
		return CMD_ANY_ERROR;
 8007546:	23ff      	movs	r3, #255	; 0xff
 8007548:	e023      	b.n	8007592 <AddCommand+0x66>

	if(readFunction == NULL && writeFunction == NULL)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <AddCommand+0x2e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <AddCommand+0x2e>
		return CMD_ANY_ERROR;
 8007556:	23ff      	movs	r3, #255	; 0xff
 8007558:	e01b      	b.n	8007592 <AddCommand+0x66>

	struct Command *nextCommand = &m_commands[m_registeredCommandsCount];
 800755a:	4b10      	ldr	r3, [pc, #64]	; (800759c <AddCommand+0x70>)
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	001a      	movs	r2, r3
 8007560:	0013      	movs	r3, r2
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	189b      	adds	r3, r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4a0d      	ldr	r2, [pc, #52]	; (80075a0 <AddCommand+0x74>)
 800756a:	189b      	adds	r3, r3, r2
 800756c:	617b      	str	r3, [r7, #20]

	nextCommand->CommandCode = commandCode;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	220e      	movs	r2, #14
 8007572:	18ba      	adds	r2, r7, r2
 8007574:	8812      	ldrh	r2, [r2, #0]
 8007576:	811a      	strh	r2, [r3, #8]
	nextCommand->ReadFunction = readFunction;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	605a      	str	r2, [r3, #4]
	nextCommand->WriteFunction = writeFunction;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	601a      	str	r2, [r3, #0]

	m_registeredCommandsCount++;
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <AddCommand+0x70>)
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	3301      	adds	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	4b03      	ldr	r3, [pc, #12]	; (800759c <AddCommand+0x70>)
 800758e:	801a      	strh	r2, [r3, #0]

	return CMD_ALL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	0018      	movs	r0, r3
 8007594:	46bd      	mov	sp, r7
 8007596:	b006      	add	sp, #24
 8007598:	bd80      	pop	{r7, pc}
 800759a:	46c0      	nop			; (mov r8, r8)
 800759c:	200002cc 	.word	0x200002cc
 80075a0:	200002d0 	.word	0x200002d0

080075a4 <SaveDeviceConfig>:
uint8_t BCSDriversCounter = 0;

struct LEDDriverHandle LEDDrivers[LED_DRIVERS_MAX];
uint8_t LEDDriversCounter = 0;

void SaveDeviceConfig(void) {
 80075a4:	b5b0      	push	{r4, r5, r7, lr}
 80075a6:	b08c      	sub	sp, #48	; 0x30
 80075a8:	af00      	add	r7, sp, #0
	StartChangeFlashParam();
 80075aa:	f002 f879 	bl	80096a0 <StartChangeFlashParam>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 80075ae:	4951      	ldr	r1, [pc, #324]	; (80076f4 <SaveDeviceConfig+0x150>)
 80075b0:	2201      	movs	r2, #1
 80075b2:	2300      	movs	r3, #0
 80075b4:	2001      	movs	r0, #1
 80075b6:	f7fb fb5b 	bl	8002c70 <HAL_FLASH_Program>
			(uint32_t) &ParamsUnion.Params.F_Devices.IsUsed, (uint16_t) 0x1);

	for (uint8_t i = 0;
 80075ba:	232f      	movs	r3, #47	; 0x2f
 80075bc:	18fa      	adds	r2, r7, r3
 80075be:	2300      	movs	r3, #0
 80075c0:	7013      	strb	r3, [r2, #0]
 80075c2:	e01b      	b.n	80075fc <SaveDeviceConfig+0x58>
			i < BESC_DRIVERS_MAX * sizeof(struct BESCDriverHandle) / 2
							+ BESC_DRIVERS_MAX * sizeof(struct BESCDriverHandle)
									% 2; i++)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
				(uint32_t) &ParamsUnion.Params.F_Devices.BESCDrivers
						+ i * sizeof(uint16_t), ((uint16_t *) &BESCDrivers)[i]);
 80075c4:	232f      	movs	r3, #47	; 0x2f
 80075c6:	18fb      	adds	r3, r7, r3
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	005a      	lsls	r2, r3, #1
				(uint32_t) &ParamsUnion.Params.F_Devices.BESCDrivers
 80075cc:	4b4a      	ldr	r3, [pc, #296]	; (80076f8 <SaveDeviceConfig+0x154>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 80075ce:	18d1      	adds	r1, r2, r3
						+ i * sizeof(uint16_t), ((uint16_t *) &BESCDrivers)[i]);
 80075d0:	232f      	movs	r3, #47	; 0x2f
 80075d2:	18fb      	adds	r3, r7, r3
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	005a      	lsls	r2, r3, #1
 80075d8:	4b48      	ldr	r3, [pc, #288]	; (80076fc <SaveDeviceConfig+0x158>)
 80075da:	18d3      	adds	r3, r2, r3
 80075dc:	881b      	ldrh	r3, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 80075de:	623b      	str	r3, [r7, #32]
 80075e0:	2300      	movs	r3, #0
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
 80075e4:	6a3a      	ldr	r2, [r7, #32]
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	2001      	movs	r0, #1
 80075ea:	f7fb fb41 	bl	8002c70 <HAL_FLASH_Program>
									% 2; i++)
 80075ee:	232f      	movs	r3, #47	; 0x2f
 80075f0:	18fb      	adds	r3, r7, r3
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	222f      	movs	r2, #47	; 0x2f
 80075f6:	18ba      	adds	r2, r7, r2
 80075f8:	3301      	adds	r3, #1
 80075fa:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0;
 80075fc:	232f      	movs	r3, #47	; 0x2f
 80075fe:	18fb      	adds	r3, r7, r3
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b07      	cmp	r3, #7
 8007604:	d9de      	bls.n	80075c4 <SaveDeviceConfig+0x20>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8007606:	493e      	ldr	r1, [pc, #248]	; (8007700 <SaveDeviceConfig+0x15c>)
 8007608:	4b3e      	ldr	r3, [pc, #248]	; (8007704 <SaveDeviceConfig+0x160>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	001c      	movs	r4, r3
 800760e:	2300      	movs	r3, #0
 8007610:	001d      	movs	r5, r3
 8007612:	0022      	movs	r2, r4
 8007614:	002b      	movs	r3, r5
 8007616:	2001      	movs	r0, #1
 8007618:	f7fb fb2a 	bl	8002c70 <HAL_FLASH_Program>
			(uint32_t) &ParamsUnion.Params.F_Devices.BESCDriversCounter,
			(uint16_t) BESCDriversCounter);

	for (uint8_t i = 0;
 800761c:	232e      	movs	r3, #46	; 0x2e
 800761e:	18fb      	adds	r3, r7, r3
 8007620:	2200      	movs	r2, #0
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e01b      	b.n	800765e <SaveDeviceConfig+0xba>
			i < BCS_DRIVERS_MAX * sizeof(struct BCSDriverHandle) / 2
							+ BCS_DRIVERS_MAX * sizeof(struct BCSDriverHandle)
									% 2; i++)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
				(uint32_t) &ParamsUnion.Params.F_Devices.BCSDrivers
						+ i * sizeof(uint16_t), ((uint16_t *) &BCSDrivers)[i]);
 8007626:	232e      	movs	r3, #46	; 0x2e
 8007628:	18fb      	adds	r3, r7, r3
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	005a      	lsls	r2, r3, #1
				(uint32_t) &ParamsUnion.Params.F_Devices.BCSDrivers
 800762e:	4b36      	ldr	r3, [pc, #216]	; (8007708 <SaveDeviceConfig+0x164>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8007630:	18d1      	adds	r1, r2, r3
						+ i * sizeof(uint16_t), ((uint16_t *) &BCSDrivers)[i]);
 8007632:	232e      	movs	r3, #46	; 0x2e
 8007634:	18fb      	adds	r3, r7, r3
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	005a      	lsls	r2, r3, #1
 800763a:	4b34      	ldr	r3, [pc, #208]	; (800770c <SaveDeviceConfig+0x168>)
 800763c:	18d3      	adds	r3, r2, r3
 800763e:	881b      	ldrh	r3, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8007640:	61bb      	str	r3, [r7, #24]
 8007642:	2300      	movs	r3, #0
 8007644:	61fb      	str	r3, [r7, #28]
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	2001      	movs	r0, #1
 800764c:	f7fb fb10 	bl	8002c70 <HAL_FLASH_Program>
									% 2; i++)
 8007650:	232e      	movs	r3, #46	; 0x2e
 8007652:	18fb      	adds	r3, r7, r3
 8007654:	781a      	ldrb	r2, [r3, #0]
 8007656:	232e      	movs	r3, #46	; 0x2e
 8007658:	18fb      	adds	r3, r7, r3
 800765a:	3201      	adds	r2, #1
 800765c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0;
 800765e:	232e      	movs	r3, #46	; 0x2e
 8007660:	18fb      	adds	r3, r7, r3
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b09      	cmp	r3, #9
 8007666:	d9de      	bls.n	8007626 <SaveDeviceConfig+0x82>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8007668:	4929      	ldr	r1, [pc, #164]	; (8007710 <SaveDeviceConfig+0x16c>)
 800766a:	4b2a      	ldr	r3, [pc, #168]	; (8007714 <SaveDeviceConfig+0x170>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	613b      	str	r3, [r7, #16]
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2001      	movs	r0, #1
 800767a:	f7fb faf9 	bl	8002c70 <HAL_FLASH_Program>
			(uint32_t) &ParamsUnion.Params.F_Devices.BCSDriversCounter,
			(uint16_t) BCSDriversCounter);

	for (uint8_t i = 0;
 800767e:	232d      	movs	r3, #45	; 0x2d
 8007680:	18fb      	adds	r3, r7, r3
 8007682:	2200      	movs	r2, #0
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	e01b      	b.n	80076c0 <SaveDeviceConfig+0x11c>
			i < LED_DRIVERS_MAX * sizeof(struct LEDDriverHandle) / 2
							+ LED_DRIVERS_MAX * sizeof(struct LEDDriverHandle)
									% 2; i++)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
				(uint32_t) &ParamsUnion.Params.F_Devices.LEDDrivers
						+ i * sizeof(uint16_t), ((uint16_t *) &LEDDrivers)[i]);
 8007688:	232d      	movs	r3, #45	; 0x2d
 800768a:	18fb      	adds	r3, r7, r3
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	005a      	lsls	r2, r3, #1
				(uint32_t) &ParamsUnion.Params.F_Devices.LEDDrivers
 8007690:	4b21      	ldr	r3, [pc, #132]	; (8007718 <SaveDeviceConfig+0x174>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8007692:	18d1      	adds	r1, r2, r3
						+ i * sizeof(uint16_t), ((uint16_t *) &LEDDrivers)[i]);
 8007694:	232d      	movs	r3, #45	; 0x2d
 8007696:	18fb      	adds	r3, r7, r3
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	005a      	lsls	r2, r3, #1
 800769c:	4b1f      	ldr	r3, [pc, #124]	; (800771c <SaveDeviceConfig+0x178>)
 800769e:	18d3      	adds	r3, r2, r3
 80076a0:	881b      	ldrh	r3, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 80076a2:	60bb      	str	r3, [r7, #8]
 80076a4:	2300      	movs	r3, #0
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2001      	movs	r0, #1
 80076ae:	f7fb fadf 	bl	8002c70 <HAL_FLASH_Program>
									% 2; i++)
 80076b2:	232d      	movs	r3, #45	; 0x2d
 80076b4:	18fb      	adds	r3, r7, r3
 80076b6:	781a      	ldrb	r2, [r3, #0]
 80076b8:	232d      	movs	r3, #45	; 0x2d
 80076ba:	18fb      	adds	r3, r7, r3
 80076bc:	3201      	adds	r2, #1
 80076be:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0;
 80076c0:	232d      	movs	r3, #45	; 0x2d
 80076c2:	18fb      	adds	r3, r7, r3
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2b07      	cmp	r3, #7
 80076c8:	d9de      	bls.n	8007688 <SaveDeviceConfig+0xe4>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 80076ca:	4915      	ldr	r1, [pc, #84]	; (8007720 <SaveDeviceConfig+0x17c>)
 80076cc:	4b15      	ldr	r3, [pc, #84]	; (8007724 <SaveDeviceConfig+0x180>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	603b      	str	r3, [r7, #0]
 80076d2:	2300      	movs	r3, #0
 80076d4:	607b      	str	r3, [r7, #4]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2001      	movs	r0, #1
 80076dc:	f7fb fac8 	bl	8002c70 <HAL_FLASH_Program>
			(uint32_t) &ParamsUnion.Params.F_Devices.LEDDriversCounter,
			(uint16_t) LEDDriversCounter);

	EndChangeFlashParam((void *) &ParamsUnion.Params.F_Devices,
 80076e0:	4b04      	ldr	r3, [pc, #16]	; (80076f4 <SaveDeviceConfig+0x150>)
 80076e2:	2144      	movs	r1, #68	; 0x44
 80076e4:	0018      	movs	r0, r3
 80076e6:	f001 ffef 	bl	80096c8 <EndChangeFlashParam>
			sizeof(ParamsUnion.Params.F_Devices));
}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b00c      	add	sp, #48	; 0x30
 80076f0:	bdb0      	pop	{r4, r5, r7, pc}
 80076f2:	46c0      	nop			; (mov r8, r8)
 80076f4:	0800f80c 	.word	0x0800f80c
 80076f8:	0800f810 	.word	0x0800f810
 80076fc:	20000820 	.word	0x20000820
 8007700:	0800f820 	.word	0x0800f820
 8007704:	200003cc 	.word	0x200003cc
 8007708:	0800f824 	.word	0x0800f824
 800770c:	20000834 	.word	0x20000834
 8007710:	0800f838 	.word	0x0800f838
 8007714:	200003cd 	.word	0x200003cd
 8007718:	0800f83c 	.word	0x0800f83c
 800771c:	20000810 	.word	0x20000810
 8007720:	0800f84c 	.word	0x0800f84c
 8007724:	200003ce 	.word	0x200003ce

08007728 <LoadDeviceConfig>:

void LoadDeviceConfig(void) {
 8007728:	b590      	push	{r4, r7, lr}
 800772a:	af00      	add	r7, sp, #0
	if (!ParamsUnion.Params.F_Devices.IsUsed)
 800772c:	4b16      	ldr	r3, [pc, #88]	; (8007788 <LoadDeviceConfig+0x60>)
 800772e:	899b      	ldrh	r3, [r3, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d025      	beq.n	8007780 <LoadDeviceConfig+0x58>
		return;

	BESCDriversCounter = ParamsUnion.Params.F_Devices.BESCDriversCounter;
 8007734:	4b14      	ldr	r3, [pc, #80]	; (8007788 <LoadDeviceConfig+0x60>)
 8007736:	8c1b      	ldrh	r3, [r3, #32]
 8007738:	b2da      	uxtb	r2, r3
 800773a:	4b14      	ldr	r3, [pc, #80]	; (800778c <LoadDeviceConfig+0x64>)
 800773c:	701a      	strb	r2, [r3, #0]
	BCSDriversCounter = ParamsUnion.Params.F_Devices.BCSDriversCounter;
 800773e:	4b12      	ldr	r3, [pc, #72]	; (8007788 <LoadDeviceConfig+0x60>)
 8007740:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007742:	b2da      	uxtb	r2, r3
 8007744:	4b12      	ldr	r3, [pc, #72]	; (8007790 <LoadDeviceConfig+0x68>)
 8007746:	701a      	strb	r2, [r3, #0]
	LEDDriversCounter = ParamsUnion.Params.F_Devices.LEDDriversCounter;
 8007748:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <LoadDeviceConfig+0x60>)
 800774a:	224c      	movs	r2, #76	; 0x4c
 800774c:	5a9b      	ldrh	r3, [r3, r2]
 800774e:	b2da      	uxtb	r2, r3
 8007750:	4b10      	ldr	r3, [pc, #64]	; (8007794 <LoadDeviceConfig+0x6c>)
 8007752:	701a      	strb	r2, [r3, #0]

	memcpy(BESCDrivers, ParamsUnion.Params.F_Devices.BESCDrivers,
 8007754:	4a10      	ldr	r2, [pc, #64]	; (8007798 <LoadDeviceConfig+0x70>)
 8007756:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <LoadDeviceConfig+0x60>)
 8007758:	3310      	adds	r3, #16
 800775a:	cb13      	ldmia	r3!, {r0, r1, r4}
 800775c:	c213      	stmia	r2!, {r0, r1, r4}
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6013      	str	r3, [r2, #0]
			sizeof(struct BESCDriverHandle) * BESC_DRIVERS_MAX);
	memcpy(BCSDrivers, ParamsUnion.Params.F_Devices.BCSDrivers,
 8007762:	4a0e      	ldr	r2, [pc, #56]	; (800779c <LoadDeviceConfig+0x74>)
 8007764:	4b08      	ldr	r3, [pc, #32]	; (8007788 <LoadDeviceConfig+0x60>)
 8007766:	3324      	adds	r3, #36	; 0x24
 8007768:	cb13      	ldmia	r3!, {r0, r1, r4}
 800776a:	c213      	stmia	r2!, {r0, r1, r4}
 800776c:	cb03      	ldmia	r3!, {r0, r1}
 800776e:	c203      	stmia	r2!, {r0, r1}
			sizeof(struct BCSDriverHandle) * BCS_DRIVERS_MAX);
	memcpy(LEDDrivers, ParamsUnion.Params.F_Devices.LEDDrivers,
 8007770:	4a0b      	ldr	r2, [pc, #44]	; (80077a0 <LoadDeviceConfig+0x78>)
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <LoadDeviceConfig+0x60>)
 8007774:	333c      	adds	r3, #60	; 0x3c
 8007776:	cb13      	ldmia	r3!, {r0, r1, r4}
 8007778:	c213      	stmia	r2!, {r0, r1, r4}
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	e000      	b.n	8007782 <LoadDeviceConfig+0x5a>
		return;
 8007780:	46c0      	nop			; (mov r8, r8)
			sizeof(struct LEDDriverHandle) * LED_DRIVERS_MAX);
}
 8007782:	46bd      	mov	sp, r7
 8007784:	bd90      	pop	{r4, r7, pc}
 8007786:	46c0      	nop			; (mov r8, r8)
 8007788:	0800f800 	.word	0x0800f800
 800778c:	200003cc 	.word	0x200003cc
 8007790:	200003cd 	.word	0x200003cd
 8007794:	200003ce 	.word	0x200003ce
 8007798:	20000820 	.word	0x20000820
 800779c:	20000834 	.word	0x20000834
 80077a0:	20000810 	.word	0x20000810

080077a4 <ResetDeviceConfig>:

void ResetDeviceConfig(void) {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
	StartChangeFlashParam();
 80077a8:	f001 ff7a 	bl	80096a0 <StartChangeFlashParam>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 80077ac:	4906      	ldr	r1, [pc, #24]	; (80077c8 <ResetDeviceConfig+0x24>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	2300      	movs	r3, #0
 80077b2:	2001      	movs	r0, #1
 80077b4:	f7fb fa5c 	bl	8002c70 <HAL_FLASH_Program>
			(uint32_t) &ParamsUnion.Params.F_Devices.IsUsed, (uint16_t) 0x0);

	EndChangeFlashParam((void *) &ParamsUnion.Params.F_Devices.IsUsed,
 80077b8:	4b03      	ldr	r3, [pc, #12]	; (80077c8 <ResetDeviceConfig+0x24>)
 80077ba:	2102      	movs	r1, #2
 80077bc:	0018      	movs	r0, r3
 80077be:	f001 ff83 	bl	80096c8 <EndChangeFlashParam>
			sizeof(ParamsUnion.Params.F_Devices.IsUsed));
}
 80077c2:	46c0      	nop			; (mov r8, r8)
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	0800f80c 	.word	0x0800f80c

080077cc <C_R_Ping>:

//
uint8_t C_R_Ping(struct ModbusRecvMessage *msg, uint8_t *result,
		uint8_t *resultLength) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
	*resultLength = 0;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	701a      	strb	r2, [r3, #0]

	return ALL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	0018      	movs	r0, r3
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b004      	add	sp, #16
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <C_W_ChangeSlaveId>:
//

//
uint8_t C_W_ChangeSlaveId(struct ModbusRecvMessage *msg) {
 80077e8:	b5b0      	push	{r4, r5, r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != sizeof(uint8_t))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	791b      	ldrb	r3, [r3, #4]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d001      	beq.n	80077fc <C_W_ChangeSlaveId+0x14>
		return ANY_ERROR;
 80077f8:	23ff      	movs	r3, #255	; 0xff
 80077fa:	e027      	b.n	800784c <C_W_ChangeSlaveId+0x64>

	uint8_t newId = msg->Data[0];
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	230f      	movs	r3, #15
 8007802:	18fb      	adds	r3, r7, r3
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	701a      	strb	r2, [r3, #0]

	if (!newId)
 8007808:	230f      	movs	r3, #15
 800780a:	18fb      	adds	r3, r7, r3
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <C_W_ChangeSlaveId+0x2e>
		return ANY_ERROR;
 8007812:	23ff      	movs	r3, #255	; 0xff
 8007814:	e01a      	b.n	800784c <C_W_ChangeSlaveId+0x64>

	StartChangeFlashParam();
 8007816:	f001 ff43 	bl	80096a0 <StartChangeFlashParam>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800781a:	490e      	ldr	r1, [pc, #56]	; (8007854 <C_W_ChangeSlaveId+0x6c>)
 800781c:	230f      	movs	r3, #15
 800781e:	18fb      	adds	r3, r7, r3
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	001c      	movs	r4, r3
 8007826:	2300      	movs	r3, #0
 8007828:	001d      	movs	r5, r3
 800782a:	0022      	movs	r2, r4
 800782c:	002b      	movs	r3, r5
 800782e:	2001      	movs	r0, #1
 8007830:	f7fb fa1e 	bl	8002c70 <HAL_FLASH_Program>
			(uint32_t) &ParamsUnion.Params.F_SlaveId, (uint16_t) newId);

	EndChangeFlashParam((void *) &ParamsUnion.Params.F_SlaveId,
 8007834:	4b07      	ldr	r3, [pc, #28]	; (8007854 <C_W_ChangeSlaveId+0x6c>)
 8007836:	2102      	movs	r1, #2
 8007838:	0018      	movs	r0, r3
 800783a:	f001 ff45 	bl	80096c8 <EndChangeFlashParam>
			sizeof(ParamsUnion.Params.F_SlaveId));

	SlaveId = newId;
 800783e:	230f      	movs	r3, #15
 8007840:	18fb      	adds	r3, r7, r3
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	b29a      	uxth	r2, r3
 8007846:	4b04      	ldr	r3, [pc, #16]	; (8007858 <C_W_ChangeSlaveId+0x70>)
 8007848:	801a      	strh	r2, [r3, #0]

	return ALL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	0018      	movs	r0, r3
 800784e:	46bd      	mov	sp, r7
 8007850:	b004      	add	sp, #16
 8007852:	bdb0      	pop	{r4, r5, r7, pc}
 8007854:	0800f808 	.word	0x0800f808
 8007858:	200008a4 	.word	0x200008a4

0800785c <C_W_SaveDeviceConfiguration>:
//

//
uint8_t C_W_SaveDeviceConfiguration(struct ModbusRecvMessage *msg) {
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != 0)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	791b      	ldrb	r3, [r3, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <C_W_SaveDeviceConfiguration+0x14>
		return ANY_ERROR;
 800786c:	23ff      	movs	r3, #255	; 0xff
 800786e:	e002      	b.n	8007876 <C_W_SaveDeviceConfiguration+0x1a>

	SaveDeviceConfig();
 8007870:	f7ff fe98 	bl	80075a4 <SaveDeviceConfig>

	return ALL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	0018      	movs	r0, r3
 8007878:	46bd      	mov	sp, r7
 800787a:	b002      	add	sp, #8
 800787c:	bd80      	pop	{r7, pc}

0800787e <C_W_ResetDeviceConfiguration>:
//

//
uint8_t C_W_ResetDeviceConfiguration(struct ModbusRecvMessage *msg) {
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != 0)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	791b      	ldrb	r3, [r3, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <C_W_ResetDeviceConfiguration+0x14>
		return ANY_ERROR;
 800788e:	23ff      	movs	r3, #255	; 0xff
 8007890:	e002      	b.n	8007898 <C_W_ResetDeviceConfiguration+0x1a>

	ResetDeviceConfig();
 8007892:	f7ff ff87 	bl	80077a4 <ResetDeviceConfig>

	return ALL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	0018      	movs	r0, r3
 800789a:	46bd      	mov	sp, r7
 800789c:	b002      	add	sp, #8
 800789e:	bd80      	pop	{r7, pc}

080078a0 <C_R_InitializeBESCDevice>:
}
//

//
uint8_t C_R_InitializeBESCDevice(struct ModbusRecvMessage *msg, uint8_t *result,
		uint8_t *resultLength) {
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
	if (msg->DataLength != sizeof(enum TIMChannel))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	791b      	ldrb	r3, [r3, #4]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d001      	beq.n	80078b8 <C_R_InitializeBESCDevice+0x18>
		return ANY_ERROR;
 80078b4:	23ff      	movs	r3, #255	; 0xff
 80078b6:	e01a      	b.n	80078ee <C_R_InitializeBESCDevice+0x4e>

	if (InitializeBESCDriver(*(enum TIMChannel *) msg->Data,
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	7818      	ldrb	r0, [r3, #0]
			&BESCDrivers[BESCDriversCounter]))
 80078be:	4b0e      	ldr	r3, [pc, #56]	; (80078f8 <C_R_InitializeBESCDevice+0x58>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
	if (InitializeBESCDriver(*(enum TIMChannel *) msg->Data,
 80078c2:	009a      	lsls	r2, r3, #2
 80078c4:	4b0d      	ldr	r3, [pc, #52]	; (80078fc <C_R_InitializeBESCDevice+0x5c>)
 80078c6:	18d3      	adds	r3, r2, r3
 80078c8:	0019      	movs	r1, r3
 80078ca:	f001 fa19 	bl	8008d00 <InitializeBESCDriver>
 80078ce:	1e03      	subs	r3, r0, #0
 80078d0:	d001      	beq.n	80078d6 <C_R_InitializeBESCDevice+0x36>
		return ANY_ERROR;
 80078d2:	23ff      	movs	r3, #255	; 0xff
 80078d4:	e00b      	b.n	80078ee <C_R_InitializeBESCDevice+0x4e>

	*result = BESCDriversCounter++;
 80078d6:	4b08      	ldr	r3, [pc, #32]	; (80078f8 <C_R_InitializeBESCDevice+0x58>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	b2d1      	uxtb	r1, r2
 80078de:	4a06      	ldr	r2, [pc, #24]	; (80078f8 <C_R_InitializeBESCDevice+0x58>)
 80078e0:	7011      	strb	r1, [r2, #0]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	7013      	strb	r3, [r2, #0]
	*resultLength = sizeof(BESCDriversCounter);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	701a      	strb	r2, [r3, #0]

	return ALL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	0018      	movs	r0, r3
 80078f0:	46bd      	mov	sp, r7
 80078f2:	b004      	add	sp, #16
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	200003cc 	.word	0x200003cc
 80078fc:	20000820 	.word	0x20000820

08007900 <C_R_InitializeLEDDevice>:
//

//
uint8_t C_R_InitializeLEDDevice(struct ModbusRecvMessage *msg, uint8_t *result,
		uint8_t *resultLength) {
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
	if (msg->DataLength != sizeof(enum TIMChannel))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	791b      	ldrb	r3, [r3, #4]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d001      	beq.n	8007918 <C_R_InitializeLEDDevice+0x18>
		return ANY_ERROR;
 8007914:	23ff      	movs	r3, #255	; 0xff
 8007916:	e01a      	b.n	800794e <C_R_InitializeLEDDevice+0x4e>

	if (InitializeLEDDriver(*(enum TIMChannel *) msg->Data,
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	7818      	ldrb	r0, [r3, #0]
			&LEDDrivers[LEDDriversCounter]))
 800791e:	4b0e      	ldr	r3, [pc, #56]	; (8007958 <C_R_InitializeLEDDevice+0x58>)
 8007920:	781b      	ldrb	r3, [r3, #0]
	if (InitializeLEDDriver(*(enum TIMChannel *) msg->Data,
 8007922:	009a      	lsls	r2, r3, #2
 8007924:	4b0d      	ldr	r3, [pc, #52]	; (800795c <C_R_InitializeLEDDevice+0x5c>)
 8007926:	18d3      	adds	r3, r2, r3
 8007928:	0019      	movs	r1, r3
 800792a:	f001 fa3b 	bl	8008da4 <InitializeLEDDriver>
 800792e:	1e03      	subs	r3, r0, #0
 8007930:	d001      	beq.n	8007936 <C_R_InitializeLEDDevice+0x36>
		return ANY_ERROR;
 8007932:	23ff      	movs	r3, #255	; 0xff
 8007934:	e00b      	b.n	800794e <C_R_InitializeLEDDevice+0x4e>

	*result = LEDDriversCounter++;
 8007936:	4b08      	ldr	r3, [pc, #32]	; (8007958 <C_R_InitializeLEDDevice+0x58>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	b2d1      	uxtb	r1, r2
 800793e:	4a06      	ldr	r2, [pc, #24]	; (8007958 <C_R_InitializeLEDDevice+0x58>)
 8007940:	7011      	strb	r1, [r2, #0]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	7013      	strb	r3, [r2, #0]
	*resultLength = sizeof(LEDDriversCounter);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	701a      	strb	r2, [r3, #0]

	return ALL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	0018      	movs	r0, r3
 8007950:	46bd      	mov	sp, r7
 8007952:	b004      	add	sp, #16
 8007954:	bd80      	pop	{r7, pc}
 8007956:	46c0      	nop			; (mov r8, r8)
 8007958:	200003ce 	.word	0x200003ce
 800795c:	20000810 	.word	0x20000810

08007960 <C_R_InitializeBCSDevice>:
//

//
uint8_t C_R_InitializeBCSDevice(struct ModbusRecvMessage *msg, uint8_t *result,
		uint8_t *resultLength) {
 8007960:	b590      	push	{r4, r7, lr}
 8007962:	b08b      	sub	sp, #44	; 0x2c
 8007964:	af02      	add	r7, sp, #8
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
	if (msg->DataLength
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	791b      	ldrb	r3, [r3, #4]
 8007970:	2b04      	cmp	r3, #4
 8007972:	d001      	beq.n	8007978 <C_R_InitializeBCSDevice+0x18>
			!= sizeof(enum TIMChannel) + 3 * sizeof(enum GPIOChannel))
		return ANY_ERROR;
 8007974:	23ff      	movs	r3, #255	; 0xff
 8007976:	e060      	b.n	8007a3a <C_R_InitializeBCSDevice+0xda>

	uint8_t *data = msg->Data;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	61fb      	str	r3, [r7, #28]

	enum TIMChannel timChannel = (enum TIMChannel) data[0];
 800797e:	231b      	movs	r3, #27
 8007980:	18fb      	adds	r3, r7, r3
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	7812      	ldrb	r2, [r2, #0]
 8007986:	701a      	strb	r2, [r3, #0]
	enum GPIOChannel directionChannel = (enum GPIOChannel) data[1];
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	231a      	movs	r3, #26
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	7812      	ldrb	r2, [r2, #0]
 8007992:	701a      	strb	r2, [r3, #0]
	enum GPIOChannel disableChannel = (enum GPIOChannel) data[2];
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	1c9a      	adds	r2, r3, #2
 8007998:	2319      	movs	r3, #25
 800799a:	18fb      	adds	r3, r7, r3
 800799c:	7812      	ldrb	r2, [r2, #0]
 800799e:	701a      	strb	r2, [r3, #0]
	enum GPIOChannel terminalChannel = (enum GPIOChannel) data[3];
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	1cda      	adds	r2, r3, #3
 80079a4:	2318      	movs	r3, #24
 80079a6:	18fb      	adds	r3, r7, r3
 80079a8:	7812      	ldrb	r2, [r2, #0]
 80079aa:	701a      	strb	r2, [r3, #0]

	if (directionChannel == disableChannel || disableChannel == terminalChannel)
 80079ac:	231a      	movs	r3, #26
 80079ae:	18fa      	adds	r2, r7, r3
 80079b0:	2319      	movs	r3, #25
 80079b2:	18fb      	adds	r3, r7, r3
 80079b4:	7812      	ldrb	r2, [r2, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d007      	beq.n	80079cc <C_R_InitializeBCSDevice+0x6c>
 80079bc:	2319      	movs	r3, #25
 80079be:	18fa      	adds	r2, r7, r3
 80079c0:	2318      	movs	r3, #24
 80079c2:	18fb      	adds	r3, r7, r3
 80079c4:	7812      	ldrb	r2, [r2, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d101      	bne.n	80079d0 <C_R_InitializeBCSDevice+0x70>
		return ANY_ERROR;
 80079cc:	23ff      	movs	r3, #255	; 0xff
 80079ce:	e034      	b.n	8007a3a <C_R_InitializeBCSDevice+0xda>

	struct BCSDriverHandle *handle = &BCSDrivers[BCSDriversCounter];
 80079d0:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <C_R_InitializeBCSDevice+0xe4>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	001a      	movs	r2, r3
 80079d6:	0013      	movs	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	189b      	adds	r3, r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4a1a      	ldr	r2, [pc, #104]	; (8007a48 <C_R_InitializeBCSDevice+0xe8>)
 80079e0:	189b      	adds	r3, r3, r2
 80079e2:	617b      	str	r3, [r7, #20]
	if (InitializeBCSDriver(timChannel, directionChannel, disableChannel,
 80079e4:	2318      	movs	r3, #24
 80079e6:	18fb      	adds	r3, r7, r3
 80079e8:	781c      	ldrb	r4, [r3, #0]
 80079ea:	2319      	movs	r3, #25
 80079ec:	18fb      	adds	r3, r7, r3
 80079ee:	781a      	ldrb	r2, [r3, #0]
 80079f0:	231a      	movs	r3, #26
 80079f2:	18fb      	adds	r3, r7, r3
 80079f4:	7819      	ldrb	r1, [r3, #0]
 80079f6:	231b      	movs	r3, #27
 80079f8:	18fb      	adds	r3, r7, r3
 80079fa:	7818      	ldrb	r0, [r3, #0]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	0023      	movs	r3, r4
 8007a02:	f001 fa0f 	bl	8008e24 <InitializeBCSDriver>
 8007a06:	1e03      	subs	r3, r0, #0
 8007a08:	d001      	beq.n	8007a0e <C_R_InitializeBCSDevice+0xae>
			terminalChannel, handle))
		return ANY_ERROR;
 8007a0a:	23ff      	movs	r3, #255	; 0xff
 8007a0c:	e015      	b.n	8007a3a <C_R_InitializeBCSDevice+0xda>

	if (handle->PWMTIM->ComplementTIM->Instance == TIM1)
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a0d      	ldr	r2, [pc, #52]	; (8007a4c <C_R_InitializeBCSDevice+0xec>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d102      	bne.n	8007a22 <C_R_InitializeBCSDevice+0xc2>
		TIM1BCS = handle;
 8007a1c:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <C_R_InitializeBCSDevice+0xf0>)
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	601a      	str	r2, [r3, #0]

	*result = BCSDriversCounter++;
 8007a22:	4b08      	ldr	r3, [pc, #32]	; (8007a44 <C_R_InitializeBCSDevice+0xe4>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	b2d1      	uxtb	r1, r2
 8007a2a:	4a06      	ldr	r2, [pc, #24]	; (8007a44 <C_R_InitializeBCSDevice+0xe4>)
 8007a2c:	7011      	strb	r1, [r2, #0]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	7013      	strb	r3, [r2, #0]
	*resultLength = sizeof(BCSDriversCounter);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	701a      	strb	r2, [r3, #0]

	return ALL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	b009      	add	sp, #36	; 0x24
 8007a40:	bd90      	pop	{r4, r7, pc}
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	200003cd 	.word	0x200003cd
 8007a48:	20000834 	.word	0x20000834
 8007a4c:	40012c00 	.word	0x40012c00
 8007a50:	20000830 	.word	0x20000830

08007a54 <C_W_BESCChangeSpeed>:
//

//
uint8_t C_W_BESCChangeSpeed(struct ModbusRecvMessage *msg) {
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != sizeof(uint8_t) + sizeof(double))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	791b      	ldrb	r3, [r3, #4]
 8007a60:	2b09      	cmp	r3, #9
 8007a62:	d001      	beq.n	8007a68 <C_W_BESCChangeSpeed+0x14>
		return ANY_ERROR;
 8007a64:	23ff      	movs	r3, #255	; 0xff
 8007a66:	e020      	b.n	8007aaa <C_W_BESCChangeSpeed+0x56>

	uint8_t bescDriverId = msg->Data[0];
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	230f      	movs	r3, #15
 8007a6e:	18fb      	adds	r3, r7, r3
 8007a70:	7812      	ldrb	r2, [r2, #0]
 8007a72:	701a      	strb	r2, [r3, #0]

	if (bescDriverId >= BESCDriversCounter)
 8007a74:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <C_W_BESCChangeSpeed+0x60>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	220f      	movs	r2, #15
 8007a7a:	18ba      	adds	r2, r7, r2
 8007a7c:	7812      	ldrb	r2, [r2, #0]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d301      	bcc.n	8007a86 <C_W_BESCChangeSpeed+0x32>
		return ANY_ERROR;
 8007a82:	23ff      	movs	r3, #255	; 0xff
 8007a84:	e011      	b.n	8007aaa <C_W_BESCChangeSpeed+0x56>

	if (BESCDriverChangeSpeed(&BESCDrivers[bescDriverId],
 8007a86:	230f      	movs	r3, #15
 8007a88:	18fb      	adds	r3, r7, r3
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009a      	lsls	r2, r3, #2
 8007a8e:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <C_W_BESCChangeSpeed+0x64>)
 8007a90:	18d2      	adds	r2, r2, r3
			&msg->Data[sizeof(uint8_t)]))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
	if (BESCDriverChangeSpeed(&BESCDrivers[bescDriverId],
 8007a96:	3301      	adds	r3, #1
 8007a98:	0019      	movs	r1, r3
 8007a9a:	0010      	movs	r0, r2
 8007a9c:	f001 fad0 	bl	8009040 <BESCDriverChangeSpeed>
 8007aa0:	1e03      	subs	r3, r0, #0
 8007aa2:	d001      	beq.n	8007aa8 <C_W_BESCChangeSpeed+0x54>
		return ANY_ERROR;
 8007aa4:	23ff      	movs	r3, #255	; 0xff
 8007aa6:	e000      	b.n	8007aaa <C_W_BESCChangeSpeed+0x56>

	return ALL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	0018      	movs	r0, r3
 8007aac:	46bd      	mov	sp, r7
 8007aae:	b004      	add	sp, #16
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	200003cc 	.word	0x200003cc
 8007ab8:	20000820 	.word	0x20000820

08007abc <C_W_LEDChangeBrightness>:
//

//
uint8_t C_W_LEDChangeBrightness(struct ModbusRecvMessage *msg) {
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != sizeof(uint8_t) + sizeof(double))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	791b      	ldrb	r3, [r3, #4]
 8007ac8:	2b09      	cmp	r3, #9
 8007aca:	d001      	beq.n	8007ad0 <C_W_LEDChangeBrightness+0x14>
		return ANY_ERROR;
 8007acc:	23ff      	movs	r3, #255	; 0xff
 8007ace:	e020      	b.n	8007b12 <C_W_LEDChangeBrightness+0x56>

	uint8_t ledDriverId = msg->Data[0];
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	230f      	movs	r3, #15
 8007ad6:	18fb      	adds	r3, r7, r3
 8007ad8:	7812      	ldrb	r2, [r2, #0]
 8007ada:	701a      	strb	r2, [r3, #0]

	if (ledDriverId >= LEDDriversCounter)
 8007adc:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <C_W_LEDChangeBrightness+0x60>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	220f      	movs	r2, #15
 8007ae2:	18ba      	adds	r2, r7, r2
 8007ae4:	7812      	ldrb	r2, [r2, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d301      	bcc.n	8007aee <C_W_LEDChangeBrightness+0x32>
		return ANY_ERROR;
 8007aea:	23ff      	movs	r3, #255	; 0xff
 8007aec:	e011      	b.n	8007b12 <C_W_LEDChangeBrightness+0x56>

	if (LEDDriverChangeBrightness(&LEDDrivers[ledDriverId],
 8007aee:	230f      	movs	r3, #15
 8007af0:	18fb      	adds	r3, r7, r3
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009a      	lsls	r2, r3, #2
 8007af6:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <C_W_LEDChangeBrightness+0x64>)
 8007af8:	18d2      	adds	r2, r2, r3
			&msg->Data[sizeof(uint8_t)]))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
	if (LEDDriverChangeBrightness(&LEDDrivers[ledDriverId],
 8007afe:	3301      	adds	r3, #1
 8007b00:	0019      	movs	r1, r3
 8007b02:	0010      	movs	r0, r2
 8007b04:	f001 fb0c 	bl	8009120 <LEDDriverChangeBrightness>
 8007b08:	1e03      	subs	r3, r0, #0
 8007b0a:	d001      	beq.n	8007b10 <C_W_LEDChangeBrightness+0x54>
		return ANY_ERROR;
 8007b0c:	23ff      	movs	r3, #255	; 0xff
 8007b0e:	e000      	b.n	8007b12 <C_W_LEDChangeBrightness+0x56>

	return ALL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	0018      	movs	r0, r3
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b004      	add	sp, #16
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	46c0      	nop			; (mov r8, r8)
 8007b1c:	200003ce 	.word	0x200003ce
 8007b20:	20000810 	.word	0x20000810

08007b24 <C_W_BCS_ChangeSpeed>:
//

//
uint8_t C_W_BCS_ChangeSpeed(struct ModbusRecvMessage *msg) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != sizeof(uint8_t) + sizeof(double))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	791b      	ldrb	r3, [r3, #4]
 8007b30:	2b09      	cmp	r3, #9
 8007b32:	d001      	beq.n	8007b38 <C_W_BCS_ChangeSpeed+0x14>
		return ANY_ERROR;
 8007b34:	23ff      	movs	r3, #255	; 0xff
 8007b36:	e023      	b.n	8007b80 <C_W_BCS_ChangeSpeed+0x5c>

	uint8_t bcsDriverId = msg->Data[0];
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	230f      	movs	r3, #15
 8007b3e:	18fb      	adds	r3, r7, r3
 8007b40:	7812      	ldrb	r2, [r2, #0]
 8007b42:	701a      	strb	r2, [r3, #0]

	if (bcsDriverId >= BCSDriversCounter)
 8007b44:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <C_W_BCS_ChangeSpeed+0x64>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	220f      	movs	r2, #15
 8007b4a:	18ba      	adds	r2, r7, r2
 8007b4c:	7812      	ldrb	r2, [r2, #0]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d301      	bcc.n	8007b56 <C_W_BCS_ChangeSpeed+0x32>
		return ANY_ERROR;
 8007b52:	23ff      	movs	r3, #255	; 0xff
 8007b54:	e014      	b.n	8007b80 <C_W_BCS_ChangeSpeed+0x5c>

	if (BCSDriverChangeSpeed(&BCSDrivers[bcsDriverId],
 8007b56:	230f      	movs	r3, #15
 8007b58:	18fb      	adds	r3, r7, r3
 8007b5a:	781a      	ldrb	r2, [r3, #0]
 8007b5c:	0013      	movs	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	189b      	adds	r3, r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4a09      	ldr	r2, [pc, #36]	; (8007b8c <C_W_BCS_ChangeSpeed+0x68>)
 8007b66:	189a      	adds	r2, r3, r2
			&msg->Data[sizeof(uint8_t)]))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
	if (BCSDriverChangeSpeed(&BCSDrivers[bcsDriverId],
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	0019      	movs	r1, r3
 8007b70:	0010      	movs	r0, r2
 8007b72:	f001 fb21 	bl	80091b8 <BCSDriverChangeSpeed>
 8007b76:	1e03      	subs	r3, r0, #0
 8007b78:	d001      	beq.n	8007b7e <C_W_BCS_ChangeSpeed+0x5a>
		return ANY_ERROR;
 8007b7a:	23ff      	movs	r3, #255	; 0xff
 8007b7c:	e000      	b.n	8007b80 <C_W_BCS_ChangeSpeed+0x5c>

	return ALL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	0018      	movs	r0, r3
 8007b82:	46bd      	mov	sp, r7
 8007b84:	b004      	add	sp, #16
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	200003cd 	.word	0x200003cd
 8007b8c:	20000834 	.word	0x20000834

08007b90 <C_W_BCS_Move>:
//

//
uint8_t C_W_BCS_Move(struct ModbusRecvMessage *msg) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != 2 * sizeof(uint8_t) + sizeof(uint16_t))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	791b      	ldrb	r3, [r3, #4]
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d001      	beq.n	8007ba4 <C_W_BCS_Move+0x14>
		return ANY_ERROR;
 8007ba0:	23ff      	movs	r3, #255	; 0xff
 8007ba2:	e023      	b.n	8007bec <C_W_BCS_Move+0x5c>

	uint8_t bcsDriverId = msg->Data[0];
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	230f      	movs	r3, #15
 8007baa:	18fb      	adds	r3, r7, r3
 8007bac:	7812      	ldrb	r2, [r2, #0]
 8007bae:	701a      	strb	r2, [r3, #0]

	if (bcsDriverId >= BCSDriversCounter)
 8007bb0:	4b10      	ldr	r3, [pc, #64]	; (8007bf4 <C_W_BCS_Move+0x64>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	220f      	movs	r2, #15
 8007bb6:	18ba      	adds	r2, r7, r2
 8007bb8:	7812      	ldrb	r2, [r2, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d301      	bcc.n	8007bc2 <C_W_BCS_Move+0x32>
		return ANY_ERROR;
 8007bbe:	23ff      	movs	r3, #255	; 0xff
 8007bc0:	e014      	b.n	8007bec <C_W_BCS_Move+0x5c>

	if (BCSDriverMove(&BCSDrivers[bcsDriverId], &msg->Data[sizeof(uint8_t)]))
 8007bc2:	230f      	movs	r3, #15
 8007bc4:	18fb      	adds	r3, r7, r3
 8007bc6:	781a      	ldrb	r2, [r3, #0]
 8007bc8:	0013      	movs	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	189b      	adds	r3, r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4a09      	ldr	r2, [pc, #36]	; (8007bf8 <C_W_BCS_Move+0x68>)
 8007bd2:	189a      	adds	r2, r3, r2
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	0019      	movs	r1, r3
 8007bdc:	0010      	movs	r0, r2
 8007bde:	f001 fb59 	bl	8009294 <BCSDriverMove>
 8007be2:	1e03      	subs	r3, r0, #0
 8007be4:	d001      	beq.n	8007bea <C_W_BCS_Move+0x5a>
		return ANY_ERROR;
 8007be6:	23ff      	movs	r3, #255	; 0xff
 8007be8:	e000      	b.n	8007bec <C_W_BCS_Move+0x5c>

	return ALL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	0018      	movs	r0, r3
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	b004      	add	sp, #16
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	200003cd 	.word	0x200003cd
 8007bf8:	20000834 	.word	0x20000834

08007bfc <C_W_BCS_Stop>:
//

//
uint8_t C_W_BCS_Stop(struct ModbusRecvMessage *msg) {
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != sizeof(uint8_t))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	791b      	ldrb	r3, [r3, #4]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d001      	beq.n	8007c10 <C_W_BCS_Stop+0x14>
		return ANY_ERROR;
 8007c0c:	23ff      	movs	r3, #255	; 0xff
 8007c0e:	e01f      	b.n	8007c50 <C_W_BCS_Stop+0x54>

	uint8_t bcsDriverId = msg->Data[0];
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	230f      	movs	r3, #15
 8007c16:	18fb      	adds	r3, r7, r3
 8007c18:	7812      	ldrb	r2, [r2, #0]
 8007c1a:	701a      	strb	r2, [r3, #0]

	if (bcsDriverId >= BCSDriversCounter)
 8007c1c:	4b0e      	ldr	r3, [pc, #56]	; (8007c58 <C_W_BCS_Stop+0x5c>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	220f      	movs	r2, #15
 8007c22:	18ba      	adds	r2, r7, r2
 8007c24:	7812      	ldrb	r2, [r2, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d301      	bcc.n	8007c2e <C_W_BCS_Stop+0x32>
		return ANY_ERROR;
 8007c2a:	23ff      	movs	r3, #255	; 0xff
 8007c2c:	e010      	b.n	8007c50 <C_W_BCS_Stop+0x54>

	if (BCSDriverStop(&BCSDrivers[bcsDriverId]))
 8007c2e:	230f      	movs	r3, #15
 8007c30:	18fb      	adds	r3, r7, r3
 8007c32:	781a      	ldrb	r2, [r3, #0]
 8007c34:	0013      	movs	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	189b      	adds	r3, r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4a07      	ldr	r2, [pc, #28]	; (8007c5c <C_W_BCS_Stop+0x60>)
 8007c3e:	189b      	adds	r3, r3, r2
 8007c40:	0018      	movs	r0, r3
 8007c42:	f001 fc3d 	bl	80094c0 <BCSDriverStop>
 8007c46:	1e03      	subs	r3, r0, #0
 8007c48:	d001      	beq.n	8007c4e <C_W_BCS_Stop+0x52>
		return ANY_ERROR;
 8007c4a:	23ff      	movs	r3, #255	; 0xff
 8007c4c:	e000      	b.n	8007c50 <C_W_BCS_Stop+0x54>

	return ALL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	0018      	movs	r0, r3
 8007c52:	46bd      	mov	sp, r7
 8007c54:	b004      	add	sp, #16
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	200003cd 	.word	0x200003cd
 8007c5c:	20000834 	.word	0x20000834

08007c60 <C_W_BCS_MoveToEnd>:
//

//
uint8_t C_W_BCS_MoveToEnd(struct ModbusRecvMessage *msg) {
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
	if (msg->DataLength != 2 * sizeof(uint8_t))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	791b      	ldrb	r3, [r3, #4]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d001      	beq.n	8007c74 <C_W_BCS_MoveToEnd+0x14>
		return ANY_ERROR;
 8007c70:	23ff      	movs	r3, #255	; 0xff
 8007c72:	e023      	b.n	8007cbc <C_W_BCS_MoveToEnd+0x5c>

	uint8_t bcsDriverId = msg->Data[0];
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	230f      	movs	r3, #15
 8007c7a:	18fb      	adds	r3, r7, r3
 8007c7c:	7812      	ldrb	r2, [r2, #0]
 8007c7e:	701a      	strb	r2, [r3, #0]

	if (bcsDriverId >= BCSDriversCounter)
 8007c80:	4b10      	ldr	r3, [pc, #64]	; (8007cc4 <C_W_BCS_MoveToEnd+0x64>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	220f      	movs	r2, #15
 8007c86:	18ba      	adds	r2, r7, r2
 8007c88:	7812      	ldrb	r2, [r2, #0]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d301      	bcc.n	8007c92 <C_W_BCS_MoveToEnd+0x32>
		return ANY_ERROR;
 8007c8e:	23ff      	movs	r3, #255	; 0xff
 8007c90:	e014      	b.n	8007cbc <C_W_BCS_MoveToEnd+0x5c>

	if (BCSDriverMoveToEnd(&BCSDrivers[bcsDriverId],
 8007c92:	230f      	movs	r3, #15
 8007c94:	18fb      	adds	r3, r7, r3
 8007c96:	781a      	ldrb	r2, [r3, #0]
 8007c98:	0013      	movs	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	189b      	adds	r3, r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4a09      	ldr	r2, [pc, #36]	; (8007cc8 <C_W_BCS_MoveToEnd+0x68>)
 8007ca2:	189a      	adds	r2, r3, r2
			&msg->Data[sizeof(uint8_t)]))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
	if (BCSDriverMoveToEnd(&BCSDrivers[bcsDriverId],
 8007ca8:	3301      	adds	r3, #1
 8007caa:	0019      	movs	r1, r3
 8007cac:	0010      	movs	r0, r2
 8007cae:	f001 fc41 	bl	8009534 <BCSDriverMoveToEnd>
 8007cb2:	1e03      	subs	r3, r0, #0
 8007cb4:	d001      	beq.n	8007cba <C_W_BCS_MoveToEnd+0x5a>
		return ANY_ERROR;
 8007cb6:	23ff      	movs	r3, #255	; 0xff
 8007cb8:	e000      	b.n	8007cbc <C_W_BCS_MoveToEnd+0x5c>

	return ALL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	b004      	add	sp, #16
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	200003cd 	.word	0x200003cd
 8007cc8:	20000834 	.word	0x20000834

08007ccc <C_R_MS5837_CheckConnection>:
//

//
uint8_t C_R_MS5837_CheckConnection(struct ModbusRecvMessage *msg,
		uint8_t *result, uint8_t *resultLength) {
 8007ccc:	b590      	push	{r4, r7, lr}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
	enum MS5837ErrorCode status = MS5837IsConnected();
 8007cd8:	2317      	movs	r3, #23
 8007cda:	18fc      	adds	r4, r7, r3
 8007cdc:	f7fe fe2c 	bl	8006938 <MS5837IsConnected>
 8007ce0:	0003      	movs	r3, r0
 8007ce2:	7023      	strb	r3, [r4, #0]
	*resultLength = sizeof(status);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	701a      	strb	r2, [r3, #0]
	*result = status;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2217      	movs	r2, #23
 8007cee:	18ba      	adds	r2, r7, r2
 8007cf0:	7812      	ldrb	r2, [r2, #0]
 8007cf2:	701a      	strb	r2, [r3, #0]

	return ALL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	b007      	add	sp, #28
 8007cfc:	bd90      	pop	{r4, r7, pc}

08007cfe <C_R_MS5837_ReadTemp>:

uint8_t C_R_MS5837_ReadTemp(struct ModbusRecvMessage *msg, uint8_t *result,
		uint8_t *resultLength) {
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b086      	sub	sp, #24
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	60f8      	str	r0, [r7, #12]
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	607a      	str	r2, [r7, #4]
	if (msg->DataLength != sizeof(enum MS5837D2OSRCommand))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	791b      	ldrb	r3, [r3, #4]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d001      	beq.n	8007d16 <C_R_MS5837_ReadTemp+0x18>
		return ANY_ERROR;
 8007d12:	23ff      	movs	r3, #255	; 0xff
 8007d14:	e01d      	b.n	8007d52 <C_R_MS5837_ReadTemp+0x54>

	enum MS5837D2OSRCommand d2osr = msg->Data[0];
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	2317      	movs	r3, #23
 8007d1c:	18fb      	adds	r3, r7, r3
 8007d1e:	7812      	ldrb	r2, [r2, #0]
 8007d20:	701a      	strb	r2, [r3, #0]
	float temp;

	if (MS5837ReadTemperature(d2osr, &temp))
 8007d22:	2310      	movs	r3, #16
 8007d24:	18fa      	adds	r2, r7, r3
 8007d26:	2317      	movs	r3, #23
 8007d28:	18fb      	adds	r3, r7, r3
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	0011      	movs	r1, r2
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f7fe fe26 	bl	8006980 <MS5837ReadTemperature>
 8007d34:	1e03      	subs	r3, r0, #0
 8007d36:	d001      	beq.n	8007d3c <C_R_MS5837_ReadTemp+0x3e>
		return ANY_ERROR;
 8007d38:	23ff      	movs	r3, #255	; 0xff
 8007d3a:	e00a      	b.n	8007d52 <C_R_MS5837_ReadTemp+0x54>

	*resultLength = sizeof(temp);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2204      	movs	r2, #4
 8007d40:	701a      	strb	r2, [r3, #0]
	memcpy(result, &temp, sizeof(float));
 8007d42:	2310      	movs	r3, #16
 8007d44:	18f9      	adds	r1, r7, r3
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2204      	movs	r2, #4
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	f002 fa9e 	bl	800a28c <memcpy>

	return ALL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	0018      	movs	r0, r3
 8007d54:	46bd      	mov	sp, r7
 8007d56:	b006      	add	sp, #24
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <C_R_MS5837_ReadTempAndPress>:

uint8_t C_R_MS5837_ReadTempAndPress(struct ModbusRecvMessage *msg,
		uint8_t *result, uint8_t *resultLength) {
 8007d5a:	b590      	push	{r4, r7, lr}
 8007d5c:	b089      	sub	sp, #36	; 0x24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
	if (msg->DataLength
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	791b      	ldrb	r3, [r3, #4]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d001      	beq.n	8007d72 <C_R_MS5837_ReadTempAndPress+0x18>
			!= sizeof(enum MS5837D2OSRCommand)
					+ sizeof(enum MS5837D1OSRCommand))
		return ANY_ERROR;
 8007d6e:	23ff      	movs	r3, #255	; 0xff
 8007d70:	e02f      	b.n	8007dd2 <C_R_MS5837_ReadTempAndPress+0x78>

	enum MS5837D1OSRCommand d1osr = msg->Data[0], d2osr = msg->Data[1];
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	689a      	ldr	r2, [r3, #8]
 8007d76:	231f      	movs	r3, #31
 8007d78:	18fb      	adds	r3, r7, r3
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	231e      	movs	r3, #30
 8007d84:	18fb      	adds	r3, r7, r3
 8007d86:	7852      	ldrb	r2, [r2, #1]
 8007d88:	701a      	strb	r2, [r3, #0]
	float temp, press;

	if (MS5837ReadTemperatureAndPressure(d1osr, d2osr, &temp, &press))
 8007d8a:	2314      	movs	r3, #20
 8007d8c:	18fc      	adds	r4, r7, r3
 8007d8e:	2318      	movs	r3, #24
 8007d90:	18fa      	adds	r2, r7, r3
 8007d92:	231e      	movs	r3, #30
 8007d94:	18fb      	adds	r3, r7, r3
 8007d96:	7819      	ldrb	r1, [r3, #0]
 8007d98:	231f      	movs	r3, #31
 8007d9a:	18fb      	adds	r3, r7, r3
 8007d9c:	7818      	ldrb	r0, [r3, #0]
 8007d9e:	0023      	movs	r3, r4
 8007da0:	f7fe fee0 	bl	8006b64 <MS5837ReadTemperatureAndPressure>
 8007da4:	1e03      	subs	r3, r0, #0
 8007da6:	d001      	beq.n	8007dac <C_R_MS5837_ReadTempAndPress+0x52>
		return ANY_ERROR;
 8007da8:	23ff      	movs	r3, #255	; 0xff
 8007daa:	e012      	b.n	8007dd2 <C_R_MS5837_ReadTempAndPress+0x78>

	*resultLength = sizeof(temp) + sizeof(press);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2208      	movs	r2, #8
 8007db0:	701a      	strb	r2, [r3, #0]
	memcpy(result, &temp, sizeof(float));
 8007db2:	2318      	movs	r3, #24
 8007db4:	18f9      	adds	r1, r7, r3
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2204      	movs	r2, #4
 8007dba:	0018      	movs	r0, r3
 8007dbc:	f002 fa66 	bl	800a28c <memcpy>
	memcpy(result + sizeof(float), &press, sizeof(float));
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	2214      	movs	r2, #20
 8007dc6:	18b9      	adds	r1, r7, r2
 8007dc8:	2204      	movs	r2, #4
 8007dca:	0018      	movs	r0, r3
 8007dcc:	f002 fa5e 	bl	800a28c <memcpy>

	return ALL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	b009      	add	sp, #36	; 0x24
 8007dd8:	bd90      	pop	{r4, r7, pc}

08007dda <C_R_MS5837_ReadPress>:

uint8_t C_R_MS5837_ReadPress(struct ModbusRecvMessage *msg, uint8_t *result,
		uint8_t *resultLength) {
 8007dda:	b590      	push	{r4, r7, lr}
 8007ddc:	b089      	sub	sp, #36	; 0x24
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	607a      	str	r2, [r7, #4]
	if (msg->DataLength
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	791b      	ldrb	r3, [r3, #4]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d001      	beq.n	8007df2 <C_R_MS5837_ReadPress+0x18>
			!= sizeof(enum MS5837D2OSRCommand)
					+ sizeof(enum MS5837D1OSRCommand))
		return ANY_ERROR;
 8007dee:	23ff      	movs	r3, #255	; 0xff
 8007df0:	e027      	b.n	8007e42 <C_R_MS5837_ReadPress+0x68>

	enum MS5837D1OSRCommand d1osr = msg->Data[0], d2osr = msg->Data[1];
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689a      	ldr	r2, [r3, #8]
 8007df6:	231f      	movs	r3, #31
 8007df8:	18fb      	adds	r3, r7, r3
 8007dfa:	7812      	ldrb	r2, [r2, #0]
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689a      	ldr	r2, [r3, #8]
 8007e02:	231e      	movs	r3, #30
 8007e04:	18fb      	adds	r3, r7, r3
 8007e06:	7852      	ldrb	r2, [r2, #1]
 8007e08:	701a      	strb	r2, [r3, #0]
	float press, temp;

	if (MS5837ReadTemperatureAndPressure(d1osr, d2osr, &temp, &press))
 8007e0a:	2318      	movs	r3, #24
 8007e0c:	18fc      	adds	r4, r7, r3
 8007e0e:	2314      	movs	r3, #20
 8007e10:	18fa      	adds	r2, r7, r3
 8007e12:	231e      	movs	r3, #30
 8007e14:	18fb      	adds	r3, r7, r3
 8007e16:	7819      	ldrb	r1, [r3, #0]
 8007e18:	231f      	movs	r3, #31
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	7818      	ldrb	r0, [r3, #0]
 8007e1e:	0023      	movs	r3, r4
 8007e20:	f7fe fea0 	bl	8006b64 <MS5837ReadTemperatureAndPressure>
 8007e24:	1e03      	subs	r3, r0, #0
 8007e26:	d001      	beq.n	8007e2c <C_R_MS5837_ReadPress+0x52>
		return ANY_ERROR;
 8007e28:	23ff      	movs	r3, #255	; 0xff
 8007e2a:	e00a      	b.n	8007e42 <C_R_MS5837_ReadPress+0x68>

	*resultLength = sizeof(press);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2204      	movs	r2, #4
 8007e30:	701a      	strb	r2, [r3, #0]
	memcpy(result, &press, sizeof(float));
 8007e32:	2318      	movs	r3, #24
 8007e34:	18f9      	adds	r1, r7, r3
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2204      	movs	r2, #4
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f002 fa26 	bl	800a28c <memcpy>

	return ALL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	0018      	movs	r0, r3
 8007e44:	46bd      	mov	sp, r7
 8007e46:	b009      	add	sp, #36	; 0x24
 8007e48:	bd90      	pop	{r4, r7, pc}
	...

08007e4c <InitializeCommands>:
//

void InitializeCommands() {
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
	InitializeModbus();
 8007e50:	f000 fefc 	bl	8008c4c <InitializeModbus>
	InitializeDriversWorker();
 8007e54:	f000 ff16 	bl	8008c84 <InitializeDriversWorker>
	MS5837Init();
 8007e58:	f7fe fd5c 	bl	8006914 <MS5837Init>

	AddCommand(0x00, &C_R_Ping, NULL);
 8007e5c:	4b34      	ldr	r3, [pc, #208]	; (8007f30 <InitializeCommands+0xe4>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	0019      	movs	r1, r3
 8007e62:	2000      	movs	r0, #0
 8007e64:	f7ff fb62 	bl	800752c <AddCommand>
	AddCommand(0x01, NULL, &C_W_ChangeSlaveId);
 8007e68:	4b32      	ldr	r3, [pc, #200]	; (8007f34 <InitializeCommands+0xe8>)
 8007e6a:	001a      	movs	r2, r3
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	2001      	movs	r0, #1
 8007e70:	f7ff fb5c 	bl	800752c <AddCommand>
	AddCommand(0x02, NULL, &C_W_SaveDeviceConfiguration);
 8007e74:	4b30      	ldr	r3, [pc, #192]	; (8007f38 <InitializeCommands+0xec>)
 8007e76:	001a      	movs	r2, r3
 8007e78:	2100      	movs	r1, #0
 8007e7a:	2002      	movs	r0, #2
 8007e7c:	f7ff fb56 	bl	800752c <AddCommand>
	AddCommand(0x03, NULL, &C_W_ResetDeviceConfiguration);
 8007e80:	4b2e      	ldr	r3, [pc, #184]	; (8007f3c <InitializeCommands+0xf0>)
 8007e82:	001a      	movs	r2, r3
 8007e84:	2100      	movs	r1, #0
 8007e86:	2003      	movs	r0, #3
 8007e88:	f7ff fb50 	bl	800752c <AddCommand>

	AddCommand(0x10, &C_R_InitializeBESCDevice, NULL);
 8007e8c:	4b2c      	ldr	r3, [pc, #176]	; (8007f40 <InitializeCommands+0xf4>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	0019      	movs	r1, r3
 8007e92:	2010      	movs	r0, #16
 8007e94:	f7ff fb4a 	bl	800752c <AddCommand>
	AddCommand(0x11, NULL, &C_W_BESCChangeSpeed);
 8007e98:	4b2a      	ldr	r3, [pc, #168]	; (8007f44 <InitializeCommands+0xf8>)
 8007e9a:	001a      	movs	r2, r3
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	2011      	movs	r0, #17
 8007ea0:	f7ff fb44 	bl	800752c <AddCommand>

	AddCommand(0x20, &C_R_InitializeLEDDevice, NULL);
 8007ea4:	4b28      	ldr	r3, [pc, #160]	; (8007f48 <InitializeCommands+0xfc>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	0019      	movs	r1, r3
 8007eaa:	2020      	movs	r0, #32
 8007eac:	f7ff fb3e 	bl	800752c <AddCommand>
	AddCommand(0x21, NULL, &C_W_LEDChangeBrightness);
 8007eb0:	4b26      	ldr	r3, [pc, #152]	; (8007f4c <InitializeCommands+0x100>)
 8007eb2:	001a      	movs	r2, r3
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	2021      	movs	r0, #33	; 0x21
 8007eb8:	f7ff fb38 	bl	800752c <AddCommand>

	AddCommand(0x30, &C_R_InitializeBCSDevice, NULL);
 8007ebc:	4b24      	ldr	r3, [pc, #144]	; (8007f50 <InitializeCommands+0x104>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	0019      	movs	r1, r3
 8007ec2:	2030      	movs	r0, #48	; 0x30
 8007ec4:	f7ff fb32 	bl	800752c <AddCommand>
	AddCommand(0x31, NULL, &C_W_BCS_ChangeSpeed);
 8007ec8:	4b22      	ldr	r3, [pc, #136]	; (8007f54 <InitializeCommands+0x108>)
 8007eca:	001a      	movs	r2, r3
 8007ecc:	2100      	movs	r1, #0
 8007ece:	2031      	movs	r0, #49	; 0x31
 8007ed0:	f7ff fb2c 	bl	800752c <AddCommand>
	AddCommand(0x32, NULL, &C_W_BCS_Move);
 8007ed4:	4b20      	ldr	r3, [pc, #128]	; (8007f58 <InitializeCommands+0x10c>)
 8007ed6:	001a      	movs	r2, r3
 8007ed8:	2100      	movs	r1, #0
 8007eda:	2032      	movs	r0, #50	; 0x32
 8007edc:	f7ff fb26 	bl	800752c <AddCommand>
	AddCommand(0x33, NULL, &C_W_BCS_MoveToEnd);
 8007ee0:	4b1e      	ldr	r3, [pc, #120]	; (8007f5c <InitializeCommands+0x110>)
 8007ee2:	001a      	movs	r2, r3
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	2033      	movs	r0, #51	; 0x33
 8007ee8:	f7ff fb20 	bl	800752c <AddCommand>
	AddCommand(0x34, NULL, &C_W_BCS_Stop);
 8007eec:	4b1c      	ldr	r3, [pc, #112]	; (8007f60 <InitializeCommands+0x114>)
 8007eee:	001a      	movs	r2, r3
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	2034      	movs	r0, #52	; 0x34
 8007ef4:	f7ff fb1a 	bl	800752c <AddCommand>

	AddCommand(0x40, &C_R_MS5837_CheckConnection, NULL);
 8007ef8:	4b1a      	ldr	r3, [pc, #104]	; (8007f64 <InitializeCommands+0x118>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	0019      	movs	r1, r3
 8007efe:	2040      	movs	r0, #64	; 0x40
 8007f00:	f7ff fb14 	bl	800752c <AddCommand>
	AddCommand(0x41, &C_R_MS5837_ReadTemp, NULL);
 8007f04:	4b18      	ldr	r3, [pc, #96]	; (8007f68 <InitializeCommands+0x11c>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	0019      	movs	r1, r3
 8007f0a:	2041      	movs	r0, #65	; 0x41
 8007f0c:	f7ff fb0e 	bl	800752c <AddCommand>
	AddCommand(0x42, &C_R_MS5837_ReadTempAndPress, NULL);
 8007f10:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <InitializeCommands+0x120>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	0019      	movs	r1, r3
 8007f16:	2042      	movs	r0, #66	; 0x42
 8007f18:	f7ff fb08 	bl	800752c <AddCommand>
	AddCommand(0x43, &C_R_MS5837_ReadPress, NULL);
 8007f1c:	4b14      	ldr	r3, [pc, #80]	; (8007f70 <InitializeCommands+0x124>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	0019      	movs	r1, r3
 8007f22:	2043      	movs	r0, #67	; 0x43
 8007f24:	f7ff fb02 	bl	800752c <AddCommand>
}
 8007f28:	46c0      	nop			; (mov r8, r8)
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	080077cd 	.word	0x080077cd
 8007f34:	080077e9 	.word	0x080077e9
 8007f38:	0800785d 	.word	0x0800785d
 8007f3c:	0800787f 	.word	0x0800787f
 8007f40:	080078a1 	.word	0x080078a1
 8007f44:	08007a55 	.word	0x08007a55
 8007f48:	08007901 	.word	0x08007901
 8007f4c:	08007abd 	.word	0x08007abd
 8007f50:	08007961 	.word	0x08007961
 8007f54:	08007b25 	.word	0x08007b25
 8007f58:	08007b91 	.word	0x08007b91
 8007f5c:	08007c61 	.word	0x08007c61
 8007f60:	08007bfd 	.word	0x08007bfd
 8007f64:	08007ccd 	.word	0x08007ccd
 8007f68:	08007cff 	.word	0x08007cff
 8007f6c:	08007d5b 	.word	0x08007d5b
 8007f70:	08007ddb 	.word	0x08007ddb

08007f74 <CRC16>:
		0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
		0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F,
		0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86,
		0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40 };

uint16_t CRC16(uint8_t *puchMsg, uint16_t usDataLen) {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	000a      	movs	r2, r1
 8007f7e:	1cbb      	adds	r3, r7, #2
 8007f80:	801a      	strh	r2, [r3, #0]
	unsigned char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8007f82:	230f      	movs	r3, #15
 8007f84:	18fb      	adds	r3, r7, r3
 8007f86:	22ff      	movs	r2, #255	; 0xff
 8007f88:	701a      	strb	r2, [r3, #0]
	unsigned char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8007f8a:	230e      	movs	r3, #14
 8007f8c:	18fb      	adds	r3, r7, r3
 8007f8e:	22ff      	movs	r2, #255	; 0xff
 8007f90:	701a      	strb	r2, [r3, #0]
	unsigned uIndex; /* will index into CRC lookup table */

	while (usDataLen--) /* pass through message buffer */
 8007f92:	e01b      	b.n	8007fcc <CRC16+0x58>
	{
		uIndex = uchCRCHi ^ *puchMsg++; /* calculate the CRC */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	607a      	str	r2, [r7, #4]
 8007f9a:	781a      	ldrb	r2, [r3, #0]
 8007f9c:	230f      	movs	r3, #15
 8007f9e:	18fb      	adds	r3, r7, r3
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	4053      	eors	r3, r2
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	60bb      	str	r3, [r7, #8]
		uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex];
 8007fa8:	4a14      	ldr	r2, [pc, #80]	; (8007ffc <CRC16+0x88>)
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	18d3      	adds	r3, r2, r3
 8007fae:	7819      	ldrb	r1, [r3, #0]
 8007fb0:	230f      	movs	r3, #15
 8007fb2:	18fb      	adds	r3, r7, r3
 8007fb4:	220e      	movs	r2, #14
 8007fb6:	18ba      	adds	r2, r7, r2
 8007fb8:	7812      	ldrb	r2, [r2, #0]
 8007fba:	404a      	eors	r2, r1
 8007fbc:	701a      	strb	r2, [r3, #0]
		uchCRCLo = auchCRCLo[uIndex];
 8007fbe:	230e      	movs	r3, #14
 8007fc0:	18fb      	adds	r3, r7, r3
 8007fc2:	490f      	ldr	r1, [pc, #60]	; (8008000 <CRC16+0x8c>)
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	188a      	adds	r2, r1, r2
 8007fc8:	7812      	ldrb	r2, [r2, #0]
 8007fca:	701a      	strb	r2, [r3, #0]
	while (usDataLen--) /* pass through message buffer */
 8007fcc:	1cbb      	adds	r3, r7, #2
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	1cba      	adds	r2, r7, #2
 8007fd2:	1e59      	subs	r1, r3, #1
 8007fd4:	8011      	strh	r1, [r2, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1dc      	bne.n	8007f94 <CRC16+0x20>
	}

	return (uchCRCLo << 8 | uchCRCHi);
 8007fda:	230e      	movs	r3, #14
 8007fdc:	18fb      	adds	r3, r7, r3
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	b21a      	sxth	r2, r3
 8007fe4:	230f      	movs	r3, #15
 8007fe6:	18fb      	adds	r3, r7, r3
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	b21b      	sxth	r3, r3
 8007fec:	4313      	orrs	r3, r2
 8007fee:	b21b      	sxth	r3, r3
 8007ff0:	b29b      	uxth	r3, r3
}
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	b004      	add	sp, #16
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	46c0      	nop			; (mov r8, r8)
 8007ffc:	2000001c 	.word	0x2000001c
 8008000:	2000011c 	.word	0x2000011c

08008004 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800800a:	4b08      	ldr	r3, [pc, #32]	; (800802c <MX_DMA_Init+0x28>)
 800800c:	4a07      	ldr	r2, [pc, #28]	; (800802c <MX_DMA_Init+0x28>)
 800800e:	6952      	ldr	r2, [r2, #20]
 8008010:	2101      	movs	r1, #1
 8008012:	430a      	orrs	r2, r1
 8008014:	615a      	str	r2, [r3, #20]
 8008016:	4b05      	ldr	r3, [pc, #20]	; (800802c <MX_DMA_Init+0x28>)
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	2201      	movs	r2, #1
 800801c:	4013      	ands	r3, r2
 800801e:	607b      	str	r3, [r7, #4]
 8008020:	687b      	ldr	r3, [r7, #4]

}
 8008022:	46c0      	nop			; (mov r8, r8)
 8008024:	46bd      	mov	sp, r7
 8008026:	b002      	add	sp, #8
 8008028:	bd80      	pop	{r7, pc}
 800802a:	46c0      	nop			; (mov r8, r8)
 800802c:	40021000 	.word	0x40021000

08008030 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08a      	sub	sp, #40	; 0x28
 8008034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008036:	4b83      	ldr	r3, [pc, #524]	; (8008244 <MX_GPIO_Init+0x214>)
 8008038:	4a82      	ldr	r2, [pc, #520]	; (8008244 <MX_GPIO_Init+0x214>)
 800803a:	6952      	ldr	r2, [r2, #20]
 800803c:	2180      	movs	r1, #128	; 0x80
 800803e:	0309      	lsls	r1, r1, #12
 8008040:	430a      	orrs	r2, r1
 8008042:	615a      	str	r2, [r3, #20]
 8008044:	4b7f      	ldr	r3, [pc, #508]	; (8008244 <MX_GPIO_Init+0x214>)
 8008046:	695a      	ldr	r2, [r3, #20]
 8008048:	2380      	movs	r3, #128	; 0x80
 800804a:	031b      	lsls	r3, r3, #12
 800804c:	4013      	ands	r3, r2
 800804e:	613b      	str	r3, [r7, #16]
 8008050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008052:	4b7c      	ldr	r3, [pc, #496]	; (8008244 <MX_GPIO_Init+0x214>)
 8008054:	4a7b      	ldr	r2, [pc, #492]	; (8008244 <MX_GPIO_Init+0x214>)
 8008056:	6952      	ldr	r2, [r2, #20]
 8008058:	2180      	movs	r1, #128	; 0x80
 800805a:	03c9      	lsls	r1, r1, #15
 800805c:	430a      	orrs	r2, r1
 800805e:	615a      	str	r2, [r3, #20]
 8008060:	4b78      	ldr	r3, [pc, #480]	; (8008244 <MX_GPIO_Init+0x214>)
 8008062:	695a      	ldr	r2, [r3, #20]
 8008064:	2380      	movs	r3, #128	; 0x80
 8008066:	03db      	lsls	r3, r3, #15
 8008068:	4013      	ands	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800806e:	4b75      	ldr	r3, [pc, #468]	; (8008244 <MX_GPIO_Init+0x214>)
 8008070:	4a74      	ldr	r2, [pc, #464]	; (8008244 <MX_GPIO_Init+0x214>)
 8008072:	6952      	ldr	r2, [r2, #20]
 8008074:	2180      	movs	r1, #128	; 0x80
 8008076:	0289      	lsls	r1, r1, #10
 8008078:	430a      	orrs	r2, r1
 800807a:	615a      	str	r2, [r3, #20]
 800807c:	4b71      	ldr	r3, [pc, #452]	; (8008244 <MX_GPIO_Init+0x214>)
 800807e:	695a      	ldr	r2, [r3, #20]
 8008080:	2380      	movs	r3, #128	; 0x80
 8008082:	029b      	lsls	r3, r3, #10
 8008084:	4013      	ands	r3, r2
 8008086:	60bb      	str	r3, [r7, #8]
 8008088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800808a:	4b6e      	ldr	r3, [pc, #440]	; (8008244 <MX_GPIO_Init+0x214>)
 800808c:	4a6d      	ldr	r2, [pc, #436]	; (8008244 <MX_GPIO_Init+0x214>)
 800808e:	6952      	ldr	r2, [r2, #20]
 8008090:	2180      	movs	r1, #128	; 0x80
 8008092:	02c9      	lsls	r1, r1, #11
 8008094:	430a      	orrs	r2, r1
 8008096:	615a      	str	r2, [r3, #20]
 8008098:	4b6a      	ldr	r3, [pc, #424]	; (8008244 <MX_GPIO_Init+0x214>)
 800809a:	695a      	ldr	r2, [r3, #20]
 800809c:	2380      	movs	r3, #128	; 0x80
 800809e:	02db      	lsls	r3, r3, #11
 80080a0:	4013      	ands	r3, r2
 80080a2:	607b      	str	r3, [r7, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80080a6:	4b67      	ldr	r3, [pc, #412]	; (8008244 <MX_GPIO_Init+0x214>)
 80080a8:	4a66      	ldr	r2, [pc, #408]	; (8008244 <MX_GPIO_Init+0x214>)
 80080aa:	6952      	ldr	r2, [r2, #20]
 80080ac:	2180      	movs	r1, #128	; 0x80
 80080ae:	0349      	lsls	r1, r1, #13
 80080b0:	430a      	orrs	r2, r1
 80080b2:	615a      	str	r2, [r3, #20]
 80080b4:	4b63      	ldr	r3, [pc, #396]	; (8008244 <MX_GPIO_Init+0x214>)
 80080b6:	695a      	ldr	r2, [r3, #20]
 80080b8:	2380      	movs	r3, #128	; 0x80
 80080ba:	035b      	lsls	r3, r3, #13
 80080bc:	4013      	ands	r3, r2
 80080be:	603b      	str	r3, [r7, #0]
 80080c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80080c2:	4b61      	ldr	r3, [pc, #388]	; (8008248 <MX_GPIO_Init+0x218>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	2103      	movs	r1, #3
 80080c8:	0018      	movs	r0, r3
 80080ca:	f7fb f93f 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_8, GPIO_PIN_RESET);
 80080ce:	2382      	movs	r3, #130	; 0x82
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	485e      	ldr	r0, [pc, #376]	; (800824c <MX_GPIO_Init+0x21c>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	0019      	movs	r1, r3
 80080d8:	f7fb f938 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 80080dc:	2390      	movs	r3, #144	; 0x90
 80080de:	0119      	lsls	r1, r3, #4
 80080e0:	2390      	movs	r3, #144	; 0x90
 80080e2:	05db      	lsls	r3, r3, #23
 80080e4:	2200      	movs	r2, #0
 80080e6:	0018      	movs	r0, r3
 80080e8:	f7fb f930 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC4 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80080ec:	2314      	movs	r3, #20
 80080ee:	18fb      	adds	r3, r7, r3
 80080f0:	4a57      	ldr	r2, [pc, #348]	; (8008250 <MX_GPIO_Init+0x220>)
 80080f2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80080f4:	2314      	movs	r3, #20
 80080f6:	18fb      	adds	r3, r7, r3
 80080f8:	2203      	movs	r2, #3
 80080fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fc:	2314      	movs	r3, #20
 80080fe:	18fb      	adds	r3, r7, r3
 8008100:	2200      	movs	r2, #0
 8008102:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008104:	2314      	movs	r3, #20
 8008106:	18fb      	adds	r3, r7, r3
 8008108:	4a52      	ldr	r2, [pc, #328]	; (8008254 <MX_GPIO_Init+0x224>)
 800810a:	0019      	movs	r1, r3
 800810c:	0010      	movs	r0, r2
 800810e:	f7fa ffa9 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008112:	2314      	movs	r3, #20
 8008114:	18fb      	adds	r3, r7, r3
 8008116:	2203      	movs	r2, #3
 8008118:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800811a:	2314      	movs	r3, #20
 800811c:	18fb      	adds	r3, r7, r3
 800811e:	2201      	movs	r2, #1
 8008120:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008122:	2314      	movs	r3, #20
 8008124:	18fb      	adds	r3, r7, r3
 8008126:	2200      	movs	r2, #0
 8008128:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800812a:	2314      	movs	r3, #20
 800812c:	18fb      	adds	r3, r7, r3
 800812e:	2200      	movs	r2, #0
 8008130:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008132:	2314      	movs	r3, #20
 8008134:	18fb      	adds	r3, r7, r3
 8008136:	4a44      	ldr	r2, [pc, #272]	; (8008248 <MX_GPIO_Init+0x218>)
 8008138:	0019      	movs	r1, r3
 800813a:	0010      	movs	r0, r2
 800813c:	f7fa ff92 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6 
                           PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8008140:	2314      	movs	r3, #20
 8008142:	18fb      	adds	r3, r7, r3
 8008144:	4a44      	ldr	r2, [pc, #272]	; (8008258 <MX_GPIO_Init+0x228>)
 8008146:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008148:	2314      	movs	r3, #20
 800814a:	18fb      	adds	r3, r7, r3
 800814c:	2203      	movs	r2, #3
 800814e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008150:	2314      	movs	r3, #20
 8008152:	18fb      	adds	r3, r7, r3
 8008154:	2200      	movs	r2, #0
 8008156:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008158:	2314      	movs	r3, #20
 800815a:	18fa      	adds	r2, r7, r3
 800815c:	2390      	movs	r3, #144	; 0x90
 800815e:	05db      	lsls	r3, r3, #23
 8008160:	0011      	movs	r1, r2
 8008162:	0018      	movs	r0, r3
 8008164:	f7fa ff7e 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008168:	2314      	movs	r3, #20
 800816a:	18fb      	adds	r3, r7, r3
 800816c:	22f0      	movs	r2, #240	; 0xf0
 800816e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008170:	2314      	movs	r3, #20
 8008172:	18fb      	adds	r3, r7, r3
 8008174:	2203      	movs	r2, #3
 8008176:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008178:	2314      	movs	r3, #20
 800817a:	18fb      	adds	r3, r7, r3
 800817c:	2200      	movs	r2, #0
 800817e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008180:	2314      	movs	r3, #20
 8008182:	18fb      	adds	r3, r7, r3
 8008184:	4a30      	ldr	r2, [pc, #192]	; (8008248 <MX_GPIO_Init+0x218>)
 8008186:	0019      	movs	r1, r3
 8008188:	0010      	movs	r0, r2
 800818a:	f7fa ff6b 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 
                           PB12 PB13 PB14 PB15 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 800818e:	2314      	movs	r3, #20
 8008190:	18fb      	adds	r3, r7, r3
 8008192:	4a32      	ldr	r2, [pc, #200]	; (800825c <MX_GPIO_Init+0x22c>)
 8008194:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008196:	2314      	movs	r3, #20
 8008198:	18fb      	adds	r3, r7, r3
 800819a:	2203      	movs	r2, #3
 800819c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819e:	2314      	movs	r3, #20
 80081a0:	18fb      	adds	r3, r7, r3
 80081a2:	2200      	movs	r2, #0
 80081a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081a6:	2314      	movs	r3, #20
 80081a8:	18fb      	adds	r3, r7, r3
 80081aa:	4a28      	ldr	r2, [pc, #160]	; (800824c <MX_GPIO_Init+0x21c>)
 80081ac:	0019      	movs	r1, r3
 80081ae:	0010      	movs	r0, r2
 80081b0:	f7fa ff58 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8;
 80081b4:	2314      	movs	r3, #20
 80081b6:	18fb      	adds	r3, r7, r3
 80081b8:	2282      	movs	r2, #130	; 0x82
 80081ba:	0052      	lsls	r2, r2, #1
 80081bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081be:	2314      	movs	r3, #20
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	2201      	movs	r2, #1
 80081c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c6:	2314      	movs	r3, #20
 80081c8:	18fb      	adds	r3, r7, r3
 80081ca:	2200      	movs	r2, #0
 80081cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081ce:	2314      	movs	r3, #20
 80081d0:	18fb      	adds	r3, r7, r3
 80081d2:	2200      	movs	r2, #0
 80081d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081d6:	2314      	movs	r3, #20
 80081d8:	18fb      	adds	r3, r7, r3
 80081da:	4a1c      	ldr	r2, [pc, #112]	; (800824c <MX_GPIO_Init+0x21c>)
 80081dc:	0019      	movs	r1, r3
 80081de:	0010      	movs	r0, r2
 80081e0:	f7fa ff40 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80081e4:	2314      	movs	r3, #20
 80081e6:	18fb      	adds	r3, r7, r3
 80081e8:	2290      	movs	r2, #144	; 0x90
 80081ea:	0112      	lsls	r2, r2, #4
 80081ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081ee:	2314      	movs	r3, #20
 80081f0:	18fb      	adds	r3, r7, r3
 80081f2:	2201      	movs	r2, #1
 80081f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081f6:	2314      	movs	r3, #20
 80081f8:	18fb      	adds	r3, r7, r3
 80081fa:	2200      	movs	r2, #0
 80081fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081fe:	2314      	movs	r3, #20
 8008200:	18fb      	adds	r3, r7, r3
 8008202:	2200      	movs	r2, #0
 8008204:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008206:	2314      	movs	r3, #20
 8008208:	18fa      	adds	r2, r7, r3
 800820a:	2390      	movs	r3, #144	; 0x90
 800820c:	05db      	lsls	r3, r3, #23
 800820e:	0011      	movs	r1, r2
 8008210:	0018      	movs	r0, r3
 8008212:	f7fa ff27 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008216:	2314      	movs	r3, #20
 8008218:	18fb      	adds	r3, r7, r3
 800821a:	2204      	movs	r2, #4
 800821c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800821e:	2314      	movs	r3, #20
 8008220:	18fb      	adds	r3, r7, r3
 8008222:	2203      	movs	r2, #3
 8008224:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008226:	2314      	movs	r3, #20
 8008228:	18fb      	adds	r3, r7, r3
 800822a:	2200      	movs	r2, #0
 800822c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800822e:	2314      	movs	r3, #20
 8008230:	18fb      	adds	r3, r7, r3
 8008232:	4a0b      	ldr	r2, [pc, #44]	; (8008260 <MX_GPIO_Init+0x230>)
 8008234:	0019      	movs	r1, r3
 8008236:	0010      	movs	r0, r2
 8008238:	f7fa ff14 	bl	8003064 <HAL_GPIO_Init>

}
 800823c:	46c0      	nop			; (mov r8, r8)
 800823e:	46bd      	mov	sp, r7
 8008240:	b00a      	add	sp, #40	; 0x28
 8008242:	bd80      	pop	{r7, pc}
 8008244:	40021000 	.word	0x40021000
 8008248:	48001400 	.word	0x48001400
 800824c:	48000400 	.word	0x48000400
 8008250:	0000ffff 	.word	0x0000ffff
 8008254:	48000800 	.word	0x48000800
 8008258:	000010f1 	.word	0x000010f1
 800825c:	0000fe03 	.word	0x0000fe03
 8008260:	48000c00 	.word	0x48000c00

08008264 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008268:	4b20      	ldr	r3, [pc, #128]	; (80082ec <MX_I2C1_Init+0x88>)
 800826a:	4a21      	ldr	r2, [pc, #132]	; (80082f0 <MX_I2C1_Init+0x8c>)
 800826c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800826e:	4b1f      	ldr	r3, [pc, #124]	; (80082ec <MX_I2C1_Init+0x88>)
 8008270:	4a20      	ldr	r2, [pc, #128]	; (80082f4 <MX_I2C1_Init+0x90>)
 8008272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008274:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <MX_I2C1_Init+0x88>)
 8008276:	2200      	movs	r2, #0
 8008278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800827a:	4b1c      	ldr	r3, [pc, #112]	; (80082ec <MX_I2C1_Init+0x88>)
 800827c:	2201      	movs	r2, #1
 800827e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008280:	4b1a      	ldr	r3, [pc, #104]	; (80082ec <MX_I2C1_Init+0x88>)
 8008282:	2200      	movs	r2, #0
 8008284:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008286:	4b19      	ldr	r3, [pc, #100]	; (80082ec <MX_I2C1_Init+0x88>)
 8008288:	2200      	movs	r2, #0
 800828a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800828c:	4b17      	ldr	r3, [pc, #92]	; (80082ec <MX_I2C1_Init+0x88>)
 800828e:	2200      	movs	r2, #0
 8008290:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008292:	4b16      	ldr	r3, [pc, #88]	; (80082ec <MX_I2C1_Init+0x88>)
 8008294:	2200      	movs	r2, #0
 8008296:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008298:	4b14      	ldr	r3, [pc, #80]	; (80082ec <MX_I2C1_Init+0x88>)
 800829a:	2200      	movs	r2, #0
 800829c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800829e:	4b13      	ldr	r3, [pc, #76]	; (80082ec <MX_I2C1_Init+0x88>)
 80082a0:	0018      	movs	r0, r3
 80082a2:	f7fb f88d 	bl	80033c0 <HAL_I2C_Init>
 80082a6:	1e03      	subs	r3, r0, #0
 80082a8:	d004      	beq.n	80082b4 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 80082aa:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <MX_I2C1_Init+0x94>)
 80082ac:	2142      	movs	r1, #66	; 0x42
 80082ae:	0018      	movs	r0, r3
 80082b0:	f000 fb6d 	bl	800898e <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80082b4:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <MX_I2C1_Init+0x88>)
 80082b6:	2100      	movs	r1, #0
 80082b8:	0018      	movs	r0, r3
 80082ba:	f7fb fd45 	bl	8003d48 <HAL_I2CEx_ConfigAnalogFilter>
 80082be:	1e03      	subs	r3, r0, #0
 80082c0:	d004      	beq.n	80082cc <MX_I2C1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 80082c2:	4b0d      	ldr	r3, [pc, #52]	; (80082f8 <MX_I2C1_Init+0x94>)
 80082c4:	2149      	movs	r1, #73	; 0x49
 80082c6:	0018      	movs	r0, r3
 80082c8:	f000 fb61 	bl	800898e <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80082cc:	4b07      	ldr	r3, [pc, #28]	; (80082ec <MX_I2C1_Init+0x88>)
 80082ce:	2100      	movs	r1, #0
 80082d0:	0018      	movs	r0, r3
 80082d2:	f7fb fd85 	bl	8003de0 <HAL_I2CEx_ConfigDigitalFilter>
 80082d6:	1e03      	subs	r3, r0, #0
 80082d8:	d004      	beq.n	80082e4 <MX_I2C1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 80082da:	4b07      	ldr	r3, [pc, #28]	; (80082f8 <MX_I2C1_Init+0x94>)
 80082dc:	2150      	movs	r1, #80	; 0x50
 80082de:	0018      	movs	r0, r3
 80082e0:	f000 fb55 	bl	800898e <_Error_Handler>
  }

}
 80082e4:	46c0      	nop			; (mov r8, r8)
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	46c0      	nop			; (mov r8, r8)
 80082ec:	20000848 	.word	0x20000848
 80082f0:	40005400 	.word	0x40005400
 80082f4:	2000090e 	.word	0x2000090e
 80082f8:	0800a374 	.word	0x0800a374

080082fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a17      	ldr	r2, [pc, #92]	; (8008368 <HAL_I2C_MspInit+0x6c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d128      	bne.n	8008360 <HAL_I2C_MspInit+0x64>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800830e:	230c      	movs	r3, #12
 8008310:	18fb      	adds	r3, r7, r3
 8008312:	22c0      	movs	r2, #192	; 0xc0
 8008314:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008316:	230c      	movs	r3, #12
 8008318:	18fb      	adds	r3, r7, r3
 800831a:	2212      	movs	r2, #18
 800831c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800831e:	230c      	movs	r3, #12
 8008320:	18fb      	adds	r3, r7, r3
 8008322:	2201      	movs	r2, #1
 8008324:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008326:	230c      	movs	r3, #12
 8008328:	18fb      	adds	r3, r7, r3
 800832a:	2203      	movs	r2, #3
 800832c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800832e:	230c      	movs	r3, #12
 8008330:	18fb      	adds	r3, r7, r3
 8008332:	2201      	movs	r2, #1
 8008334:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008336:	230c      	movs	r3, #12
 8008338:	18fb      	adds	r3, r7, r3
 800833a:	4a0c      	ldr	r2, [pc, #48]	; (800836c <HAL_I2C_MspInit+0x70>)
 800833c:	0019      	movs	r1, r3
 800833e:	0010      	movs	r0, r2
 8008340:	f7fa fe90 	bl	8003064 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008344:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <HAL_I2C_MspInit+0x74>)
 8008346:	4a0a      	ldr	r2, [pc, #40]	; (8008370 <HAL_I2C_MspInit+0x74>)
 8008348:	69d2      	ldr	r2, [r2, #28]
 800834a:	2180      	movs	r1, #128	; 0x80
 800834c:	0389      	lsls	r1, r1, #14
 800834e:	430a      	orrs	r2, r1
 8008350:	61da      	str	r2, [r3, #28]
 8008352:	4b07      	ldr	r3, [pc, #28]	; (8008370 <HAL_I2C_MspInit+0x74>)
 8008354:	69da      	ldr	r2, [r3, #28]
 8008356:	2380      	movs	r3, #128	; 0x80
 8008358:	039b      	lsls	r3, r3, #14
 800835a:	4013      	ands	r3, r2
 800835c:	60bb      	str	r3, [r7, #8]
 800835e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008360:	46c0      	nop			; (mov r8, r8)
 8008362:	46bd      	mov	sp, r7
 8008364:	b008      	add	sp, #32
 8008366:	bd80      	pop	{r7, pc}
 8008368:	40005400 	.word	0x40005400
 800836c:	48000400 	.word	0x48000400
 8008370:	40021000 	.word	0x40021000

08008374 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8008378:	4b0d      	ldr	r3, [pc, #52]	; (80083b0 <MX_IWDG_Init+0x3c>)
 800837a:	4a0e      	ldr	r2, [pc, #56]	; (80083b4 <MX_IWDG_Init+0x40>)
 800837c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800837e:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <MX_IWDG_Init+0x3c>)
 8008380:	2205      	movs	r2, #5
 8008382:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 313;
 8008384:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <MX_IWDG_Init+0x3c>)
 8008386:	223a      	movs	r2, #58	; 0x3a
 8008388:	32ff      	adds	r2, #255	; 0xff
 800838a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 313;
 800838c:	4b08      	ldr	r3, [pc, #32]	; (80083b0 <MX_IWDG_Init+0x3c>)
 800838e:	223a      	movs	r2, #58	; 0x3a
 8008390:	32ff      	adds	r2, #255	; 0xff
 8008392:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8008394:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <MX_IWDG_Init+0x3c>)
 8008396:	0018      	movs	r0, r3
 8008398:	f7fb fd70 	bl	8003e7c <HAL_IWDG_Init>
 800839c:	1e03      	subs	r3, r0, #0
 800839e:	d004      	beq.n	80083aa <MX_IWDG_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 80083a0:	4b05      	ldr	r3, [pc, #20]	; (80083b8 <MX_IWDG_Init+0x44>)
 80083a2:	213b      	movs	r1, #59	; 0x3b
 80083a4:	0018      	movs	r0, r3
 80083a6:	f000 faf2 	bl	800898e <_Error_Handler>
  }

}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	20000894 	.word	0x20000894
 80083b4:	40003000 	.word	0x40003000
 80083b8:	0800a384 	.word	0x0800a384

080083bc <HAL_UART_RxHalfCpltCallback>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a20      	ldr	r2, [pc, #128]	; (800844c <HAL_UART_RxHalfCpltCallback+0x90>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d11a      	bne.n	8008404 <HAL_UART_RxHalfCpltCallback+0x48>
		if (!m_USART1RxBufferLength)
 80083ce:	4b20      	ldr	r3, [pc, #128]	; (8008450 <HAL_UART_RxHalfCpltCallback+0x94>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d107      	bne.n	80083e6 <HAL_UART_RxHalfCpltCallback+0x2a>
			__HAL_TIM_ENABLE(&htim6);
 80083d6:	4b1f      	ldr	r3, [pc, #124]	; (8008454 <HAL_UART_RxHalfCpltCallback+0x98>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a1e      	ldr	r2, [pc, #120]	; (8008454 <HAL_UART_RxHalfCpltCallback+0x98>)
 80083dc:	6812      	ldr	r2, [r2, #0]
 80083de:	6812      	ldr	r2, [r2, #0]
 80083e0:	2101      	movs	r1, #1
 80083e2:	430a      	orrs	r2, r1
 80083e4:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim6, 0);
 80083e6:	4b1b      	ldr	r3, [pc, #108]	; (8008454 <HAL_UART_RxHalfCpltCallback+0x98>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2200      	movs	r2, #0
 80083ec:	625a      	str	r2, [r3, #36]	; 0x24
		m_USART1RxBuffer[m_USART1RxBufferLength++] = m_USART1dmaRxBuffer[0];
 80083ee:	4b18      	ldr	r3, [pc, #96]	; (8008450 <HAL_UART_RxHalfCpltCallback+0x94>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	b2d1      	uxtb	r1, r2
 80083f6:	4a16      	ldr	r2, [pc, #88]	; (8008450 <HAL_UART_RxHalfCpltCallback+0x94>)
 80083f8:	7011      	strb	r1, [r2, #0]
 80083fa:	001a      	movs	r2, r3
 80083fc:	4b16      	ldr	r3, [pc, #88]	; (8008458 <HAL_UART_RxHalfCpltCallback+0x9c>)
 80083fe:	7819      	ldrb	r1, [r3, #0]
 8008400:	4b16      	ldr	r3, [pc, #88]	; (800845c <HAL_UART_RxHalfCpltCallback+0xa0>)
 8008402:	5499      	strb	r1, [r3, r2]
	}

	if (huart->Instance == USART2) {
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a15      	ldr	r2, [pc, #84]	; (8008460 <HAL_UART_RxHalfCpltCallback+0xa4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d11a      	bne.n	8008444 <HAL_UART_RxHalfCpltCallback+0x88>
		if (!m_USART2RxBufferLength)
 800840e:	4b15      	ldr	r3, [pc, #84]	; (8008464 <HAL_UART_RxHalfCpltCallback+0xa8>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d107      	bne.n	8008426 <HAL_UART_RxHalfCpltCallback+0x6a>
			__HAL_TIM_ENABLE(&htim16);
 8008416:	4b14      	ldr	r3, [pc, #80]	; (8008468 <HAL_UART_RxHalfCpltCallback+0xac>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a13      	ldr	r2, [pc, #76]	; (8008468 <HAL_UART_RxHalfCpltCallback+0xac>)
 800841c:	6812      	ldr	r2, [r2, #0]
 800841e:	6812      	ldr	r2, [r2, #0]
 8008420:	2101      	movs	r1, #1
 8008422:	430a      	orrs	r2, r1
 8008424:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim16, 0);
 8008426:	4b10      	ldr	r3, [pc, #64]	; (8008468 <HAL_UART_RxHalfCpltCallback+0xac>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2200      	movs	r2, #0
 800842c:	625a      	str	r2, [r3, #36]	; 0x24
		m_USART2RxBuffer[m_USART2RxBufferLength++] = m_USART2dmaRxBuffer[0];
 800842e:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <HAL_UART_RxHalfCpltCallback+0xa8>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	b2d1      	uxtb	r1, r2
 8008436:	4a0b      	ldr	r2, [pc, #44]	; (8008464 <HAL_UART_RxHalfCpltCallback+0xa8>)
 8008438:	7011      	strb	r1, [r2, #0]
 800843a:	001a      	movs	r2, r3
 800843c:	4b0b      	ldr	r3, [pc, #44]	; (800846c <HAL_UART_RxHalfCpltCallback+0xb0>)
 800843e:	7819      	ldrb	r1, [r3, #0]
 8008440:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <HAL_UART_RxHalfCpltCallback+0xb4>)
 8008442:	5499      	strb	r1, [r3, r2]
	}
}
 8008444:	46c0      	nop			; (mov r8, r8)
 8008446:	46bd      	mov	sp, r7
 8008448:	b002      	add	sp, #8
 800844a:	bd80      	pop	{r7, pc}
 800844c:	40013800 	.word	0x40013800
 8008450:	200005d3 	.word	0x200005d3
 8008454:	2000093c 	.word	0x2000093c
 8008458:	200003d0 	.word	0x200003d0
 800845c:	200003d4 	.word	0x200003d4
 8008460:	40004400 	.word	0x40004400
 8008464:	200007d7 	.word	0x200007d7
 8008468:	20000a3c 	.word	0x20000a3c
 800846c:	200005d4 	.word	0x200005d4
 8008470:	200005d8 	.word	0x200005d8

08008474 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a20      	ldr	r2, [pc, #128]	; (8008504 <HAL_UART_RxCpltCallback+0x90>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d11a      	bne.n	80084bc <HAL_UART_RxCpltCallback+0x48>
		if (!m_USART1RxBufferLength)
 8008486:	4b20      	ldr	r3, [pc, #128]	; (8008508 <HAL_UART_RxCpltCallback+0x94>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d107      	bne.n	800849e <HAL_UART_RxCpltCallback+0x2a>
			__HAL_TIM_ENABLE(&htim6);
 800848e:	4b1f      	ldr	r3, [pc, #124]	; (800850c <HAL_UART_RxCpltCallback+0x98>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a1e      	ldr	r2, [pc, #120]	; (800850c <HAL_UART_RxCpltCallback+0x98>)
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	6812      	ldr	r2, [r2, #0]
 8008498:	2101      	movs	r1, #1
 800849a:	430a      	orrs	r2, r1
 800849c:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim6, 0);
 800849e:	4b1b      	ldr	r3, [pc, #108]	; (800850c <HAL_UART_RxCpltCallback+0x98>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2200      	movs	r2, #0
 80084a4:	625a      	str	r2, [r3, #36]	; 0x24
		m_USART1RxBuffer[m_USART1RxBufferLength++] = m_USART1dmaRxBuffer[1];
 80084a6:	4b18      	ldr	r3, [pc, #96]	; (8008508 <HAL_UART_RxCpltCallback+0x94>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	b2d1      	uxtb	r1, r2
 80084ae:	4a16      	ldr	r2, [pc, #88]	; (8008508 <HAL_UART_RxCpltCallback+0x94>)
 80084b0:	7011      	strb	r1, [r2, #0]
 80084b2:	001a      	movs	r2, r3
 80084b4:	4b16      	ldr	r3, [pc, #88]	; (8008510 <HAL_UART_RxCpltCallback+0x9c>)
 80084b6:	7859      	ldrb	r1, [r3, #1]
 80084b8:	4b16      	ldr	r3, [pc, #88]	; (8008514 <HAL_UART_RxCpltCallback+0xa0>)
 80084ba:	5499      	strb	r1, [r3, r2]
	}

	if (huart->Instance == USART2) {
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a15      	ldr	r2, [pc, #84]	; (8008518 <HAL_UART_RxCpltCallback+0xa4>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d11a      	bne.n	80084fc <HAL_UART_RxCpltCallback+0x88>
		if (!m_USART2RxBufferLength)
 80084c6:	4b15      	ldr	r3, [pc, #84]	; (800851c <HAL_UART_RxCpltCallback+0xa8>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d107      	bne.n	80084de <HAL_UART_RxCpltCallback+0x6a>
			__HAL_TIM_ENABLE(&htim16);
 80084ce:	4b14      	ldr	r3, [pc, #80]	; (8008520 <HAL_UART_RxCpltCallback+0xac>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a13      	ldr	r2, [pc, #76]	; (8008520 <HAL_UART_RxCpltCallback+0xac>)
 80084d4:	6812      	ldr	r2, [r2, #0]
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	2101      	movs	r1, #1
 80084da:	430a      	orrs	r2, r1
 80084dc:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim16, 0);
 80084de:	4b10      	ldr	r3, [pc, #64]	; (8008520 <HAL_UART_RxCpltCallback+0xac>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2200      	movs	r2, #0
 80084e4:	625a      	str	r2, [r3, #36]	; 0x24
		m_USART2RxBuffer[m_USART2RxBufferLength++] = m_USART2dmaRxBuffer[1];
 80084e6:	4b0d      	ldr	r3, [pc, #52]	; (800851c <HAL_UART_RxCpltCallback+0xa8>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	b2d1      	uxtb	r1, r2
 80084ee:	4a0b      	ldr	r2, [pc, #44]	; (800851c <HAL_UART_RxCpltCallback+0xa8>)
 80084f0:	7011      	strb	r1, [r2, #0]
 80084f2:	001a      	movs	r2, r3
 80084f4:	4b0b      	ldr	r3, [pc, #44]	; (8008524 <HAL_UART_RxCpltCallback+0xb0>)
 80084f6:	7859      	ldrb	r1, [r3, #1]
 80084f8:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <HAL_UART_RxCpltCallback+0xb4>)
 80084fa:	5499      	strb	r1, [r3, r2]
	}
}
 80084fc:	46c0      	nop			; (mov r8, r8)
 80084fe:	46bd      	mov	sp, r7
 8008500:	b002      	add	sp, #8
 8008502:	bd80      	pop	{r7, pc}
 8008504:	40013800 	.word	0x40013800
 8008508:	200005d3 	.word	0x200005d3
 800850c:	2000093c 	.word	0x2000093c
 8008510:	200003d0 	.word	0x200003d0
 8008514:	200003d4 	.word	0x200003d4
 8008518:	40004400 	.word	0x40004400
 800851c:	200007d7 	.word	0x200007d7
 8008520:	20000a3c 	.word	0x20000a3c
 8008524:	200005d4 	.word	0x200005d4
 8008528:	200005d8 	.word	0x200005d8

0800852c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	0002      	movs	r2, r0
 8008534:	1dbb      	adds	r3, r7, #6
 8008536:	801a      	strh	r2, [r3, #0]
	if (pin == TIM1BCS->TerminalGPIO->Pin) {
 8008538:	4b1f      	ldr	r3, [pc, #124]	; (80085b8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	889b      	ldrh	r3, [r3, #4]
 8008540:	1dba      	adds	r2, r7, #6
 8008542:	8812      	ldrh	r2, [r2, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d132      	bne.n	80085ae <HAL_GPIO_EXTI_Callback+0x82>
		__HAL_TIM_DISABLE(TIM1BCS->PWMTIM->ComplementTIM);
 8008548:	4b1b      	ldr	r3, [pc, #108]	; (80085b8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	4a19      	ldr	r2, [pc, #100]	; (80085bc <HAL_GPIO_EXTI_Callback+0x90>)
 8008556:	4013      	ands	r3, r2
 8008558:	d116      	bne.n	8008588 <HAL_GPIO_EXTI_Callback+0x5c>
 800855a:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	4a16      	ldr	r2, [pc, #88]	; (80085c0 <HAL_GPIO_EXTI_Callback+0x94>)
 8008568:	4013      	ands	r3, r2
 800856a:	d10d      	bne.n	8008588 <HAL_GPIO_EXTI_Callback+0x5c>
 800856c:	4b12      	ldr	r3, [pc, #72]	; (80085b8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a10      	ldr	r2, [pc, #64]	; (80085b8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8008578:	6812      	ldr	r2, [r2, #0]
 800857a:	6812      	ldr	r2, [r2, #0]
 800857c:	6892      	ldr	r2, [r2, #8]
 800857e:	6812      	ldr	r2, [r2, #0]
 8008580:	6812      	ldr	r2, [r2, #0]
 8008582:	2101      	movs	r1, #1
 8008584:	438a      	bics	r2, r1
 8008586:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(TIM1BCS->DisableGPIO->GPIO, TIM1BCS->DisableGPIO->Pin,
 8008588:	4b0b      	ldr	r3, [pc, #44]	; (80085b8 <HAL_GPIO_EXTI_Callback+0x8c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	4b09      	ldr	r3, [pc, #36]	; (80085b8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	889b      	ldrh	r3, [r3, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	0019      	movs	r1, r3
 800859c:	f7fa fed6 	bl	800334c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		__HAL_TIM_SET_COUNTER(TIM1BCS->PWMTIM->ComplementTIM, 0);
 80085a0:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2200      	movs	r2, #0
 80085ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 80085ae:	46c0      	nop			; (mov r8, r8)
 80085b0:	46bd      	mov	sp, r7
 80085b2:	b002      	add	sp, #8
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	46c0      	nop			; (mov r8, r8)
 80085b8:	20000830 	.word	0x20000830
 80085bc:	00001111 	.word	0x00001111
 80085c0:	00000444 	.word	0x00000444

080085c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a2f      	ldr	r2, [pc, #188]	; (8008690 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d104      	bne.n	80085e0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 80085d6:	4b2f      	ldr	r3, [pc, #188]	; (8008694 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a2f      	ldr	r2, [pc, #188]	; (8008698 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80085dc:	601a      	str	r2, [r3, #0]
		return;
 80085de:	e053      	b.n	8008688 <HAL_TIM_PeriodElapsedCallback+0xc4>
	}

	if (htim->Instance == TIM6) {
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a2d      	ldr	r2, [pc, #180]	; (800869c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d11b      	bne.n	8008622 <HAL_TIM_PeriodElapsedCallback+0x5e>
		uint8_t resultLength;

		if (ProcessCommand(m_USART1RxBuffer, m_USART1RxBufferLength, m_USART1TxBuffer,
 80085ea:	4b2d      	ldr	r3, [pc, #180]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80085ec:	7819      	ldrb	r1, [r3, #0]
 80085ee:	230f      	movs	r3, #15
 80085f0:	18fb      	adds	r3, r7, r3
 80085f2:	4a2c      	ldr	r2, [pc, #176]	; (80086a4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80085f4:	482c      	ldr	r0, [pc, #176]	; (80086a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80085f6:	f7fe ff27 	bl	8007448 <ProcessCommand>
 80085fa:	1e03      	subs	r3, r0, #0
 80085fc:	d003      	beq.n	8008606 <HAL_TIM_PeriodElapsedCallback+0x42>
				&resultLength)) {
			m_USART1RxBufferLength = 0;
 80085fe:	4b28      	ldr	r3, [pc, #160]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
			return;
 8008604:	e040      	b.n	8008688 <HAL_TIM_PeriodElapsedCallback+0xc4>
		}

		HAL_UART_Transmit_DMA(&huart1, m_USART1TxBuffer, resultLength);
 8008606:	230f      	movs	r3, #15
 8008608:	18fb      	adds	r3, r7, r3
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	b29a      	uxth	r2, r3
 800860e:	4925      	ldr	r1, [pc, #148]	; (80086a4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8008610:	4b26      	ldr	r3, [pc, #152]	; (80086ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8008612:	0018      	movs	r0, r3
 8008614:	f7fd f934 	bl	8005880 <HAL_UART_Transmit_DMA>
		m_USART1RxBufferLength = 0;
 8008618:	4b21      	ldr	r3, [pc, #132]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800861a:	2200      	movs	r2, #0
 800861c:	701a      	strb	r2, [r3, #0]
		return;
 800861e:	46c0      	nop			; (mov r8, r8)
 8008620:	e032      	b.n	8008688 <HAL_TIM_PeriodElapsedCallback+0xc4>
	}

	if (htim->Instance == TIM16) {
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a22      	ldr	r2, [pc, #136]	; (80086b0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d11b      	bne.n	8008664 <HAL_TIM_PeriodElapsedCallback+0xa0>
		uint8_t resultLength;

		if (ProcessCommand(m_USART2RxBuffer, m_USART2RxBufferLength, m_USART2TxBuffer,
 800862c:	4b21      	ldr	r3, [pc, #132]	; (80086b4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800862e:	7819      	ldrb	r1, [r3, #0]
 8008630:	230e      	movs	r3, #14
 8008632:	18fb      	adds	r3, r7, r3
 8008634:	4a20      	ldr	r2, [pc, #128]	; (80086b8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8008636:	4821      	ldr	r0, [pc, #132]	; (80086bc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8008638:	f7fe ff06 	bl	8007448 <ProcessCommand>
 800863c:	1e03      	subs	r3, r0, #0
 800863e:	d003      	beq.n	8008648 <HAL_TIM_PeriodElapsedCallback+0x84>
				&resultLength)) {
			m_USART2RxBufferLength = 0;
 8008640:	4b1c      	ldr	r3, [pc, #112]	; (80086b4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8008642:	2200      	movs	r2, #0
 8008644:	701a      	strb	r2, [r3, #0]
			return;
 8008646:	e01f      	b.n	8008688 <HAL_TIM_PeriodElapsedCallback+0xc4>
		}

		HAL_UART_Transmit_DMA(&huart2, m_USART2TxBuffer, resultLength);
 8008648:	230e      	movs	r3, #14
 800864a:	18fb      	adds	r3, r7, r3
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	b29a      	uxth	r2, r3
 8008650:	4919      	ldr	r1, [pc, #100]	; (80086b8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8008652:	4b1b      	ldr	r3, [pc, #108]	; (80086c0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8008654:	0018      	movs	r0, r3
 8008656:	f7fd f913 	bl	8005880 <HAL_UART_Transmit_DMA>
		m_USART2RxBufferLength = 0;
 800865a:	4b16      	ldr	r3, [pc, #88]	; (80086b4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800865c:	2200      	movs	r2, #0
 800865e:	701a      	strb	r2, [r3, #0]
		return;
 8008660:	46c0      	nop			; (mov r8, r8)
 8008662:	e011      	b.n	8008688 <HAL_TIM_PeriodElapsedCallback+0xc4>
	}

	if (htim->Instance == TIM1) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a16      	ldr	r2, [pc, #88]	; (80086c4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d10c      	bne.n	8008688 <HAL_TIM_PeriodElapsedCallback+0xc4>
		HAL_GPIO_WritePin(TIM1BCS->DisableGPIO->GPIO, TIM1BCS->DisableGPIO->Pin,
 800866e:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	889b      	ldrh	r3, [r3, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	0019      	movs	r1, r3
 8008682:	f7fa fe63 	bl	800334c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		return;
 8008686:	46c0      	nop			; (mov r8, r8)
	}
}
 8008688:	46bd      	mov	sp, r7
 800868a:	b004      	add	sp, #16
 800868c:	bd80      	pop	{r7, pc}
 800868e:	46c0      	nop			; (mov r8, r8)
 8008690:	40002000 	.word	0x40002000
 8008694:	20000894 	.word	0x20000894
 8008698:	0000aaaa 	.word	0x0000aaaa
 800869c:	40001000 	.word	0x40001000
 80086a0:	200005d3 	.word	0x200005d3
 80086a4:	200004d4 	.word	0x200004d4
 80086a8:	200003d4 	.word	0x200003d4
 80086ac:	20000b8c 	.word	0x20000b8c
 80086b0:	40014400 	.word	0x40014400
 80086b4:	200007d7 	.word	0x200007d7
 80086b8:	200006d8 	.word	0x200006d8
 80086bc:	200005d8 	.word	0x200005d8
 80086c0:	20000bfc 	.word	0x20000bfc
 80086c4:	40012c00 	.word	0x40012c00
 80086c8:	20000830 	.word	0x20000830

080086cc <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80086d0:	f7f9 ff7e 	bl	80025d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80086d4:	f000 f890 	bl	80087f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80086d8:	f7ff fcaa 	bl	8008030 <MX_GPIO_Init>
  MX_DMA_Init();
 80086dc:	f7ff fc92 	bl	8008004 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80086e0:	f001 fbee 	bl	8009ec0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80086e4:	f001 fa42 	bl	8009b6c <MX_TIM6_Init>
  MX_TIM3_Init();
 80086e8:	f001 f9d6 	bl	8009a98 <MX_TIM3_Init>
  MX_TIM2_Init();
 80086ec:	f001 f96a 	bl	80099c4 <MX_TIM2_Init>
  MX_I2C1_Init();
 80086f0:	f7ff fdb8 	bl	8008264 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80086f4:	f001 fc1a 	bl	8009f2c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80086f8:	f001 f902 	bl	8009900 <MX_TIM1_Init>
  MX_TIM14_Init();
 80086fc:	f001 fa7e 	bl	8009bfc <MX_TIM14_Init>
  MX_IWDG_Init();
 8008700:	f7ff fe38 	bl	8008374 <MX_IWDG_Init>
  MX_TIM16_Init();
 8008704:	f001 faa6 	bl	8009c54 <MX_TIM16_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8008708:	f000 f8fc 	bl	8008904 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  InitializeCommands();
 800870c:	f7ff fb9e 	bl	8007e4c <InitializeCommands>
  LoadDeviceConfig();
 8008710:	f7ff f80a 	bl	8007728 <LoadDeviceConfig>

  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 8008714:	4b2e      	ldr	r3, [pc, #184]	; (80087d0 <main+0x104>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2202      	movs	r2, #2
 800871a:	4252      	negs	r2, r2
 800871c:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 800871e:	4b2c      	ldr	r3, [pc, #176]	; (80087d0 <main+0x104>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a2b      	ldr	r2, [pc, #172]	; (80087d0 <main+0x104>)
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	68d2      	ldr	r2, [r2, #12]
 8008728:	2101      	movs	r1, #1
 800872a:	430a      	orrs	r2, r1
 800872c:	60da      	str	r2, [r3, #12]

  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 800872e:	4b29      	ldr	r3, [pc, #164]	; (80087d4 <main+0x108>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2202      	movs	r2, #2
 8008734:	4252      	negs	r2, r2
 8008736:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
 8008738:	4b26      	ldr	r3, [pc, #152]	; (80087d4 <main+0x108>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a25      	ldr	r2, [pc, #148]	; (80087d4 <main+0x108>)
 800873e:	6812      	ldr	r2, [r2, #0]
 8008740:	68d2      	ldr	r2, [r2, #12]
 8008742:	2101      	movs	r1, #1
 8008744:	430a      	orrs	r2, r1
 8008746:	60da      	str	r2, [r3, #12]

  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 8008748:	4b23      	ldr	r3, [pc, #140]	; (80087d8 <main+0x10c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2202      	movs	r2, #2
 800874e:	4252      	negs	r2, r2
 8008750:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8008752:	4b21      	ldr	r3, [pc, #132]	; (80087d8 <main+0x10c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a20      	ldr	r2, [pc, #128]	; (80087d8 <main+0x10c>)
 8008758:	6812      	ldr	r2, [r2, #0]
 800875a:	68d2      	ldr	r2, [r2, #12]
 800875c:	2101      	movs	r1, #1
 800875e:	430a      	orrs	r2, r1
 8008760:	60da      	str	r2, [r3, #12]

  __HAL_TIM_CLEAR_FLAG(&htim14, TIM_FLAG_UPDATE);
 8008762:	4b1e      	ldr	r3, [pc, #120]	; (80087dc <main+0x110>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2202      	movs	r2, #2
 8008768:	4252      	negs	r2, r2
 800876a:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim14, TIM_IT_UPDATE);
 800876c:	4b1b      	ldr	r3, [pc, #108]	; (80087dc <main+0x110>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a1a      	ldr	r2, [pc, #104]	; (80087dc <main+0x110>)
 8008772:	6812      	ldr	r2, [r2, #0]
 8008774:	68d2      	ldr	r2, [r2, #12]
 8008776:	2101      	movs	r1, #1
 8008778:	430a      	orrs	r2, r1
 800877a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim14);
 800877c:	4b17      	ldr	r3, [pc, #92]	; (80087dc <main+0x110>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a16      	ldr	r2, [pc, #88]	; (80087dc <main+0x110>)
 8008782:	6812      	ldr	r2, [r2, #0]
 8008784:	6812      	ldr	r2, [r2, #0]
 8008786:	2101      	movs	r1, #1
 8008788:	430a      	orrs	r2, r1
 800878a:	601a      	str	r2, [r3, #0]


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800878c:	4b14      	ldr	r3, [pc, #80]	; (80087e0 <main+0x114>)
 800878e:	2100      	movs	r1, #0
 8008790:	0018      	movs	r0, r3
 8008792:	f7fc f94d 	bl	8004a30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8008796:	4b12      	ldr	r3, [pc, #72]	; (80087e0 <main+0x114>)
 8008798:	2104      	movs	r1, #4
 800879a:	0018      	movs	r0, r3
 800879c:	f7fc f948 	bl	8004a30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80087a0:	4b10      	ldr	r3, [pc, #64]	; (80087e4 <main+0x118>)
 80087a2:	2100      	movs	r1, #0
 80087a4:	0018      	movs	r0, r3
 80087a6:	f7fc f943 	bl	8004a30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80087aa:	4b0e      	ldr	r3, [pc, #56]	; (80087e4 <main+0x118>)
 80087ac:	2104      	movs	r1, #4
 80087ae:	0018      	movs	r0, r3
 80087b0:	f7fc f93e 	bl	8004a30 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart1, (uint8_t *) m_USART1dmaRxBuffer, 2);
 80087b4:	490c      	ldr	r1, [pc, #48]	; (80087e8 <main+0x11c>)
 80087b6:	4b0d      	ldr	r3, [pc, #52]	; (80087ec <main+0x120>)
 80087b8:	2202      	movs	r2, #2
 80087ba:	0018      	movs	r0, r3
 80087bc:	f7fd f8e0 	bl	8005980 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, (uint8_t *) m_USART2dmaRxBuffer, 2);
 80087c0:	490b      	ldr	r1, [pc, #44]	; (80087f0 <main+0x124>)
 80087c2:	4b0c      	ldr	r3, [pc, #48]	; (80087f4 <main+0x128>)
 80087c4:	2202      	movs	r2, #2
 80087c6:	0018      	movs	r0, r3
 80087c8:	f7fd f8da 	bl	8005980 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80087cc:	e7fe      	b.n	80087cc <main+0x100>
 80087ce:	46c0      	nop			; (mov r8, r8)
 80087d0:	2000093c 	.word	0x2000093c
 80087d4:	20000a3c 	.word	0x20000a3c
 80087d8:	2000097c 	.word	0x2000097c
 80087dc:	200009fc 	.word	0x200009fc
 80087e0:	200009bc 	.word	0x200009bc
 80087e4:	200008fc 	.word	0x200008fc
 80087e8:	200003d0 	.word	0x200003d0
 80087ec:	20000b8c 	.word	0x20000b8c
 80087f0:	200005d4 	.word	0x200005d4
 80087f4:	20000bfc 	.word	0x20000bfc

080087f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b096      	sub	sp, #88	; 0x58
 80087fc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80087fe:	2328      	movs	r3, #40	; 0x28
 8008800:	18fb      	adds	r3, r7, r3
 8008802:	220a      	movs	r2, #10
 8008804:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008806:	2328      	movs	r3, #40	; 0x28
 8008808:	18fb      	adds	r3, r7, r3
 800880a:	2201      	movs	r2, #1
 800880c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800880e:	2328      	movs	r3, #40	; 0x28
 8008810:	18fb      	adds	r3, r7, r3
 8008812:	2210      	movs	r2, #16
 8008814:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008816:	2328      	movs	r3, #40	; 0x28
 8008818:	18fb      	adds	r3, r7, r3
 800881a:	2201      	movs	r2, #1
 800881c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800881e:	2328      	movs	r3, #40	; 0x28
 8008820:	18fb      	adds	r3, r7, r3
 8008822:	2202      	movs	r2, #2
 8008824:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008826:	2328      	movs	r3, #40	; 0x28
 8008828:	18fb      	adds	r3, r7, r3
 800882a:	2200      	movs	r2, #0
 800882c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800882e:	2328      	movs	r3, #40	; 0x28
 8008830:	18fb      	adds	r3, r7, r3
 8008832:	22a0      	movs	r2, #160	; 0xa0
 8008834:	0392      	lsls	r2, r2, #14
 8008836:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8008838:	2328      	movs	r3, #40	; 0x28
 800883a:	18fb      	adds	r3, r7, r3
 800883c:	2200      	movs	r2, #0
 800883e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008840:	2328      	movs	r3, #40	; 0x28
 8008842:	18fb      	adds	r3, r7, r3
 8008844:	0018      	movs	r0, r3
 8008846:	f7fb fb63 	bl	8003f10 <HAL_RCC_OscConfig>
 800884a:	1e03      	subs	r3, r0, #0
 800884c:	d006      	beq.n	800885c <SystemClock_Config+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 800884e:	238f      	movs	r3, #143	; 0x8f
 8008850:	005a      	lsls	r2, r3, #1
 8008852:	4b2b      	ldr	r3, [pc, #172]	; (8008900 <SystemClock_Config+0x108>)
 8008854:	0011      	movs	r1, r2
 8008856:	0018      	movs	r0, r3
 8008858:	f000 f899 	bl	800898e <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800885c:	2318      	movs	r3, #24
 800885e:	18fb      	adds	r3, r7, r3
 8008860:	2207      	movs	r2, #7
 8008862:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008864:	2318      	movs	r3, #24
 8008866:	18fb      	adds	r3, r7, r3
 8008868:	2202      	movs	r2, #2
 800886a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800886c:	2318      	movs	r3, #24
 800886e:	18fb      	adds	r3, r7, r3
 8008870:	2200      	movs	r2, #0
 8008872:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008874:	2318      	movs	r3, #24
 8008876:	18fb      	adds	r3, r7, r3
 8008878:	2200      	movs	r2, #0
 800887a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800887c:	2318      	movs	r3, #24
 800887e:	18fb      	adds	r3, r7, r3
 8008880:	2101      	movs	r1, #1
 8008882:	0018      	movs	r0, r3
 8008884:	f7fb fe38 	bl	80044f8 <HAL_RCC_ClockConfig>
 8008888:	1e03      	subs	r3, r0, #0
 800888a:	d007      	beq.n	800889c <SystemClock_Config+0xa4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800888c:	232c      	movs	r3, #44	; 0x2c
 800888e:	33ff      	adds	r3, #255	; 0xff
 8008890:	001a      	movs	r2, r3
 8008892:	4b1b      	ldr	r3, [pc, #108]	; (8008900 <SystemClock_Config+0x108>)
 8008894:	0011      	movs	r1, r2
 8008896:	0018      	movs	r0, r3
 8008898:	f000 f879 	bl	800898e <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800889c:	1d3b      	adds	r3, r7, #4
 800889e:	2221      	movs	r2, #33	; 0x21
 80088a0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80088a2:	1d3b      	adds	r3, r7, #4
 80088a4:	2200      	movs	r2, #0
 80088a6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80088a8:	1d3b      	adds	r3, r7, #4
 80088aa:	2200      	movs	r2, #0
 80088ac:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80088ae:	1d3b      	adds	r3, r7, #4
 80088b0:	0018      	movs	r0, r3
 80088b2:	f7fb ff87 	bl	80047c4 <HAL_RCCEx_PeriphCLKConfig>
 80088b6:	1e03      	subs	r3, r0, #0
 80088b8:	d007      	beq.n	80088ca <SystemClock_Config+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
 80088ba:	2334      	movs	r3, #52	; 0x34
 80088bc:	33ff      	adds	r3, #255	; 0xff
 80088be:	001a      	movs	r2, r3
 80088c0:	4b0f      	ldr	r3, [pc, #60]	; (8008900 <SystemClock_Config+0x108>)
 80088c2:	0011      	movs	r1, r2
 80088c4:	0018      	movs	r0, r3
 80088c6:	f000 f862 	bl	800898e <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80088ca:	f7fb ff5b 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 80088ce:	0002      	movs	r2, r0
 80088d0:	23fa      	movs	r3, #250	; 0xfa
 80088d2:	0099      	lsls	r1, r3, #2
 80088d4:	0010      	movs	r0, r2
 80088d6:	f7f7 fc17 	bl	8000108 <__udivsi3>
 80088da:	0003      	movs	r3, r0
 80088dc:	0018      	movs	r0, r3
 80088de:	f7f9 ffa9 	bl	8002834 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80088e2:	2004      	movs	r0, #4
 80088e4:	f7f9 ffb4 	bl	8002850 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80088e8:	2301      	movs	r3, #1
 80088ea:	425b      	negs	r3, r3
 80088ec:	2200      	movs	r2, #0
 80088ee:	2100      	movs	r1, #0
 80088f0:	0018      	movs	r0, r3
 80088f2:	f7f9 ff79 	bl	80027e8 <HAL_NVIC_SetPriority>
}
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	46bd      	mov	sp, r7
 80088fa:	b016      	add	sp, #88	; 0x58
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	46c0      	nop			; (mov r8, r8)
 8008900:	0800a394 	.word	0x0800a394

08008904 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8008908:	2200      	movs	r2, #0
 800890a:	2101      	movs	r1, #1
 800890c:	200a      	movs	r0, #10
 800890e:	f7f9 ff6b 	bl	80027e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8008912:	200a      	movs	r0, #10
 8008914:	f7f9 ff7e 	bl	8002814 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8008918:	2200      	movs	r2, #0
 800891a:	2102      	movs	r1, #2
 800891c:	2011      	movs	r0, #17
 800891e:	f7f9 ff63 	bl	80027e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008922:	2011      	movs	r0, #17
 8008924:	f7f9 ff76 	bl	8002814 <HAL_NVIC_EnableIRQ>
  /* TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8008928:	2200      	movs	r2, #0
 800892a:	2100      	movs	r1, #0
 800892c:	2013      	movs	r0, #19
 800892e:	f7f9 ff5b 	bl	80027e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8008932:	2013      	movs	r0, #19
 8008934:	f7f9 ff6e 	bl	8002814 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8008938:	2200      	movs	r2, #0
 800893a:	2103      	movs	r1, #3
 800893c:	201b      	movs	r0, #27
 800893e:	f7f9 ff53 	bl	80027e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008942:	201b      	movs	r0, #27
 8008944:	f7f9 ff66 	bl	8002814 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8008948:	2200      	movs	r2, #0
 800894a:	2103      	movs	r1, #3
 800894c:	201c      	movs	r0, #28
 800894e:	f7f9 ff4b 	bl	80027e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008952:	201c      	movs	r0, #28
 8008954:	f7f9 ff5e 	bl	8002814 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 1, 0);
 8008958:	2200      	movs	r2, #0
 800895a:	2101      	movs	r1, #1
 800895c:	200b      	movs	r0, #11
 800895e:	f7f9 ff43 	bl	80027e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8008962:	200b      	movs	r0, #11
 8008964:	f7f9 ff56 	bl	8002814 <HAL_NVIC_EnableIRQ>
  /* TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM16_IRQn, 2, 0);
 8008968:	2200      	movs	r2, #0
 800896a:	2102      	movs	r1, #2
 800896c:	2015      	movs	r0, #21
 800896e:	f7f9 ff3b 	bl	80027e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8008972:	2015      	movs	r0, #21
 8008974:	f7f9 ff4e 	bl	8002814 <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_UP_TRG_COM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 1, 0);
 8008978:	2200      	movs	r2, #0
 800897a:	2101      	movs	r1, #1
 800897c:	200d      	movs	r0, #13
 800897e:	f7f9 ff33 	bl	80027e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8008982:	200d      	movs	r0, #13
 8008984:	f7f9 ff46 	bl	8002814 <HAL_NVIC_EnableIRQ>
}
 8008988:	46c0      	nop			; (mov r8, r8)
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b082      	sub	sp, #8
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8008998:	e7fe      	b.n	8008998 <_Error_Handler+0xa>
	...

0800899c <IsFunctionCode>:

static const uint8_t m_funcEnumValues[] = { READ, WRITE };

static uint8_t IsFunctionCode(uint8_t value);

static uint8_t IsFunctionCode(uint8_t value) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	0002      	movs	r2, r0
 80089a4:	1dfb      	adds	r3, r7, #7
 80089a6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < FUNCTIONS_NUMBER; i++)
 80089a8:	230f      	movs	r3, #15
 80089aa:	18fb      	adds	r3, r7, r3
 80089ac:	2200      	movs	r2, #0
 80089ae:	701a      	strb	r2, [r3, #0]
 80089b0:	e011      	b.n	80089d6 <IsFunctionCode+0x3a>
		if (m_funcEnumValues[i] == value)
 80089b2:	230f      	movs	r3, #15
 80089b4:	18fb      	adds	r3, r7, r3
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	4a0c      	ldr	r2, [pc, #48]	; (80089ec <IsFunctionCode+0x50>)
 80089ba:	5cd3      	ldrb	r3, [r2, r3]
 80089bc:	1dfa      	adds	r2, r7, #7
 80089be:	7812      	ldrb	r2, [r2, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d101      	bne.n	80089c8 <IsFunctionCode+0x2c>
			return ALL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	e00c      	b.n	80089e2 <IsFunctionCode+0x46>
	for (uint8_t i = 0; i < FUNCTIONS_NUMBER; i++)
 80089c8:	230f      	movs	r3, #15
 80089ca:	18fb      	adds	r3, r7, r3
 80089cc:	781a      	ldrb	r2, [r3, #0]
 80089ce:	230f      	movs	r3, #15
 80089d0:	18fb      	adds	r3, r7, r3
 80089d2:	3201      	adds	r2, #1
 80089d4:	701a      	strb	r2, [r3, #0]
 80089d6:	230f      	movs	r3, #15
 80089d8:	18fb      	adds	r3, r7, r3
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d9e8      	bls.n	80089b2 <IsFunctionCode+0x16>

	return ANY_ERROR;
 80089e0:	23ff      	movs	r3, #255	; 0xff
}
 80089e2:	0018      	movs	r0, r3
 80089e4:	46bd      	mov	sp, r7
 80089e6:	b004      	add	sp, #16
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	0800a4c4 	.word	0x0800a4c4

080089f0 <EncodeReplyWrite>:

void EncodeReplyWrite(struct ModbusRecvMessage *mbusMessage, uint8_t *rawReply,
		uint8_t *rawReplyLength) {
 80089f0:	b590      	push	{r4, r7, lr}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
	rawReply[RP_SLAVE_ID_INDEX] = mbusMessage->Slave;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	781a      	ldrb	r2, [r3, #0]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	701a      	strb	r2, [r3, #0]
	rawReply[RP_FUNCTION_INDEX] = mbusMessage->Function;
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	3301      	adds	r3, #1
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	7852      	ldrb	r2, [r2, #1]
 8008a0c:	701a      	strb	r2, [r3, #0]
	rawReply[RP_W_COMMAND_INDEX] = mbusMessage->Command.Bytes[0];
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	3302      	adds	r3, #2
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	7892      	ldrb	r2, [r2, #2]
 8008a16:	701a      	strb	r2, [r3, #0]
	rawReply[RP_W_COMMAND_INDEX + 1] = mbusMessage->Command.Bytes[1];
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	3303      	adds	r3, #3
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	78d2      	ldrb	r2, [r2, #3]
 8008a20:	701a      	strb	r2, [r3, #0]

	for (uint16_t i = 0; i < mbusMessage->DataLength; i++)
 8008a22:	2316      	movs	r3, #22
 8008a24:	18fb      	adds	r3, r7, r3
 8008a26:	2200      	movs	r2, #0
 8008a28:	801a      	strh	r2, [r3, #0]
 8008a2a:	e015      	b.n	8008a58 <EncodeReplyWrite+0x68>
		rawReply[RP_W_DATA_INDEX + i] = mbusMessage->Data[i];
 8008a2c:	2316      	movs	r3, #22
 8008a2e:	18fb      	adds	r3, r7, r3
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	3304      	adds	r3, #4
 8008a34:	001a      	movs	r2, r3
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	189a      	adds	r2, r3, r2
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6899      	ldr	r1, [r3, #8]
 8008a3e:	2316      	movs	r3, #22
 8008a40:	18fb      	adds	r3, r7, r3
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	18cb      	adds	r3, r1, r3
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	7013      	strb	r3, [r2, #0]
	for (uint16_t i = 0; i < mbusMessage->DataLength; i++)
 8008a4a:	2316      	movs	r3, #22
 8008a4c:	18fb      	adds	r3, r7, r3
 8008a4e:	881a      	ldrh	r2, [r3, #0]
 8008a50:	2316      	movs	r3, #22
 8008a52:	18fb      	adds	r3, r7, r3
 8008a54:	3201      	adds	r2, #1
 8008a56:	801a      	strh	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	791b      	ldrb	r3, [r3, #4]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	2216      	movs	r2, #22
 8008a60:	18ba      	adds	r2, r7, r2
 8008a62:	8812      	ldrh	r2, [r2, #0]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d3e1      	bcc.n	8008a2c <EncodeReplyWrite+0x3c>
	*rawReplyLength = RP_W_NO_CRC_NO_DATA_LENGTH + mbusMessage->DataLength;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	791b      	ldrb	r3, [r3, #4]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	701a      	strb	r2, [r3, #0]

	uint16_t crc16 = CRC16(rawReply, *rawReplyLength);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	2314      	movs	r3, #20
 8008a7c:	18fc      	adds	r4, r7, r3
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	0011      	movs	r1, r2
 8008a82:	0018      	movs	r0, r3
 8008a84:	f7ff fa76 	bl	8007f74 <CRC16>
 8008a88:	0003      	movs	r3, r0
 8008a8a:	8023      	strh	r3, [r4, #0]

	rawReply[*rawReplyLength] = (uint8_t) crc16;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	001a      	movs	r2, r3
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	189b      	adds	r3, r3, r2
 8008a96:	2214      	movs	r2, #20
 8008a98:	18ba      	adds	r2, r7, r2
 8008a9a:	8812      	ldrh	r2, [r2, #0]
 8008a9c:	b2d2      	uxtb	r2, r2
 8008a9e:	701a      	strb	r2, [r3, #0]
	rawReply[*rawReplyLength + 1] = (uint8_t) (crc16 >> 8);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	18d3      	adds	r3, r2, r3
 8008aaa:	2214      	movs	r2, #20
 8008aac:	18ba      	adds	r2, r7, r2
 8008aae:	8812      	ldrh	r2, [r2, #0]
 8008ab0:	0a12      	lsrs	r2, r2, #8
 8008ab2:	b292      	uxth	r2, r2
 8008ab4:	b2d2      	uxtb	r2, r2
 8008ab6:	701a      	strb	r2, [r3, #0]

	*rawReplyLength += CRC_LENGTH;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	3302      	adds	r3, #2
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	701a      	strb	r2, [r3, #0]
}
 8008ac4:	46c0      	nop			; (mov r8, r8)
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	b007      	add	sp, #28
 8008aca:	bd90      	pop	{r4, r7, pc}

08008acc <EncodeReplyRead>:

void EncodeReplyRead(struct ModbusRecvMessage *mbusMessage, uint8_t *resultData,
		uint8_t commandResultLength, uint8_t *resultDataLength) {
 8008acc:	b590      	push	{r4, r7, lr}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	1dfb      	adds	r3, r7, #7
 8008ada:	701a      	strb	r2, [r3, #0]
	resultData[RP_SLAVE_ID_INDEX] = mbusMessage->Slave;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	781a      	ldrb	r2, [r3, #0]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	701a      	strb	r2, [r3, #0]
	resultData[RP_FUNCTION_INDEX] = mbusMessage->Function;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	7852      	ldrb	r2, [r2, #1]
 8008aec:	701a      	strb	r2, [r3, #0]
	resultData[RP_R_DATA_COUNT_INDEX] = commandResultLength;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	3302      	adds	r3, #2
 8008af2:	1dfa      	adds	r2, r7, #7
 8008af4:	7812      	ldrb	r2, [r2, #0]
 8008af6:	701a      	strb	r2, [r3, #0]
	*resultDataLength = RP_R_NO_CRC_NO_DATA_LENGTH + commandResultLength;
 8008af8:	1dfb      	adds	r3, r7, #7
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	3303      	adds	r3, #3
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	701a      	strb	r2, [r3, #0]

	uint16_t crc16 = CRC16(resultData, *resultDataLength);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	2316      	movs	r3, #22
 8008b0c:	18fc      	adds	r4, r7, r3
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	0011      	movs	r1, r2
 8008b12:	0018      	movs	r0, r3
 8008b14:	f7ff fa2e 	bl	8007f74 <CRC16>
 8008b18:	0003      	movs	r3, r0
 8008b1a:	8023      	strh	r3, [r4, #0]

	resultData[*resultDataLength] = (uint8_t) crc16;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	001a      	movs	r2, r3
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	189b      	adds	r3, r3, r2
 8008b26:	2216      	movs	r2, #22
 8008b28:	18ba      	adds	r2, r7, r2
 8008b2a:	8812      	ldrh	r2, [r2, #0]
 8008b2c:	b2d2      	uxtb	r2, r2
 8008b2e:	701a      	strb	r2, [r3, #0]
	resultData[*resultDataLength + 1] = (uint8_t) (crc16 >> 8);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	3301      	adds	r3, #1
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	18d3      	adds	r3, r2, r3
 8008b3a:	2216      	movs	r2, #22
 8008b3c:	18ba      	adds	r2, r7, r2
 8008b3e:	8812      	ldrh	r2, [r2, #0]
 8008b40:	0a12      	lsrs	r2, r2, #8
 8008b42:	b292      	uxth	r2, r2
 8008b44:	b2d2      	uxtb	r2, r2
 8008b46:	701a      	strb	r2, [r3, #0]

	*resultDataLength += CRC_LENGTH;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	3302      	adds	r3, #2
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	701a      	strb	r2, [r3, #0]
}
 8008b54:	46c0      	nop			; (mov r8, r8)
 8008b56:	46bd      	mov	sp, r7
 8008b58:	b007      	add	sp, #28
 8008b5a:	bd90      	pop	{r4, r7, pc}

08008b5c <DecodeRequest>:

enum ModbusErrorCode DecodeRequest(uint8_t *rawRequest, uint8_t requestLength,
		struct ModbusRecvMessage *mbusMessage) {
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	230b      	movs	r3, #11
 8008b68:	18fb      	adds	r3, r7, r3
 8008b6a:	1c0a      	adds	r2, r1, #0
 8008b6c:	701a      	strb	r2, [r3, #0]
	mbusMessage->Slave = rawRequest[RQ_SLAVE_ID_INDEX];
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	781a      	ldrb	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	701a      	strb	r2, [r3, #0]
	if (mbusMessage->Slave != SlaveId)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	4b2a      	ldr	r3, [pc, #168]	; (8008c28 <DecodeRequest+0xcc>)
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d001      	beq.n	8008b88 <DecodeRequest+0x2c>
		return MBS_ILLEGAL_SLAVE;
 8008b84:	2306      	movs	r3, #6
 8008b86:	e04a      	b.n	8008c1e <DecodeRequest+0xc2>

	if (requestLength < MIN_MESSAGE_SIZE || requestLength > MAX_MESSAGE_SIZE)
 8008b88:	230b      	movs	r3, #11
 8008b8a:	18fb      	adds	r3, r7, r3
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d801      	bhi.n	8008b96 <DecodeRequest+0x3a>
		return MBS_ILLEGAl_DATA;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e043      	b.n	8008c1e <DecodeRequest+0xc2>

	if (CRC16(rawRequest, requestLength - CRC_LENGTH) !=
 8008b96:	230b      	movs	r3, #11
 8008b98:	18fb      	adds	r3, r7, r3
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	3b02      	subs	r3, #2
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	0011      	movs	r1, r2
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	f7ff f9e4 	bl	8007f74 <CRC16>
 8008bac:	0003      	movs	r3, r0
 8008bae:	0019      	movs	r1, r3
	BYTES_2_SHORT(rawRequest[requestLength + RQ_CRC_INDEX],
 8008bb0:	230b      	movs	r3, #11
 8008bb2:	18fb      	adds	r3, r7, r3
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	3b02      	subs	r3, #2
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	18d3      	adds	r3, r2, r3
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	230b      	movs	r3, #11
 8008bc2:	18fb      	adds	r3, r7, r3
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	18d3      	adds	r3, r2, r3
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	021b      	lsls	r3, r3, #8
 8008bd0:	4303      	orrs	r3, r0
	if (CRC16(rawRequest, requestLength - CRC_LENGTH) !=
 8008bd2:	4299      	cmp	r1, r3
 8008bd4:	d001      	beq.n	8008bda <DecodeRequest+0x7e>
			rawRequest[requestLength + RQ_CRC_INDEX + 1]))
		return MBS_ILLEGAL_CRC;
 8008bd6:	2305      	movs	r3, #5
 8008bd8:	e021      	b.n	8008c1e <DecodeRequest+0xc2>

	mbusMessage->Function = rawRequest[RQ_FUNCTION_INDEX];
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	781a      	ldrb	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	705a      	strb	r2, [r3, #1]
	if (IsFunctionCode(mbusMessage->Function))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	0018      	movs	r0, r3
 8008bea:	f7ff fed7 	bl	800899c <IsFunctionCode>
 8008bee:	1e03      	subs	r3, r0, #0
 8008bf0:	d001      	beq.n	8008bf6 <DecodeRequest+0x9a>
		return MBS_ILLEGAL_FUNCTION;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e013      	b.n	8008c1e <DecodeRequest+0xc2>

	mbusMessage->Data = rawRequest + RQ_DATA_INDEX;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	1d1a      	adds	r2, r3, #4
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	609a      	str	r2, [r3, #8]
	mbusMessage->DataLength = requestLength - CRC_LENGTH - SLAVE_ID_LENGTH
			- FUNCTION_LENGTH - ADDRESS_LENGTH;
 8008bfe:	230b      	movs	r3, #11
 8008c00:	18fb      	adds	r3, r7, r3
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	3b06      	subs	r3, #6
 8008c06:	b2da      	uxtb	r2, r3
	mbusMessage->DataLength = requestLength - CRC_LENGTH - SLAVE_ID_LENGTH
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	711a      	strb	r2, [r3, #4]
	mbusMessage->Command.Bytes[0] = rawRequest[RQ_COMMAND_INDEX];
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	789a      	ldrb	r2, [r3, #2]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	709a      	strb	r2, [r3, #2]
	mbusMessage->Command.Bytes[1] = rawRequest[RQ_COMMAND_INDEX + 1];
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	78da      	ldrb	r2, [r3, #3]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	70da      	strb	r2, [r3, #3]

	return MBS_ALL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	0018      	movs	r0, r3
 8008c20:	46bd      	mov	sp, r7
 8008c22:	b004      	add	sp, #16
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	46c0      	nop			; (mov r8, r8)
 8008c28:	200008a4 	.word	0x200008a4

08008c2c <ProcessError>:

//no error handling
enum ModbusErrorCode ProcessError(enum ModbusErrorCode error,
		uint8_t *sendBuffer, uint8_t *resultLength) {
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	607a      	str	r2, [r7, #4]
 8008c36:	230f      	movs	r3, #15
 8008c38:	18fb      	adds	r3, r7, r3
 8008c3a:	1c02      	adds	r2, r0, #0
 8008c3c:	701a      	strb	r2, [r3, #0]
	return error;
 8008c3e:	230f      	movs	r3, #15
 8008c40:	18fb      	adds	r3, r7, r3
 8008c42:	781b      	ldrb	r3, [r3, #0]
}
 8008c44:	0018      	movs	r0, r3
 8008c46:	46bd      	mov	sp, r7
 8008c48:	b004      	add	sp, #16
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <InitializeModbus>:

void InitializeModbus(void) {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
	uint16_t flashSlaveId = ParamsUnion.Params.F_SlaveId;
 8008c52:	1dbb      	adds	r3, r7, #6
 8008c54:	4a09      	ldr	r2, [pc, #36]	; (8008c7c <InitializeModbus+0x30>)
 8008c56:	8912      	ldrh	r2, [r2, #8]
 8008c58:	801a      	strh	r2, [r3, #0]

	if (flashSlaveId == 0) {
 8008c5a:	1dbb      	adds	r3, r7, #6
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d103      	bne.n	8008c6a <InitializeModbus+0x1e>
		SlaveId = m_defaultSlaveId;
 8008c62:	2201      	movs	r2, #1
 8008c64:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <InitializeModbus+0x34>)
 8008c66:	801a      	strh	r2, [r3, #0]
		return;
 8008c68:	e005      	b.n	8008c76 <InitializeModbus+0x2a>
	}

	SlaveId = (uint8_t) flashSlaveId;
 8008c6a:	1dbb      	adds	r3, r7, #6
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	4b03      	ldr	r3, [pc, #12]	; (8008c80 <InitializeModbus+0x34>)
 8008c74:	801a      	strh	r2, [r3, #0]
}
 8008c76:	46bd      	mov	sp, r7
 8008c78:	b002      	add	sp, #8
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	0800f800 	.word	0x0800f800
 8008c80:	200008a4 	.word	0x200008a4

08008c84 <InitializeDriversWorker>:
		{ GPIOF, GPIO_PIN_1, EXTI0_1_IRQn, FREE } };

static uint32_t m_BESCDriverARR, m_LEDDriverARR, m_BCSDriverMaxARR,
		m_BCSDriverMinARR;

void InitializeDriversWorker() {
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
	m_BESCDriverARR = SystemCoreClock / ((TIM_PWM_PSC + 1) * BESC_PWM_FREQUENCY)
 8008c88:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <InitializeDriversWorker+0x5c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4915      	ldr	r1, [pc, #84]	; (8008ce4 <InitializeDriversWorker+0x60>)
 8008c8e:	0018      	movs	r0, r3
 8008c90:	f7f7 fa3a 	bl	8000108 <__udivsi3>
 8008c94:	0003      	movs	r3, r0
			- 1;
 8008c96:	1e5a      	subs	r2, r3, #1
	m_BESCDriverARR = SystemCoreClock / ((TIM_PWM_PSC + 1) * BESC_PWM_FREQUENCY)
 8008c98:	4b13      	ldr	r3, [pc, #76]	; (8008ce8 <InitializeDriversWorker+0x64>)
 8008c9a:	601a      	str	r2, [r3, #0]
	m_LEDDriverARR = SystemCoreClock / ((TIM_PWM_PSC + 1) * LED_PWM_FREQUENCY)
 8008c9c:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <InitializeDriversWorker+0x5c>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	23fa      	movs	r3, #250	; 0xfa
 8008ca2:	0159      	lsls	r1, r3, #5
 8008ca4:	0010      	movs	r0, r2
 8008ca6:	f7f7 fa2f 	bl	8000108 <__udivsi3>
 8008caa:	0003      	movs	r3, r0
			- 1;
 8008cac:	1e5a      	subs	r2, r3, #1
	m_LEDDriverARR = SystemCoreClock / ((TIM_PWM_PSC + 1) * LED_PWM_FREQUENCY)
 8008cae:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <InitializeDriversWorker+0x68>)
 8008cb0:	601a      	str	r2, [r3, #0]
	m_BCSDriverMinARR = SystemCoreClock
			/ ((TIM_PWM_PSC + 1) * BCS_MAX_FREQUENCY) - 1;
 8008cb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ce0 <InitializeDriversWorker+0x5c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	490e      	ldr	r1, [pc, #56]	; (8008cf0 <InitializeDriversWorker+0x6c>)
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f7f7 fa25 	bl	8000108 <__udivsi3>
 8008cbe:	0003      	movs	r3, r0
 8008cc0:	1e5a      	subs	r2, r3, #1
	m_BCSDriverMinARR = SystemCoreClock
 8008cc2:	4b0c      	ldr	r3, [pc, #48]	; (8008cf4 <InitializeDriversWorker+0x70>)
 8008cc4:	601a      	str	r2, [r3, #0]
	m_BCSDriverMaxARR = SystemCoreClock
			/ ((TIM_PWM_PSC + 1) * BCS_MIN_FREQUECNY) - 1;
 8008cc6:	4b06      	ldr	r3, [pc, #24]	; (8008ce0 <InitializeDriversWorker+0x5c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	490b      	ldr	r1, [pc, #44]	; (8008cf8 <InitializeDriversWorker+0x74>)
 8008ccc:	0018      	movs	r0, r3
 8008cce:	f7f7 fa1b 	bl	8000108 <__udivsi3>
 8008cd2:	0003      	movs	r3, r0
 8008cd4:	1e5a      	subs	r2, r3, #1
	m_BCSDriverMaxARR = SystemCoreClock
 8008cd6:	4b09      	ldr	r3, [pc, #36]	; (8008cfc <InitializeDriversWorker+0x78>)
 8008cd8:	601a      	str	r2, [r3, #0]
}
 8008cda:	46c0      	nop			; (mov r8, r8)
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20000298 	.word	0x20000298
 8008ce4:	00000bb8 	.word	0x00000bb8
 8008ce8:	200007d8 	.word	0x200007d8
 8008cec:	200007dc 	.word	0x200007dc
 8008cf0:	0001d394 	.word	0x0001d394
 8008cf4:	200007e4 	.word	0x200007e4
 8008cf8:	00002710 	.word	0x00002710
 8008cfc:	200007e0 	.word	0x200007e0

08008d00 <InitializeBESCDriver>:

uint8_t InitializeBESCDriver(enum TIMChannel pwmTIMCh,
		struct BESCDriverHandle *handle) {
 8008d00:	b590      	push	{r4, r7, lr}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	0002      	movs	r2, r0
 8008d08:	6039      	str	r1, [r7, #0]
 8008d0a:	1dfb      	adds	r3, r7, #7
 8008d0c:	701a      	strb	r2, [r3, #0]
	struct TIMChannelHandle *tim = &m_TIMChannels[pwmTIMCh];
 8008d0e:	1dfb      	adds	r3, r7, #7
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	011a      	lsls	r2, r3, #4
 8008d14:	4b1f      	ldr	r3, [pc, #124]	; (8008d94 <InitializeBESCDriver+0x94>)
 8008d16:	18d3      	adds	r3, r2, r3
 8008d18:	60fb      	str	r3, [r7, #12]

	if (tim->State == OCCUPIED)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	7b1b      	ldrb	r3, [r3, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <InitializeBESCDriver+0x26>
		return ANY_ERROR;
 8008d22:	23ff      	movs	r3, #255	; 0xff
 8008d24:	e031      	b.n	8008d8a <InitializeBESCDriver+0x8a>

	__HAL_TIM_SET_COMPARE(tim->Tim, tim->Channel,
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3334      	adds	r3, #52	; 0x34
 8008d2e:	001a      	movs	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	089b      	lsrs	r3, r3, #2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	18d4      	adds	r4, r2, r3
 8008d3a:	4b17      	ldr	r3, [pc, #92]	; (8008d98 <InitializeBESCDriver+0x98>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	0018      	movs	r0, r3
 8008d40:	f7f9 fa32 	bl	80021a8 <__aeabi_ui2d>
 8008d44:	4a15      	ldr	r2, [pc, #84]	; (8008d9c <InitializeBESCDriver+0x9c>)
 8008d46:	4b16      	ldr	r3, [pc, #88]	; (8008da0 <InitializeBESCDriver+0xa0>)
 8008d48:	f7f8 fc22 	bl	8001590 <__aeabi_dmul>
 8008d4c:	0002      	movs	r2, r0
 8008d4e:	000b      	movs	r3, r1
 8008d50:	0010      	movs	r0, r2
 8008d52:	0019      	movs	r1, r3
 8008d54:	f7f7 facc 	bl	80002f0 <__aeabi_d2uiz>
 8008d58:	0003      	movs	r3, r0
 8008d5a:	6023      	str	r3, [r4, #0]
			m_BESCDriverARR * (1 - STOPPED_DC));
	__HAL_TIM_SET_PRESCALER(tim->Tim, TIM_PWM_PSC);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2209      	movs	r2, #9
 8008d64:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(tim->Tim, m_BESCDriverARR);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a0a      	ldr	r2, [pc, #40]	; (8008d98 <InitializeBESCDriver+0x98>)
 8008d6e:	6812      	ldr	r2, [r2, #0]
 8008d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a08      	ldr	r2, [pc, #32]	; (8008d98 <InitializeBESCDriver+0x98>)
 8008d78:	6812      	ldr	r2, [r2, #0]
 8008d7a:	60da      	str	r2, [r3, #12]

	tim->State = OCCUPIED;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	731a      	strb	r2, [r3, #12]

	handle->PWMTIM = tim;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	601a      	str	r2, [r3, #0]

	return ALL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	b005      	add	sp, #20
 8008d90:	bd90      	pop	{r4, r7, pc}
 8008d92:	46c0      	nop			; (mov r8, r8)
 8008d94:	2000021c 	.word	0x2000021c
 8008d98:	200007d8 	.word	0x200007d8
 8008d9c:	9999999a 	.word	0x9999999a
 8008da0:	3fe19999 	.word	0x3fe19999

08008da4 <InitializeLEDDriver>:

uint8_t InitializeLEDDriver(enum TIMChannel pwmTIMCh,
		struct LEDDriverHandle *handle) {
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	0002      	movs	r2, r0
 8008dac:	6039      	str	r1, [r7, #0]
 8008dae:	1dfb      	adds	r3, r7, #7
 8008db0:	701a      	strb	r2, [r3, #0]
	struct TIMChannelHandle *tim = &m_TIMChannels[pwmTIMCh];
 8008db2:	1dfb      	adds	r3, r7, #7
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	011a      	lsls	r2, r3, #4
 8008db8:	4b18      	ldr	r3, [pc, #96]	; (8008e1c <InitializeLEDDriver+0x78>)
 8008dba:	18d3      	adds	r3, r2, r3
 8008dbc:	60fb      	str	r3, [r7, #12]

	if (tim->State == OCCUPIED)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	7b1b      	ldrb	r3, [r3, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <InitializeLEDDriver+0x26>
		return ANY_ERROR;
 8008dc6:	23ff      	movs	r3, #255	; 0xff
 8008dc8:	e023      	b.n	8008e12 <InitializeLEDDriver+0x6e>

	__HAL_TIM_SET_COMPARE(tim->Tim, tim->Channel, m_LEDDriverARR);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3334      	adds	r3, #52	; 0x34
 8008dd2:	001a      	movs	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	089b      	lsrs	r3, r3, #2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	18d3      	adds	r3, r2, r3
 8008dde:	4a10      	ldr	r2, [pc, #64]	; (8008e20 <InitializeLEDDriver+0x7c>)
 8008de0:	6812      	ldr	r2, [r2, #0]
 8008de2:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_PRESCALER(tim->Tim, TIM_PWM_PSC);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2209      	movs	r2, #9
 8008dec:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(tim->Tim, m_LEDDriverARR);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a0a      	ldr	r2, [pc, #40]	; (8008e20 <InitializeLEDDriver+0x7c>)
 8008df6:	6812      	ldr	r2, [r2, #0]
 8008df8:	62da      	str	r2, [r3, #44]	; 0x2c
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a08      	ldr	r2, [pc, #32]	; (8008e20 <InitializeLEDDriver+0x7c>)
 8008e00:	6812      	ldr	r2, [r2, #0]
 8008e02:	60da      	str	r2, [r3, #12]

	tim->State = OCCUPIED;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	731a      	strb	r2, [r3, #12]

	handle->PWMTIM = tim;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	601a      	str	r2, [r3, #0]

	return ALL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	0018      	movs	r0, r3
 8008e14:	46bd      	mov	sp, r7
 8008e16:	b004      	add	sp, #16
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	46c0      	nop			; (mov r8, r8)
 8008e1c:	2000021c 	.word	0x2000021c
 8008e20:	200007dc 	.word	0x200007dc

08008e24 <InitializeBCSDriver>:

uint8_t InitializeBCSDriver(enum TIMChannel pwmTIMCh,
		enum GPIOChannel directionGPIOCh, enum GPIOChannel disableGPIOCh,
		enum GPIOChannel terminalGPIOCh, struct BCSDriverHandle *handle) {
 8008e24:	b5b0      	push	{r4, r5, r7, lr}
 8008e26:	b092      	sub	sp, #72	; 0x48
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	0005      	movs	r5, r0
 8008e2c:	000c      	movs	r4, r1
 8008e2e:	0010      	movs	r0, r2
 8008e30:	0019      	movs	r1, r3
 8008e32:	1dfb      	adds	r3, r7, #7
 8008e34:	1c2a      	adds	r2, r5, #0
 8008e36:	701a      	strb	r2, [r3, #0]
 8008e38:	1dbb      	adds	r3, r7, #6
 8008e3a:	1c22      	adds	r2, r4, #0
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	1d7b      	adds	r3, r7, #5
 8008e40:	1c02      	adds	r2, r0, #0
 8008e42:	701a      	strb	r2, [r3, #0]
 8008e44:	1d3b      	adds	r3, r7, #4
 8008e46:	1c0a      	adds	r2, r1, #0
 8008e48:	701a      	strb	r2, [r3, #0]
	struct TIMChannelHandle *timCh = &m_TIMChannels[pwmTIMCh];
 8008e4a:	1dfb      	adds	r3, r7, #7
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	011a      	lsls	r2, r3, #4
 8008e50:	4b76      	ldr	r3, [pc, #472]	; (800902c <InitializeBCSDriver+0x208>)
 8008e52:	18d3      	adds	r3, r2, r3
 8008e54:	643b      	str	r3, [r7, #64]	; 0x40
	struct GPIOChannelHandle *direction = &m_GPIOChannels[directionGPIOCh];
 8008e56:	1dbb      	adds	r3, r7, #6
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	00da      	lsls	r2, r3, #3
 8008e5c:	4b74      	ldr	r3, [pc, #464]	; (8009030 <InitializeBCSDriver+0x20c>)
 8008e5e:	18d3      	adds	r3, r2, r3
 8008e60:	63fb      	str	r3, [r7, #60]	; 0x3c
	struct GPIOChannelHandle *disable = &m_GPIOChannels[disableGPIOCh];
 8008e62:	1d7b      	adds	r3, r7, #5
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	00da      	lsls	r2, r3, #3
 8008e68:	4b71      	ldr	r3, [pc, #452]	; (8009030 <InitializeBCSDriver+0x20c>)
 8008e6a:	18d3      	adds	r3, r2, r3
 8008e6c:	63bb      	str	r3, [r7, #56]	; 0x38
	struct GPIOChannelHandle *terminal = &m_GPIOChannels[terminalGPIOCh];
 8008e6e:	1d3b      	adds	r3, r7, #4
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	00da      	lsls	r2, r3, #3
 8008e74:	4b6e      	ldr	r3, [pc, #440]	; (8009030 <InitializeBCSDriver+0x20c>)
 8008e76:	18d3      	adds	r3, r2, r3
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34

	if (timCh->State == OCCUPIED || direction->State == OCCUPIED
 8008e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e7c:	7b1b      	ldrb	r3, [r3, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <InitializeBCSDriver+0x76>
 8008e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e84:	79db      	ldrb	r3, [r3, #7]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d007      	beq.n	8008e9a <InitializeBCSDriver+0x76>
			|| disable->State == OCCUPIED || terminal->State == OCCUPIED)
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8c:	79db      	ldrb	r3, [r3, #7]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <InitializeBCSDriver+0x76>
 8008e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e94:	79db      	ldrb	r3, [r3, #7]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <InitializeBCSDriver+0x7a>
		return ANY_ERROR;
 8008e9a:	23ff      	movs	r3, #255	; 0xff
 8008e9c:	e0c1      	b.n	8009022 <InitializeBCSDriver+0x1fe>

	__HAL_TIM_SET_COMPARE(timCh->Tim, timCh->Channel, m_BCSDriverMaxARR / 2);
 8008e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3334      	adds	r3, #52	; 0x34
 8008ea6:	001a      	movs	r2, r3
 8008ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	089b      	lsrs	r3, r3, #2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	18d3      	adds	r3, r2, r3
 8008eb2:	4a60      	ldr	r2, [pc, #384]	; (8009034 <InitializeBCSDriver+0x210>)
 8008eb4:	6812      	ldr	r2, [r2, #0]
 8008eb6:	0852      	lsrs	r2, r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(timCh->Tim, m_BCSDriverMaxARR);
 8008eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a5c      	ldr	r2, [pc, #368]	; (8009034 <InitializeBCSDriver+0x210>)
 8008ec2:	6812      	ldr	r2, [r2, #0]
 8008ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a5a      	ldr	r2, [pc, #360]	; (8009034 <InitializeBCSDriver+0x210>)
 8008ecc:	6812      	ldr	r2, [r2, #0]
 8008ece:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(timCh->Tim, TIM_PWM_PSC);
 8008ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2209      	movs	r2, #9
 8008ed8:	629a      	str	r2, [r3, #40]	; 0x28

	GPIO_InitTypeDef GPIOInitStruct = { .Pin = direction->Pin, .Mode =
 8008eda:	2320      	movs	r3, #32
 8008edc:	18fb      	adds	r3, r7, r3
 8008ede:	0018      	movs	r0, r3
 8008ee0:	2314      	movs	r3, #20
 8008ee2:	001a      	movs	r2, r3
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	f001 f9da 	bl	800a29e <memset>
 8008eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eec:	889b      	ldrh	r3, [r3, #4]
 8008eee:	001a      	movs	r2, r3
 8008ef0:	2320      	movs	r3, #32
 8008ef2:	18fb      	adds	r3, r7, r3
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	2320      	movs	r3, #32
 8008ef8:	18fb      	adds	r3, r7, r3
 8008efa:	2201      	movs	r2, #1
 8008efc:	605a      	str	r2, [r3, #4]
	GPIO_MODE_OUTPUT_PP, .Pull = GPIO_NOPULL, .Speed =
	GPIO_SPEED_FREQ_LOW };
	HAL_GPIO_Init(direction->GPIO, &GPIOInitStruct);
 8008efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2220      	movs	r2, #32
 8008f04:	18ba      	adds	r2, r7, r2
 8008f06:	0011      	movs	r1, r2
 8008f08:	0018      	movs	r0, r3
 8008f0a:	f7fa f8ab 	bl	8003064 <HAL_GPIO_Init>

	GPIOInitStruct.Pin = disable->Pin;
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f10:	889b      	ldrh	r3, [r3, #4]
 8008f12:	001a      	movs	r2, r3
 8008f14:	2320      	movs	r3, #32
 8008f16:	18fb      	adds	r3, r7, r3
 8008f18:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(disable->GPIO, &GPIOInitStruct);
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	18ba      	adds	r2, r7, r2
 8008f22:	0011      	movs	r1, r2
 8008f24:	0018      	movs	r0, r3
 8008f26:	f7fa f89d 	bl	8003064 <HAL_GPIO_Init>

	GPIOInitStruct.Pin = terminal->Pin;
 8008f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2c:	889b      	ldrh	r3, [r3, #4]
 8008f2e:	001a      	movs	r2, r3
 8008f30:	2320      	movs	r3, #32
 8008f32:	18fb      	adds	r3, r7, r3
 8008f34:	601a      	str	r2, [r3, #0]
	GPIOInitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008f36:	2320      	movs	r3, #32
 8008f38:	18fb      	adds	r3, r7, r3
 8008f3a:	4a3f      	ldr	r2, [pc, #252]	; (8009038 <InitializeBCSDriver+0x214>)
 8008f3c:	605a      	str	r2, [r3, #4]
	GPIOInitStruct.Pull = GPIO_PULLUP;
 8008f3e:	2320      	movs	r3, #32
 8008f40:	18fb      	adds	r3, r7, r3
 8008f42:	2201      	movs	r2, #1
 8008f44:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(terminal->GPIO, &GPIOInitStruct);
 8008f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	18ba      	adds	r2, r7, r2
 8008f4e:	0011      	movs	r1, r2
 8008f50:	0018      	movs	r0, r3
 8008f52:	f7fa f887 	bl	8003064 <HAL_GPIO_Init>
	__HAL_GPIO_EXTI_CLEAR_IT(terminal->Pin);
 8008f56:	4b39      	ldr	r3, [pc, #228]	; (800903c <InitializeBCSDriver+0x218>)
 8008f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f5a:	8892      	ldrh	r2, [r2, #4]
 8008f5c:	615a      	str	r2, [r3, #20]
	HAL_NVIC_SetPriority(terminal->EXTIId, 0, 0);
 8008f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f60:	799b      	ldrb	r3, [r3, #6]
 8008f62:	b25b      	sxtb	r3, r3
 8008f64:	2200      	movs	r2, #0
 8008f66:	2100      	movs	r1, #0
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f7f9 fc3d 	bl	80027e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(terminal->EXTIId);
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f70:	799b      	ldrb	r3, [r3, #6]
 8008f72:	b25b      	sxtb	r3, r3
 8008f74:	0018      	movs	r0, r3
 8008f76:	f7f9 fc4d 	bl	8002814 <HAL_NVIC_EnableIRQ>

	__HAL_TIM_SET_COUNTER(timCh->ComplementTIM, 0);
 8008f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2200      	movs	r2, #0
 8008f82:	625a      	str	r2, [r3, #36]	; 0x24

	TIM_SlaveConfigTypeDef sSlaveConfig;
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8008f84:	230c      	movs	r3, #12
 8008f86:	18fb      	adds	r3, r7, r3
 8008f88:	2205      	movs	r2, #5
 8008f8a:	601a      	str	r2, [r3, #0]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8008f8c:	230c      	movs	r3, #12
 8008f8e:	18fb      	adds	r3, r7, r3
 8008f90:	2200      	movs	r2, #0
 8008f92:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_SlaveConfigSynchronization(timCh->Tim, &sSlaveConfig) != HAL_OK)
 8008f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	220c      	movs	r2, #12
 8008f9a:	18ba      	adds	r2, r7, r2
 8008f9c:	0011      	movs	r1, r2
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	f7fb ff9e 	bl	8004ee0 <HAL_TIM_SlaveConfigSynchronization>
 8008fa4:	1e03      	subs	r3, r0, #0
 8008fa6:	d001      	beq.n	8008fac <InitializeBCSDriver+0x188>
		return ANY_ERROR;
 8008fa8:	23ff      	movs	r3, #255	; 0xff
 8008faa:	e03a      	b.n	8009022 <InitializeBCSDriver+0x1fe>

	for (uint8_t i = 0; i < TIMChannelHandlesNumber; i++)
 8008fac:	2347      	movs	r3, #71	; 0x47
 8008fae:	18fb      	adds	r3, r7, r3
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	701a      	strb	r2, [r3, #0]
 8008fb4:	e019      	b.n	8008fea <InitializeBCSDriver+0x1c6>
		if (timCh->Tim == m_TIMChannels[i].Tim)
 8008fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	2347      	movs	r3, #71	; 0x47
 8008fbc:	18fb      	adds	r3, r7, r3
 8008fbe:	7819      	ldrb	r1, [r3, #0]
 8008fc0:	4b1a      	ldr	r3, [pc, #104]	; (800902c <InitializeBCSDriver+0x208>)
 8008fc2:	0109      	lsls	r1, r1, #4
 8008fc4:	58cb      	ldr	r3, [r1, r3]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d108      	bne.n	8008fdc <InitializeBCSDriver+0x1b8>
			m_TIMChannels[i].State = OCCUPIED;
 8008fca:	2347      	movs	r3, #71	; 0x47
 8008fcc:	18fb      	adds	r3, r7, r3
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	4a16      	ldr	r2, [pc, #88]	; (800902c <InitializeBCSDriver+0x208>)
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	18d3      	adds	r3, r2, r3
 8008fd6:	330c      	adds	r3, #12
 8008fd8:	2200      	movs	r2, #0
 8008fda:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < TIMChannelHandlesNumber; i++)
 8008fdc:	2347      	movs	r3, #71	; 0x47
 8008fde:	18fb      	adds	r3, r7, r3
 8008fe0:	781a      	ldrb	r2, [r3, #0]
 8008fe2:	2347      	movs	r3, #71	; 0x47
 8008fe4:	18fb      	adds	r3, r7, r3
 8008fe6:	3201      	adds	r2, #1
 8008fe8:	701a      	strb	r2, [r3, #0]
 8008fea:	2204      	movs	r2, #4
 8008fec:	2347      	movs	r3, #71	; 0x47
 8008fee:	18fb      	adds	r3, r7, r3
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d3df      	bcc.n	8008fb6 <InitializeBCSDriver+0x192>
	disable->State = OCCUPIED;
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	71da      	strb	r2, [r3, #7]
	direction->State = OCCUPIED;
 8008ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffe:	2200      	movs	r2, #0
 8009000:	71da      	strb	r2, [r3, #7]
	terminal->State = OCCUPIED;
 8009002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009004:	2200      	movs	r2, #0
 8009006:	71da      	strb	r2, [r3, #7]

	handle->PWMTIM = timCh;
 8009008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800900a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800900c:	601a      	str	r2, [r3, #0]
	handle->DisableGPIO = disable;
 800900e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009012:	609a      	str	r2, [r3, #8]
	handle->DirectionGPIO = direction;
 8009014:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009018:	605a      	str	r2, [r3, #4]
	handle->TerminalGPIO = terminal;
 800901a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800901c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800901e:	60da      	str	r2, [r3, #12]

	return ALL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	0018      	movs	r0, r3
 8009024:	46bd      	mov	sp, r7
 8009026:	b012      	add	sp, #72	; 0x48
 8009028:	bdb0      	pop	{r4, r5, r7, pc}
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	2000021c 	.word	0x2000021c
 8009030:	2000025c 	.word	0x2000025c
 8009034:	200007e0 	.word	0x200007e0
 8009038:	10210000 	.word	0x10210000
 800903c:	40010400 	.word	0x40010400

08009040 <BESCDriverChangeSpeed>:

uint8_t BESCDriverChangeSpeed(struct BESCDriverHandle *handle, uint8_t *data) {
 8009040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
	double newSpeed;
	memcpy(&newSpeed, data, sizeof(double));
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	2308      	movs	r3, #8
 800904e:	18fb      	adds	r3, r7, r3
 8009050:	2208      	movs	r2, #8
 8009052:	0018      	movs	r0, r3
 8009054:	f001 f91a 	bl	800a28c <memcpy>

	if (newSpeed > 1.0 || newSpeed < -1.0)
 8009058:	68b8      	ldr	r0, [r7, #8]
 800905a:	68f9      	ldr	r1, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	4b29      	ldr	r3, [pc, #164]	; (8009104 <BESCDriverChangeSpeed+0xc4>)
 8009060:	f7f7 f908 	bl	8000274 <__aeabi_dcmpgt>
 8009064:	1e03      	subs	r3, r0, #0
 8009066:	d107      	bne.n	8009078 <BESCDriverChangeSpeed+0x38>
 8009068:	68b8      	ldr	r0, [r7, #8]
 800906a:	68f9      	ldr	r1, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	4b26      	ldr	r3, [pc, #152]	; (8009108 <BESCDriverChangeSpeed+0xc8>)
 8009070:	f7f7 f8ec 	bl	800024c <__aeabi_dcmplt>
 8009074:	1e03      	subs	r3, r0, #0
 8009076:	d001      	beq.n	800907c <BESCDriverChangeSpeed+0x3c>
		return ANY_ERROR;
 8009078:	23ff      	movs	r3, #255	; 0xff
 800907a:	e03f      	b.n	80090fc <BESCDriverChangeSpeed+0xbc>

	double newDutyCycle = STOPPED_DC + MAX_VAR_DC * newSpeed;
 800907c:	68b8      	ldr	r0, [r7, #8]
 800907e:	68f9      	ldr	r1, [r7, #12]
 8009080:	4a22      	ldr	r2, [pc, #136]	; (800910c <BESCDriverChangeSpeed+0xcc>)
 8009082:	4b23      	ldr	r3, [pc, #140]	; (8009110 <BESCDriverChangeSpeed+0xd0>)
 8009084:	f7f8 fa84 	bl	8001590 <__aeabi_dmul>
 8009088:	0003      	movs	r3, r0
 800908a:	000c      	movs	r4, r1
 800908c:	0018      	movs	r0, r3
 800908e:	0021      	movs	r1, r4
 8009090:	4a20      	ldr	r2, [pc, #128]	; (8009114 <BESCDriverChangeSpeed+0xd4>)
 8009092:	4b21      	ldr	r3, [pc, #132]	; (8009118 <BESCDriverChangeSpeed+0xd8>)
 8009094:	f7f7 fe6c 	bl	8000d70 <__aeabi_dadd>
 8009098:	0003      	movs	r3, r0
 800909a:	000c      	movs	r4, r1
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	617c      	str	r4, [r7, #20]

	__HAL_TIM_SET_COMPARE(handle->PWMTIM->Tim, handle->PWMTIM->Channel,
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3334      	adds	r3, #52	; 0x34
 80090aa:	001a      	movs	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	089b      	lsrs	r3, r3, #2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	18d4      	adds	r4, r2, r3
 80090b8:	4b18      	ldr	r3, [pc, #96]	; (800911c <BESCDriverChangeSpeed+0xdc>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	0018      	movs	r0, r3
 80090be:	f7f9 f873 	bl	80021a8 <__aeabi_ui2d>
 80090c2:	0005      	movs	r5, r0
 80090c4:	000e      	movs	r6, r1
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	2000      	movs	r0, #0
 80090cc:	490d      	ldr	r1, [pc, #52]	; (8009104 <BESCDriverChangeSpeed+0xc4>)
 80090ce:	f7f8 fcdf 	bl	8001a90 <__aeabi_dsub>
 80090d2:	0002      	movs	r2, r0
 80090d4:	000b      	movs	r3, r1
 80090d6:	0028      	movs	r0, r5
 80090d8:	0031      	movs	r1, r6
 80090da:	f7f8 fa59 	bl	8001590 <__aeabi_dmul>
 80090de:	0002      	movs	r2, r0
 80090e0:	000b      	movs	r3, r1
 80090e2:	0010      	movs	r0, r2
 80090e4:	0019      	movs	r1, r3
 80090e6:	f001 f8e3 	bl	800a2b0 <round>
 80090ea:	0002      	movs	r2, r0
 80090ec:	000b      	movs	r3, r1
 80090ee:	0010      	movs	r0, r2
 80090f0:	0019      	movs	r1, r3
 80090f2:	f7f7 f8fd 	bl	80002f0 <__aeabi_d2uiz>
 80090f6:	0003      	movs	r3, r0
 80090f8:	6023      	str	r3, [r4, #0]
			round(m_BESCDriverARR * (1 - newDutyCycle)));

	return ALL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	0018      	movs	r0, r3
 80090fe:	46bd      	mov	sp, r7
 8009100:	b007      	add	sp, #28
 8009102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009104:	3ff00000 	.word	0x3ff00000
 8009108:	bff00000 	.word	0xbff00000
 800910c:	eb851eb8 	.word	0xeb851eb8
 8009110:	3fbeb851 	.word	0x3fbeb851
 8009114:	cccccccc 	.word	0xcccccccc
 8009118:	3fdccccc 	.word	0x3fdccccc
 800911c:	200007d8 	.word	0x200007d8

08009120 <LEDDriverChangeBrightness>:

uint8_t LEDDriverChangeBrightness(struct LEDDriverHandle *handle, uint8_t *data) {
 8009120:	b5b0      	push	{r4, r5, r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
	double newBrightness;
	memcpy(&newBrightness, data, sizeof(double));
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	2308      	movs	r3, #8
 800912e:	18fb      	adds	r3, r7, r3
 8009130:	2208      	movs	r2, #8
 8009132:	0018      	movs	r0, r3
 8009134:	f001 f8aa 	bl	800a28c <memcpy>

	if (newBrightness > 1.0 || newBrightness < 0)
 8009138:	68b8      	ldr	r0, [r7, #8]
 800913a:	68f9      	ldr	r1, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	4b1c      	ldr	r3, [pc, #112]	; (80091b0 <LEDDriverChangeBrightness+0x90>)
 8009140:	f7f7 f898 	bl	8000274 <__aeabi_dcmpgt>
 8009144:	1e03      	subs	r3, r0, #0
 8009146:	d107      	bne.n	8009158 <LEDDriverChangeBrightness+0x38>
 8009148:	68b8      	ldr	r0, [r7, #8]
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	2300      	movs	r3, #0
 8009150:	f7f7 f87c 	bl	800024c <__aeabi_dcmplt>
 8009154:	1e03      	subs	r3, r0, #0
 8009156:	d001      	beq.n	800915c <LEDDriverChangeBrightness+0x3c>
		return ANY_ERROR;
 8009158:	23ff      	movs	r3, #255	; 0xff
 800915a:	e025      	b.n	80091a8 <LEDDriverChangeBrightness+0x88>

	__HAL_TIM_SET_COMPARE(handle->PWMTIM->Tim, handle->PWMTIM->Channel,
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3334      	adds	r3, #52	; 0x34
 8009166:	001a      	movs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	089b      	lsrs	r3, r3, #2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	18d5      	adds	r5, r2, r3
 8009174:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <LEDDriverChangeBrightness+0x94>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	0018      	movs	r0, r3
 800917a:	f7f9 f815 	bl	80021a8 <__aeabi_ui2d>
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	68fc      	ldr	r4, [r7, #12]
 8009182:	001a      	movs	r2, r3
 8009184:	0023      	movs	r3, r4
 8009186:	f7f8 fa03 	bl	8001590 <__aeabi_dmul>
 800918a:	0003      	movs	r3, r0
 800918c:	000c      	movs	r4, r1
 800918e:	0018      	movs	r0, r3
 8009190:	0021      	movs	r1, r4
 8009192:	f001 f88d 	bl	800a2b0 <round>
 8009196:	0003      	movs	r3, r0
 8009198:	000c      	movs	r4, r1
 800919a:	0018      	movs	r0, r3
 800919c:	0021      	movs	r1, r4
 800919e:	f7f7 f8a7 	bl	80002f0 <__aeabi_d2uiz>
 80091a2:	0003      	movs	r3, r0
 80091a4:	602b      	str	r3, [r5, #0]
			round(m_LEDDriverARR * newBrightness));

	return ALL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	0018      	movs	r0, r3
 80091aa:	46bd      	mov	sp, r7
 80091ac:	b004      	add	sp, #16
 80091ae:	bdb0      	pop	{r4, r5, r7, pc}
 80091b0:	3ff00000 	.word	0x3ff00000
 80091b4:	200007dc 	.word	0x200007dc

080091b8 <BCSDriverChangeSpeed>:

uint8_t BCSDriverChangeSpeed(struct BCSDriverHandle *handle, uint8_t *data) {
 80091b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ba:	b087      	sub	sp, #28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
	double newSpeed;
	memcpy(&newSpeed, data, sizeof(double));
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	2308      	movs	r3, #8
 80091c6:	18fb      	adds	r3, r7, r3
 80091c8:	2208      	movs	r2, #8
 80091ca:	0018      	movs	r0, r3
 80091cc:	f001 f85e 	bl	800a28c <memcpy>

	if (newSpeed > 1.0 || newSpeed < 0)
 80091d0:	68b8      	ldr	r0, [r7, #8]
 80091d2:	68f9      	ldr	r1, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	4b2c      	ldr	r3, [pc, #176]	; (8009288 <BCSDriverChangeSpeed+0xd0>)
 80091d8:	f7f7 f84c 	bl	8000274 <__aeabi_dcmpgt>
 80091dc:	1e03      	subs	r3, r0, #0
 80091de:	d107      	bne.n	80091f0 <BCSDriverChangeSpeed+0x38>
 80091e0:	68b8      	ldr	r0, [r7, #8]
 80091e2:	68f9      	ldr	r1, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	2300      	movs	r3, #0
 80091e8:	f7f7 f830 	bl	800024c <__aeabi_dcmplt>
 80091ec:	1e03      	subs	r3, r0, #0
 80091ee:	d001      	beq.n	80091f4 <BCSDriverChangeSpeed+0x3c>
		return ANY_ERROR;
 80091f0:	23ff      	movs	r3, #255	; 0xff
 80091f2:	e045      	b.n	8009280 <BCSDriverChangeSpeed+0xc8>

	uint32_t newARR = m_BCSDriverMaxARR
			- round(newSpeed * (m_BCSDriverMaxARR - m_BCSDriverMinARR));
 80091f4:	4b25      	ldr	r3, [pc, #148]	; (800928c <BCSDriverChangeSpeed+0xd4>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	0018      	movs	r0, r3
 80091fa:	f7f8 ffd5 	bl	80021a8 <__aeabi_ui2d>
 80091fe:	0005      	movs	r5, r0
 8009200:	000e      	movs	r6, r1
 8009202:	4b22      	ldr	r3, [pc, #136]	; (800928c <BCSDriverChangeSpeed+0xd4>)
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	4b22      	ldr	r3, [pc, #136]	; (8009290 <BCSDriverChangeSpeed+0xd8>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	0018      	movs	r0, r3
 800920e:	f7f8 ffcb 	bl	80021a8 <__aeabi_ui2d>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	68fc      	ldr	r4, [r7, #12]
 8009216:	001a      	movs	r2, r3
 8009218:	0023      	movs	r3, r4
 800921a:	f7f8 f9b9 	bl	8001590 <__aeabi_dmul>
 800921e:	0003      	movs	r3, r0
 8009220:	000c      	movs	r4, r1
 8009222:	0018      	movs	r0, r3
 8009224:	0021      	movs	r1, r4
 8009226:	f001 f843 	bl	800a2b0 <round>
 800922a:	0003      	movs	r3, r0
 800922c:	000c      	movs	r4, r1
 800922e:	001a      	movs	r2, r3
 8009230:	0023      	movs	r3, r4
 8009232:	0028      	movs	r0, r5
 8009234:	0031      	movs	r1, r6
 8009236:	f7f8 fc2b 	bl	8001a90 <__aeabi_dsub>
 800923a:	0003      	movs	r3, r0
 800923c:	000c      	movs	r4, r1
	uint32_t newARR = m_BCSDriverMaxARR
 800923e:	0018      	movs	r0, r3
 8009240:	0021      	movs	r1, r4
 8009242:	f7f7 f855 	bl	80002f0 <__aeabi_d2uiz>
 8009246:	0003      	movs	r3, r0
 8009248:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_AUTORELOAD(handle->PWMTIM->Tim, newARR);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	62da      	str	r2, [r3, #44]	; 0x2c
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(handle->PWMTIM->Tim, handle->PWMTIM->Channel,
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3334      	adds	r3, #52	; 0x34
 800926a:	001a      	movs	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	089b      	lsrs	r3, r3, #2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	18d3      	adds	r3, r2, r3
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	0852      	lsrs	r2, r2, #1
 800927c:	601a      	str	r2, [r3, #0]
			newARR / 2);

	return ALL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	0018      	movs	r0, r3
 8009282:	46bd      	mov	sp, r7
 8009284:	b007      	add	sp, #28
 8009286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009288:	3ff00000 	.word	0x3ff00000
 800928c:	200007e0 	.word	0x200007e0
 8009290:	200007e4 	.word	0x200007e4

08009294 <BCSDriverMove>:

uint8_t BCSDriverMove(struct BCSDriverHandle *handle, uint8_t *data) {
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
	enum Direction direction = (enum Direction) data[0];
 800929e:	2317      	movs	r3, #23
 80092a0:	18fb      	adds	r3, r7, r3
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	7812      	ldrb	r2, [r2, #0]
 80092a6:	701a      	strb	r2, [r3, #0]
	uint16_t steps;
	memcpy(&steps, data + 1, sizeof(int16_t));
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	1c59      	adds	r1, r3, #1
 80092ac:	230e      	movs	r3, #14
 80092ae:	18fb      	adds	r3, r7, r3
 80092b0:	2202      	movs	r2, #2
 80092b2:	0018      	movs	r0, r3
 80092b4:	f000 ffea 	bl	800a28c <memcpy>
	steps = steps * 2 - 1;
 80092b8:	230e      	movs	r3, #14
 80092ba:	18fb      	adds	r3, r7, r3
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	18db      	adds	r3, r3, r3
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	3b01      	subs	r3, #1
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	230e      	movs	r3, #14
 80092c8:	18fb      	adds	r3, r7, r3
 80092ca:	801a      	strh	r2, [r3, #0]

	if (!(direction == FORWARD || direction == BACKWARD)) return ANY_ERROR;
 80092cc:	2317      	movs	r3, #23
 80092ce:	18fb      	adds	r3, r7, r3
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d006      	beq.n	80092e4 <BCSDriverMove+0x50>
 80092d6:	2317      	movs	r3, #23
 80092d8:	18fb      	adds	r3, r7, r3
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d001      	beq.n	80092e4 <BCSDriverMove+0x50>
 80092e0:	23ff      	movs	r3, #255	; 0xff
 80092e2:	e0e3      	b.n	80094ac <BCSDriverMove+0x218>
	if(steps > USHRT_MAX / 2) return ANY_ERROR;
 80092e4:	230e      	movs	r3, #14
 80092e6:	18fb      	adds	r3, r7, r3
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	b21b      	sxth	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	da01      	bge.n	80092f4 <BCSDriverMove+0x60>
 80092f0:	23ff      	movs	r3, #255	; 0xff
 80092f2:	e0db      	b.n	80094ac <BCSDriverMove+0x218>

	uint16_t doneSteps = __HAL_TIM_GET_COUNTER(handle->PWMTIM->ComplementTIM);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092fe:	2314      	movs	r3, #20
 8009300:	18fb      	adds	r3, r7, r3
 8009302:	801a      	strh	r2, [r3, #0]

	if(doneSteps != 0) {
 8009304:	2314      	movs	r3, #20
 8009306:	18fb      	adds	r3, r7, r3
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d100      	bne.n	8009310 <BCSDriverMove+0x7c>
 800930e:	e093      	b.n	8009438 <BCSDriverMove+0x1a4>
		__HAL_TIM_DISABLE(handle->PWMTIM->ComplementTIM);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	4a66      	ldr	r2, [pc, #408]	; (80094b4 <BCSDriverMove+0x220>)
 800931c:	4013      	ands	r3, r2
 800931e:	d113      	bne.n	8009348 <BCSDriverMove+0xb4>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	4a63      	ldr	r2, [pc, #396]	; (80094b8 <BCSDriverMove+0x224>)
 800932c:	4013      	ands	r3, r2
 800932e:	d10b      	bne.n	8009348 <BCSDriverMove+0xb4>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	6812      	ldr	r2, [r2, #0]
 800933c:	6892      	ldr	r2, [r2, #8]
 800933e:	6812      	ldr	r2, [r2, #0]
 8009340:	6812      	ldr	r2, [r2, #0]
 8009342:	2101      	movs	r1, #1
 8009344:	438a      	bics	r2, r1
 8009346:	601a      	str	r2, [r3, #0]

		doneSteps = __HAL_TIM_GET_COUNTER(handle->PWMTIM->ComplementTIM);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009352:	2314      	movs	r3, #20
 8009354:	18fb      	adds	r3, r7, r3
 8009356:	801a      	strh	r2, [r3, #0]
		int32_t leftSteps = __HAL_TIM_GET_AUTORELOAD(handle->PWMTIM->ComplementTIM) - doneSteps;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009362:	2314      	movs	r3, #20
 8009364:	18fb      	adds	r3, r7, r3
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	613b      	str	r3, [r7, #16]

		if(handle->CurrentDirection == direction){
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	7c1b      	ldrb	r3, [r3, #16]
 8009370:	2217      	movs	r2, #23
 8009372:	18ba      	adds	r2, r7, r2
 8009374:	7812      	ldrb	r2, [r2, #0]
 8009376:	429a      	cmp	r2, r3
 8009378:	d115      	bne.n	80093a6 <BCSDriverMove+0x112>
			if(leftSteps > USHRT_MAX - steps)
 800937a:	230e      	movs	r3, #14
 800937c:	18fb      	adds	r3, r7, r3
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	001a      	movs	r2, r3
 8009382:	4b4e      	ldr	r3, [pc, #312]	; (80094bc <BCSDriverMove+0x228>)
 8009384:	1a9a      	subs	r2, r3, r2
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	429a      	cmp	r2, r3
 800938a:	da01      	bge.n	8009390 <BCSDriverMove+0xfc>
				return ANY_ERROR;
 800938c:	23ff      	movs	r3, #255	; 0xff
 800938e:	e08d      	b.n	80094ac <BCSDriverMove+0x218>

			steps += leftSteps;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	b29a      	uxth	r2, r3
 8009394:	230e      	movs	r3, #14
 8009396:	18fb      	adds	r3, r7, r3
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	18d3      	adds	r3, r2, r3
 800939c:	b29a      	uxth	r2, r3
 800939e:	230e      	movs	r3, #14
 80093a0:	18fb      	adds	r3, r7, r3
 80093a2:	801a      	strh	r2, [r3, #0]
 80093a4:	e025      	b.n	80093f2 <BCSDriverMove+0x15e>
		}
		else {
			leftSteps -= steps;
 80093a6:	230e      	movs	r3, #14
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	001a      	movs	r2, r3
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	1a9b      	subs	r3, r3, r2
 80093b2:	613b      	str	r3, [r7, #16]
			if(leftSteps < 0) {
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	da13      	bge.n	80093e2 <BCSDriverMove+0x14e>
				HAL_GPIO_WritePin(handle->DirectionGPIO->GPIO, handle->DirectionGPIO->Pin,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	6818      	ldr	r0, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	8899      	ldrh	r1, [r3, #4]
 80093c6:	2317      	movs	r3, #23
 80093c8:	18fb      	adds	r3, r7, r3
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	1e5a      	subs	r2, r3, #1
 80093ce:	4193      	sbcs	r3, r2
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	001a      	movs	r2, r3
 80093d4:	f7f9 ffba 	bl	800334c <HAL_GPIO_WritePin>
						(direction) ? GPIO_PIN_SET : GPIO_PIN_RESET);
				handle->CurrentDirection = direction;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2217      	movs	r2, #23
 80093dc:	18ba      	adds	r2, r7, r2
 80093de:	7812      	ldrb	r2, [r2, #0]
 80093e0:	741a      	strb	r2, [r3, #16]
			}

			steps = (uint16_t)abs(leftSteps);
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	17da      	asrs	r2, r3, #31
 80093e6:	189b      	adds	r3, r3, r2
 80093e8:	4053      	eors	r3, r2
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	230e      	movs	r3, #14
 80093ee:	18fb      	adds	r3, r7, r3
 80093f0:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_AUTORELOAD(handle->PWMTIM->ComplementTIM, steps);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	220e      	movs	r2, #14
 80093fc:	18ba      	adds	r2, r7, r2
 80093fe:	8812      	ldrh	r2, [r2, #0]
 8009400:	62da      	str	r2, [r3, #44]	; 0x2c
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	220e      	movs	r2, #14
 800940a:	18ba      	adds	r2, r7, r2
 800940c:	8812      	ldrh	r2, [r2, #0]
 800940e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COUNTER(handle->PWMTIM->ComplementTIM, 0);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2200      	movs	r2, #0
 800941a:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_ENABLE(handle->PWMTIM->ComplementTIM);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	6812      	ldr	r2, [r2, #0]
 8009428:	6892      	ldr	r2, [r2, #8]
 800942a:	6812      	ldr	r2, [r2, #0]
 800942c:	6812      	ldr	r2, [r2, #0]
 800942e:	2101      	movs	r1, #1
 8009430:	430a      	orrs	r2, r1
 8009432:	601a      	str	r2, [r3, #0]
		return ALL_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	e039      	b.n	80094ac <BCSDriverMove+0x218>
	}

	__HAL_TIM_SET_AUTORELOAD(handle->PWMTIM->ComplementTIM, steps);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	220e      	movs	r2, #14
 8009442:	18ba      	adds	r2, r7, r2
 8009444:	8812      	ldrh	r2, [r2, #0]
 8009446:	62da      	str	r2, [r3, #44]	; 0x2c
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	220e      	movs	r2, #14
 8009450:	18ba      	adds	r2, r7, r2
 8009452:	8812      	ldrh	r2, [r2, #0]
 8009454:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(handle->DisableGPIO->GPIO, handle->DisableGPIO->Pin,
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	6818      	ldr	r0, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	889b      	ldrh	r3, [r3, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	0019      	movs	r1, r3
 8009466:	f7f9 ff71 	bl	800334c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(handle->DirectionGPIO->GPIO, handle->DirectionGPIO->Pin,
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	8899      	ldrh	r1, [r3, #4]
 8009476:	2317      	movs	r3, #23
 8009478:	18fb      	adds	r3, r7, r3
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	1e5a      	subs	r2, r3, #1
 800947e:	4193      	sbcs	r3, r2
 8009480:	b2db      	uxtb	r3, r3
 8009482:	001a      	movs	r2, r3
 8009484:	f7f9 ff62 	bl	800334c <HAL_GPIO_WritePin>
							(direction) ? GPIO_PIN_SET : GPIO_PIN_RESET);

	__HAL_TIM_ENABLE(handle->PWMTIM->ComplementTIM);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	6812      	ldr	r2, [r2, #0]
 8009494:	6892      	ldr	r2, [r2, #8]
 8009496:	6812      	ldr	r2, [r2, #0]
 8009498:	6812      	ldr	r2, [r2, #0]
 800949a:	2101      	movs	r1, #1
 800949c:	430a      	orrs	r2, r1
 800949e:	601a      	str	r2, [r3, #0]
	handle->CurrentDirection = direction;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2217      	movs	r2, #23
 80094a4:	18ba      	adds	r2, r7, r2
 80094a6:	7812      	ldrb	r2, [r2, #0]
 80094a8:	741a      	strb	r2, [r3, #16]

	return ALL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	0018      	movs	r0, r3
 80094ae:	46bd      	mov	sp, r7
 80094b0:	b006      	add	sp, #24
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	00001111 	.word	0x00001111
 80094b8:	00000444 	.word	0x00000444
 80094bc:	0000ffff 	.word	0x0000ffff

080094c0 <BCSDriverStop>:

uint8_t BCSDriverStop(struct BCSDriverHandle *handle) {
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]

	__HAL_TIM_DISABLE(handle->PWMTIM->ComplementTIM);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	4a16      	ldr	r2, [pc, #88]	; (800952c <BCSDriverStop+0x6c>)
 80094d4:	4013      	ands	r3, r2
 80094d6:	d113      	bne.n	8009500 <BCSDriverStop+0x40>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	4a13      	ldr	r2, [pc, #76]	; (8009530 <BCSDriverStop+0x70>)
 80094e4:	4013      	ands	r3, r2
 80094e6:	d10b      	bne.n	8009500 <BCSDriverStop+0x40>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6812      	ldr	r2, [r2, #0]
 80094f4:	6892      	ldr	r2, [r2, #8]
 80094f6:	6812      	ldr	r2, [r2, #0]
 80094f8:	6812      	ldr	r2, [r2, #0]
 80094fa:	2101      	movs	r1, #1
 80094fc:	438a      	bics	r2, r1
 80094fe:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->DisableGPIO->GPIO, handle->DisableGPIO->Pin,
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	889b      	ldrh	r3, [r3, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	0019      	movs	r1, r3
 8009510:	f7f9 ff1c 	bl	800334c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	__HAL_TIM_SET_COUNTER(handle->PWMTIM->ComplementTIM, 0);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2200      	movs	r2, #0
 800951e:	625a      	str	r2, [r3, #36]	; 0x24

	return ALL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	0018      	movs	r0, r3
 8009524:	46bd      	mov	sp, r7
 8009526:	b002      	add	sp, #8
 8009528:	bd80      	pop	{r7, pc}
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	00001111 	.word	0x00001111
 8009530:	00000444 	.word	0x00000444

08009534 <BCSDriverMoveToEnd>:

uint8_t BCSDriverMoveToEnd(struct BCSDriverHandle *handle, uint8_t *data) {
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
	enum Direction direction = (enum Direction) data[0];
 800953e:	230f      	movs	r3, #15
 8009540:	18fb      	adds	r3, r7, r3
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	7812      	ldrb	r2, [r2, #0]
 8009546:	701a      	strb	r2, [r3, #0]

	if (!(direction == FORWARD || direction == BACKWARD))
 8009548:	230f      	movs	r3, #15
 800954a:	18fb      	adds	r3, r7, r3
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d006      	beq.n	8009560 <BCSDriverMoveToEnd+0x2c>
 8009552:	230f      	movs	r3, #15
 8009554:	18fb      	adds	r3, r7, r3
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d001      	beq.n	8009560 <BCSDriverMoveToEnd+0x2c>
		return ANY_ERROR;
 800955c:	23ff      	movs	r3, #255	; 0xff
 800955e:	e030      	b.n	80095c2 <BCSDriverMoveToEnd+0x8e>

	HAL_GPIO_WritePin(handle->DirectionGPIO->GPIO, handle->DirectionGPIO->Pin,
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	8899      	ldrh	r1, [r3, #4]
 800956c:	230f      	movs	r3, #15
 800956e:	18fb      	adds	r3, r7, r3
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	1e5a      	subs	r2, r3, #1
 8009574:	4193      	sbcs	r3, r2
 8009576:	b2db      	uxtb	r3, r3
 8009578:	001a      	movs	r2, r3
 800957a:	f7f9 fee7 	bl	800334c <HAL_GPIO_WritePin>
			(direction) ? GPIO_PIN_SET : GPIO_PIN_RESET);

	__HAL_TIM_SET_AUTORELOAD(handle->PWMTIM->ComplementTIM, 0xFFFF);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a11      	ldr	r2, [pc, #68]	; (80095cc <BCSDriverMoveToEnd+0x98>)
 8009588:	62da      	str	r2, [r3, #44]	; 0x2c
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	4a0e      	ldr	r2, [pc, #56]	; (80095cc <BCSDriverMoveToEnd+0x98>)
 8009592:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(handle->DisableGPIO->GPIO, handle->DisableGPIO->Pin,
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	889b      	ldrh	r3, [r3, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	0019      	movs	r1, r3
 80095a4:	f7f9 fed2 	bl	800334c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	__HAL_TIM_ENABLE(handle->PWMTIM->ComplementTIM);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	6812      	ldr	r2, [r2, #0]
 80095b4:	6892      	ldr	r2, [r2, #8]
 80095b6:	6812      	ldr	r2, [r2, #0]
 80095b8:	6812      	ldr	r2, [r2, #0]
 80095ba:	2101      	movs	r1, #1
 80095bc:	430a      	orrs	r2, r1
 80095be:	601a      	str	r2, [r3, #0]

	return ALL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	0018      	movs	r0, r3
 80095c4:	46bd      	mov	sp, r7
 80095c6:	b004      	add	sp, #16
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	46c0      	nop			; (mov r8, r8)
 80095cc:	0000ffff 	.word	0x0000ffff

080095d0 <BufferParams>:
		.PageAddress = USER_DATA_FIRST_PAGE, .NbPages = 1 };

void BufferParams();
void UnbufferParams(uint32_t changedAddress, uint32_t changedSize);

void BufferParams() {
 80095d0:	b580      	push	{r7, lr}
 80095d2:	af00      	add	r7, sp, #0
	memcpy(m_paramsBuffer, ParamsUnion.Bytes, sizeof(struct ParamsStruct));
 80095d4:	4a05      	ldr	r2, [pc, #20]	; (80095ec <BufferParams+0x1c>)
 80095d6:	4b06      	ldr	r3, [pc, #24]	; (80095f0 <BufferParams+0x20>)
 80095d8:	0010      	movs	r0, r2
 80095da:	0019      	movs	r1, r3
 80095dc:	2350      	movs	r3, #80	; 0x50
 80095de:	001a      	movs	r2, r3
 80095e0:	f000 fe54 	bl	800a28c <memcpy>
}
 80095e4:	46c0      	nop			; (mov r8, r8)
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	46c0      	nop			; (mov r8, r8)
 80095ec:	200008a8 	.word	0x200008a8
 80095f0:	0800f800 	.word	0x0800f800

080095f4 <UnbufferParams>:

void UnbufferParams(uint32_t changedAddress, uint32_t changedSize) {
 80095f4:	b5b0      	push	{r4, r5, r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
	uint32_t currentAddress = (uint32_t)&ParamsUnion;
 80095fe:	4b25      	ldr	r3, [pc, #148]	; (8009694 <UnbufferParams+0xa0>)
 8009600:	60fb      	str	r3, [r7, #12]

	for (uint8_t i = 0;
 8009602:	230b      	movs	r3, #11
 8009604:	18fb      	adds	r3, r7, r3
 8009606:	2200      	movs	r2, #0
 8009608:	701a      	strb	r2, [r3, #0]
 800960a:	e039      	b.n	8009680 <UnbufferParams+0x8c>
			i < sizeof(struct ParamsStruct) / sizeof(uint16_t)
							+ sizeof(struct ParamsStruct) % sizeof(uint16_t);
			i++, currentAddress += sizeof(uint16_t)) {
		if (currentAddress == (uint32_t) changedAddress) {
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	429a      	cmp	r2, r3
 8009612:	d111      	bne.n	8009638 <UnbufferParams+0x44>
			currentAddress += changedSize - sizeof(uint16_t);
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	18d3      	adds	r3, r2, r3
 800961a:	3b02      	subs	r3, #2
 800961c:	60fb      	str	r3, [r7, #12]
			i += changedSize / sizeof(uint16_t) - 1;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	085b      	lsrs	r3, r3, #1
 8009622:	b2da      	uxtb	r2, r3
 8009624:	230b      	movs	r3, #11
 8009626:	18fb      	adds	r3, r7, r3
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	18d3      	adds	r3, r2, r3
 800962c:	b2da      	uxtb	r2, r3
 800962e:	230b      	movs	r3, #11
 8009630:	18fb      	adds	r3, r7, r3
 8009632:	3a01      	subs	r2, #1
 8009634:	701a      	strb	r2, [r3, #0]
			continue;
 8009636:	e019      	b.n	800966c <UnbufferParams+0x78>
		}

		if (m_paramsBuffer[i] == MAX16BIT)
 8009638:	230b      	movs	r3, #11
 800963a:	18fb      	adds	r3, r7, r3
 800963c:	781a      	ldrb	r2, [r3, #0]
 800963e:	4b16      	ldr	r3, [pc, #88]	; (8009698 <UnbufferParams+0xa4>)
 8009640:	0052      	lsls	r2, r2, #1
 8009642:	5ad3      	ldrh	r3, [r2, r3]
 8009644:	4a15      	ldr	r2, [pc, #84]	; (800969c <UnbufferParams+0xa8>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d00f      	beq.n	800966a <UnbufferParams+0x76>
			continue;

		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAddress,
				m_paramsBuffer[i]);
 800964a:	230b      	movs	r3, #11
 800964c:	18fb      	adds	r3, r7, r3
 800964e:	781a      	ldrb	r2, [r3, #0]
 8009650:	4b11      	ldr	r3, [pc, #68]	; (8009698 <UnbufferParams+0xa4>)
 8009652:	0052      	lsls	r2, r2, #1
 8009654:	5ad3      	ldrh	r3, [r2, r3]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAddress,
 8009656:	001c      	movs	r4, r3
 8009658:	2300      	movs	r3, #0
 800965a:	001d      	movs	r5, r3
 800965c:	68f9      	ldr	r1, [r7, #12]
 800965e:	0022      	movs	r2, r4
 8009660:	002b      	movs	r3, r5
 8009662:	2001      	movs	r0, #1
 8009664:	f7f9 fb04 	bl	8002c70 <HAL_FLASH_Program>
 8009668:	e000      	b.n	800966c <UnbufferParams+0x78>
			continue;
 800966a:	46c0      	nop			; (mov r8, r8)
			i++, currentAddress += sizeof(uint16_t)) {
 800966c:	230b      	movs	r3, #11
 800966e:	18fb      	adds	r3, r7, r3
 8009670:	781a      	ldrb	r2, [r3, #0]
 8009672:	230b      	movs	r3, #11
 8009674:	18fb      	adds	r3, r7, r3
 8009676:	3201      	adds	r2, #1
 8009678:	701a      	strb	r2, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3302      	adds	r3, #2
 800967e:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0;
 8009680:	230b      	movs	r3, #11
 8009682:	18fb      	adds	r3, r7, r3
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	2b27      	cmp	r3, #39	; 0x27
 8009688:	d9c0      	bls.n	800960c <UnbufferParams+0x18>
	}
}
 800968a:	46c0      	nop			; (mov r8, r8)
 800968c:	46bd      	mov	sp, r7
 800968e:	b004      	add	sp, #16
 8009690:	bdb0      	pop	{r4, r5, r7, pc}
 8009692:	46c0      	nop			; (mov r8, r8)
 8009694:	0800f800 	.word	0x0800f800
 8009698:	200008a8 	.word	0x200008a8
 800969c:	0000ffff 	.word	0x0000ffff

080096a0 <StartChangeFlashParam>:

void StartChangeFlashParam() {
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
	BufferParams();
 80096a4:	f7ff ff94 	bl	80095d0 <BufferParams>
	HAL_FLASH_Unlock();
 80096a8:	f7f9 fb7a 	bl	8002da0 <HAL_FLASH_Unlock>

	HAL_FLASHEx_Erase(&m_eraseInitStruct, &m_pageError);
 80096ac:	4a04      	ldr	r2, [pc, #16]	; (80096c0 <StartChangeFlashParam+0x20>)
 80096ae:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <StartChangeFlashParam+0x24>)
 80096b0:	0011      	movs	r1, r2
 80096b2:	0018      	movs	r0, r3
 80096b4:	f7f9 fc28 	bl	8002f08 <HAL_FLASHEx_Erase>
}
 80096b8:	46c0      	nop			; (mov r8, r8)
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	46c0      	nop			; (mov r8, r8)
 80096c0:	200007e8 	.word	0x200007e8
 80096c4:	2000028c 	.word	0x2000028c

080096c8 <EndChangeFlashParam>:

void EndChangeFlashParam(void *changedParamAddress, uint32_t changedSize) {
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
	UnbufferParams((uint32_t) changedParamAddress, changedSize);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	0011      	movs	r1, r2
 80096d8:	0018      	movs	r0, r3
 80096da:	f7ff ff8b 	bl	80095f4 <UnbufferParams>
	HAL_FLASH_Lock();
 80096de:	f7f9 fb79 	bl	8002dd4 <HAL_FLASH_Lock>
}
 80096e2:	46c0      	nop			; (mov r8, r8)
 80096e4:	46bd      	mov	sp, r7
 80096e6:	b002      	add	sp, #8
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096f2:	4b12      	ldr	r3, [pc, #72]	; (800973c <HAL_MspInit+0x50>)
 80096f4:	4a11      	ldr	r2, [pc, #68]	; (800973c <HAL_MspInit+0x50>)
 80096f6:	6992      	ldr	r2, [r2, #24]
 80096f8:	2101      	movs	r1, #1
 80096fa:	430a      	orrs	r2, r1
 80096fc:	619a      	str	r2, [r3, #24]
 80096fe:	4b0f      	ldr	r3, [pc, #60]	; (800973c <HAL_MspInit+0x50>)
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	2201      	movs	r2, #1
 8009704:	4013      	ands	r3, r2
 8009706:	607b      	str	r3, [r7, #4]
 8009708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800970a:	2305      	movs	r3, #5
 800970c:	425b      	negs	r3, r3
 800970e:	2200      	movs	r2, #0
 8009710:	2100      	movs	r1, #0
 8009712:	0018      	movs	r0, r3
 8009714:	f7f9 f868 	bl	80027e8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8009718:	2302      	movs	r3, #2
 800971a:	425b      	negs	r3, r3
 800971c:	2200      	movs	r2, #0
 800971e:	2100      	movs	r1, #0
 8009720:	0018      	movs	r0, r3
 8009722:	f7f9 f861 	bl	80027e8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009726:	2301      	movs	r3, #1
 8009728:	425b      	negs	r3, r3
 800972a:	2200      	movs	r2, #0
 800972c:	2100      	movs	r1, #0
 800972e:	0018      	movs	r0, r3
 8009730:	f7f9 f85a 	bl	80027e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009734:	46c0      	nop			; (mov r8, r8)
 8009736:	46bd      	mov	sp, r7
 8009738:	b002      	add	sp, #8
 800973a:	bd80      	pop	{r7, pc}
 800973c:	40021000 	.word	0x40021000

08009740 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009744:	f7f8 ff74 	bl	8002630 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8009748:	f7f9 f89c 	bl	8002884 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800974c:	46c0      	nop			; (mov r8, r8)
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009758:	4b05      	ldr	r3, [pc, #20]	; (8009770 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800975a:	0018      	movs	r0, r3
 800975c:	f7f9 f99e 	bl	8002a9c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009760:	4b04      	ldr	r3, [pc, #16]	; (8009774 <DMA1_Channel2_3_IRQHandler+0x20>)
 8009762:	0018      	movs	r0, r3
 8009764:	f7f9 f99a 	bl	8002a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8009768:	46c0      	nop			; (mov r8, r8)
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	46c0      	nop			; (mov r8, r8)
 8009770:	20000ac0 	.word	0x20000ac0
 8009774:	20000b04 	.word	0x20000b04

08009778 <DMA1_Channel4_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 and 5 interrupts.
*/
void DMA1_Channel4_5_IRQHandler(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800977c:	4b05      	ldr	r3, [pc, #20]	; (8009794 <DMA1_Channel4_5_IRQHandler+0x1c>)
 800977e:	0018      	movs	r0, r3
 8009780:	f7f9 f98c 	bl	8002a9c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009784:	4b04      	ldr	r3, [pc, #16]	; (8009798 <DMA1_Channel4_5_IRQHandler+0x20>)
 8009786:	0018      	movs	r0, r3
 8009788:	f7f9 f988 	bl	8002a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 800978c:	46c0      	nop			; (mov r8, r8)
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	46c0      	nop			; (mov r8, r8)
 8009794:	20000b48 	.word	0x20000b48
 8009798:	20000a7c 	.word	0x20000a7c

0800979c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
* @brief This function handles TIM1 break, update, trigger and commutation interrupts.
*/
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80097a0:	4b03      	ldr	r3, [pc, #12]	; (80097b0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80097a2:	0018      	movs	r0, r3
 80097a4:	f7fb f9cd 	bl	8004b42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80097a8:	46c0      	nop			; (mov r8, r8)
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	46c0      	nop			; (mov r8, r8)
 80097b0:	2000097c 	.word	0x2000097c

080097b4 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global and DAC underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80097b8:	4b03      	ldr	r3, [pc, #12]	; (80097c8 <TIM6_DAC_IRQHandler+0x14>)
 80097ba:	0018      	movs	r0, r3
 80097bc:	f7fb f9c1 	bl	8004b42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80097c0:	46c0      	nop			; (mov r8, r8)
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	46c0      	nop			; (mov r8, r8)
 80097c8:	2000093c 	.word	0x2000093c

080097cc <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80097d0:	4b03      	ldr	r3, [pc, #12]	; (80097e0 <TIM14_IRQHandler+0x14>)
 80097d2:	0018      	movs	r0, r3
 80097d4:	f7fb f9b5 	bl	8004b42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80097d8:	46c0      	nop			; (mov r8, r8)
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	46c0      	nop			; (mov r8, r8)
 80097e0:	200009fc 	.word	0x200009fc

080097e4 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80097e8:	4b03      	ldr	r3, [pc, #12]	; (80097f8 <TIM16_IRQHandler+0x14>)
 80097ea:	0018      	movs	r0, r3
 80097ec:	f7fb f9a9 	bl	8004b42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80097f0:	46c0      	nop			; (mov r8, r8)
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	46c0      	nop			; (mov r8, r8)
 80097f8:	20000a3c 	.word	0x20000a3c

080097fc <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009800:	4b03      	ldr	r3, [pc, #12]	; (8009810 <USART1_IRQHandler+0x14>)
 8009802:	0018      	movs	r0, r3
 8009804:	f7fc f944 	bl	8005a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009808:	46c0      	nop			; (mov r8, r8)
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	46c0      	nop			; (mov r8, r8)
 8009810:	20000b8c 	.word	0x20000b8c

08009814 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009818:	4b03      	ldr	r3, [pc, #12]	; (8009828 <USART2_IRQHandler+0x14>)
 800981a:	0018      	movs	r0, r3
 800981c:	f7fc f938 	bl	8005a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009820:	46c0      	nop			; (mov r8, r8)
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	46c0      	nop			; (mov r8, r8)
 8009828:	20000bfc 	.word	0x20000bfc

0800982c <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_1_IRQHandler(void) {
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8009830:	2001      	movs	r0, #1
 8009832:	f7f9 fda9 	bl	8003388 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8009836:	2002      	movs	r0, #2
 8009838:	f7f9 fda6 	bl	8003388 <HAL_GPIO_EXTI_IRQHandler>
}
 800983c:	46c0      	nop			; (mov r8, r8)
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void) {
 8009842:	b580      	push	{r7, lr}
 8009844:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8009846:	2004      	movs	r0, #4
 8009848:	f7f9 fd9e 	bl	8003388 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800984c:	2008      	movs	r0, #8
 800984e:	f7f9 fd9b 	bl	8003388 <HAL_GPIO_EXTI_IRQHandler>
}
 8009852:	46c0      	nop			; (mov r8, r8)
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void) {
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800985c:	2380      	movs	r3, #128	; 0x80
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	0018      	movs	r0, r3
 8009862:	f7f9 fd91 	bl	8003388 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8009866:	2380      	movs	r3, #128	; 0x80
 8009868:	011b      	lsls	r3, r3, #4
 800986a:	0018      	movs	r0, r3
 800986c:	f7f9 fd8c 	bl	8003388 <HAL_GPIO_EXTI_IRQHandler>
}
 8009870:	46c0      	nop			; (mov r8, r8)
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800987c:	4b1a      	ldr	r3, [pc, #104]	; (80098e8 <SystemInit+0x70>)
 800987e:	4a1a      	ldr	r2, [pc, #104]	; (80098e8 <SystemInit+0x70>)
 8009880:	6812      	ldr	r2, [r2, #0]
 8009882:	2101      	movs	r1, #1
 8009884:	430a      	orrs	r2, r1
 8009886:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8009888:	4b17      	ldr	r3, [pc, #92]	; (80098e8 <SystemInit+0x70>)
 800988a:	4a17      	ldr	r2, [pc, #92]	; (80098e8 <SystemInit+0x70>)
 800988c:	6852      	ldr	r2, [r2, #4]
 800988e:	4917      	ldr	r1, [pc, #92]	; (80098ec <SystemInit+0x74>)
 8009890:	400a      	ands	r2, r1
 8009892:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8009894:	4b14      	ldr	r3, [pc, #80]	; (80098e8 <SystemInit+0x70>)
 8009896:	4a14      	ldr	r2, [pc, #80]	; (80098e8 <SystemInit+0x70>)
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	4915      	ldr	r1, [pc, #84]	; (80098f0 <SystemInit+0x78>)
 800989c:	400a      	ands	r2, r1
 800989e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80098a0:	4b11      	ldr	r3, [pc, #68]	; (80098e8 <SystemInit+0x70>)
 80098a2:	4a11      	ldr	r2, [pc, #68]	; (80098e8 <SystemInit+0x70>)
 80098a4:	6812      	ldr	r2, [r2, #0]
 80098a6:	4913      	ldr	r1, [pc, #76]	; (80098f4 <SystemInit+0x7c>)
 80098a8:	400a      	ands	r2, r1
 80098aa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80098ac:	4b0e      	ldr	r3, [pc, #56]	; (80098e8 <SystemInit+0x70>)
 80098ae:	4a0e      	ldr	r2, [pc, #56]	; (80098e8 <SystemInit+0x70>)
 80098b0:	6852      	ldr	r2, [r2, #4]
 80098b2:	4911      	ldr	r1, [pc, #68]	; (80098f8 <SystemInit+0x80>)
 80098b4:	400a      	ands	r2, r1
 80098b6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80098b8:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <SystemInit+0x70>)
 80098ba:	4a0b      	ldr	r2, [pc, #44]	; (80098e8 <SystemInit+0x70>)
 80098bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80098be:	210f      	movs	r1, #15
 80098c0:	438a      	bics	r2, r1
 80098c2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 80098c4:	4b08      	ldr	r3, [pc, #32]	; (80098e8 <SystemInit+0x70>)
 80098c6:	4a08      	ldr	r2, [pc, #32]	; (80098e8 <SystemInit+0x70>)
 80098c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80098ca:	490c      	ldr	r1, [pc, #48]	; (80098fc <SystemInit+0x84>)
 80098cc:	400a      	ands	r2, r1
 80098ce:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <SystemInit+0x70>)
 80098d2:	4a05      	ldr	r2, [pc, #20]	; (80098e8 <SystemInit+0x70>)
 80098d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80098d6:	2101      	movs	r1, #1
 80098d8:	438a      	bics	r2, r1
 80098da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80098dc:	4b02      	ldr	r3, [pc, #8]	; (80098e8 <SystemInit+0x70>)
 80098de:	2200      	movs	r2, #0
 80098e0:	609a      	str	r2, [r3, #8]

}
 80098e2:	46c0      	nop			; (mov r8, r8)
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	40021000 	.word	0x40021000
 80098ec:	f8ffb80c 	.word	0xf8ffb80c
 80098f0:	fef6ffff 	.word	0xfef6ffff
 80098f4:	fffbffff 	.word	0xfffbffff
 80098f8:	ffc0ffff 	.word	0xffc0ffff
 80098fc:	fffffeac 	.word	0xfffffeac

08009900 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 8009906:	4b2c      	ldr	r3, [pc, #176]	; (80099b8 <MX_TIM1_Init+0xb8>)
 8009908:	4a2c      	ldr	r2, [pc, #176]	; (80099bc <MX_TIM1_Init+0xbc>)
 800990a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 800990c:	4b2a      	ldr	r3, [pc, #168]	; (80099b8 <MX_TIM1_Init+0xb8>)
 800990e:	2204      	movs	r2, #4
 8009910:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009912:	4b29      	ldr	r3, [pc, #164]	; (80099b8 <MX_TIM1_Init+0xb8>)
 8009914:	2200      	movs	r2, #0
 8009916:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8009918:	4b27      	ldr	r3, [pc, #156]	; (80099b8 <MX_TIM1_Init+0xb8>)
 800991a:	2200      	movs	r2, #0
 800991c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800991e:	4b26      	ldr	r3, [pc, #152]	; (80099b8 <MX_TIM1_Init+0xb8>)
 8009920:	2200      	movs	r2, #0
 8009922:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009924:	4b24      	ldr	r3, [pc, #144]	; (80099b8 <MX_TIM1_Init+0xb8>)
 8009926:	2200      	movs	r2, #0
 8009928:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800992a:	4b23      	ldr	r3, [pc, #140]	; (80099b8 <MX_TIM1_Init+0xb8>)
 800992c:	2200      	movs	r2, #0
 800992e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009930:	4b21      	ldr	r3, [pc, #132]	; (80099b8 <MX_TIM1_Init+0xb8>)
 8009932:	0018      	movs	r0, r3
 8009934:	f7fb f824 	bl	8004980 <HAL_TIM_Base_Init>
 8009938:	1e03      	subs	r3, r0, #0
 800993a:	d004      	beq.n	8009946 <MX_TIM1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 800993c:	4b20      	ldr	r3, [pc, #128]	; (80099c0 <MX_TIM1_Init+0xc0>)
 800993e:	2145      	movs	r1, #69	; 0x45
 8009940:	0018      	movs	r0, r3
 8009942:	f7ff f824 	bl	800898e <_Error_Handler>
  }

  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8009946:	4b1c      	ldr	r3, [pc, #112]	; (80099b8 <MX_TIM1_Init+0xb8>)
 8009948:	2108      	movs	r1, #8
 800994a:	0018      	movs	r0, r3
 800994c:	f7fb f8b4 	bl	8004ab8 <HAL_TIM_OnePulse_Init>
 8009950:	1e03      	subs	r3, r0, #0
 8009952:	d004      	beq.n	800995e <MX_TIM1_Init+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009954:	4b1a      	ldr	r3, [pc, #104]	; (80099c0 <MX_TIM1_Init+0xc0>)
 8009956:	214a      	movs	r1, #74	; 0x4a
 8009958:	0018      	movs	r0, r3
 800995a:	f7ff f818 	bl	800898e <_Error_Handler>
  }

  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800995e:	230c      	movs	r3, #12
 8009960:	18fb      	adds	r3, r7, r3
 8009962:	2207      	movs	r2, #7
 8009964:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8009966:	230c      	movs	r3, #12
 8009968:	18fb      	adds	r3, r7, r3
 800996a:	2210      	movs	r2, #16
 800996c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 800996e:	230c      	movs	r3, #12
 8009970:	18fa      	adds	r2, r7, r3
 8009972:	4b11      	ldr	r3, [pc, #68]	; (80099b8 <MX_TIM1_Init+0xb8>)
 8009974:	0011      	movs	r1, r2
 8009976:	0018      	movs	r0, r3
 8009978:	f7fb fab2 	bl	8004ee0 <HAL_TIM_SlaveConfigSynchronization>
 800997c:	1e03      	subs	r3, r0, #0
 800997e:	d004      	beq.n	800998a <MX_TIM1_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009980:	4b0f      	ldr	r3, [pc, #60]	; (80099c0 <MX_TIM1_Init+0xc0>)
 8009982:	2151      	movs	r1, #81	; 0x51
 8009984:	0018      	movs	r0, r3
 8009986:	f7ff f802 	bl	800898e <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800998a:	1d3b      	adds	r3, r7, #4
 800998c:	2210      	movs	r2, #16
 800998e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8009990:	1d3b      	adds	r3, r7, #4
 8009992:	2280      	movs	r2, #128	; 0x80
 8009994:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009996:	1d3a      	adds	r2, r7, #4
 8009998:	4b07      	ldr	r3, [pc, #28]	; (80099b8 <MX_TIM1_Init+0xb8>)
 800999a:	0011      	movs	r1, r2
 800999c:	0018      	movs	r0, r3
 800999e:	f7fb fec4 	bl	800572a <HAL_TIMEx_MasterConfigSynchronization>
 80099a2:	1e03      	subs	r3, r0, #0
 80099a4:	d004      	beq.n	80099b0 <MX_TIM1_Init+0xb0>
  {
    _Error_Handler(__FILE__, __LINE__);
 80099a6:	4b06      	ldr	r3, [pc, #24]	; (80099c0 <MX_TIM1_Init+0xc0>)
 80099a8:	2158      	movs	r1, #88	; 0x58
 80099aa:	0018      	movs	r0, r3
 80099ac:	f7fe ffef 	bl	800898e <_Error_Handler>
  }

}
 80099b0:	46c0      	nop			; (mov r8, r8)
 80099b2:	46bd      	mov	sp, r7
 80099b4:	b008      	add	sp, #32
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	2000097c 	.word	0x2000097c
 80099bc:	40012c00 	.word	0x40012c00
 80099c0:	0800a3a4 	.word	0x0800a3a4

080099c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	; 0x28
 80099c8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 80099ca:	4b31      	ldr	r3, [pc, #196]	; (8009a90 <MX_TIM2_Init+0xcc>)
 80099cc:	2280      	movs	r2, #128	; 0x80
 80099ce:	05d2      	lsls	r2, r2, #23
 80099d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80099d2:	4b2f      	ldr	r3, [pc, #188]	; (8009a90 <MX_TIM2_Init+0xcc>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099d8:	4b2d      	ldr	r3, [pc, #180]	; (8009a90 <MX_TIM2_Init+0xcc>)
 80099da:	2200      	movs	r2, #0
 80099dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80099de:	4b2c      	ldr	r3, [pc, #176]	; (8009a90 <MX_TIM2_Init+0xcc>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099e4:	4b2a      	ldr	r3, [pc, #168]	; (8009a90 <MX_TIM2_Init+0xcc>)
 80099e6:	2200      	movs	r2, #0
 80099e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099ea:	4b29      	ldr	r3, [pc, #164]	; (8009a90 <MX_TIM2_Init+0xcc>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80099f0:	4b27      	ldr	r3, [pc, #156]	; (8009a90 <MX_TIM2_Init+0xcc>)
 80099f2:	0018      	movs	r0, r3
 80099f4:	f7fa fff0 	bl	80049d8 <HAL_TIM_PWM_Init>
 80099f8:	1e03      	subs	r3, r0, #0
 80099fa:	d004      	beq.n	8009a06 <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80099fc:	4b25      	ldr	r3, [pc, #148]	; (8009a94 <MX_TIM2_Init+0xd0>)
 80099fe:	216a      	movs	r1, #106	; 0x6a
 8009a00:	0018      	movs	r0, r3
 8009a02:	f7fe ffc4 	bl	800898e <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009a06:	2320      	movs	r3, #32
 8009a08:	18fb      	adds	r3, r7, r3
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8009a0e:	2320      	movs	r3, #32
 8009a10:	18fb      	adds	r3, r7, r3
 8009a12:	2280      	movs	r2, #128	; 0x80
 8009a14:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009a16:	2320      	movs	r3, #32
 8009a18:	18fa      	adds	r2, r7, r3
 8009a1a:	4b1d      	ldr	r3, [pc, #116]	; (8009a90 <MX_TIM2_Init+0xcc>)
 8009a1c:	0011      	movs	r1, r2
 8009a1e:	0018      	movs	r0, r3
 8009a20:	f7fb fe83 	bl	800572a <HAL_TIMEx_MasterConfigSynchronization>
 8009a24:	1e03      	subs	r3, r0, #0
 8009a26:	d004      	beq.n	8009a32 <MX_TIM2_Init+0x6e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009a28:	4b1a      	ldr	r3, [pc, #104]	; (8009a94 <MX_TIM2_Init+0xd0>)
 8009a2a:	2171      	movs	r1, #113	; 0x71
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	f7fe ffae 	bl	800898e <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a32:	1d3b      	adds	r3, r7, #4
 8009a34:	2260      	movs	r2, #96	; 0x60
 8009a36:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8009a38:	1d3b      	adds	r3, r7, #4
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8009a3e:	1d3b      	adds	r3, r7, #4
 8009a40:	2202      	movs	r2, #2
 8009a42:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a44:	1d3b      	adds	r3, r7, #4
 8009a46:	2200      	movs	r2, #0
 8009a48:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a4a:	1d39      	adds	r1, r7, #4
 8009a4c:	4b10      	ldr	r3, [pc, #64]	; (8009a90 <MX_TIM2_Init+0xcc>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	0018      	movs	r0, r3
 8009a52:	f7fb f98d 	bl	8004d70 <HAL_TIM_PWM_ConfigChannel>
 8009a56:	1e03      	subs	r3, r0, #0
 8009a58:	d004      	beq.n	8009a64 <MX_TIM2_Init+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009a5a:	4b0e      	ldr	r3, [pc, #56]	; (8009a94 <MX_TIM2_Init+0xd0>)
 8009a5c:	217a      	movs	r1, #122	; 0x7a
 8009a5e:	0018      	movs	r0, r3
 8009a60:	f7fe ff95 	bl	800898e <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009a64:	1d39      	adds	r1, r7, #4
 8009a66:	4b0a      	ldr	r3, [pc, #40]	; (8009a90 <MX_TIM2_Init+0xcc>)
 8009a68:	2204      	movs	r2, #4
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	f7fb f980 	bl	8004d70 <HAL_TIM_PWM_ConfigChannel>
 8009a70:	1e03      	subs	r3, r0, #0
 8009a72:	d004      	beq.n	8009a7e <MX_TIM2_Init+0xba>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009a74:	4b07      	ldr	r3, [pc, #28]	; (8009a94 <MX_TIM2_Init+0xd0>)
 8009a76:	217f      	movs	r1, #127	; 0x7f
 8009a78:	0018      	movs	r0, r3
 8009a7a:	f7fe ff88 	bl	800898e <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8009a7e:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <MX_TIM2_Init+0xcc>)
 8009a80:	0018      	movs	r0, r3
 8009a82:	f000 f9b1 	bl	8009de8 <HAL_TIM_MspPostInit>

}
 8009a86:	46c0      	nop			; (mov r8, r8)
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	b00a      	add	sp, #40	; 0x28
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	46c0      	nop			; (mov r8, r8)
 8009a90:	200009bc 	.word	0x200009bc
 8009a94:	0800a3a4 	.word	0x0800a3a4

08009a98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	; 0x28
 8009a9c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 8009a9e:	4b30      	ldr	r3, [pc, #192]	; (8009b60 <MX_TIM3_Init+0xc8>)
 8009aa0:	4a30      	ldr	r2, [pc, #192]	; (8009b64 <MX_TIM3_Init+0xcc>)
 8009aa2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009aa4:	4b2e      	ldr	r3, [pc, #184]	; (8009b60 <MX_TIM3_Init+0xc8>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009aaa:	4b2d      	ldr	r3, [pc, #180]	; (8009b60 <MX_TIM3_Init+0xc8>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8009ab0:	4b2b      	ldr	r3, [pc, #172]	; (8009b60 <MX_TIM3_Init+0xc8>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ab6:	4b2a      	ldr	r3, [pc, #168]	; (8009b60 <MX_TIM3_Init+0xc8>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009abc:	4b28      	ldr	r3, [pc, #160]	; (8009b60 <MX_TIM3_Init+0xc8>)
 8009abe:	2200      	movs	r2, #0
 8009ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009ac2:	4b27      	ldr	r3, [pc, #156]	; (8009b60 <MX_TIM3_Init+0xc8>)
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f7fa ff87 	bl	80049d8 <HAL_TIM_PWM_Init>
 8009aca:	1e03      	subs	r3, r0, #0
 8009acc:	d004      	beq.n	8009ad8 <MX_TIM3_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009ace:	4b26      	ldr	r3, [pc, #152]	; (8009b68 <MX_TIM3_Init+0xd0>)
 8009ad0:	2193      	movs	r1, #147	; 0x93
 8009ad2:	0018      	movs	r0, r3
 8009ad4:	f7fe ff5b 	bl	800898e <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009ad8:	2320      	movs	r3, #32
 8009ada:	18fb      	adds	r3, r7, r3
 8009adc:	2220      	movs	r2, #32
 8009ade:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8009ae0:	2320      	movs	r3, #32
 8009ae2:	18fb      	adds	r3, r7, r3
 8009ae4:	2280      	movs	r2, #128	; 0x80
 8009ae6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009ae8:	2320      	movs	r3, #32
 8009aea:	18fa      	adds	r2, r7, r3
 8009aec:	4b1c      	ldr	r3, [pc, #112]	; (8009b60 <MX_TIM3_Init+0xc8>)
 8009aee:	0011      	movs	r1, r2
 8009af0:	0018      	movs	r0, r3
 8009af2:	f7fb fe1a 	bl	800572a <HAL_TIMEx_MasterConfigSynchronization>
 8009af6:	1e03      	subs	r3, r0, #0
 8009af8:	d004      	beq.n	8009b04 <MX_TIM3_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009afa:	4b1b      	ldr	r3, [pc, #108]	; (8009b68 <MX_TIM3_Init+0xd0>)
 8009afc:	219a      	movs	r1, #154	; 0x9a
 8009afe:	0018      	movs	r0, r3
 8009b00:	f7fe ff45 	bl	800898e <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b04:	1d3b      	adds	r3, r7, #4
 8009b06:	2260      	movs	r2, #96	; 0x60
 8009b08:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8009b0a:	1d3b      	adds	r3, r7, #4
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8009b10:	1d3b      	adds	r3, r7, #4
 8009b12:	2202      	movs	r2, #2
 8009b14:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b16:	1d3b      	adds	r3, r7, #4
 8009b18:	2200      	movs	r2, #0
 8009b1a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b1c:	1d39      	adds	r1, r7, #4
 8009b1e:	4b10      	ldr	r3, [pc, #64]	; (8009b60 <MX_TIM3_Init+0xc8>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	0018      	movs	r0, r3
 8009b24:	f7fb f924 	bl	8004d70 <HAL_TIM_PWM_ConfigChannel>
 8009b28:	1e03      	subs	r3, r0, #0
 8009b2a:	d004      	beq.n	8009b36 <MX_TIM3_Init+0x9e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009b2c:	4b0e      	ldr	r3, [pc, #56]	; (8009b68 <MX_TIM3_Init+0xd0>)
 8009b2e:	21a3      	movs	r1, #163	; 0xa3
 8009b30:	0018      	movs	r0, r3
 8009b32:	f7fe ff2c 	bl	800898e <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009b36:	1d39      	adds	r1, r7, #4
 8009b38:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <MX_TIM3_Init+0xc8>)
 8009b3a:	2204      	movs	r2, #4
 8009b3c:	0018      	movs	r0, r3
 8009b3e:	f7fb f917 	bl	8004d70 <HAL_TIM_PWM_ConfigChannel>
 8009b42:	1e03      	subs	r3, r0, #0
 8009b44:	d004      	beq.n	8009b50 <MX_TIM3_Init+0xb8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009b46:	4b08      	ldr	r3, [pc, #32]	; (8009b68 <MX_TIM3_Init+0xd0>)
 8009b48:	21a8      	movs	r1, #168	; 0xa8
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f7fe ff1f 	bl	800898e <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 8009b50:	4b03      	ldr	r3, [pc, #12]	; (8009b60 <MX_TIM3_Init+0xc8>)
 8009b52:	0018      	movs	r0, r3
 8009b54:	f000 f948 	bl	8009de8 <HAL_TIM_MspPostInit>

}
 8009b58:	46c0      	nop			; (mov r8, r8)
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	b00a      	add	sp, #40	; 0x28
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	200008fc 	.word	0x200008fc
 8009b64:	40000400 	.word	0x40000400
 8009b68:	0800a3a4 	.word	0x0800a3a4

08009b6c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8009b72:	4b1e      	ldr	r3, [pc, #120]	; (8009bec <MX_TIM6_Init+0x80>)
 8009b74:	4a1e      	ldr	r2, [pc, #120]	; (8009bf0 <MX_TIM6_Init+0x84>)
 8009b76:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42001;
 8009b78:	4b1c      	ldr	r3, [pc, #112]	; (8009bec <MX_TIM6_Init+0x80>)
 8009b7a:	4a1e      	ldr	r2, [pc, #120]	; (8009bf4 <MX_TIM6_Init+0x88>)
 8009b7c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b7e:	4b1b      	ldr	r3, [pc, #108]	; (8009bec <MX_TIM6_Init+0x80>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8009b84:	4b19      	ldr	r3, [pc, #100]	; (8009bec <MX_TIM6_Init+0x80>)
 8009b86:	2201      	movs	r2, #1
 8009b88:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b8a:	4b18      	ldr	r3, [pc, #96]	; (8009bec <MX_TIM6_Init+0x80>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009b90:	4b16      	ldr	r3, [pc, #88]	; (8009bec <MX_TIM6_Init+0x80>)
 8009b92:	0018      	movs	r0, r3
 8009b94:	f7fa fef4 	bl	8004980 <HAL_TIM_Base_Init>
 8009b98:	1e03      	subs	r3, r0, #0
 8009b9a:	d004      	beq.n	8009ba6 <MX_TIM6_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009b9c:	4b16      	ldr	r3, [pc, #88]	; (8009bf8 <MX_TIM6_Init+0x8c>)
 8009b9e:	21ba      	movs	r1, #186	; 0xba
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f7fe fef4 	bl	800898e <_Error_Handler>
  }

  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8009ba6:	4b11      	ldr	r3, [pc, #68]	; (8009bec <MX_TIM6_Init+0x80>)
 8009ba8:	2108      	movs	r1, #8
 8009baa:	0018      	movs	r0, r3
 8009bac:	f7fa ff84 	bl	8004ab8 <HAL_TIM_OnePulse_Init>
 8009bb0:	1e03      	subs	r3, r0, #0
 8009bb2:	d004      	beq.n	8009bbe <MX_TIM6_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009bb4:	4b10      	ldr	r3, [pc, #64]	; (8009bf8 <MX_TIM6_Init+0x8c>)
 8009bb6:	21bf      	movs	r1, #191	; 0xbf
 8009bb8:	0018      	movs	r0, r3
 8009bba:	f7fe fee8 	bl	800898e <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009bbe:	003b      	movs	r3, r7
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bc4:	003b      	movs	r3, r7
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009bca:	003a      	movs	r2, r7
 8009bcc:	4b07      	ldr	r3, [pc, #28]	; (8009bec <MX_TIM6_Init+0x80>)
 8009bce:	0011      	movs	r1, r2
 8009bd0:	0018      	movs	r0, r3
 8009bd2:	f7fb fdaa 	bl	800572a <HAL_TIMEx_MasterConfigSynchronization>
 8009bd6:	1e03      	subs	r3, r0, #0
 8009bd8:	d004      	beq.n	8009be4 <MX_TIM6_Init+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009bda:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <MX_TIM6_Init+0x8c>)
 8009bdc:	21c6      	movs	r1, #198	; 0xc6
 8009bde:	0018      	movs	r0, r3
 8009be0:	f7fe fed5 	bl	800898e <_Error_Handler>
  }

}
 8009be4:	46c0      	nop			; (mov r8, r8)
 8009be6:	46bd      	mov	sp, r7
 8009be8:	b002      	add	sp, #8
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	2000093c 	.word	0x2000093c
 8009bf0:	40001000 	.word	0x40001000
 8009bf4:	0000a411 	.word	0x0000a411
 8009bf8:	0800a3a4 	.word	0x0800a3a4

08009bfc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8009c00:	4b0f      	ldr	r3, [pc, #60]	; (8009c40 <MX_TIM14_Init+0x44>)
 8009c02:	4a10      	ldr	r2, [pc, #64]	; (8009c44 <MX_TIM14_Init+0x48>)
 8009c04:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 19999;
 8009c06:	4b0e      	ldr	r3, [pc, #56]	; (8009c40 <MX_TIM14_Init+0x44>)
 8009c08:	4a0f      	ldr	r2, [pc, #60]	; (8009c48 <MX_TIM14_Init+0x4c>)
 8009c0a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c0c:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <MX_TIM14_Init+0x44>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1199;
 8009c12:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <MX_TIM14_Init+0x44>)
 8009c14:	4a0d      	ldr	r2, [pc, #52]	; (8009c4c <MX_TIM14_Init+0x50>)
 8009c16:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c18:	4b09      	ldr	r3, [pc, #36]	; (8009c40 <MX_TIM14_Init+0x44>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c1e:	4b08      	ldr	r3, [pc, #32]	; (8009c40 <MX_TIM14_Init+0x44>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8009c24:	4b06      	ldr	r3, [pc, #24]	; (8009c40 <MX_TIM14_Init+0x44>)
 8009c26:	0018      	movs	r0, r3
 8009c28:	f7fa feaa 	bl	8004980 <HAL_TIM_Base_Init>
 8009c2c:	1e03      	subs	r3, r0, #0
 8009c2e:	d004      	beq.n	8009c3a <MX_TIM14_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009c30:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <MX_TIM14_Init+0x54>)
 8009c32:	21d6      	movs	r1, #214	; 0xd6
 8009c34:	0018      	movs	r0, r3
 8009c36:	f7fe feaa 	bl	800898e <_Error_Handler>
  }

}
 8009c3a:	46c0      	nop			; (mov r8, r8)
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	200009fc 	.word	0x200009fc
 8009c44:	40002000 	.word	0x40002000
 8009c48:	00004e1f 	.word	0x00004e1f
 8009c4c:	000004af 	.word	0x000004af
 8009c50:	0800a3a4 	.word	0x0800a3a4

08009c54 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8009c58:	4b17      	ldr	r3, [pc, #92]	; (8009cb8 <MX_TIM16_Init+0x64>)
 8009c5a:	4a18      	ldr	r2, [pc, #96]	; (8009cbc <MX_TIM16_Init+0x68>)
 8009c5c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 42001;
 8009c5e:	4b16      	ldr	r3, [pc, #88]	; (8009cb8 <MX_TIM16_Init+0x64>)
 8009c60:	4a17      	ldr	r2, [pc, #92]	; (8009cc0 <MX_TIM16_Init+0x6c>)
 8009c62:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c64:	4b14      	ldr	r3, [pc, #80]	; (8009cb8 <MX_TIM16_Init+0x64>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 8009c6a:	4b13      	ldr	r3, [pc, #76]	; (8009cb8 <MX_TIM16_Init+0x64>)
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c70:	4b11      	ldr	r3, [pc, #68]	; (8009cb8 <MX_TIM16_Init+0x64>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009c76:	4b10      	ldr	r3, [pc, #64]	; (8009cb8 <MX_TIM16_Init+0x64>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c7c:	4b0e      	ldr	r3, [pc, #56]	; (8009cb8 <MX_TIM16_Init+0x64>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009c82:	4b0d      	ldr	r3, [pc, #52]	; (8009cb8 <MX_TIM16_Init+0x64>)
 8009c84:	0018      	movs	r0, r3
 8009c86:	f7fa fe7b 	bl	8004980 <HAL_TIM_Base_Init>
 8009c8a:	1e03      	subs	r3, r0, #0
 8009c8c:	d004      	beq.n	8009c98 <MX_TIM16_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009c8e:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <MX_TIM16_Init+0x70>)
 8009c90:	21e7      	movs	r1, #231	; 0xe7
 8009c92:	0018      	movs	r0, r3
 8009c94:	f7fe fe7b 	bl	800898e <_Error_Handler>
  }

  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8009c98:	4b07      	ldr	r3, [pc, #28]	; (8009cb8 <MX_TIM16_Init+0x64>)
 8009c9a:	2108      	movs	r1, #8
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	f7fa ff0b 	bl	8004ab8 <HAL_TIM_OnePulse_Init>
 8009ca2:	1e03      	subs	r3, r0, #0
 8009ca4:	d004      	beq.n	8009cb0 <MX_TIM16_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009ca6:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <MX_TIM16_Init+0x70>)
 8009ca8:	21ec      	movs	r1, #236	; 0xec
 8009caa:	0018      	movs	r0, r3
 8009cac:	f7fe fe6f 	bl	800898e <_Error_Handler>
  }

}
 8009cb0:	46c0      	nop			; (mov r8, r8)
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	46c0      	nop			; (mov r8, r8)
 8009cb8:	20000a3c 	.word	0x20000a3c
 8009cbc:	40014400 	.word	0x40014400
 8009cc0:	0000a411 	.word	0x0000a411
 8009cc4:	0800a3a4 	.word	0x0800a3a4

08009cc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a27      	ldr	r2, [pc, #156]	; (8009d74 <HAL_TIM_Base_MspInit+0xac>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d10e      	bne.n	8009cf8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009cda:	4b27      	ldr	r3, [pc, #156]	; (8009d78 <HAL_TIM_Base_MspInit+0xb0>)
 8009cdc:	4a26      	ldr	r2, [pc, #152]	; (8009d78 <HAL_TIM_Base_MspInit+0xb0>)
 8009cde:	6992      	ldr	r2, [r2, #24]
 8009ce0:	2180      	movs	r1, #128	; 0x80
 8009ce2:	0109      	lsls	r1, r1, #4
 8009ce4:	430a      	orrs	r2, r1
 8009ce6:	619a      	str	r2, [r3, #24]
 8009ce8:	4b23      	ldr	r3, [pc, #140]	; (8009d78 <HAL_TIM_Base_MspInit+0xb0>)
 8009cea:	699a      	ldr	r2, [r3, #24]
 8009cec:	2380      	movs	r3, #128	; 0x80
 8009cee:	011b      	lsls	r3, r3, #4
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	617b      	str	r3, [r7, #20]
 8009cf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8009cf6:	e038      	b.n	8009d6a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a1f      	ldr	r2, [pc, #124]	; (8009d7c <HAL_TIM_Base_MspInit+0xb4>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d10c      	bne.n	8009d1c <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009d02:	4b1d      	ldr	r3, [pc, #116]	; (8009d78 <HAL_TIM_Base_MspInit+0xb0>)
 8009d04:	4a1c      	ldr	r2, [pc, #112]	; (8009d78 <HAL_TIM_Base_MspInit+0xb0>)
 8009d06:	69d2      	ldr	r2, [r2, #28]
 8009d08:	2110      	movs	r1, #16
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	61da      	str	r2, [r3, #28]
 8009d0e:	4b1a      	ldr	r3, [pc, #104]	; (8009d78 <HAL_TIM_Base_MspInit+0xb0>)
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	2210      	movs	r2, #16
 8009d14:	4013      	ands	r3, r2
 8009d16:	613b      	str	r3, [r7, #16]
 8009d18:	693b      	ldr	r3, [r7, #16]
}
 8009d1a:	e026      	b.n	8009d6a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM14)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a17      	ldr	r2, [pc, #92]	; (8009d80 <HAL_TIM_Base_MspInit+0xb8>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d10e      	bne.n	8009d44 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8009d26:	4b14      	ldr	r3, [pc, #80]	; (8009d78 <HAL_TIM_Base_MspInit+0xb0>)
 8009d28:	4a13      	ldr	r2, [pc, #76]	; (8009d78 <HAL_TIM_Base_MspInit+0xb0>)
 8009d2a:	69d2      	ldr	r2, [r2, #28]
 8009d2c:	2180      	movs	r1, #128	; 0x80
 8009d2e:	0049      	lsls	r1, r1, #1
 8009d30:	430a      	orrs	r2, r1
 8009d32:	61da      	str	r2, [r3, #28]
 8009d34:	4b10      	ldr	r3, [pc, #64]	; (8009d78 <HAL_TIM_Base_MspInit+0xb0>)
 8009d36:	69da      	ldr	r2, [r3, #28]
 8009d38:	2380      	movs	r3, #128	; 0x80
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	68fb      	ldr	r3, [r7, #12]
}
 8009d42:	e012      	b.n	8009d6a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a0e      	ldr	r2, [pc, #56]	; (8009d84 <HAL_TIM_Base_MspInit+0xbc>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d10d      	bne.n	8009d6a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009d4e:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <HAL_TIM_Base_MspInit+0xb0>)
 8009d50:	4a09      	ldr	r2, [pc, #36]	; (8009d78 <HAL_TIM_Base_MspInit+0xb0>)
 8009d52:	6992      	ldr	r2, [r2, #24]
 8009d54:	2180      	movs	r1, #128	; 0x80
 8009d56:	0289      	lsls	r1, r1, #10
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	619a      	str	r2, [r3, #24]
 8009d5c:	4b06      	ldr	r3, [pc, #24]	; (8009d78 <HAL_TIM_Base_MspInit+0xb0>)
 8009d5e:	699a      	ldr	r2, [r3, #24]
 8009d60:	2380      	movs	r3, #128	; 0x80
 8009d62:	029b      	lsls	r3, r3, #10
 8009d64:	4013      	ands	r3, r2
 8009d66:	60bb      	str	r3, [r7, #8]
 8009d68:	68bb      	ldr	r3, [r7, #8]
}
 8009d6a:	46c0      	nop			; (mov r8, r8)
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	b006      	add	sp, #24
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	46c0      	nop			; (mov r8, r8)
 8009d74:	40012c00 	.word	0x40012c00
 8009d78:	40021000 	.word	0x40021000
 8009d7c:	40001000 	.word	0x40001000
 8009d80:	40002000 	.word	0x40002000
 8009d84:	40014400 	.word	0x40014400

08009d88 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	2380      	movs	r3, #128	; 0x80
 8009d96:	05db      	lsls	r3, r3, #23
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d10c      	bne.n	8009db6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009d9c:	4b10      	ldr	r3, [pc, #64]	; (8009de0 <HAL_TIM_PWM_MspInit+0x58>)
 8009d9e:	4a10      	ldr	r2, [pc, #64]	; (8009de0 <HAL_TIM_PWM_MspInit+0x58>)
 8009da0:	69d2      	ldr	r2, [r2, #28]
 8009da2:	2101      	movs	r1, #1
 8009da4:	430a      	orrs	r2, r1
 8009da6:	61da      	str	r2, [r3, #28]
 8009da8:	4b0d      	ldr	r3, [pc, #52]	; (8009de0 <HAL_TIM_PWM_MspInit+0x58>)
 8009daa:	69db      	ldr	r3, [r3, #28]
 8009dac:	2201      	movs	r2, #1
 8009dae:	4013      	ands	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8009db4:	e010      	b.n	8009dd8 <HAL_TIM_PWM_MspInit+0x50>
  else if(tim_pwmHandle->Instance==TIM3)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a0a      	ldr	r2, [pc, #40]	; (8009de4 <HAL_TIM_PWM_MspInit+0x5c>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d10b      	bne.n	8009dd8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009dc0:	4b07      	ldr	r3, [pc, #28]	; (8009de0 <HAL_TIM_PWM_MspInit+0x58>)
 8009dc2:	4a07      	ldr	r2, [pc, #28]	; (8009de0 <HAL_TIM_PWM_MspInit+0x58>)
 8009dc4:	69d2      	ldr	r2, [r2, #28]
 8009dc6:	2102      	movs	r1, #2
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	61da      	str	r2, [r3, #28]
 8009dcc:	4b04      	ldr	r3, [pc, #16]	; (8009de0 <HAL_TIM_PWM_MspInit+0x58>)
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	60bb      	str	r3, [r7, #8]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
}
 8009dd8:	46c0      	nop			; (mov r8, r8)
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	b004      	add	sp, #16
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	40021000 	.word	0x40021000
 8009de4:	40000400 	.word	0x40000400

08009de8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	2380      	movs	r3, #128	; 0x80
 8009df6:	05db      	lsls	r3, r3, #23
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d138      	bne.n	8009e6e <HAL_TIM_MspPostInit+0x86>
  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8009dfc:	230c      	movs	r3, #12
 8009dfe:	18fb      	adds	r3, r7, r3
 8009e00:	2280      	movs	r2, #128	; 0x80
 8009e02:	0212      	lsls	r2, r2, #8
 8009e04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e06:	230c      	movs	r3, #12
 8009e08:	18fb      	adds	r3, r7, r3
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e0e:	230c      	movs	r3, #12
 8009e10:	18fb      	adds	r3, r7, r3
 8009e12:	2200      	movs	r2, #0
 8009e14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e16:	230c      	movs	r3, #12
 8009e18:	18fb      	adds	r3, r7, r3
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8009e1e:	230c      	movs	r3, #12
 8009e20:	18fb      	adds	r3, r7, r3
 8009e22:	2202      	movs	r2, #2
 8009e24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e26:	230c      	movs	r3, #12
 8009e28:	18fa      	adds	r2, r7, r3
 8009e2a:	2390      	movs	r3, #144	; 0x90
 8009e2c:	05db      	lsls	r3, r3, #23
 8009e2e:	0011      	movs	r1, r2
 8009e30:	0018      	movs	r0, r3
 8009e32:	f7f9 f917 	bl	8003064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009e36:	230c      	movs	r3, #12
 8009e38:	18fb      	adds	r3, r7, r3
 8009e3a:	2208      	movs	r2, #8
 8009e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e3e:	230c      	movs	r3, #12
 8009e40:	18fb      	adds	r3, r7, r3
 8009e42:	2202      	movs	r2, #2
 8009e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e46:	230c      	movs	r3, #12
 8009e48:	18fb      	adds	r3, r7, r3
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e4e:	230c      	movs	r3, #12
 8009e50:	18fb      	adds	r3, r7, r3
 8009e52:	2200      	movs	r2, #0
 8009e54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8009e56:	230c      	movs	r3, #12
 8009e58:	18fb      	adds	r3, r7, r3
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e5e:	230c      	movs	r3, #12
 8009e60:	18fb      	adds	r3, r7, r3
 8009e62:	4a15      	ldr	r2, [pc, #84]	; (8009eb8 <HAL_TIM_MspPostInit+0xd0>)
 8009e64:	0019      	movs	r1, r3
 8009e66:	0010      	movs	r0, r2
 8009e68:	f7f9 f8fc 	bl	8003064 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009e6c:	e01f      	b.n	8009eae <HAL_TIM_MspPostInit+0xc6>
  else if(timHandle->Instance==TIM3)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a12      	ldr	r2, [pc, #72]	; (8009ebc <HAL_TIM_MspPostInit+0xd4>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d11a      	bne.n	8009eae <HAL_TIM_MspPostInit+0xc6>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8009e78:	230c      	movs	r3, #12
 8009e7a:	18fb      	adds	r3, r7, r3
 8009e7c:	2230      	movs	r2, #48	; 0x30
 8009e7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e80:	230c      	movs	r3, #12
 8009e82:	18fb      	adds	r3, r7, r3
 8009e84:	2202      	movs	r2, #2
 8009e86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e88:	230c      	movs	r3, #12
 8009e8a:	18fb      	adds	r3, r7, r3
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e90:	230c      	movs	r3, #12
 8009e92:	18fb      	adds	r3, r7, r3
 8009e94:	2200      	movs	r2, #0
 8009e96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8009e98:	230c      	movs	r3, #12
 8009e9a:	18fb      	adds	r3, r7, r3
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ea0:	230c      	movs	r3, #12
 8009ea2:	18fb      	adds	r3, r7, r3
 8009ea4:	4a04      	ldr	r2, [pc, #16]	; (8009eb8 <HAL_TIM_MspPostInit+0xd0>)
 8009ea6:	0019      	movs	r1, r3
 8009ea8:	0010      	movs	r0, r2
 8009eaa:	f7f9 f8db 	bl	8003064 <HAL_GPIO_Init>
}
 8009eae:	46c0      	nop			; (mov r8, r8)
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	b008      	add	sp, #32
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	46c0      	nop			; (mov r8, r8)
 8009eb8:	48000400 	.word	0x48000400
 8009ebc:	40000400 	.word	0x40000400

08009ec0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8009ec4:	4b16      	ldr	r3, [pc, #88]	; (8009f20 <MX_USART1_UART_Init+0x60>)
 8009ec6:	4a17      	ldr	r2, [pc, #92]	; (8009f24 <MX_USART1_UART_Init+0x64>)
 8009ec8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009eca:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <MX_USART1_UART_Init+0x60>)
 8009ecc:	22e1      	movs	r2, #225	; 0xe1
 8009ece:	0252      	lsls	r2, r2, #9
 8009ed0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009ed2:	4b13      	ldr	r3, [pc, #76]	; (8009f20 <MX_USART1_UART_Init+0x60>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009ed8:	4b11      	ldr	r3, [pc, #68]	; (8009f20 <MX_USART1_UART_Init+0x60>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009ede:	4b10      	ldr	r3, [pc, #64]	; (8009f20 <MX_USART1_UART_Init+0x60>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009ee4:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <MX_USART1_UART_Init+0x60>)
 8009ee6:	220c      	movs	r2, #12
 8009ee8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009eea:	4b0d      	ldr	r3, [pc, #52]	; (8009f20 <MX_USART1_UART_Init+0x60>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009ef0:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <MX_USART1_UART_Init+0x60>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009ef6:	4b0a      	ldr	r3, [pc, #40]	; (8009f20 <MX_USART1_UART_Init+0x60>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009efc:	4b08      	ldr	r3, [pc, #32]	; (8009f20 <MX_USART1_UART_Init+0x60>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009f02:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <MX_USART1_UART_Init+0x60>)
 8009f04:	0018      	movs	r0, r3
 8009f06:	f7fb fc63 	bl	80057d0 <HAL_UART_Init>
 8009f0a:	1e03      	subs	r3, r0, #0
 8009f0c:	d004      	beq.n	8009f18 <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009f0e:	4b06      	ldr	r3, [pc, #24]	; (8009f28 <MX_USART1_UART_Init+0x68>)
 8009f10:	214a      	movs	r1, #74	; 0x4a
 8009f12:	0018      	movs	r0, r3
 8009f14:	f7fe fd3b 	bl	800898e <_Error_Handler>
  }

}
 8009f18:	46c0      	nop			; (mov r8, r8)
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	20000b8c 	.word	0x20000b8c
 8009f24:	40013800 	.word	0x40013800
 8009f28:	0800a3b4 	.word	0x0800a3b4

08009f2c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8009f30:	4b17      	ldr	r3, [pc, #92]	; (8009f90 <MX_USART2_UART_Init+0x64>)
 8009f32:	4a18      	ldr	r2, [pc, #96]	; (8009f94 <MX_USART2_UART_Init+0x68>)
 8009f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009f36:	4b16      	ldr	r3, [pc, #88]	; (8009f90 <MX_USART2_UART_Init+0x64>)
 8009f38:	22e1      	movs	r2, #225	; 0xe1
 8009f3a:	0252      	lsls	r2, r2, #9
 8009f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009f3e:	4b14      	ldr	r3, [pc, #80]	; (8009f90 <MX_USART2_UART_Init+0x64>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009f44:	4b12      	ldr	r3, [pc, #72]	; (8009f90 <MX_USART2_UART_Init+0x64>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009f4a:	4b11      	ldr	r3, [pc, #68]	; (8009f90 <MX_USART2_UART_Init+0x64>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009f50:	4b0f      	ldr	r3, [pc, #60]	; (8009f90 <MX_USART2_UART_Init+0x64>)
 8009f52:	220c      	movs	r2, #12
 8009f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f56:	4b0e      	ldr	r3, [pc, #56]	; (8009f90 <MX_USART2_UART_Init+0x64>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f5c:	4b0c      	ldr	r3, [pc, #48]	; (8009f90 <MX_USART2_UART_Init+0x64>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009f62:	4b0b      	ldr	r3, [pc, #44]	; (8009f90 <MX_USART2_UART_Init+0x64>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009f68:	4b09      	ldr	r3, [pc, #36]	; (8009f90 <MX_USART2_UART_Init+0x64>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8009f6e:	4808      	ldr	r0, [pc, #32]	; (8009f90 <MX_USART2_UART_Init+0x64>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	2200      	movs	r2, #0
 8009f74:	2100      	movs	r1, #0
 8009f76:	f7fc fb6b 	bl	8006650 <HAL_RS485Ex_Init>
 8009f7a:	1e03      	subs	r3, r0, #0
 8009f7c:	d004      	beq.n	8009f88 <MX_USART2_UART_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009f7e:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <MX_USART2_UART_Init+0x6c>)
 8009f80:	215f      	movs	r1, #95	; 0x5f
 8009f82:	0018      	movs	r0, r3
 8009f84:	f7fe fd03 	bl	800898e <_Error_Handler>
  }

}
 8009f88:	46c0      	nop			; (mov r8, r8)
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	46c0      	nop			; (mov r8, r8)
 8009f90:	20000bfc 	.word	0x20000bfc
 8009f94:	40004400 	.word	0x40004400
 8009f98:	0800a3b4 	.word	0x0800a3b4

08009f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08a      	sub	sp, #40	; 0x28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a85      	ldr	r2, [pc, #532]	; (800a1c0 <HAL_UART_MspInit+0x224>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d000      	beq.n	8009fb0 <HAL_UART_MspInit+0x14>
 8009fae:	e07f      	b.n	800a0b0 <HAL_UART_MspInit+0x114>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009fb0:	4b84      	ldr	r3, [pc, #528]	; (800a1c4 <HAL_UART_MspInit+0x228>)
 8009fb2:	4a84      	ldr	r2, [pc, #528]	; (800a1c4 <HAL_UART_MspInit+0x228>)
 8009fb4:	6992      	ldr	r2, [r2, #24]
 8009fb6:	2180      	movs	r1, #128	; 0x80
 8009fb8:	01c9      	lsls	r1, r1, #7
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	619a      	str	r2, [r3, #24]
 8009fbe:	4b81      	ldr	r3, [pc, #516]	; (800a1c4 <HAL_UART_MspInit+0x228>)
 8009fc0:	699a      	ldr	r2, [r3, #24]
 8009fc2:	2380      	movs	r3, #128	; 0x80
 8009fc4:	01db      	lsls	r3, r3, #7
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	613b      	str	r3, [r7, #16]
 8009fca:	693b      	ldr	r3, [r7, #16]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009fcc:	2314      	movs	r3, #20
 8009fce:	18fb      	adds	r3, r7, r3
 8009fd0:	22c0      	movs	r2, #192	; 0xc0
 8009fd2:	00d2      	lsls	r2, r2, #3
 8009fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fd6:	2314      	movs	r3, #20
 8009fd8:	18fb      	adds	r3, r7, r3
 8009fda:	2202      	movs	r2, #2
 8009fdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fde:	2314      	movs	r3, #20
 8009fe0:	18fb      	adds	r3, r7, r3
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009fe6:	2314      	movs	r3, #20
 8009fe8:	18fb      	adds	r3, r7, r3
 8009fea:	2203      	movs	r2, #3
 8009fec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8009fee:	2314      	movs	r3, #20
 8009ff0:	18fb      	adds	r3, r7, r3
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ff6:	2314      	movs	r3, #20
 8009ff8:	18fa      	adds	r2, r7, r3
 8009ffa:	2390      	movs	r3, #144	; 0x90
 8009ffc:	05db      	lsls	r3, r3, #23
 8009ffe:	0011      	movs	r1, r2
 800a000:	0018      	movs	r0, r3
 800a002:	f7f9 f82f 	bl	8003064 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800a006:	4b70      	ldr	r3, [pc, #448]	; (800a1c8 <HAL_UART_MspInit+0x22c>)
 800a008:	4a70      	ldr	r2, [pc, #448]	; (800a1cc <HAL_UART_MspInit+0x230>)
 800a00a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a00c:	4b6e      	ldr	r3, [pc, #440]	; (800a1c8 <HAL_UART_MspInit+0x22c>)
 800a00e:	2200      	movs	r2, #0
 800a010:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a012:	4b6d      	ldr	r3, [pc, #436]	; (800a1c8 <HAL_UART_MspInit+0x22c>)
 800a014:	2200      	movs	r2, #0
 800a016:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a018:	4b6b      	ldr	r3, [pc, #428]	; (800a1c8 <HAL_UART_MspInit+0x22c>)
 800a01a:	2280      	movs	r2, #128	; 0x80
 800a01c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a01e:	4b6a      	ldr	r3, [pc, #424]	; (800a1c8 <HAL_UART_MspInit+0x22c>)
 800a020:	2200      	movs	r2, #0
 800a022:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a024:	4b68      	ldr	r3, [pc, #416]	; (800a1c8 <HAL_UART_MspInit+0x22c>)
 800a026:	2200      	movs	r2, #0
 800a028:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800a02a:	4b67      	ldr	r3, [pc, #412]	; (800a1c8 <HAL_UART_MspInit+0x22c>)
 800a02c:	2220      	movs	r2, #32
 800a02e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a030:	4b65      	ldr	r3, [pc, #404]	; (800a1c8 <HAL_UART_MspInit+0x22c>)
 800a032:	2280      	movs	r2, #128	; 0x80
 800a034:	0152      	lsls	r2, r2, #5
 800a036:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a038:	4b63      	ldr	r3, [pc, #396]	; (800a1c8 <HAL_UART_MspInit+0x22c>)
 800a03a:	0018      	movs	r0, r3
 800a03c:	f7f8 fc2e 	bl	800289c <HAL_DMA_Init>
 800a040:	1e03      	subs	r3, r0, #0
 800a042:	d004      	beq.n	800a04e <HAL_UART_MspInit+0xb2>
    {
      _Error_Handler(__FILE__, __LINE__);
 800a044:	4b62      	ldr	r3, [pc, #392]	; (800a1d0 <HAL_UART_MspInit+0x234>)
 800a046:	2187      	movs	r1, #135	; 0x87
 800a048:	0018      	movs	r0, r3
 800a04a:	f7fe fca0 	bl	800898e <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a5d      	ldr	r2, [pc, #372]	; (800a1c8 <HAL_UART_MspInit+0x22c>)
 800a052:	665a      	str	r2, [r3, #100]	; 0x64
 800a054:	4b5c      	ldr	r3, [pc, #368]	; (800a1c8 <HAL_UART_MspInit+0x22c>)
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800a05a:	4b5e      	ldr	r3, [pc, #376]	; (800a1d4 <HAL_UART_MspInit+0x238>)
 800a05c:	4a5e      	ldr	r2, [pc, #376]	; (800a1d8 <HAL_UART_MspInit+0x23c>)
 800a05e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a060:	4b5c      	ldr	r3, [pc, #368]	; (800a1d4 <HAL_UART_MspInit+0x238>)
 800a062:	2210      	movs	r2, #16
 800a064:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a066:	4b5b      	ldr	r3, [pc, #364]	; (800a1d4 <HAL_UART_MspInit+0x238>)
 800a068:	2200      	movs	r2, #0
 800a06a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a06c:	4b59      	ldr	r3, [pc, #356]	; (800a1d4 <HAL_UART_MspInit+0x238>)
 800a06e:	2280      	movs	r2, #128	; 0x80
 800a070:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a072:	4b58      	ldr	r3, [pc, #352]	; (800a1d4 <HAL_UART_MspInit+0x238>)
 800a074:	2200      	movs	r2, #0
 800a076:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a078:	4b56      	ldr	r3, [pc, #344]	; (800a1d4 <HAL_UART_MspInit+0x238>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a07e:	4b55      	ldr	r3, [pc, #340]	; (800a1d4 <HAL_UART_MspInit+0x238>)
 800a080:	2200      	movs	r2, #0
 800a082:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a084:	4b53      	ldr	r3, [pc, #332]	; (800a1d4 <HAL_UART_MspInit+0x238>)
 800a086:	2280      	movs	r2, #128	; 0x80
 800a088:	0152      	lsls	r2, r2, #5
 800a08a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a08c:	4b51      	ldr	r3, [pc, #324]	; (800a1d4 <HAL_UART_MspInit+0x238>)
 800a08e:	0018      	movs	r0, r3
 800a090:	f7f8 fc04 	bl	800289c <HAL_DMA_Init>
 800a094:	1e03      	subs	r3, r0, #0
 800a096:	d004      	beq.n	800a0a2 <HAL_UART_MspInit+0x106>
    {
      _Error_Handler(__FILE__, __LINE__);
 800a098:	4b4d      	ldr	r3, [pc, #308]	; (800a1d0 <HAL_UART_MspInit+0x234>)
 800a09a:	2197      	movs	r1, #151	; 0x97
 800a09c:	0018      	movs	r0, r3
 800a09e:	f7fe fc76 	bl	800898e <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a4b      	ldr	r2, [pc, #300]	; (800a1d4 <HAL_UART_MspInit+0x238>)
 800a0a6:	661a      	str	r2, [r3, #96]	; 0x60
 800a0a8:	4b4a      	ldr	r3, [pc, #296]	; (800a1d4 <HAL_UART_MspInit+0x238>)
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a0ae:	e083      	b.n	800a1b8 <HAL_UART_MspInit+0x21c>
  else if(uartHandle->Instance==USART2)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a49      	ldr	r2, [pc, #292]	; (800a1dc <HAL_UART_MspInit+0x240>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d000      	beq.n	800a0bc <HAL_UART_MspInit+0x120>
 800a0ba:	e07d      	b.n	800a1b8 <HAL_UART_MspInit+0x21c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a0bc:	4b41      	ldr	r3, [pc, #260]	; (800a1c4 <HAL_UART_MspInit+0x228>)
 800a0be:	4a41      	ldr	r2, [pc, #260]	; (800a1c4 <HAL_UART_MspInit+0x228>)
 800a0c0:	69d2      	ldr	r2, [r2, #28]
 800a0c2:	2180      	movs	r1, #128	; 0x80
 800a0c4:	0289      	lsls	r1, r1, #10
 800a0c6:	430a      	orrs	r2, r1
 800a0c8:	61da      	str	r2, [r3, #28]
 800a0ca:	4b3e      	ldr	r3, [pc, #248]	; (800a1c4 <HAL_UART_MspInit+0x228>)
 800a0cc:	69da      	ldr	r2, [r3, #28]
 800a0ce:	2380      	movs	r3, #128	; 0x80
 800a0d0:	029b      	lsls	r3, r3, #10
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	60fb      	str	r3, [r7, #12]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800a0d8:	2314      	movs	r3, #20
 800a0da:	18fb      	adds	r3, r7, r3
 800a0dc:	220e      	movs	r2, #14
 800a0de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0e0:	2314      	movs	r3, #20
 800a0e2:	18fb      	adds	r3, r7, r3
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0e8:	2314      	movs	r3, #20
 800a0ea:	18fb      	adds	r3, r7, r3
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a0f0:	2314      	movs	r3, #20
 800a0f2:	18fb      	adds	r3, r7, r3
 800a0f4:	2203      	movs	r2, #3
 800a0f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800a0f8:	2314      	movs	r3, #20
 800a0fa:	18fb      	adds	r3, r7, r3
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a100:	2314      	movs	r3, #20
 800a102:	18fa      	adds	r2, r7, r3
 800a104:	2390      	movs	r3, #144	; 0x90
 800a106:	05db      	lsls	r3, r3, #23
 800a108:	0011      	movs	r1, r2
 800a10a:	0018      	movs	r0, r3
 800a10c:	f7f8 ffaa 	bl	8003064 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800a110:	4b33      	ldr	r3, [pc, #204]	; (800a1e0 <HAL_UART_MspInit+0x244>)
 800a112:	4a34      	ldr	r2, [pc, #208]	; (800a1e4 <HAL_UART_MspInit+0x248>)
 800a114:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a116:	4b32      	ldr	r3, [pc, #200]	; (800a1e0 <HAL_UART_MspInit+0x244>)
 800a118:	2200      	movs	r2, #0
 800a11a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a11c:	4b30      	ldr	r3, [pc, #192]	; (800a1e0 <HAL_UART_MspInit+0x244>)
 800a11e:	2200      	movs	r2, #0
 800a120:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a122:	4b2f      	ldr	r3, [pc, #188]	; (800a1e0 <HAL_UART_MspInit+0x244>)
 800a124:	2280      	movs	r2, #128	; 0x80
 800a126:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a128:	4b2d      	ldr	r3, [pc, #180]	; (800a1e0 <HAL_UART_MspInit+0x244>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a12e:	4b2c      	ldr	r3, [pc, #176]	; (800a1e0 <HAL_UART_MspInit+0x244>)
 800a130:	2200      	movs	r2, #0
 800a132:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800a134:	4b2a      	ldr	r3, [pc, #168]	; (800a1e0 <HAL_UART_MspInit+0x244>)
 800a136:	2220      	movs	r2, #32
 800a138:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a13a:	4b29      	ldr	r3, [pc, #164]	; (800a1e0 <HAL_UART_MspInit+0x244>)
 800a13c:	2280      	movs	r2, #128	; 0x80
 800a13e:	0152      	lsls	r2, r2, #5
 800a140:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a142:	4b27      	ldr	r3, [pc, #156]	; (800a1e0 <HAL_UART_MspInit+0x244>)
 800a144:	0018      	movs	r0, r3
 800a146:	f7f8 fba9 	bl	800289c <HAL_DMA_Init>
 800a14a:	1e03      	subs	r3, r0, #0
 800a14c:	d004      	beq.n	800a158 <HAL_UART_MspInit+0x1bc>
      _Error_Handler(__FILE__, __LINE__);
 800a14e:	4b20      	ldr	r3, [pc, #128]	; (800a1d0 <HAL_UART_MspInit+0x234>)
 800a150:	21c0      	movs	r1, #192	; 0xc0
 800a152:	0018      	movs	r0, r3
 800a154:	f7fe fc1b 	bl	800898e <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a21      	ldr	r2, [pc, #132]	; (800a1e0 <HAL_UART_MspInit+0x244>)
 800a15c:	665a      	str	r2, [r3, #100]	; 0x64
 800a15e:	4b20      	ldr	r3, [pc, #128]	; (800a1e0 <HAL_UART_MspInit+0x244>)
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800a164:	4b20      	ldr	r3, [pc, #128]	; (800a1e8 <HAL_UART_MspInit+0x24c>)
 800a166:	4a21      	ldr	r2, [pc, #132]	; (800a1ec <HAL_UART_MspInit+0x250>)
 800a168:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a16a:	4b1f      	ldr	r3, [pc, #124]	; (800a1e8 <HAL_UART_MspInit+0x24c>)
 800a16c:	2210      	movs	r2, #16
 800a16e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a170:	4b1d      	ldr	r3, [pc, #116]	; (800a1e8 <HAL_UART_MspInit+0x24c>)
 800a172:	2200      	movs	r2, #0
 800a174:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a176:	4b1c      	ldr	r3, [pc, #112]	; (800a1e8 <HAL_UART_MspInit+0x24c>)
 800a178:	2280      	movs	r2, #128	; 0x80
 800a17a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a17c:	4b1a      	ldr	r3, [pc, #104]	; (800a1e8 <HAL_UART_MspInit+0x24c>)
 800a17e:	2200      	movs	r2, #0
 800a180:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a182:	4b19      	ldr	r3, [pc, #100]	; (800a1e8 <HAL_UART_MspInit+0x24c>)
 800a184:	2200      	movs	r2, #0
 800a186:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800a188:	4b17      	ldr	r3, [pc, #92]	; (800a1e8 <HAL_UART_MspInit+0x24c>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a18e:	4b16      	ldr	r3, [pc, #88]	; (800a1e8 <HAL_UART_MspInit+0x24c>)
 800a190:	2280      	movs	r2, #128	; 0x80
 800a192:	0152      	lsls	r2, r2, #5
 800a194:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800a196:	4b14      	ldr	r3, [pc, #80]	; (800a1e8 <HAL_UART_MspInit+0x24c>)
 800a198:	0018      	movs	r0, r3
 800a19a:	f7f8 fb7f 	bl	800289c <HAL_DMA_Init>
 800a19e:	1e03      	subs	r3, r0, #0
 800a1a0:	d004      	beq.n	800a1ac <HAL_UART_MspInit+0x210>
      _Error_Handler(__FILE__, __LINE__);
 800a1a2:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <HAL_UART_MspInit+0x234>)
 800a1a4:	21d0      	movs	r1, #208	; 0xd0
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	f7fe fbf1 	bl	800898e <_Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a0e      	ldr	r2, [pc, #56]	; (800a1e8 <HAL_UART_MspInit+0x24c>)
 800a1b0:	661a      	str	r2, [r3, #96]	; 0x60
 800a1b2:	4b0d      	ldr	r3, [pc, #52]	; (800a1e8 <HAL_UART_MspInit+0x24c>)
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a1b8:	46c0      	nop			; (mov r8, r8)
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	b00a      	add	sp, #40	; 0x28
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	40013800 	.word	0x40013800
 800a1c4:	40021000 	.word	0x40021000
 800a1c8:	20000b04 	.word	0x20000b04
 800a1cc:	40020030 	.word	0x40020030
 800a1d0:	0800a3b4 	.word	0x0800a3b4
 800a1d4:	20000ac0 	.word	0x20000ac0
 800a1d8:	4002001c 	.word	0x4002001c
 800a1dc:	40004400 	.word	0x40004400
 800a1e0:	20000a7c 	.word	0x20000a7c
 800a1e4:	40020058 	.word	0x40020058
 800a1e8:	20000b48 	.word	0x20000b48
 800a1ec:	40020044 	.word	0x40020044

0800a1f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800a1f0:	480d      	ldr	r0, [pc, #52]	; (800a228 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a1f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a1f4:	480d      	ldr	r0, [pc, #52]	; (800a22c <LoopForever+0x6>)
  ldr r1, =_edata
 800a1f6:	490e      	ldr	r1, [pc, #56]	; (800a230 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a1f8:	4a0e      	ldr	r2, [pc, #56]	; (800a234 <LoopForever+0xe>)
  movs r3, #0
 800a1fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a1fc:	e002      	b.n	800a204 <LoopCopyDataInit>

0800a1fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a1fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a202:	3304      	adds	r3, #4

0800a204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a208:	d3f9      	bcc.n	800a1fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a20a:	4a0b      	ldr	r2, [pc, #44]	; (800a238 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a20c:	4c0b      	ldr	r4, [pc, #44]	; (800a23c <LoopForever+0x16>)
  movs r3, #0
 800a20e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a210:	e001      	b.n	800a216 <LoopFillZerobss>

0800a212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a214:	3204      	adds	r2, #4

0800a216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a218:	d3fb      	bcc.n	800a212 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800a21a:	f7ff fb2d 	bl	8009878 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800a21e:	f000 f811 	bl	800a244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a222:	f7fe fa53 	bl	80086cc <main>

0800a226 <LoopForever>:

LoopForever:
    b LoopForever
 800a226:	e7fe      	b.n	800a226 <LoopForever>
  ldr   r0, =_estack
 800a228:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800a22c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a230:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 800a234:	0800a4e8 	.word	0x0800a4e8
  ldr r2, =_sbss
 800a238:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 800a23c:	20000c6c 	.word	0x20000c6c

0800a240 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a240:	e7fe      	b.n	800a240 <ADC1_COMP_IRQHandler>
	...

0800a244 <__libc_init_array>:
 800a244:	b570      	push	{r4, r5, r6, lr}
 800a246:	2600      	movs	r6, #0
 800a248:	4d0c      	ldr	r5, [pc, #48]	; (800a27c <__libc_init_array+0x38>)
 800a24a:	4c0d      	ldr	r4, [pc, #52]	; (800a280 <__libc_init_array+0x3c>)
 800a24c:	1b64      	subs	r4, r4, r5
 800a24e:	10a4      	asrs	r4, r4, #2
 800a250:	42a6      	cmp	r6, r4
 800a252:	d109      	bne.n	800a268 <__libc_init_array+0x24>
 800a254:	2600      	movs	r6, #0
 800a256:	f000 f871 	bl	800a33c <_init>
 800a25a:	4d0a      	ldr	r5, [pc, #40]	; (800a284 <__libc_init_array+0x40>)
 800a25c:	4c0a      	ldr	r4, [pc, #40]	; (800a288 <__libc_init_array+0x44>)
 800a25e:	1b64      	subs	r4, r4, r5
 800a260:	10a4      	asrs	r4, r4, #2
 800a262:	42a6      	cmp	r6, r4
 800a264:	d105      	bne.n	800a272 <__libc_init_array+0x2e>
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	00b3      	lsls	r3, r6, #2
 800a26a:	58eb      	ldr	r3, [r5, r3]
 800a26c:	4798      	blx	r3
 800a26e:	3601      	adds	r6, #1
 800a270:	e7ee      	b.n	800a250 <__libc_init_array+0xc>
 800a272:	00b3      	lsls	r3, r6, #2
 800a274:	58eb      	ldr	r3, [r5, r3]
 800a276:	4798      	blx	r3
 800a278:	3601      	adds	r6, #1
 800a27a:	e7f2      	b.n	800a262 <__libc_init_array+0x1e>
 800a27c:	0800a4e0 	.word	0x0800a4e0
 800a280:	0800a4e0 	.word	0x0800a4e0
 800a284:	0800a4e0 	.word	0x0800a4e0
 800a288:	0800a4e4 	.word	0x0800a4e4

0800a28c <memcpy>:
 800a28c:	2300      	movs	r3, #0
 800a28e:	b510      	push	{r4, lr}
 800a290:	429a      	cmp	r2, r3
 800a292:	d100      	bne.n	800a296 <memcpy+0xa>
 800a294:	bd10      	pop	{r4, pc}
 800a296:	5ccc      	ldrb	r4, [r1, r3]
 800a298:	54c4      	strb	r4, [r0, r3]
 800a29a:	3301      	adds	r3, #1
 800a29c:	e7f8      	b.n	800a290 <memcpy+0x4>

0800a29e <memset>:
 800a29e:	0003      	movs	r3, r0
 800a2a0:	1882      	adds	r2, r0, r2
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d100      	bne.n	800a2a8 <memset+0xa>
 800a2a6:	4770      	bx	lr
 800a2a8:	7019      	strb	r1, [r3, #0]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	e7f9      	b.n	800a2a2 <memset+0x4>
	...

0800a2b0 <round>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	004a      	lsls	r2, r1, #1
 800a2b4:	4d1d      	ldr	r5, [pc, #116]	; (800a32c <round+0x7c>)
 800a2b6:	0d52      	lsrs	r2, r2, #21
 800a2b8:	1955      	adds	r5, r2, r5
 800a2ba:	000e      	movs	r6, r1
 800a2bc:	2d13      	cmp	r5, #19
 800a2be:	dc18      	bgt.n	800a2f2 <round+0x42>
 800a2c0:	2d00      	cmp	r5, #0
 800a2c2:	da09      	bge.n	800a2d8 <round+0x28>
 800a2c4:	0fcb      	lsrs	r3, r1, #31
 800a2c6:	07db      	lsls	r3, r3, #31
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	1c69      	adds	r1, r5, #1
 800a2cc:	d101      	bne.n	800a2d2 <round+0x22>
 800a2ce:	4918      	ldr	r1, [pc, #96]	; (800a330 <round+0x80>)
 800a2d0:	430b      	orrs	r3, r1
 800a2d2:	0019      	movs	r1, r3
 800a2d4:	0010      	movs	r0, r2
 800a2d6:	e016      	b.n	800a306 <round+0x56>
 800a2d8:	4a16      	ldr	r2, [pc, #88]	; (800a334 <round+0x84>)
 800a2da:	412a      	asrs	r2, r5
 800a2dc:	420a      	tst	r2, r1
 800a2de:	d101      	bne.n	800a2e4 <round+0x34>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d010      	beq.n	800a306 <round+0x56>
 800a2e4:	2380      	movs	r3, #128	; 0x80
 800a2e6:	031b      	lsls	r3, r3, #12
 800a2e8:	412b      	asrs	r3, r5
 800a2ea:	199b      	adds	r3, r3, r6
 800a2ec:	4393      	bics	r3, r2
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	e7ef      	b.n	800a2d2 <round+0x22>
 800a2f2:	2d33      	cmp	r5, #51	; 0x33
 800a2f4:	dd08      	ble.n	800a308 <round+0x58>
 800a2f6:	2380      	movs	r3, #128	; 0x80
 800a2f8:	00db      	lsls	r3, r3, #3
 800a2fa:	429d      	cmp	r5, r3
 800a2fc:	d103      	bne.n	800a306 <round+0x56>
 800a2fe:	0002      	movs	r2, r0
 800a300:	000b      	movs	r3, r1
 800a302:	f7f6 fd35 	bl	8000d70 <__aeabi_dadd>
 800a306:	bd70      	pop	{r4, r5, r6, pc}
 800a308:	4e0b      	ldr	r6, [pc, #44]	; (800a338 <round+0x88>)
 800a30a:	1992      	adds	r2, r2, r6
 800a30c:	2601      	movs	r6, #1
 800a30e:	4276      	negs	r6, r6
 800a310:	40d6      	lsrs	r6, r2
 800a312:	4206      	tst	r6, r0
 800a314:	d0f7      	beq.n	800a306 <round+0x56>
 800a316:	2233      	movs	r2, #51	; 0x33
 800a318:	1b55      	subs	r5, r2, r5
 800a31a:	3a32      	subs	r2, #50	; 0x32
 800a31c:	40aa      	lsls	r2, r5
 800a31e:	1812      	adds	r2, r2, r0
 800a320:	4282      	cmp	r2, r0
 800a322:	41a4      	sbcs	r4, r4
 800a324:	4264      	negs	r4, r4
 800a326:	190b      	adds	r3, r1, r4
 800a328:	43b2      	bics	r2, r6
 800a32a:	e7d2      	b.n	800a2d2 <round+0x22>
 800a32c:	fffffc01 	.word	0xfffffc01
 800a330:	3ff00000 	.word	0x3ff00000
 800a334:	000fffff 	.word	0x000fffff
 800a338:	fffffbed 	.word	0xfffffbed

0800a33c <_init>:
 800a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33e:	46c0      	nop			; (mov r8, r8)
 800a340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a342:	bc08      	pop	{r3}
 800a344:	469e      	mov	lr, r3
 800a346:	4770      	bx	lr

0800a348 <_fini>:
 800a348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34a:	46c0      	nop			; (mov r8, r8)
 800a34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a34e:	bc08      	pop	{r3}
 800a350:	469e      	mov	lr, r3
 800a352:	4770      	bx	lr
